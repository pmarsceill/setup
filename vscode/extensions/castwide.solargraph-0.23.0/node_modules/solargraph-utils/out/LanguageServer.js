'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = require("./commands");
class LanguageServer {
    constructor(configuration) {
        this.configuration = configuration;
        this.listening = false;
    }
    start() {
        return new Promise((resolve, reject) => {
            console.log("Trying to start the server. Use bundler: " + this.configuration.useBundler);
            this.child = commands_1.solargraphCommand(['socket', '--port', '0'], this.configuration);
            let buffer = '';
            let that = this;
            this.child.stderr.on('data', (data) => {
                if (that.isListening()) {
                    console.log(data.toString());
                }
                else {
                    buffer += data.toString();
                    var match = buffer.match(/listening on port ([0-9]*)/);
                    if (match) {
                        that.listening = true;
                        that._port = parseInt(match[1]);
                        resolve();
                    }
                }
            });
            this.child.on('exit', (code) => {
                if (!that.isListening()) {
                    reject(buffer);
                }
            });
        });
    }
    isListening() {
        return this.listening;
    }
    get port() {
        return this._port;
    }
    get process() {
        return this.child;
    }
}
exports.LanguageServer = LanguageServer;
//# sourceMappingURL=LanguageServer.js.map