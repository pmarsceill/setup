{
	"name": "remote-containers",
	"displayName": "Remote - Containers",
	"description": "Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.",
	"version": "0.209.6",
	"preview": true,
	"publisher": "ms-vscode-remote",
	"icon": "resources/remote-containers.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/Microsoft/vscode-remote-release.git"
	},
	"bugs": {
		"url": "https://github.com/Microsoft/vscode-remote-release/issues"
	},
	"license": "SEE LICENSE IN LICENSE.txt",
	"engines": {
		"vscode": "^1.63.0"
	},
	"extensionKind": [
		"ui"
	],
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "Opening a folder in a container requires workspace trust."
		},
		"virtualWorkspaces": true
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"remote",
		"docker",
		"containers",
		"remote development",
		"dev container",
		"development container"
	],
	"aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
	"activationEvents": [
		"onStartupFinished",
		"onCommand:remote-containers.reopenInContainer",
		"onCommand:remote-containers.rebuildAndReopenInContainer",
		"onCommand:remote-containers.rebuildNoCacheAndReopenInContainer",
		"onCommand:remote-containers.reopenLocally",
		"onCommand:remote-containers.reopenInWSL",
		"onCommand:remote-containers.reopenInSSH",
		"onCommand:remote-containers.openFolder",
		"onCommand:remote-containers.openRepositoryInVolume",
		"onCommand:remote-containers.openRepositoryInUniqueVolume",
		"onCommand:remote-containers.openRepositoryFromRemoteHub",
		"onCommand:remote-containers.openPullRequestInVolume",
		"onCommand:remote-containers.inspectVolume",
		"onCommand:remote-containers.inspectVolumeFromViewlet",
		"onCommand:remote-containers.inspectInBasicDevContainer",
		"onCommand:remote-containers.cloneInVolumeFromViewlet",
		"onCommand:remote-containers.pruneVolumes",
		"onCommand:remote-containers.openWorkspace",
		"onCommand:remote-containers.attachToRunningContainer",
		"onCommand:remote-containers.attachToRunningContainerFromViewlet",
		"onCommand:remote-containers.attachToK8sContainerFromViewlet",
		"onCommand:remote-containers.checkoutPRInVolume",
		"onCommand:remote-containers.rebuildContainer",
		"onCommand:remote-containers.rebuildContainerNoCache",
		"onCommand:remote-containers.createDevContainerFile",
		"onCommand:remote-containers.openDevContainerFile",
		"onCommand:remote-containers.openAttachDevContainerFile",
		"onCommand:remote-containers.settings",
		"onCommand:remote-containers.getHelp",
		"onCommand:remote-containers.getStarted",
		"onCommand:remote-containers.trySample",
		"onCommand:remote-containers.reportIssue",
		"onCommand:remote-containers.provideFeedback",
		"onCommand:remote-containers.revealLogTerminal",
		"onCommand:remote-containers.openLogFile",
		"onCommand:remote-containers.openLastLogFile",
		"onCommand:remote-containers.addExtensionToConfig",
		"onCommand:remote-containers.showReopenInContainerNotificationReset",
		"onCommand:remote-containers.showRecoveryContainerNotificationReset",
		"onCommand:remote-containers.labelPortAndUpdateConfig",
		"onCommand:remote-containers.installDocker",
		"onCommand:remote-containers.installUserCLI",
		"onCommand:remote-containers.configureContainerFeatures",
		"workspaceContains:.devcontainer/devcontainer.json",
		"workspaceContains:.devcontainer.json",
		"onResolveRemoteAuthority:dev-container",
		"onResolveRemoteAuthority:attached-container",
		"onResolveRemoteAuthority:k8s-container",
		"onDebugResolve:extensionHost",
		"onView:targetsContainers"
	],
	"main": "./dist/extension/extension",
	"enabledApiProposals": [
		"resolvers",
		"workspaceTrust",
		"terminalDimensions"
	],
	"contributes": {
		"virtualWorkspaces": {
			"menus": {
				"continueOn": [
					{
						"command": "remote-containers.openRepositoryFromRemoteHub",
						"group": "0_local@2",
						"when": "!isWeb && remoteHub:hasVirtualFolders"
					}
				]
			}
		},
		"configuration": {
			"title": "Remote - Containers",
			"properties": {
				"remote.containers.defaultExtensions": {
					"scope": "application",
					"type": "array",
					"description": "Configures the list of extensions to always install while creating a container.",
					"default": [],
					"items": {
						"type": "string",
						"pattern": "([a-z0-9A-Z][a-z0-9\\-A-Z]*)\\.([a-z0-9A-Z][a-z0-9\\-A-Z]*)",
						"errorMessage": "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'."
					}
				},
				"remote.containers.workspaceMountConsistency": {
					"scope": "application",
					"type": "string",
					"enum": [
						"consistent",
						"cached",
						"delegated"
					],
					"enumDescriptions": [
						"Perfect consistency.",
						"The host’s view is authoritative.",
						"The container’s view is authoritative."
					],
					"description": "The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).",
					"default": "cached"
				},
				"remote.containers.cacheVolume": {
					"scope": "application",
					"type": "boolean",
					"description": "Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.",
					"default": true
				},
				"remote.containers.copyGitConfig": {
					"scope": "machine",
					"type": "boolean",
					"markdownDescription": "Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `#dotfiles.repository#` and will not overwrite an existing Git configuration file.",
					"default": true
				},
				"remote.containers.gitCredentialHelperConfigLocation": {
					"scope": "machine",
					"type": "string",
					"enum": [
						"system",
						"global",
						"none"
					],
					"enumDescriptions": [
						"Write to system config (`/etc/gitconfig`, requires root access).",
						"Write to user config (`~/.gitconfig`).",
						"Do not set a credential helper."
					],
					"description": "Where to write the configuration for the Git credential helper.",
					"default": "global"
				},
				"remote.containers.logLevel": {
					"scope": "application",
					"type": "string",
					"description": "The log level for the extension.",
					"default": "debug",
					"enum": [
						"info",
						"debug",
						"trace"
					]
				},
				"remote.containers.dockerPath": {
					"scope": "application",
					"type": "string",
					"description": "Docker (or Podman) executable name or path.",
					"default": "docker"
				},
				"remote.containers.dockerComposePath": {
					"scope": "application",
					"type": "string",
					"description": "Docker Compose executable name or path.",
					"default": "docker-compose"
				},
				"remote.containers.executeInWSL": {
					"scope": "application",
					"type": "boolean",
					"description": "Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.",
					"default": false
				},
				"dotfiles.repository": {
					"scope": "machine",
					"type": "string",
					"description": "URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository."
				},
				"dotfiles.installCommand": {
					"scope": "machine",
					"type": "string",
					"description": "The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder."
				},
				"dotfiles.targetPath": {
					"scope": "machine",
					"type": "string",
					"description": "The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.",
					"default": "~/dotfiles"
				},
				"remote.containers.dotfiles.repository": {
					"scope": "machine",
					"type": "string",
					"description": "URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository for DevContainers. This overrides the common setting for the dotfiles repository."
				},
				"remote.containers.dotfiles.installCommand": {
					"scope": "machine",
					"type": "string",
					"description": "The command to run after cloning the dotfiles repository for DevContainers. This overrides the common setting for the dotfiles install command."
				},
				"remote.containers.dotfiles.targetPath": {
					"scope": "machine",
					"type": "string",
					"description": "The path to clone the dotfiles repository to for DevContainers. This overrides the common setting for the dotfiles target path."
				},
				"remote.containers.repositoryConfigurationPaths": {
					"scope": "application",
					"type": "array",
					"markdownDescription": "List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).",
					"default": [],
					"items": {
						"type": "string"
					}
				}
			}
		},
		"commands": [
			{
				"command": "remote-containers.reopenInContainer",
				"title": "Reopen in Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.rebuildAndReopenInContainer",
				"title": "Rebuild and Reopen in Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.rebuildNoCacheAndReopenInContainer",
				"title": "Rebuild Without Cache and Reopen in Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.reopenLocally",
				"title": "Reopen Folder Locally",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.reopenInWSL",
				"title": "Reopen Folder in WSL",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.reopenInSSH",
				"title": "Reopen Folder in SSH",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openFolder",
				"title": "Open Folder in Container...",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/reopen-folder.svg",
					"dark": "resources/dark/reopen-folder.svg"
				}
			},
			{
				"command": "remote-containers.startAndOpenFolder",
				"title": "Open Folder in Container",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/reopen-folder.svg",
					"dark": "resources/dark/reopen-folder.svg"
				}
			},
			{
				"command": "remote-containers.openRepositoryInVolume",
				"title": "Clone Repository in Named Container Volume...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openRepositoryInUniqueVolume",
				"title": "Clone Repository in Container Volume...",
				"icon": "$(repo-clone)",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openRepositoryFromRemoteHub",
				"title": "Clone Repository in a Container Volume",
				"icon": "$(repo-clone)",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openPullRequestInVolume",
				"title": "Clone GitHub Pull Request in Container Volume...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.inspectVolume",
				"title": "Explore a Volume in a Development Container...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openWorkspace",
				"title": "Open Workspace in Container...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.attachToRunningContainer",
				"title": "Attach to Running Container...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.attachToRunningContainerFromViewlet",
				"title": "Attach Visual Studio Code",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.inspectVolumeFromViewlet",
				"title": "Explore in a Development Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.cloneInVolumeFromViewlet",
				"title": "Clone into existing Volume",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.pruneVolumes",
				"title": "Remove Unused Volumes...",
				"category": "Remote-Containers",
				"icon": "$(clear-all)"
			},
			{
				"command": "remote-containers.explorerVolumesRefresh",
				"title": "Refresh",
				"category": "Remote-Containers",
				"icon": "$(refresh)"
			},
			{
				"command": "remote-containers.attachToK8sContainerFromViewlet",
				"title": "Attach Visual Studio Code",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.rebuildContainer",
				"title": "Rebuild Container",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/tools.svg",
					"dark": "resources/dark/tools.svg"
				}
			},
			{
				"command": "remote-containers.rebuildContainerNoCache",
				"title": "Rebuild Container Without Cache",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/tools.svg",
					"dark": "resources/dark/tools.svg"
				}
			},
			{
				"command": "remote-containers.createDevContainerFile",
				"title": "Add Development Container Configuration Files...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.settings",
				"title": "Settings for Remote-Containers",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.getHelp",
				"title": "Help for Remote-Containers",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.getStarted",
				"title": "Getting Started with Remote-Containers",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.trySample",
				"title": "Try a Development Container Sample...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.reportIssue",
				"title": "Report Issue with Remote-Containers...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.provideFeedback",
				"title": "Provide Feedback",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openDevContainerFile",
				"title": "Open Container Configuration File",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/gear.svg",
					"dark": "resources/dark/gear.svg"
				}
			},
			{
				"command": "remote-containers.openAttachConfigByNameFile",
				"title": "Open Named Container Configuration File",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openAttachDevContainerFile",
				"title": "Open Attached Container Configuration File...",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.revealLogTerminal",
				"title": "Show Container Log",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.openLogFile",
				"title": "Show All Logs...",
				"category": "Remote-Containers Developer"
			},
			{
				"command": "remote-containers.openLastLogFile",
				"title": "Show Previous Log",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.attachToContainer",
				"title": "Attach to Container",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/empty-window.svg",
					"dark": "resources/dark/empty-window.svg"
				}
			},
			{
				"command": "remote-containers.attachToContainerNewWindow",
				"title": "Attach in New Window",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.stopContainer",
				"title": "Stop Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.startContainer",
				"title": "Start Container",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/vm-start.svg",
					"dark": "resources/dark/vm-start.svg"
				}
			},
			{
				"command": "remote-containers.removeContainer",
				"title": "Remove Container",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/remove.svg",
					"dark": "resources/dark/remove.svg"
				}
			},
			{
				"command": "remote-containers.removeRecentFolder",
				"title": "Remove Recent Folder",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/remove.svg",
					"dark": "resources/dark/remove.svg"
				}
			},
			{
				"command": "remote-containers.showDetails",
				"title": "Show Details",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.explorerTargetsRefresh",
				"title": "Refresh",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "remote-containers.explorerDetailsRefresh",
				"title": "Refresh",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "remote-containers.inspectDockerResource",
				"title": "Inspect",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.inspectInBasicDevContainer",
				"title": "Explore in Development Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.cloneInVolume",
				"title": "Clone Repository in Volume",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.removeVolume",
				"title": "Remove",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.newContainer",
				"title": "New Container",
				"category": "Remote-Containers",
				"icon": {
					"light": "resources/light/plus.svg",
					"dark": "resources/dark/plus.svg"
				}
			},
			{
				"command": "remote-containers.showContainerLog",
				"title": "Show Container Log",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.addExtensionToConfig",
				"title": "Add to devcontainer.json",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.checkoutPRInVolume",
				"title": "Checkout Pull Request in Dev Container",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.showReopenInContainerNotificationReset",
				"title": "Reset Don't Show Reopen Notification",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.showRecoveryContainerNotificationReset",
				"title": "Reset Don't Show Recovery Container Notification",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.labelPortAndUpdateConfig",
				"title": "Set Label and Update devcontainer.json",
				"category": "Remote-Containers",
				"icon": "$(tag)"
			},
			{
				"command": "remote-containers.installDocker",
				"title": "Install Docker",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.installUserCLI",
				"title": "Install devcontainer CLI",
				"category": "Remote-Containers"
			},
			{
				"command": "remote-containers.configureContainerFeatures",
				"title": "Configure Container Features",
				"category": "Remote-Containers"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "remote-containers.reopenInContainer",
					"when": "workspaceFolderCount != 0 && !remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.reopenInContainer",
					"when": "workspaceFolderCount != 0 && remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.reopenInContainer",
					"when": "workspaceFolderCount != 0 && remoteName == dev-container && isRecoveryContainer"
				},
				{
					"command": "remote-containers.rebuildAndReopenInContainer",
					"when": "workspaceFolderCount != 0 && !remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.rebuildAndReopenInContainer",
					"when": "workspaceFolderCount != 0 && remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.rebuildNoCacheAndReopenInContainer",
					"when": "workspaceFolderCount != 0 && !remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.rebuildNoCacheAndReopenInContainer",
					"when": "workspaceFolderCount != 0 && remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.reopenLocally",
					"when": "canReopenLocally"
				},
				{
					"command": "remote-containers.reopenInWSL",
					"when": "canReopenInWSL"
				},
				{
					"command": "remote-containers.reopenInSSH",
					"when": "canReopenInSSH"
				},
				{
					"command": "remote-containers.openFolder",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.openRepositoryInVolume",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.openRepositoryInUniqueVolume",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.openPullRequestInVolume",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.openWorkspace",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.attachToRunningContainer",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.attachToRunningContainerFromViewlet",
					"when": "false"
				},
				{
					"command": "remote-containers.inspectVolumeFromViewlet",
					"when": "false"
				},
				{
					"command": "remote-containers.openRepositoryFromRemoteHub",
					"when": "false"
				},
				{
					"command": "remote-containers.cloneInVolumeFromViewlet",
					"when": "false"
				},
				{
					"command": "remote-containers.inspectInBasicDevContainer",
					"when": "false"
				},
				{
					"command": "remote-containers.cloneInVolume",
					"when": "false"
				},
				{
					"command": "remote-containers.removeVolume",
					"when": "false"
				},
				{
					"command": "remote-containers.attachToK8sContainerFromViewlet",
					"when": "false"
				},
				{
					"command": "remote-containers.checkoutPRInVolume",
					"when": "false"
				},
				{
					"command": "remote-containers.rebuildContainer",
					"when": "remoteName =~ /^dev-container$/"
				},
				{
					"command": "remote-containers.rebuildContainerNoCache",
					"when": "remoteName =~ /^dev-container$/"
				},
				{
					"command": "remote-containers.createDevContainerFile",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.createDevContainerFile",
					"when": "remoteName =~ /^(dev-container|wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.openDevContainerFile",
					"when": "workspaceFolderCount != 0 && !remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.openDevContainerFile",
					"when": "workspaceFolderCount != 0 && remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.openDevContainerFile",
					"when": "remoteName =~ /^(dev|attached)-container$/"
				},
				{
					"command": "remote-containers.openAttachConfigByNameFile",
					"when": "remoteName == attached-container"
				},
				{
					"command": "remote-containers.openAttachDevContainerFile",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container|wsl|ssh-remote)?$/"
				},
				{
					"command": "remote-containers.getStarted",
					"when": "false"
				},
				{
					"command": "remote-containers.trySample",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.trySample",
					"when": "remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.provideFeedback",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/"
				},
				{
					"command": "remote-containers.attachToContainer",
					"when": "false"
				},
				{
					"command": "remote-containers.attachToContainerNewWindow",
					"when": "false"
				},
				{
					"command": "remote-containers.stopContainer",
					"when": "false"
				},
				{
					"command": "remote-containers.removeContainer",
					"when": "false"
				},
				{
					"command": "remote-containers.startContainer",
					"when": "false"
				},
				{
					"command": "remote-containers.removeRecentFolder",
					"when": "false"
				},
				{
					"command": "remote-containers.showDetails",
					"when": "false"
				},
				{
					"command": "remote-containers.explorerTargetsRefresh",
					"when": "false"
				},
				{
					"command": "remote-containers.explorerVolumesRefresh",
					"when": "false"
				},
				{
					"command": "remote-containers.explorerDetailsRefresh",
					"when": "false"
				},
				{
					"command": "remote-containers.inspectDockerResource",
					"when": "false"
				},
				{
					"command": "remote-containers.startAndOpenFolder",
					"when": "false"
				},
				{
					"command": "remote-containers.newContainer",
					"when": "false"
				},
				{
					"command": "remote-containers.showContainerLog",
					"when": "false"
				},
				{
					"command": "remote-containers.labelPortAndUpdateConfig",
					"when": "false"
				},
				{
					"command": "remote-containers.addExtensionToConfig",
					"when": "false"
				},
				{
					"command": "remote-containers.configureContainerFeatures",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.configureContainerFeatures",
					"when": "remoteName =~ /^(dev-container|wsl|ssh-remote)$/"
				}
			],
			"statusBar/remoteIndicator": [
				{
					"command": "remote-containers.reopenInContainer",
					"group": "remote_30_dev-container_2_actions@1",
					"when": "workspaceFolderCount != 0 && !remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.reopenInContainer",
					"group": "remote_30_dev-container_2_actions@1",
					"when": "workspaceFolderCount != 0 && remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.openFolder",
					"group": "remote_30_dev-container_2_actions@2",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.openFolder",
					"group": "remote_30_dev-container_2_actions@2",
					"when": "remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.openRepositoryInUniqueVolume",
					"group": "remote_30_dev-container_2_actions@4",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.openRepositoryInUniqueVolume",
					"group": "remote_30_dev-container_2_actions@4",
					"when": "remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.attachToRunningContainer",
					"group": "remote_30_dev-container_2_actions@5",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.attachToRunningContainer",
					"group": "remote_30_dev-container_2_actions@5",
					"when": "remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.createDevContainerFile",
					"group": "remote_30_dev-container_2_actions@6",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.createDevContainerFile",
					"group": "remote_30_dev-container_2_actions@6",
					"when": "remoteName =~ /^(dev-container|wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.trySample",
					"group": "remote_30_dev-container_2_actions@7",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.trySample",
					"group": "remote_30_dev-container_2_actions@7",
					"when": "remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.getStarted",
					"group": "remote_30_dev-container_2_actions@8",
					"when": "!remoteName && !virtualWorkspace"
				},
				{
					"command": "remote-containers.getStarted",
					"group": "remote_30_dev-container_2_actions@8",
					"when": "remoteName =~ /^(wsl|ssh-remote)$/"
				},
				{
					"command": "remote-containers.reopenInWSL",
					"group": "remote_30_dev-container_1_actions@1",
					"when": "canReopenInWSL"
				},
				{
					"command": "remote-containers.reopenInSSH",
					"group": "remote_30_dev-container_1_actions@1",
					"when": "canReopenInSSH"
				},
				{
					"command": "remote-containers.reopenLocally",
					"group": "remote_30_dev-container_1_actions@2",
					"when": "canReopenLocally"
				},
				{
					"command": "remote-containers.rebuildContainer",
					"group": "remote_30_dev-container_1_actions@3",
					"when": "remoteName =~ /^dev-container$/"
				},
				{
					"command": "remote-containers.openDevContainerFile",
					"group": "remote_30_dev-container_1_actions@4",
					"when": "remoteName =~ /^(dev|attached)-container$/"
				},
				{
					"command": "remote-containers.revealLogTerminal",
					"group": "remote_30_dev-container_1_actions@5",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/"
				},
				{
					"command": "remote-containers.openFolder",
					"group": "remote_30_dev-container_1_actions@6",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/ && remoteConnectionState == connected"
				},
				{
					"command": "remote-containers.openRepositoryInUniqueVolume",
					"group": "remote_30_dev-container_1_actions@8",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/ && remoteConnectionState == connected"
				},
				{
					"command": "remote-containers.attachToRunningContainer",
					"group": "remote_30_dev-container_1_actions@9",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/"
				},
				{
					"command": "remote-containers.settings",
					"group": "remote_30_dev-container_9_help@1",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/"
				},
				{
					"command": "remote-containers.reportIssue",
					"group": "remote_30_dev-container_9_help@2",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/"
				},
				{
					"command": "remote-containers.getHelp",
					"group": "remote_30_dev-container_9_help@4",
					"when": "remoteName =~ /^(dev-container|attached-container|exec|k8s-container)$/"
				}
			],
			"view/title": [
				{
					"command": "remote-containers.explorerTargetsRefresh",
					"when": "view == targetsContainers && !remote-containers:needsDockerStartOrInstall && !remote-containers:noContainersWithFolder && !remote-containers:noContainersWithoutFolder",
					"group": "navigation"
				},
				{
					"command": "remote-containers.newContainer",
					"when": "view == targetsContainers && !remote-containers:needsDockerStartOrInstall && !remote-containers:noContainersWithFolder && !remote-containers:noContainersWithoutFolder",
					"group": "navigation"
				},
				{
					"command": "remote-containers.explorerDetailsRefresh",
					"when": "view == detailsContainers",
					"group": "navigation"
				},
				{
					"command": "remote-containers.attachToContainer",
					"when": "view == detailsContainers",
					"group": "navigation"
				},
				{
					"command": "remote-containers.rebuildContainer",
					"when": "view == detailsContainers && remoteName == dev-container",
					"group": "navigation"
				},
				{
					"command": "remote-containers.openDevContainerFile",
					"when": "view == detailsContainers && remoteName =~ /^(dev|attached)-container$/",
					"group": "navigation"
				},
				{
					"command": "remote-containers.pruneVolumes",
					"when": "view == devVolumes",
					"group": "navigation@2"
				},
				{
					"command": "remote-containers.explorerVolumesRefresh",
					"when": "view == devVolumes",
					"group": "navigation@3"
				},
				{
					"command": "remote-containers.openRepositoryInUniqueVolume",
					"when": "view == devVolumes",
					"group": "navigation@1"
				}
			],
			"view/item/context": [
				{
					"command": "remote-containers.attachToRunningContainerFromViewlet",
					"when": "view == dockerContainers && viewItem =~ /^runningContainer$/i && vscode-docker:aciContext != true",
					"group": "containers_1_general@2"
				},
				{
					"command": "remote-containers.inspectVolumeFromViewlet",
					"when": "view == dockerVolumes && viewItem == volume && vscode-docker:aciContext != true",
					"group": "volumes_1_general@2"
				},
				{
					"command": "remote-containers.checkoutPRInVolume",
					"when": "view =~ /pr:/ && viewItem =~ /pullrequest(:local)?:nonactive|description/"
				},
				{
					"command": "remote-containers.attachToK8sContainerFromViewlet",
					"group": "2@4",
					"when": "remoteName =~ /^(wsl)?$/ && view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
				},
				{
					"command": "remote-containers.startAndOpenFolder",
					"when": "view == targetsContainers && viewItem =~ /^(dev|attached|exited|running).*Folder$/",
					"group": "1_folder@1"
				},
				{
					"command": "remote-containers.startAndOpenFolder",
					"when": "view == targetsContainers && viewItem =~ /^(dev|attached|exited|running).*Folder$/",
					"group": "inline@1"
				},
				{
					"command": "remote-containers.removeRecentFolder",
					"when": "view == targetsContainers && viewItem == attachedFolder",
					"group": "2_folder@1"
				},
				{
					"command": "remote-containers.removeRecentFolder",
					"when": "view == targetsContainers && viewItem == attachedFolder",
					"group": "inline@2"
				},
				{
					"command": "workbench.action.closeFolder",
					"when": "view == targetsContainers && viewItem =~ /active.*Folder/",
					"group": "1_folder@1"
				},
				{
					"command": "remote-containers.reopenLocally",
					"when": "canReopenLocally && view == targetsContainers && viewItem =~ /active(d|D)ev/",
					"group": "1_folder@1"
				},
				{
					"command": "remote-containers.reopenInWSL",
					"when": "canReopenInWSL && view == targetsContainers && viewItem =~ /active(d|D)ev/",
					"group": "1_folder@1"
				},
				{
					"command": "remote-containers.reopenInSSH",
					"when": "canReopenInSSH && view == targetsContainers && viewItem =~ /active(d|D)ev/",
					"group": "1_folder@1"
				},
				{
					"command": "remote-containers.attachToContainer",
					"when": "view == targetsContainers && viewItem =~ /^(active|running|exited)Container/",
					"group": "1_container@1"
				},
				{
					"command": "remote-containers.attachToContainer",
					"when": "view == targetsContainers && viewItem =~ /^(active|running|exited)Container/",
					"group": "inline@1"
				},
				{
					"command": "remote-containers.attachToContainerNewWindow",
					"when": "view == targetsContainers && viewItem =~ /^(active|running|exited)Container/",
					"group": "1_container@2"
				},
				{
					"command": "remote-containers.stopContainer",
					"when": "view == targetsContainers && viewItem =~ /^(active|running)(Dev|)Container/",
					"group": "2_container@2"
				},
				{
					"command": "remote-containers.removeContainer",
					"when": "view == targetsContainers && viewItem =~ /^(running|exited)(Dev|)Container/",
					"group": "2_container@3"
				},
				{
					"command": "remote-containers.rebuildContainer",
					"when": "view == targetsContainers && viewItem =~ /activeDevContainer/",
					"group": "2_container@1"
				},
				{
					"command": "remote-containers.removeContainer",
					"when": "view == targetsContainers && viewItem =~ /^(running|exited)(Dev|)Container/",
					"group": "inline@2"
				},
				{
					"command": "remote-containers.startContainer",
					"when": "view == targetsContainers && viewItem =~ /^exited(Dev|)Container/",
					"group": "1_container@3"
				},
				{
					"command": "remote-containers.showDetails",
					"when": "view == targetsContainers && viewItem =~ /^(active|running|exited)(Dev|)Container/",
					"group": "1_container@4"
				},
				{
					"command": "remote-containers.inspectDockerResource",
					"when": "view == targetsContainers && viewItem =~ /^(active|running|exited)(Dev|)Container/",
					"group": "1_container@5"
				},
				{
					"command": "remote-containers.showContainerLog",
					"when": "view == targetsContainers && viewItem =~ /^(active|running|exited)(Dev|)Container/",
					"group": "1_container@6"
				},
				{
					"command": "remote-containers.openDevContainerFile",
					"when": "view == detailsContainers && viewItem == devContainer"
				},
				{
					"command": "remote-containers.inspectDockerResource",
					"when": "view == detailsContainers && viewItem =~ /^(image|volume)$/"
				},
				{
					"command": "remote-containers.cloneInVolume",
					"when": "view == devVolumes && viewItem =~ /^(devVolume)$/",
					"group": "1_volumes@1"
				},
				{
					"command": "remote-containers.inspectInBasicDevContainer",
					"when": "view == devVolumes && viewItem =~ /^(devVolume|uniqueDevVolume)$/",
					"group": "2_volumes@1"
				},
				{
					"command": "remote-containers.inspectDockerResource",
					"when": "view == devVolumes && viewItem =~ /^(devVolume|uniqueDevVolume)$/",
					"group": "2_volumes@2"
				},
				{
					"command": "remote-containers.removeVolume",
					"when": "view == devVolumes && viewItem =~ /^(devVolume|uniqueDevVolume)$/",
					"group": "3_volumes-destructive@1"
				}
			],
			"ports/item/port/inline": [
				{
					"command": "remote-containers.labelPortAndUpdateConfig",
					"group": "0_manage@4",
					"when": "remoteName =~ /^(dev|attached)-container$/ && tunnelType == Forwarded"
				}
			],
			"extension/context": [
				{
					"command": "remote-containers.addExtensionToConfig",
					"group": "2_configure",
					"when": "!isBuiltinExtension && remoteName =~ /^(dev-container|attached-container|wsl|ssh-remote)?$/"
				}
			]
		},
		"resourceLabelFormatters": [
			{
				"scheme": "vscode-remote",
				"authority": "dev-container+*",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"tildify": true,
					"workspaceSuffix": "Dev Container"
				}
			},
			{
				"scheme": "vscode-remote",
				"authority": "attached-container+*",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"tildify": true,
					"workspaceSuffix": "Container"
				}
			},
			{
				"scheme": "vscode-remote",
				"authority": "exec+*",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"tildify": true,
					"workspaceSuffix": "Exec"
				}
			},
			{
				"scheme": "vscode-remote",
				"authority": "k8s-container+*",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"tildify": true,
					"workspaceSuffix": "Kubernetes"
				}
			}
		],
		"views": {
			"remote": [
				{
					"id": "targetsContainers",
					"name": "Containers",
					"group": "targets@2",
					"remoteName": [
						"dev-container",
						"attached-container",
						"exec",
						"k8s-container"
					]
				},
				{
					"id": "detailsContainers",
					"name": "Details (Containers)",
					"when": "remote-containers:showDetails",
					"group": "details@1",
					"remoteName": [
						"dev-container",
						"attached-container"
					]
				},
				{
					"id": "devVolumes",
					"name": "DevVolumes",
					"group": "details@2",
					"remoteName": [
						"dev-container",
						"attached-container"
					]
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "targetsContainers",
				"when": "remote-containers:needsDockerStartOrInstall",
				"contents": "Get started with containers by [installing Docker](command:remote-containers.installDocker) or by visiting the [help view](command:~remote.helpPanel.focus). [Refresh](command:remote-containers.explorerTargetsRefresh) after installation and startup."
			},
			{
				"view": "targetsContainers",
				"when": "remote-containers:needsSSHCredentials",
				"contents": "[Refresh](command:remote-containers.explorerTargetsRefresh) to provide SSH credentials."
			},
			{
				"view": "targetsContainers",
				"when": "remote-containers:noContainersWithFolder",
				"contents": "Get started with containers by running one of the [Remote-Containers](command:remote-containers.newContainer) commands.\nYou can [reopen the current folder in a container](command:remote-containers.reopenInContainer), or open another folder in a container.\n[Open Folder in Container](command:remote-containers.openFolder)\nIf you're new to containers and want to [try a sample](command:remote-containers.trySample), there are several to choose from."
			},
			{
				"view": "targetsContainers",
				"when": "remote-containers:noContainersWithoutFolder",
				"contents": "Get started with containers by running one of the [Remote-Containers](command:remote-containers.newContainer) commands.\nYou can open an existing folder in a container.\n[Open Folder in Container](command:remote-containers.openFolder)\nIf you're new to containers and want to [try a sample](command:remote-containers.trySample), there are several to choose from."
			},
			{
				"view": "devVolumes",
				"when": "remote-containers:noDevVolumes",
				"contents": "If there's a repository you want to work with you can clone that directly in a container volume.\n[Clone Repository in Container Volume](command:remote-containers.openRepositoryInUniqueVolume)\n"
			}
		],
		"remoteHelp": {
			"getStarted": "https://aka.ms/vscode-remote/containers/tutorial-sandbox",
			"feedback": "https://aka.ms/vscode-remote/containers/provide-feedback",
			"documentation": "https://aka.ms/vscode-remote/containers",
			"issues": "https://aka.ms/vscode-remote/containers/issues",
			"remoteName": [
				"dev-container",
				"attached-container",
				"exec",
				"k8s-container"
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm-run-all clean definitions compile-prod dev-containers-user-cli-prepare",
		"compile": "npm-run-all clean-dist definitions compile-dev",
		"watch": "npm-run-all clean-dist definitions compile-watch",
		"precommit": "node build/hygiene.js",
		"package": "vsce package --yarn",
		"definitions": "npm-run-all definitions-clean definitions-copy",
		"lint": "eslint -c .eslintrc.js --rulesdir ./build/eslint --ext .ts ./src ./test",
		"compile-prod": "node esbuild.js --production",
		"compile-dev": "node esbuild.js",
		"compile-watch": "node esbuild.js --watch",
		"type-check": "npm-run-all clean-built tsc-b",
		"tsc-b": "tsc -b",
		"type-check-watch": "npm-run-all clean-built tsc-b-w",
		"tsc-b-w": "tsc -b -w",
		"definitions-clean": "rimraf dist/node_modules/vscode-dev-containers",
		"definitions-copy": "copyfiles --all \"node_modules/vscode-dev-containers/**/*\" dist",
		"dev-containers-cli-publish": "npm-run-all dev-containers-cli-prepare dev-containers-cli-npm-publish",
		"dev-containers-cli-package": "npm-run-all dev-containers-cli-prepare dev-containers-cli-npm-pack",
		"dev-containers-cli-prepare": "npm-run-all clean dev-containers-cli-compile dev-containers-cli-copy-module dev-containers-cli-copy-definitions",
		"dev-containers-cli-compile": "npm-run-all compile-prod",
		"dev-containers-cli-copy-module": "copyfiles ThirdPartyNotices.txt dist/node/devContainersCLI.* \"scripts/**/*\" dev-containers-cli",
		"dev-containers-cli-copy-definitions": "copyfiles --all \"node_modules/vscode-dev-containers/**/*\" dev-containers-cli/dist",
		"dev-containers-cli-npm-publish": "cd dev-containers-cli && npm publish",
		"dev-containers-cli-npm-pack": "cd dev-containers-cli && npm pack",
		"dev-containers-user-cli-package": "npm-run-all dev-containers-user-cli-prepare dev-containers-user-cli-npm-pack",
		"dev-containers-user-cli-prepare": "npm-run-all dev-containers-user-cli-copy-module dev-containers-user-cli-copy-definitions",
		"dev-containers-user-cli-clean-prepare": "npm-run-all clean dev-containers-user-prepare",
		"dev-containers-user-cli-copy-module": "copyfiles ThirdPartyNotices.txt dist/node/devContainersUserCLI.* \"scripts/**/*\" dev-containers-user-cli",
		"dev-containers-user-cli-copy-definitions": "copyfiles --all \"node_modules/vscode-dev-containers/**/*\" dev-containers-user-cli/dist",
		"dev-containers-user-cli-npm-pack": "cd dev-containers-user-cli && npm pack",
		"clean": "npm-run-all clean-dist clean-built",
		"clean-dist": "rimraf dist dev-containers-cli/dist dev-containers-cli/scripts dev-containers-user-cli/dist dev-containers-user-cli/scripts",
		"clean-built": "rimraf built",
		"test": "env TS_NODE_PROJECT=test/core/tsconfig.json mocha -r ts-node/register --exit test/core/**/*.test.ts",
		"test-no-env": "mocha -r ts-node/register --exit test/core/**/*.test.ts",
		"test-dev-containers": "env TS_NODE_PROJECT=test/dev-containers/tsconfig.json mocha -r ts-node/register --exit test/dev-containers/**/*.test.ts",
		"test-container-features": "env TS_NODE_PROJECT=test/dev-containers/tsconfig.json mocha -r ts-node/register --exit test/dev-containers/src/container-features/**/*.test.ts",
		"test-container-features-offline": "env TS_NODE_PROJECT=test/dev-containers/tsconfig.json mocha -r ts-node/register --exit test/dev-containers/src/container-features/**/*.offline.test.ts",
		"test-container-features-online": "env TS_NODE_PROJECT=test/dev-containers/tsconfig.json mocha -r ts-node/register --exit test/dev-containers/src/container-features/**/*.online.test.ts",
		"copytestconfigsforalpine": "/bin/bash -c 'cd test/configs && for f in *; do if [[ -d $f ]] && [[ $f != *alpine* ]]; then cp -r -T $f $f-alpine ; fi ; done'"
	},
	"devDependencies": {
		"@types/chai": "^4.2.22",
		"@types/follow-redirects": "^1.13.1",
		"@types/js-yaml": "^4.0.4",
		"@types/markdown-it": "^12.2.3",
		"@types/minimist": "^1.2.2",
		"@types/mocha": "^9.0.0",
		"@types/node": "^16.11.7",
		"@types/pull-stream": "^3.6.2",
		"@types/semver": "^7.3.9",
		"@types/stats-lite": "^2.2.0",
		"@types/tar": "^6.1.0",
		"@types/vscode": "^1.62.0",
		"@types/yargs": "^17.0.5",
		"@typescript-eslint/eslint-plugin": "^4.31.2",
		"@typescript-eslint/parser": "^4.31.2",
		"ajv": "^8.8.0",
		"chai": "4.3.4",
		"copyfiles": "^2.4.1",
		"esbuild": "^0.13.14",
		"eslint": "^7.32.0",
		"event-stream": "^4.0.1",
		"gulp-eslint": "^6.0.0",
		"gulp-filter": "^7.0.0",
		"husky": "^7.0.4",
		"jsonc": "^2.0.0",
		"mocha": "^9.1.3",
		"mocha-junit-reporter": "^2.0.2",
		"npm-run-all": "^4.1.5",
		"p-all": "^4.0.0",
		"rimraf": "^3.0.2",
		"ts-node": "^10.4.0",
		"typescript": "^4.4.4",
		"typescript-formatter": "^7.2.2",
		"vinyl": "^2.2.1",
		"vinyl-fs": "^3.0.3",
		"vsce": "^2.3.0"
	},
	"dependencies": {
		"applicationinsights": "2.1.9",
		"find-process": "^1.4.5",
		"follow-redirects": "^1.14.5",
		"js-yaml": "^4.1.0",
		"jsonc-parser": "^3.0.0",
		"markdown-it": "^12.2.0",
		"minimist": "^1.2.5",
		"muxrpc": "^6.5.3",
		"node-pty": "^0.10.1",
		"pull-pushable": "^2.2.0",
		"pull-stream": "^3.6.14",
		"pull-stream-to-stream": "^2.0.0",
		"semver": "^7.3.5",
		"stats-lite": "^2.2.0",
		"stream-to-pull-stream": "^1.7.3",
		"tar": "^6.1.11",
		"vscode-dev-containers": "https://github.com/microsoft/vscode-dev-containers/releases/download/v0.209.6/vscode-dev-containers-0.209.6.tgz",
		"vscode-extension-telemetry": "^0.4.3",
		"vscode-tas-client": "^0.1.27",
		"vscode-uri": "^3.0.2",
		"yaml": "^2.0.0-9",
		"yargs": "~17.0.1"
	},
	"__metadata": {
		"id": "93ce222b-5f6f-49b7-9ab1-a0463c6238df",
		"publisherId": "ac9410a2-0d75-40ec-90de-b59bb705801d",
		"publisherDisplayName": "Microsoft",
		"isPreReleaseVersion": false,
		"installedTimestamp": 1641831938200
	}
}