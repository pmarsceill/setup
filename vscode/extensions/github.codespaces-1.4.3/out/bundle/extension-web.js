module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 293);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(304)
var ieee754 = __webpack_require__(305)
var isArray = __webpack_require__(166)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("vscode");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = __webpack_require__(306);
exports.vslsCommands = api_1.vslsCommands;
// decorators
var TelemetryCommandDecorator_1 = __webpack_require__(435);
exports.telemetryCommandDecorator = TelemetryCommandDecorator_1.telemetryCommandDecorator;
var ErrorNotificationCommandDecorator_1 = __webpack_require__(437);
exports.errorNotificationCommandDecorator = ErrorNotificationCommandDecorator_1.errorNotificationCommandDecorator;
// misc
var CommandBase_1 = __webpack_require__(438);
exports.CommandBase = CommandBase_1.CommandBase;
var CommandError_1 = __webpack_require__(44);
exports.CommandError = CommandError_1.CommandError;
var CommandErrorCode_1 = __webpack_require__(439);
exports.CommandErrorCode = CommandErrorCode_1.CommandErrorCode;
var CancellationError_1 = __webpack_require__(223);
exports.CancellationError = CancellationError_1.CancellationError;
var ByDesignErrors_1 = __webpack_require__(221);
exports.ByDesignError = ByDesignErrors_1.ByDesignError;
var NonBlockingError_1 = __webpack_require__(224);
exports.NonBlockingError = NonBlockingError_1.NonBlockingError;
var UserError_1 = __webpack_require__(222);
exports.UserError = UserError_1.UserError;
// telemetry
var OptOutTelemetryFilter_1 = __webpack_require__(440);
exports.OptOutTelemetryFilter = OptOutTelemetryFilter_1.OptOutTelemetryFilter;
// tracing
var logZipExporter_1 = __webpack_require__(441);
exports.LogZipExporter = logZipExporter_1.LogZipExporter;
var traceSource_1 = __webpack_require__(56);
exports.traceSource = traceSource_1.traceSource;
// utils
var NotificationUtil_1 = __webpack_require__(220);
exports.NotificationUtil = NotificationUtil_1.NotificationUtil;
var ExtentionContext_1 = __webpack_require__(55);
exports.getExtensionContext = ExtentionContext_1.getExtensionContext;
var getExtensionUri_1 = __webpack_require__(458);
exports.getExtensionUri = getExtensionUri_1.getExtensionUri;
// data-scraper
var urlScraper_1 = __webpack_require__(459);
exports.launchUrlScraper = urlScraper_1.launchUrlScraper;
var dataScrapingManager_1 = __webpack_require__(124);
exports.dataScrapingManagerInstance = dataScrapingManager_1.dataScrapingManagerInstance;
// Mixins
__export(__webpack_require__(123));
//terminal
var terminalRenderer_1 = __webpack_require__(465);
exports.createTerminalRenderer = terminalRenderer_1.createTerminalRenderer;
var fileAccessInstance_1 = __webpack_require__(467);
exports.fileAccess = fileAccessInstance_1.fileAccessInstance;
// Vscode idle status
var VscodeSessionStatusProvider_1 = __webpack_require__(468);
exports.VscodeSessionStatusProvider = VscodeSessionStatusProvider_1.VscodeSessionStatusProvider;
var VscodeSessionStatus_1 = __webpack_require__(241);
exports.VscodeSessionStatus = VscodeSessionStatus_1.VscodeSessionStatus;
var VscodeActivityProvider_1 = __webpack_require__(228);
exports.VscodeActivityProvider = VscodeActivityProvider_1.VscodeActivityProvider;
var VscodeActivityType_1 = __webpack_require__(240);
exports.VscodeActivityType = VscodeActivityType_1.VscodeActivityType;
var loadJSON_1 = __webpack_require__(121);
exports.loadJSON = loadJSON_1.loadJSON;
//# sourceMappingURL=index.js.map

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(0)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate) {/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="./thenable.ts" />

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const Is = __webpack_require__(60);
const messages_1 = __webpack_require__(345);
exports.RequestType = messages_1.RequestType;
exports.RequestType0 = messages_1.RequestType0;
exports.RequestType1 = messages_1.RequestType1;
exports.RequestType2 = messages_1.RequestType2;
exports.RequestType3 = messages_1.RequestType3;
exports.RequestType4 = messages_1.RequestType4;
exports.RequestType5 = messages_1.RequestType5;
exports.RequestType6 = messages_1.RequestType6;
exports.RequestType7 = messages_1.RequestType7;
exports.RequestType8 = messages_1.RequestType8;
exports.RequestType9 = messages_1.RequestType9;
exports.ResponseError = messages_1.ResponseError;
exports.ErrorCodes = messages_1.ErrorCodes;
exports.NotificationType = messages_1.NotificationType;
exports.NotificationType0 = messages_1.NotificationType0;
exports.NotificationType1 = messages_1.NotificationType1;
exports.NotificationType2 = messages_1.NotificationType2;
exports.NotificationType3 = messages_1.NotificationType3;
exports.NotificationType4 = messages_1.NotificationType4;
exports.NotificationType5 = messages_1.NotificationType5;
exports.NotificationType6 = messages_1.NotificationType6;
exports.NotificationType7 = messages_1.NotificationType7;
exports.NotificationType8 = messages_1.NotificationType8;
exports.NotificationType9 = messages_1.NotificationType9;
const messageReader_1 = __webpack_require__(104);
exports.MessageReader = messageReader_1.MessageReader;
exports.StreamMessageReader = messageReader_1.StreamMessageReader;
exports.IPCMessageReader = messageReader_1.IPCMessageReader;
exports.SocketMessageReader = messageReader_1.SocketMessageReader;
const messageWriter_1 = __webpack_require__(105);
exports.MessageWriter = messageWriter_1.MessageWriter;
exports.StreamMessageWriter = messageWriter_1.StreamMessageWriter;
exports.IPCMessageWriter = messageWriter_1.IPCMessageWriter;
exports.SocketMessageWriter = messageWriter_1.SocketMessageWriter;
const events_1 = __webpack_require__(80);
exports.Disposable = events_1.Disposable;
exports.Event = events_1.Event;
exports.Emitter = events_1.Emitter;
const cancellation_1 = __webpack_require__(346);
exports.CancellationTokenSource = cancellation_1.CancellationTokenSource;
exports.CancellationToken = cancellation_1.CancellationToken;
const linkedMap_1 = __webpack_require__(347);
__export(__webpack_require__(348));
__export(__webpack_require__(424));
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Verbose"] = 2] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
(function (Trace) {
    function fromString(value) {
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTraceNotification');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTraceNotification');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function _createMessageConnection(messageReader, messageWriter, logger, strategy) {
    let sequenceNumber = 0;
    let notificationSquenceNumber = 0;
    let unknownResponseSquenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    let requestHandlers = Object.create(null);
    let starNotificationHandler = undefined;
    let notificationHandlers = Object.create(null);
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = Object.create(null);
    let requestTokens = Object.create(null);
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    let errorEmitter = new events_1.Emitter();
    let closeEmitter = new events_1.Emitter();
    let unhandledNotificationEmitter = new events_1.Emitter();
    let disposeEmitter = new events_1.Emitter();
    function createRequestQueueKey(id) {
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSquenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.isRequestMessage(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.isResponseMessage(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    ;
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        let message = messageQueue.shift();
        try {
            if (messages_1.isRequestMessage(message)) {
                handleRequest(message);
            }
            else if (messages_1.isNotificationMessage(message)) {
                handleNotification(message);
            }
            else if (messages_1.isResponseMessage(message)) {
                handleResponse(message);
            }
            else {
                handleInvalidMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    let callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {
                let key = createRequestQueueKey(message.params.id);
                let toCancel = messageQueue.get(key);
                if (messages_1.isRequestMessage(toCancel)) {
                    let response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== void 0 || response.result !== void 0)) {
                        messageQueue.delete(key);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response);
                        return;
                    }
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            let message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === void 0 ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replyError(error, method, startTime) {
            let message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === void 0) {
                result = null;
            }
            let message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        traceReceivedRequest(requestMessage);
        let element = requestHandlers[requestMessage.method];
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        let startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            let cancellationSource = new cancellation_1.CancellationTokenSource();
            let tokenKey = String(requestMessage.id);
            requestTokens[tokenKey] = cancellationSource;
            try {
                let handlerResult;
                if (requestMessage.params === void 0 || (type !== void 0 && type.numberOfParams === 0)) {
                    handlerResult = requestHandler
                        ? requestHandler(cancellationSource.token)
                        : starRequestHandler(requestMessage.method, cancellationSource.token);
                }
                else if (Is.array(requestMessage.params) && (type === void 0 || type.numberOfParams > 1)) {
                    handlerResult = requestHandler
                        ? requestHandler(...requestMessage.params, cancellationSource.token)
                        : starRequestHandler(requestMessage.method, ...requestMessage.params, cancellationSource.token);
                }
                else {
                    handlerResult = requestHandler
                        ? requestHandler(requestMessage.params, cancellationSource.token)
                        : starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                let promise = handlerResult;
                if (!handlerResult) {
                    delete requestTokens[tokenKey];
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        delete requestTokens[tokenKey];
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        delete requestTokens[tokenKey];
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    delete requestTokens[tokenKey];
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                delete requestTokens[tokenKey];
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            let key = String(responseMessage.id);
            let responsePromise = responsePromises[key];
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise) {
                delete responsePromises[key];
                try {
                    if (responseMessage.error) {
                        let error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== void 0) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            notificationHandler = (params) => {
                let id = params.id;
                let source = requestTokens[String(id)];
                if (source) {
                    source.cancel();
                }
            };
        }
        else {
            let element = notificationHandlers[message.method];
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (message.params === void 0 || (type !== void 0 && type.numberOfParams === 0)) {
                    notificationHandler ? notificationHandler() : starNotificationHandler(message.method);
                }
                else if (Is.array(message.params) && (type === void 0 || type.numberOfParams > 1)) {
                    notificationHandler ? notificationHandler(...message.params) : starNotificationHandler(message.method, ...message.params);
                }
                else {
                    notificationHandler ? notificationHandler(message.params) : starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        let responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            let key = String(responseMessage.id);
            let responseHandler = responsePromises[key];
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose && message.params) {
                data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.params) {
                    data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.error && message.error.data) {
                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${JSON.stringify(message.result, null, 4)}\n\n`;
                    }
                    else if (message.error === void 0) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose && message.params) {
                data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.params) {
                    data = `Params: ${JSON.stringify(message.params, null, 4)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose) {
                if (message.error && message.error.data) {
                    data = `Error data: ${JSON.stringify(message.error.data, null, 4)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${JSON.stringify(message.result, null, 4)}\n\n`;
                    }
                    else if (message.error === void 0) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                let error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === void 0) {
            return null;
        }
        else {
            return param;
        }
    }
    function computeMessageParams(type, params) {
        let result;
        let numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = null;
                break;
            case 1:
                result = undefinedToNull(params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    let connection = {
        sendNotification: (type, ...params) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                switch (params.length) {
                    case 0:
                        messageParams = null;
                        break;
                    case 1:
                        messageParams = params[0];
                        break;
                    default:
                        messageParams = params;
                        break;
                }
            }
            else {
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            let notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            messageWriter.write(notificationMessage);
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    notificationHandlers[type] = { type: undefined, handler };
                }
                else {
                    notificationHandlers[type.method] = { type, handler };
                }
            }
        },
        sendRequest: (type, ...params) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                switch (params.length) {
                    case 0:
                        messageParams = null;
                        break;
                    case 1:
                        // The cancellation token is optional so it can also be undefined.
                        if (cancellation_1.CancellationToken.is(params[0])) {
                            messageParams = null;
                            token = params[0];
                        }
                        else {
                            messageParams = undefinedToNull(params[0]);
                        }
                        break;
                    default:
                        const last = params.length - 1;
                        if (cancellation_1.CancellationToken.is(params[last])) {
                            token = params[last];
                            if (params.length === 2) {
                                messageParams = undefinedToNull(params[0]);
                            }
                            else {
                                messageParams = params.slice(0, last).map(value => undefinedToNull(value));
                            }
                        }
                        else {
                            messageParams = params.map(value => undefinedToNull(value));
                        }
                        break;
                }
            }
            else {
                method = type.method;
                messageParams = computeMessageParams(type, params);
                let numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            let id = sequenceNumber++;
            let result = new Promise((resolve, reject) => {
                let requestMessage = {
                    jsonrpc: version,
                    id: id,
                    method: method,
                    params: messageParams
                };
                let responsePromise = { method: method, timerStart: Date.now(), resolve, reject };
                traceSendingRequest(requestMessage);
                try {
                    messageWriter.write(requestMessage);
                }
                catch (e) {
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));
                    responsePromise = null;
                }
                if (responsePromise) {
                    responsePromises[String(id)] = responsePromise;
                }
            });
            if (token) {
                token.onCancellationRequested(() => {
                    connection.sendNotification(CancelNotification.type, { id });
                });
            }
            return result;
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            if (Is.func(type)) {
                starRequestHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    requestHandlers[type] = { type: undefined, handler };
                }
                else {
                    requestHandlers[type.method] = { type, handler };
                }
            }
        },
        trace: (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== void 0) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            let error = new Error('Connection got disposed.');
            Object.keys(responsePromises).forEach((key) => {
                responsePromises[key].reject(error);
            });
            responsePromises = Object.create(null);
            requestTokens = Object.create(null);
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            console.log("inspect");
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);
    });
    return connection;
}
function isMessageReader(value) {
    return value.listen !== void 0 && value.read === void 0;
}
function isMessageWriter(value) {
    return value.write !== void 0 && value.end === void 0;
}
function createMessageConnection(input, output, logger, strategy) {
    if (!logger) {
        logger = exports.NullLogger;
    }
    let reader = isMessageReader(input) ? input : new messageReader_1.StreamMessageReader(input);
    let writer = isMessageWriter(output) ? output : new messageWriter_1.StreamMessageWriter(output);
    return _createMessageConnection(reader, writer, logger, strategy);
}
exports.createMessageConnection = createMessageConnection;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(103).setImmediate))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// vscode-nls is used to localize the extension. VSCode doesn't support that in the browser.
// This is a dummy implementation which return the same message so that it works for one language. 
function loadMessageBundle() {
    function localize(key, message) {
        return message;
    }
    return localize;
}
exports.loadMessageBundle = loadMessageBundle;
function config(init) { }
exports.config = config;
// This is matching the name from the vscode-nls library.
// eslint-disable-next-line
exports.BundleFormat = {
    standalone: 1
};
// This is matching the name from the vscode-nls library.
// eslint-disable-next-line
exports.MessageFormat = {
    both: 1
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Utilities
 */
__export(__webpack_require__(88));
/**
 * Components
 */
__export(__webpack_require__(90));
/**
 * Errors
 */
__export(__webpack_require__(46));
/**
 * Constants
 */
__export(__webpack_require__(504));
/**
 * Mocks
 */
__export(__webpack_require__(506));
//# sourceMappingURL=index.js.map

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(381).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(202)(module)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(34)
exports.createHash = exports.Hash = __webpack_require__(61)
exports.createHmac = exports.Hmac = __webpack_require__(186)

var algos = __webpack_require__(364)
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = __webpack_require__(189)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = __webpack_require__(366)

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = __webpack_require__(200)

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = __webpack_require__(385)

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = __webpack_require__(419)

var publicEncrypt = __webpack_require__(420)

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(423)

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Telemetry_1 = __webpack_require__(341);
exports.Telemetry = Telemetry_1.Telemetry;
exports.TelemetryClass = Telemetry_1.TelemetryClass;
exports.TelemetryEvent = Telemetry_1.TelemetryEvent;
exports.Fault = Telemetry_1.Fault;
exports.TimedEvent = Telemetry_1.TimedEvent;
exports.cleanSensitiveInformation = Telemetry_1.cleanSensitiveInformation;
exports.propagateOffsetMarkTime = Telemetry_1.propagateOffsetMarkTime;
var TelemetryStrings_1 = __webpack_require__(102);
exports.TelemetryPropertyNames = TelemetryStrings_1.TelemetryPropertyNames;
var FaultType_1 = __webpack_require__(178);
exports.FaultType = FaultType_1.FaultType;
var Result_1 = __webpack_require__(217);
exports.TelemetryResult = Result_1.Result;
var TelemetryFilters_1 = __webpack_require__(425);
exports.SendOnceFilter = TelemetryFilters_1.SendOnceFilter;
exports.SamplingFilter = TelemetryFilters_1.SamplingFilter;
//# sourceMappingURL=index.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const FAULT_PREFIX = 'Fault/';
exports.CODESPACES_OLD_PROPERTY_PREFIX = 'cloud-env.';
exports.CODESPACES_PROPERTY_PREFIX = 'codespaces.';
exports.CODESPACES_COMMON_PROPERTY_PREFIX = 'codespaces.common.';
class TelemetryEventNames {
}
exports.TelemetryEventNames = TelemetryEventNames;
TelemetryEventNames.ADD_ENVIRONMENT = 'add-environment';
TelemetryEventNames.ADD_ENVIRONMENT_FAULT = FAULT_PREFIX + 'add-environment-fault';
TelemetryEventNames.CHANGE_SKU = 'change-sku';
TelemetryEventNames.CHANGE_SKU_FAULT = FAULT_PREFIX + 'change-sku';
TelemetryEventNames.CREATE_DEVCONTAINER = 'create-devcontainer';
TelemetryEventNames.CREATE_DEVCONTAINER_FAULT = FAULT_PREFIX + 'create-devcontainer-fault';
TelemetryEventNames.CONNECT = 'connect';
TelemetryEventNames.CONNECT_FAULT = FAULT_PREFIX + 'connect-fault';
TelemetryEventNames.CONNECT_INFO = 'connect-info';
TelemetryEventNames.CONNECT_LOGS_INFO = 'connect-logs-info';
TelemetryEventNames.CONNECT_HUB_LOGS_INFO = 'connect-hub_logs-info';
TelemetryEventNames.RESOLVE_INFO = 'resolve-info';
TelemetryEventNames.TUNNEL_OPEN_INFO = 'tunnel-open-info';
TelemetryEventNames.DOWNLOAD_EXPORTED_ENVIRONMENT = 'download-exported-environment';
TelemetryEventNames.DOWNLOAD_EXPORTED_ENVIRONMENT_FAULT = FAULT_PREFIX + 'download-exported-environment-fault';
TelemetryEventNames.DELETE = 'delete';
TelemetryEventNames.DELETE_FAULT = FAULT_PREFIX + 'delete-fault';
TelemetryEventNames.DISCONNECT = 'disconnect';
TelemetryEventNames.DISCONNECT_FAULT = FAULT_PREFIX + 'disconnect-fault';
TelemetryEventNames.DOCUMENTATION_LINK = 'documentation-link';
TelemetryEventNames.DOCUMENTATION_LINK_FAULT = FAULT_PREFIX + 'documentation-link-fault';
TelemetryEventNames.FEEDBACK_LINK = 'feedback-link';
TelemetryEventNames.FEEDBACK_LINK_FAULT = FAULT_PREFIX + 'feedback-link-fault';
TelemetryEventNames.SEND_FEEDBACK = 'send-feedback';
TelemetryEventNames.SEND_FEEDBACK_FAULT = FAULT_PREFIX + 'send-feedback-fault';
TelemetryEventNames.FORK_REPOSITORY = 'fork-repository';
TelemetryEventNames.FORK_REPOSITORY_FAULT = FAULT_PREFIX + 'fork-repository-fault';
TelemetryEventNames.GET_EXPORT_ENVIRONMENT_URL = 'get-exported-environment-url';
TelemetryEventNames.GET_EXPORT_ENVIRONMENT_URL_FAULT = FAULT_PREFIX + 'get-exported-environment-url-fault';
TelemetryEventNames.GET_STARTED_LINK = 'get-started-link';
TelemetryEventNames.GET_STARTED_LINK_FAULT = FAULT_PREFIX + 'get-started-link-fault';
TelemetryEventNames.EXPORT_ENVIRONMENT = 'export-environment';
TelemetryEventNames.EXPORT_ENVIRONMENT_FAULT = FAULT_PREFIX + 'export-environment-fault';
TelemetryEventNames.REBUILD_ENVIRONMENT = 'rebuild-environment';
TelemetryEventNames.REBUILD_ENVIRONMENT_FAULT = FAULT_PREFIX + 'rebuild-environment-fault';
TelemetryEventNames.GO_HOME = 'go-home';
TelemetryEventNames.GO_HOME_FAULT = FAULT_PREFIX + 'go-home-fault';
TelemetryEventNames.ISSUES_LINK = 'issues-link';
TelemetryEventNames.ISSUES_LINK_FAULT = FAULT_PREFIX + 'issues-link-fault';
TelemetryEventNames.REPORT_ISSUES = 'report-issues';
TelemetryEventNames.REPORT_ISSUES_FAULT = FAULT_PREFIX + 'report-issues-fault';
TelemetryEventNames.SHUTDOWN_ENVIRONMENT = 'shutdown-environment';
TelemetryEventNames.SHUTDOWN_ENVIRONMENT_FAULT = FAULT_PREFIX + 'shutdown-environment-fault';
TelemetryEventNames.EXPORT_LOGS = 'export-logs';
TelemetryEventNames.EXPORT_LOGS_FAULT = FAULT_PREFIX + 'export-logs-fault';
TelemetryEventNames.EXTENSION_ACTIVATION = 'extension-activation';
TelemetryEventNames.PORT_FORWARDER = 'port-forwarder';
TelemetryEventNames.PORT_FORWARDER_FAULT = FAULT_PREFIX + 'delete-forwarder-fault';
TelemetryEventNames.SHOW_WHATS_NEW_INFO = 'show-whats-new-info';
TelemetryEventNames.VIEW_CREATION_LOG = 'view-creation-log';
TelemetryEventNames.VIEW_CREATION_LOG_FAULT = 'view-creation-log-fault';
TelemetryEventNames.SIGNIN = 'signin';
TelemetryEventNames.SIGNIN_FAULT = FAULT_PREFIX + 'signin-fault';
TelemetryEventNames.OPEN_IN_NEW_WINDOW = 'open-new-window';
TelemetryEventNames.OPEN_IN_NEW_WINDOW_FAULT = FAULT_PREFIX + 'open-new-window-fault';
TelemetryEventNames.OPEN_IN_BROWSER = 'open-browser';
TelemetryEventNames.OPEN_IN_BROWSER_FAULT = FAULT_PREFIX + 'open-browser-fault';
TelemetryEventNames.OPEN_IN_INSIDERS = 'open-vscode-insiders';
TelemetryEventNames.OPEN_IN_INSIDERS_FAULT = FAULT_PREFIX + 'open-vscode-insiders-fault';
TelemetryEventNames.OPEN_IN_STABLE = 'open-vscode-stable';
TelemetryEventNames.OPEN_IN_STABLE_FAULT = FAULT_PREFIX + 'open-vscode-stable-fault';
TelemetryEventNames.OPEN_IN_VISUALSTUDIO = 'open-vscode-visualstudio';
TelemetryEventNames.OPEN_IN_VISUALSTUDIO_FAULT = 'open-vscode-visualstudio-fault';
TelemetryEventNames.CANCEL_ORYX_BUILD = 'cancel-oryx-build';
TelemetryEventNames.CANCEL_ORYX_BUILD_FAULT = 'cancel-oryx-build-fault';
TelemetryEventNames.ACTIVITY_MONITOR = 'activity-monitor';
TelemetryEventNames.ACTIVITY_MONITOR_FAULT = 'activity-monitor-fault';
TelemetryEventNames.START_LOCAL_PORT_FORWARDER = 'start-local-port-forwarder';
TelemetryEventNames.LATENCY_UPDATE = 'latency-update';
TelemetryEventNames.SET_TUNNEL_PRIVACY_OPTIONS = 'set-tunnel-privacy-options';
class TelemetryPropertyNames {
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.ENVIRONMENT_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'environment-type';
TelemetryPropertyNames.IS_INTERNAL = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-internal';
TelemetryPropertyNames.API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'api-endpoint';
TelemetryPropertyNames.CODESPACE_API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-api-endpoint';
TelemetryPropertyNames.CODESPACE_ENVIRONMENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-environment';
TelemetryPropertyNames.IS_TEST_ENVIRONMENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-test-environment';
TelemetryPropertyNames.LIVESHARE_API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'liveshare-api-endpoint';
TelemetryPropertyNames.LIVESHARE_SERVICE_URI = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'liveshare-service-uri';
TelemetryPropertyNames.VSCS_API_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'vscs-api-endpoint';
TelemetryPropertyNames.VSCS_ENVIRONMENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'vscs-environment';
TelemetryPropertyNames.USE_HUB_WORKSPACE_AGENT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'use-hub-workspace-agent';
TelemetryPropertyNames.EXTENSION_VERSION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'extension-version';
TelemetryPropertyNames.IS_NODE_INSTALLED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-node-installed';
TelemetryPropertyNames.IS_RUNNING_IN_WEB = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-running-in-web';
TelemetryPropertyNames.SERVICE_ENDPOINT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'service-endpoint';
TelemetryPropertyNames.URI_HANDLER_CORRELATION_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'uri-handler-correlation-id';
TelemetryPropertyNames.MORE_INFO_CLICKED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'more-info-clicked';
TelemetryPropertyNames.BROWSER_OPENED_SUCCESS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'browser-opened-success';
TelemetryPropertyNames.TELEMETRY_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'telemetry_id';
TelemetryPropertyNames.PARTNER_NAME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'partner-name';
TelemetryPropertyNames.ORGANIZATION_ID = exports.CODESPACES_PROPERTY_PREFIX + 'organization-id';
TelemetryPropertyNames.PERFORMANCE_EXPLORER_ENABLED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'performance-explorer-enabled';
TelemetryPropertyNames.CONNECTION_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'connection-number';
TelemetryPropertyNames.CONNECTION_TYPE_SETTINGS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'connection-type-settings';
TelemetryPropertyNames.RESOLVE_ATTEMPT_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-number';
TelemetryPropertyNames.RESOLVE_RETRY_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-retry-number';
TelemetryPropertyNames.RESOLVE_CONNECTION_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-connection-type';
TelemetryPropertyNames.IS_LOCAL = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-local';
TelemetryPropertyNames.IS_PRODUCTION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'is-production';
TelemetryPropertyNames.CODESPACE_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-id';
TelemetryPropertyNames.CODESPACE_STATE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-state';
TelemetryPropertyNames.INITIAL_CODESPACE_STATE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'initial-codespace-state';
TelemetryPropertyNames.CODESPACE_LOCATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-location';
TelemetryPropertyNames.GITHUB_USERNAME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'github-owner-login';
TelemetryPropertyNames.GITHUB_REPO = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'github-repo-nwo';
TelemetryPropertyNames.GITHUB_BRANCH = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'github-branch';
TelemetryPropertyNames.IS_ACTIVITY_MONITOR_ACTIVATED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'started-activity-monitor';
TelemetryPropertyNames.CLIENT_LOGS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs';
TelemetryPropertyNames.CLIENT_LOGS_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs-type';
TelemetryPropertyNames.CLIENT_LOGS_SLICE_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs-slice-number';
TelemetryPropertyNames.CLIENT_LOGS_CORRELATION_ID = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'client-logs-correlation-id';
TelemetryPropertyNames.HUB_CLIENT_LOGS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'hub-client-logs';
TelemetryPropertyNames.PORT_CONNECTION_IS_ESTABLISHED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'port-connection-is-established';
TelemetryPropertyNames.PORT_PRIVACY = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'port-privacy';
TelemetryPropertyNames.NEW_PORT_PRIVACY = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'new-port-privacy';
TelemetryPropertyNames.PORT_SERVER_KIND = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'port-server-kind';
TelemetryPropertyNames.SOURCE_PORT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'source-port';
TelemetryPropertyNames.LOCAL_PORT = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'local-port';
TelemetryPropertyNames.TUNNEL_HOST = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-host';
TelemetryPropertyNames.TUNNEL_CLEAR_HOST = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-clear-host';
TelemetryPropertyNames.TUNNEL_CONNECTION_STATUS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-connection-status';
TelemetryPropertyNames.TUNNEL_NEW_CONNECTION_STATUS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-new-connection-status';
TelemetryPropertyNames.TUNNEL_ELEVATION_REQUIRED = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-elevation-required';
TelemetryPropertyNames.TUNNEL_PROTOCOL_TYPE = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-protocol-type';
TelemetryPropertyNames.TUNNEL_USE_PFS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-use-pfs';
TelemetryPropertyNames.TUNNEL_REUSE_EXISTING = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-reuse-existing-tunnel';
TelemetryPropertyNames.TUNNEL_RETRY_NUMBER = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-retry-number';
TelemetryPropertyNames.TUNNEL_CODESPACE_STATE = exports.CODESPACES_PROPERTY_PREFIX + 'tunnel-codespace-state';
TelemetryPropertyNames.ALLOWED_TUNNEL_PRIVACY_OPTIONS = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'tunnel-privacy-options';
class TelemetryMeasureNames {
}
exports.TelemetryMeasureNames = TelemetryMeasureNames;
TelemetryMeasureNames.AUTO_FORWARDING_PORT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'auto-forwarding-port-duration';
TelemetryMeasureNames.CREATE_ENV_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'create-env-duration';
TelemetryMeasureNames.JOIN_WORKSPACE_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'join-workspace-duration';
TelemetryMeasureNames.JOIN_WORKSPACE_START_TIME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'join-workspace-start-time';
TelemetryMeasureNames.RESOLVE_ATTEMPT_START_TIME = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'resolve-attempt-start-time';
TelemetryMeasureNames.CODESPACE_INFO_FETCH_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'codespace-info-fetch-duration';
TelemetryMeasureNames.ENVIRONMENT_AGE_MINUTES = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'environment-age-minutes';
TelemetryMeasureNames.ENV_CONFIG_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'env-config-duration';
TelemetryMeasureNames.FORWARD_VSCODE_SERVER_PORT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'forward-vscode-server-port-duration';
TelemetryMeasureNames.GET_WORKSPACE_INFO_FAULT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'get-workspace-info-fault-duration';
TelemetryMeasureNames.FORWARD_EXISTING_PORT_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'forward-existing-port-duration';
TelemetryMeasureNames.PROVISIONING_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'provisioning-duration';
TelemetryMeasureNames.START_VSCODE_SERVER_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'start-vscode-server-duration';
TelemetryMeasureNames.START_ENV_DURATION = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'start-env-duration';
TelemetryMeasureNames.LATENCY_AVG = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'latency-average';
TelemetryMeasureNames.LATENCY_MIN = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'latency-min';
TelemetryMeasureNames.LATENCY_MAX = exports.CODESPACES_OLD_PROPERTY_PREFIX + 'latency-max';
class TelemetryCommonPropertyNames {
}
exports.TelemetryCommonPropertyNames = TelemetryCommonPropertyNames;
TelemetryCommonPropertyNames.IS_INTERNAL = exports.CODESPACES_COMMON_PROPERTY_PREFIX + 'is-internal';


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vs_ssh_1 = __webpack_require__(130);
const vscode_jsonrpc_1 = __webpack_require__(6);
const vscode_command_framework_1 = __webpack_require__(3);
class CodespaceDetailsProvider {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.changeEmitter = new vscode_jsonrpc_1.Emitter();
        this.onCodespacesChanged = this.changeEmitter.event;
        this.codespaces = new Map();
        this.logger = vscode_command_framework_1.traceSource.withName('CodespaceInfo');
        this.dependencies.getApiProvider().onSignInChanged(this.updateCodespacesDetails.bind(this));
        this.updateCodespacesDetails().catch((err) => this.logger.error('Failed to fetch codespaces', err));
    }
    static get Instance() {
        return CodespaceDetailsProvider.singleton;
    }
    static init(dependencies) {
        CodespaceDetailsProvider.singleton = new CodespaceDetailsProvider(dependencies);
    }
    async updateCodespacesDetails() {
        this.codespacesDetailsCompletion = new vs_ssh_1.PromiseCompletionSource();
        if (!this.dependencies.getApiProvider().isSignedIn()) {
            this.disposeLists();
            this.codespacesDetailsCompletion.resolve();
            return;
        }
        let codespaces = [];
        try {
            codespaces =
                (await this.dependencies.getApiProvider().environments.listCodespaces())
                    .codespaces;
        }
        catch (e) {
            if (this.codespacesDetailsCompletion) {
                this.codespacesDetailsCompletion.reject(e);
            }
            throw e;
        }
        this.codespaces.clear();
        codespaces.forEach((element) => {
            this.codespaces.set(element.environment_id, element);
        });
        if (this.codespacesDetailsCompletion) {
            this.codespacesDetailsCompletion.resolve();
        }
        this.fireOnCodespacesChanged();
    }
    async fetchCodespaceDetailsById(codespaceId) {
        const codespace = await this.dependencies
            .getApiProvider()
            .environments.getCodespace(codespaceId);
        if (codespace) {
            this.codespaces.set(codespaceId, codespace);
        }
        else if (this.codespaces.get(codespaceId)) {
            this.codespaces.delete(codespaceId);
        }
        this.fireOnCodespacesChanged();
        return codespace;
    }
    async fetchCodespaceDetailsByName(codespaceName) {
        const codespace = await this.dependencies
            .getApiProvider()
            .environments.getCodespaceByName(codespaceName);
        if (codespace) {
            this.codespaces.set(codespace.environment_id, codespace);
        }
        else {
            for (let c of this.codespaces.values()) {
                if (c.name === codespaceName) {
                    this.codespaces.delete(c.environment_id);
                    break;
                }
            }
        }
        this.fireOnCodespacesChanged();
        return codespace;
    }
    getCachedCodespaceDetailsById(codespaceId) {
        return this.codespaces.get(codespaceId);
    }
    /*Updates a single environment and triggers the change event*/
    addOrUpdateCodespace(codespace) {
        this.codespaces.set(codespace.environment_id, codespace);
        this.fireOnCodespacesChanged();
    }
    removeCodespaceById(codespaceId) {
        this.codespaces.delete(codespaceId);
        this.fireOnCodespacesChanged();
    }
    setCurrentCodespace(codespace) {
        this.currentCodespace = codespace;
        this.fireOnCodespacesChanged();
    }
    getCurrentCodespace() {
        return this.currentCodespace;
    }
    async fetchEnvironmentsList() {
        return await this.getCodespacesDetailsPromise();
    }
    getCodespaceDetails() {
        if (!this.codespaces) {
            return [];
        }
        return [...this.codespaces.values()];
    }
    disposeLists() {
        this.codespaces.clear();
        this.fireOnCodespacesChanged();
    }
    fireOnCodespacesChanged() {
        this.changeEmitter.fire(this.getCodespaceDetails());
    }
    getCodespacesDetailsPromise() {
        return this.codespacesDetailsCompletion
            ? this.codespacesDetailsCompletion.promise.then(() => this.getCodespaceDetails())
            : Promise.resolve([]);
    }
}
exports.CodespaceDetailsProvider = CodespaceDetailsProvider;
const Instance = CodespaceDetailsProvider.Instance;
exports.Instance = Instance;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const axios_1 = __webpack_require__(146);
const axios_retry_1 = __webpack_require__(148);
const vscs_utils_1 = __webpack_require__(8);
const config_1 = __webpack_require__(566);
const commandUtil_1 = __webpack_require__(567);
const extensionsUtil_1 = __webpack_require__(568);
const util_1 = __webpack_require__(52);
const codespaceCreation_1 = __webpack_require__(574);
const githubApiProvider_1 = __webpack_require__(576);
const skuChangePrompt_1 = __webpack_require__(610);
class Dependencies {
    constructor() {
        this.notificationUtil = vscode_command_framework_1.NotificationUtil;
        this.commandUtil = commandUtil_1.CommandUtil.Instance;
        this.extensionsUtil = new extensionsUtil_1.ExtensionsUtil(this);
        this.util = util_1.Util.Instance;
        this.httpClientUtil = axios_1.default;
        this.configurationManager = new config_1.ConfigurationManager();
        // hold the private resolver reference
        this.resolverRef = null;
    }
    getApiProvider() {
        // Warning: this needs to be lazy initialized so that the logger instance
        // which is used in the GitHubApiProvider constructor (and downstream objects)
        // is setup AFTER the extension is activated and the trace logging infrastructure
        // is initialized. If you change this to be non-lazy, lots of trace logs will
        // disappear.
        if (!Dependencies.apiProviderSingleton) {
            Dependencies.apiProviderSingleton = new githubApiProvider_1.GitHubApiProvider(this);
        }
        return Dependencies.apiProviderSingleton;
    }
    /**
     * Method to get the resolver reference, throws
     * if not yet initialized.
     */
    get resolver() {
        vscs_utils_1.assertDefined(this.resolverRef, 'No Resolver reference found.');
        return this.resolverRef;
    }
    /**
     * Register the resolver reference on this
     * dependencies instance.
     */
    registerResolver(resolver) {
        this.resolverRef = resolver;
        return this;
    }
}
exports.dependencies = new Dependencies();
exports.userPrompts = {
    codespaceCreation: () => new codespaceCreation_1.CodespaceCreationPrompt(exports.dependencies),
    skuChangePrompt: (codespace) => new skuChangePrompt_1.SkuChangePrompt(exports.dependencies, codespace),
};
// Add default retry policy (can be overridden per-request)
// axios-retry is setup as a CommonJS module, so it must be required insted of imported
const axiosRetry = __webpack_require__(148);
axiosRetry(axios_1.default, { retryDelay: axios_retry_1.exponentialDelay });
// Add an axios interceptor to disable its built-in proxy support in all requests.
// This allows VS Code proxy settings to take effect via patched node http/https APIs.
// The axios proxy setting has no effect when running inside a browser.
axios_1.default.interceptors.request.use((config) => {
    return Object.assign(Object.assign({}, config), { proxy: false });
});


/***/ }),
/* 15 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatBuffer = exports.SshDataWriter = exports.SshDataReader = void 0;
const buffer_1 = __webpack_require__(0);
const sshAlgorithms_1 = __webpack_require__(47);
const bigInt_1 = __webpack_require__(28);
class SshDataReader {
    constructor(buffer) {
        this.buffer = buffer;
        this.position = 0;
    }
    get available() {
        return this.buffer.length - this.position;
    }
    read(length) {
        if (this.available < length) {
            throw new Error('Attempted to read past end of buffer.');
        }
        const data = this.buffer.slice(this.position, this.position + length);
        this.position += length;
        return data;
    }
    readByte() {
        if (this.available === 0) {
            throw new Error('Attempted to read past end of buffer.');
        }
        const value = this.buffer[this.position];
        this.position++;
        return value;
    }
    readBinary() {
        const length = this.readUInt32();
        if (this.available < length) {
            throw new Error('Attempted to read past end of buffer.');
        }
        const data = this.buffer.slice(this.position, this.position + length);
        this.position += length;
        return data;
    }
    readString(encoding) {
        const bytes = this.readBinary();
        return bytes.toString();
    }
    readList(encoding) {
        const stringList = this.readString(encoding);
        return stringList.length === 0 ? [] : stringList.split(',');
    }
    readBoolean() {
        return this.readByte() !== 0;
    }
    readUInt32() {
        if (this.available < 4) {
            throw new Error('Attempted to read past end of buffer.');
        }
        // Big-endian encoding
        const value0 = this.buffer[this.position + 0];
        const value1 = this.buffer[this.position + 1];
        const value2 = this.buffer[this.position + 2];
        const value3 = this.buffer[this.position + 3];
        this.position += 4;
        const value = ((value0 << 24) | (value1 << 16) | (value2 << 8) | value3) >>> 0;
        return value;
    }
    readUInt64() {
        if (this.available < 8) {
            throw new Error('Attempted to read past end of buffer.');
        }
        // Big-endian encoding
        const value0 = this.buffer[this.position + 0];
        const value1 = this.buffer[this.position + 1];
        const value2 = this.buffer[this.position + 2];
        const value3 = this.buffer[this.position + 3];
        const value4 = this.buffer[this.position + 4];
        const value5 = this.buffer[this.position + 5];
        const value6 = this.buffer[this.position + 6];
        const value7 = this.buffer[this.position + 7];
        this.position += 8;
        const high = ((value0 << 24) | (value1 << 16) | (value2 << 8) | value3) >>> 0;
        const low = ((value4 << 24) | (value5 << 16) | (value6 << 8) | value7) >>> 0;
        return high * 0x100000000 + low;
    }
    readBigInt() {
        const data = this.readBinary();
        if (data.length === 0) {
            return bigInt_1.BigInt.zero;
        }
        return bigInt_1.BigInt.fromBytes(data);
    }
}
exports.SshDataReader = SshDataReader;
SshDataReader.mpintZero = buffer_1.Buffer.alloc(1);
class SshDataWriter {
    constructor(buffer) {
        this.buffer = buffer;
        this.position = 0;
    }
    write(data) {
        this.ensureCapacity(this.position + data.length);
        data.copy(this.buffer, this.position);
        this.position += data.length;
    }
    writeByte(value) {
        this.ensureCapacity(this.position + 1);
        this.buffer[this.position] = value;
        this.position++;
    }
    writeBinary(data) {
        this.ensureCapacity(this.position + 4 + data.length);
        this.writeUInt32(data.length);
        data.copy(this.buffer, this.position);
        this.position += data.length;
    }
    writeString(value, encoding) {
        this.writeBinary(buffer_1.Buffer.from(value));
    }
    writeList(value, encoding) {
        this.writeString(value ? value.join(',') : '', encoding);
    }
    writeBoolean(value) {
        this.writeByte(value ? 1 : 0);
    }
    writeUInt32(value) {
        this.ensureCapacity(this.position + 4);
        // Big-endian encoding
        this.buffer[this.position + 0] = value >>> 24;
        this.buffer[this.position + 1] = value >>> 16;
        this.buffer[this.position + 2] = value >>> 8;
        this.buffer[this.position + 3] = value >>> 0;
        this.position += 4;
    }
    writeUInt64(value) {
        this.ensureCapacity(this.position + 8);
        const low = value & 0xffffffff;
        const high = (value - low) / 0x100000000;
        // Big-endian encoding
        this.buffer[this.position + 0] = high >>> 24;
        this.buffer[this.position + 1] = high >>> 16;
        this.buffer[this.position + 2] = high >>> 8;
        this.buffer[this.position + 3] = high >>> 0;
        this.buffer[this.position + 4] = low >>> 24;
        this.buffer[this.position + 5] = low >>> 16;
        this.buffer[this.position + 6] = low >>> 8;
        this.buffer[this.position + 7] = low >>> 0;
        this.position += 8;
    }
    writeBigInt(value) {
        const data = value.toBytes();
        if (data.length === 1 && data[0] === 0) {
            this.writeUInt32(0);
        }
        else {
            this.writeBinary(data);
        }
    }
    writeRandom(length) {
        this.ensureCapacity(this.position + length);
        const randomBuffer = this.buffer.slice(this.position, this.position + length);
        sshAlgorithms_1.SshAlgorithms.random.getBytes(randomBuffer);
        this.position += length;
    }
    skip(length) {
        this.ensureCapacity(this.position + length);
        this.position += length;
    }
    ensureCapacity(capacity) {
        if (this.buffer.length < capacity) {
            let newLength = Math.max(512, this.buffer.length * 2);
            while (newLength < capacity)
                newLength *= 2;
            const newBuffer = buffer_1.Buffer.alloc(newLength);
            this.buffer.copy(newBuffer, 0, 0, this.position);
            this.buffer = newBuffer;
        }
    }
    toBuffer() {
        return this.buffer.slice(0, this.position);
    }
}
exports.SshDataWriter = SshDataWriter;
function makeCrcTable() {
    let c;
    const table = [];
    for (let n = 0; n < 256; n++) {
        c = n;
        for (let k = 0; k < 8; k++) {
            c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;
        }
        table[n] = c;
    }
    return table;
}
let crcTable;
function crc32(data) {
    if (!crcTable) {
        crcTable = makeCrcTable();
    }
    let crc = 0 ^ -1;
    for (let i = 0; i < data.length; i++) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xff];
    }
    const result = (crc ^ -1) >>> 0;
    return (result + 0x100000000)
        .toString(16)
        .substr(-8)
        .toUpperCase();
}
/**
 * Formats a byte buffer using the same format as OpenSSH,
 * useful for debugging and comparison in logs.
 */
function formatBuffer(data, name, formatData) {
    let s = `${name === undefined ? 'Buffer' : name}[${data.length}] (${crc32(data)})\n`;
    if (formatData === false) {
        return s;
    }
    const max = Math.min(2048, data.length);
    for (let lineOffset = 0; lineOffset < max; lineOffset += 16) {
        if (lineOffset < 1000)
            s += '0';
        if (lineOffset < 100)
            s += '0';
        if (lineOffset < 10)
            s += '0';
        s += lineOffset + ':';
        for (let i = lineOffset; i < lineOffset + 16; i++) {
            if (i < max) {
                s += ' ' + data.slice(i, i + 1).toString('hex');
            }
            else {
                s += '   ';
            }
        }
        s += '  ';
        for (let i = lineOffset; i < lineOffset + 16; i++) {
            if (i < max) {
                const c = data[i];
                s += c > 32 && c <= 127 ? data.slice(i, i + 1).toString() : '.';
            }
            else {
                s += ' ';
            }
        }
        s += '\n';
    }
    if (max < data.length) {
        s += '...\n';
    }
    return s;
}
exports.formatBuffer = formatBuffer;
//# sourceMappingURL=sshData.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(256);

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Interfaces.
 */
__export(__webpack_require__(100));
/**
 * Listeners.
 */
__export(__webpack_require__(308));
/**
 * Loggers.
 */
__export(__webpack_require__(167));
/**
 * Utils.
 */
__export(__webpack_require__(171));
/**
 * Mocks.
 */
__export(__webpack_require__(329));
/**
 * Misc.
 */
var LoggerSettings_1 = __webpack_require__(170);
exports.LoggerSettings = LoggerSettings_1.LoggerSettings;
var GlobalPatternTraceFilter_1 = __webpack_require__(331);
exports.GlobPatternTraceFilter = GlobalPatternTraceFilter_1.GlobPatternTraceFilter;
var VerbosityTraceFilter_1 = __webpack_require__(336);
exports.VerbosityTraceFilter = VerbosityTraceFilter_1.VerbosityTraceFilter;
var TraceListener_1 = __webpack_require__(78);
exports.TraceListener = TraceListener_1.TraceListener;
var TraceFormat_1 = __webpack_require__(58);
exports.TraceFormat = TraceFormat_1.TraceFormat;
var TraceSource_1 = __webpack_require__(337);
exports.TraceSource = TraceSource_1.TraceSource;
var TraceFilters_1 = __webpack_require__(338);
exports.TraceFilters = TraceFilters_1.TraceFilters;
var Logger_1 = __webpack_require__(339);
exports.Logger = Logger_1.Logger;
exports.LoggerBase = Logger_1.LoggerBase;
var Privacy_1 = __webpack_require__(169);
exports.Privacy = Privacy_1.Privacy;
//# sourceMappingURL=index.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(9);
var minAssert = __webpack_require__(19);
var minUtils = __webpack_require__(204);

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;



/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*
 * Utils functions
 *
 */

var crypt = __webpack_require__(10);

/**
 * Break string str each maxLen symbols
 * @param str
 * @param maxLen
 * @returns {string}
 */
module.exports.linebrk = function (str, maxLen) {
    var res = '';
    var i = 0;
    while (i + maxLen < str.length) {
        res += str.substring(i, i + maxLen) + "\n";
        i += maxLen;
    }
    return res + str.substring(i, str.length);
};

module.exports.detectEnvironment = function () {
    if (typeof(window) !== 'undefined' && window && !(process && process.title === 'node')) {
        return 'browser';
    }

    return 'node';
};

/**
 * Trying get a 32-bit unsigned integer from the partial buffer
 * @param buffer
 * @param offset
 * @returns {Number}
 */
module.exports.get32IntFromBuffer = function (buffer, offset) {
    offset = offset || 0;
    var size = 0;
    if ((size = buffer.length - offset) > 0) {
        if (size >= 4) {
            return buffer.readUIntBE(offset, size);
        } else {
            var res = 0;
            for (var i = offset + size, d = 0; i > offset; i--, d += 2) {
                res += buffer[i - 1] * Math.pow(16, d);
            }
            return res;
        }
    } else {
        return NaN;
    }
};

module.exports._ = {
    isObject: function (value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    },

    isString: function (value) {
        return typeof value == 'string' || value instanceof String;
    },

    isNumber: function (value) {
        return typeof value == 'number' || !isNaN(parseFloat(value)) && isFinite(value);
    },

    /**
     * Returns copy of `obj` without `removeProp` field.
     * @param obj
     * @param removeProp
     * @returns Object
     */
    omit: function (obj, removeProp) {
        var newObj = {};
        for (var prop in obj) {
            if (!obj.hasOwnProperty(prop) || prop === removeProp) {
                continue;
            }
            newObj[prop] = obj[prop];
        }

        return newObj;
    }
};

/**
 * Strips everything around the opening and closing lines, including the lines
 * themselves.
 */
module.exports.trimSurroundingText = function (data, opening, closing) {
    var trimStartIndex = 0;
    var trimEndIndex = data.length;

    var openingBoundaryIndex = data.indexOf(opening);
    if (openingBoundaryIndex >= 0) {
        trimStartIndex = openingBoundaryIndex + opening.length;
    }

    var closingBoundaryIndex = data.indexOf(closing, openingBoundaryIndex);
    if (closingBoundaryIndex >= 0) {
        trimEndIndex = closingBoundaryIndex;
    }

    return data.substring(trimStartIndex, trimEndIndex);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.injectMessageParameters = (message, ...args) => {
    for (let i = 0; i < args.length; i++) {
        message = message.replace('{}', args[i]);
    }
    return message;
};


/***/ }),
/* 23 */
/***/ (function(module) {

module.exports = JSON.parse("{\"addNewEnvironment\":\"Create New Codespace\",\"cancelOryxBuild\":\"Cancel Oryx Build\",\"changeMachineType\":\"Change Machine Type\",\"connectEnvironment\":\"Connect to Codespace\",\"createDevContainer\":\"Add Development Container Configuration Files...\",\"deleteEnvironment\":\"Delete Codespace\",\"disconnect\":\"Disconnect\",\"documentationLink\":\"Documentation Link\",\"exportLogs\":\"Export Logs\",\"feedbackLink\":\"Feedback Link\",\"sendFeedback\":\"Send Feedback\",\"forkRepository\":\"Fork Repository\",\"getStartedLink\":\"Get Started Link\",\"goHome\":\"Go Home\",\"issuesLink\":\"Issues Link\",\"reportIssue\":\"Report Issue\",\"openInInsiders\":\"Open in VS Code Insiders\",\"openInBrowser\":\"Open in Browser\",\"openInNewWindow\":\"Open Codespace in New Window\",\"openInStable\":\"Open in VS Code\",\"portForwarder\":\"Forward Port\",\"rebuildEnvironment\":\"Rebuild Container\",\"shutdownEnvironment\":\"Stop Codespace\",\"signIn\":\"Sign In\",\"signOut\":\"Sign Out\",\"unshare\":\"Stop Forwarding Port\",\"viewCreationLog\":\"View Creation Log\",\"exportEnvironment\":\"Export codespace\"}");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.traceData = exports.trace = void 0;
// To enable tracing in node, set the `DEBUG` environment variable to `vs-ssh`.
// To enable tracing in a browser, set `window.localStorage.debug = 'vs-ssh'`
// To include data messages, use `vs-ssh,vs-ssh:data`.
const packageJson = __webpack_require__(242);
const packageName = packageJson.name.replace(/^@\w+\//, ''); // Strip scope from name.
const debug = __webpack_require__(514);
const trace = debug(packageName);
exports.trace = trace;
const traceSsh = debug(packageName + ':ssh');
const traceData = debug(packageName + ':data');
exports.traceData = traceData;
// DEBUG='vs-ssh:*' should also enable core tracing.
if (traceSsh.enabled) {
    trace.enabled = true;
}
//# sourceMappingURL=trace.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectDisposedError = exports.SshChannelError = exports.SshReconnectError = exports.SshConnectionError = void 0;
class SshConnectionError extends Error {
    constructor(message, reason) {
        super(message);
        this.reason = reason;
    }
}
exports.SshConnectionError = SshConnectionError;
class SshReconnectError extends Error {
    constructor(message, reason) {
        super(message);
        this.reason = reason;
    }
}
exports.SshReconnectError = SshReconnectError;
class SshChannelError extends Error {
    constructor(message, reason) {
        super(message);
        this.reason = reason;
    }
}
exports.SshChannelError = SshChannelError;
class ObjectDisposedError extends Error {
    constructor(objectOrMessage) {
        var _a, _b;
        let message;
        if (typeof objectOrMessage === 'string') {
            // Custom message.
            message = objectOrMessage;
        }
        else if (typeof objectOrMessage === 'function') {
            // Constructor function (class name).
            message = objectOrMessage.name + ' disposed.';
        }
        else {
            // Disposable object - get its class name.
            message = ((_b = (_a = objectOrMessage === null || objectOrMessage === void 0 ? void 0 : objectOrMessage.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'Object ') + ' disposed.';
        }
        super(message);
    }
}
exports.ObjectDisposedError = ObjectDisposedError;
//# sourceMappingURL=errors.js.map

/***/ }),
/* 26 */
/***/ (function(module, exports) {



/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(19);
var inherits = __webpack_require__(2);

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigInt = void 0;
const buffer_1 = __webpack_require__(0);
const sshData_1 = __webpack_require__(16);
/**
 * Represents a large signed integer as a byte byffer.
 */
class BigInt {
    /**
     * Creates a new BigInt instance from a buffer of signed bytes.
     *
     * The first (high) bit of the first (high) byte is the sign bit. Therefore if the
     * highest byte of an unsigned integer is greater than 127, the bytes must include
     * a leading zero byte to prevent interpretation as a negative value.
     */
    constructor(buffer) {
        this.buffer = buffer;
        if (buffer.length === 0) {
            throw new Error('BigInt buffer length must be greater than zero.');
        }
    }
    /**
     * Gets a value that indicates the sign of the big integer:
     * 1 for positive, 0 for zero, -1 for negative.
     */
    get sign() {
        const highByte = this.buffer[0];
        if (highByte === 0) {
            return this.buffer.length > 1 ? 1 : 0;
        }
        else {
            return (highByte & 0x80) === 0 ? 1 : -1;
        }
    }
    static fromInt32(value) {
        if (value === 0) {
            return BigInt.zero;
        }
        let isNegative = false;
        if (value < 0) {
            isNegative = true;
            value = -value;
        }
        const bytes = [];
        for (let bit = 24; bit >= 0; bit -= 8) {
            if (value >= 1 << bit || bytes.length > 0) {
                bytes.push(value >> bit);
                value = value & ~((1 << bit) - 1);
            }
        }
        if (isNegative) {
            if ((bytes[0] & 0x80) === 0) {
                bytes[0] |= 0x80;
            }
            else {
                bytes.splice(0, 0, 0x80);
            }
        }
        return new BigInt(buffer_1.Buffer.from(new Uint8Array(bytes)));
    }
    toInt32() {
        if (this.buffer.length > 4) {
            throw new TypeError(`BigInt value cannot be converted to a 32-bit signed integer.`);
        }
        let value = this.buffer[0];
        if (this.sign < 0) {
            value &= 0x7f;
        }
        for (let i = 1; i < this.buffer.length; i++) {
            value = (value << 8) + this.buffer[i];
        }
        if (this.sign < 0) {
            value = -value;
        }
        return value;
    }
    /**
     * Creates a new BigInt instance from a byte buffer.
     * @param bytes Source byte buffer.
     * @param options.unsigned True if the bytes should be interpreted as unsigned. If false,
     * the high bit of the high byte is the sign bit. The default is false.
     */
    static fromBytes(bytes, options) {
        if (!buffer_1.Buffer.isBuffer(bytes)) {
            throw new TypeError('Buffer expected.');
        }
        else if (bytes.length === 0) {
            throw new Error('BigInt buffer length must be greater than zero.');
        }
        options = options !== null && options !== void 0 ? options : {};
        const highBit = (bytes[0] & 0x80) !== 0;
        const prependZeroCount = options.unsigned && highBit ? 1 : 0;
        let skipZeroCount = 0;
        // Skip non-significant zeroes at the big end.
        for (let i = 0; i < bytes.length - 1 && bytes[i] === 0; i++) {
            if ((bytes[i + 1] & 0x80) === 0) {
                skipZeroCount++;
            }
        }
        const newBytes = buffer_1.Buffer.alloc(bytes.length + prependZeroCount - skipZeroCount);
        bytes.copy(newBytes, prependZeroCount, skipZeroCount, bytes.length);
        return new BigInt(newBytes);
    }
    /**
     * Converts a BigInt instance to a byte buffer.
     *
     * @param options.unsigned True if the returned bytes will be interprted as unsigned.
     * If false, a positive integer may have a leading zero to prevent it from being
     * interpreted as negative.
     * @param options.length Desired length of the resulting buffer. The value will be zero-
     * padded to fill the length. Only applies when `options.unsigned` is true.
     */
    toBytes(options) {
        options = options !== null && options !== void 0 ? options : {};
        let bytes = this.buffer;
        if (options.unsigned) {
            if (this.sign < 0) {
                throw new TypeError('Cannot format a negative BigInt as unsigned.');
            }
            else if (bytes[0] === 0 && bytes.length > 1) {
                bytes = bytes.slice(1, bytes.length);
            }
            if (options.length !== undefined) {
                if (bytes.length > options.length) {
                    throw new Error(`BigInt (${bytes.length} bytes) is too large for length ${options.length}.`);
                }
                else if (bytes.length < options.length) {
                    const padded = buffer_1.Buffer.alloc(options.length);
                    bytes.copy(padded, options.length - bytes.length);
                    return padded;
                }
            }
        }
        const newBytes = buffer_1.Buffer.alloc(bytes.length);
        bytes.copy(newBytes, 0, 0, bytes.length);
        return newBytes;
    }
    copyTo(buffer, offset = 0) {
        this.buffer.copy(buffer, offset, 0, this.buffer.length);
    }
    equals(other) {
        return other instanceof BigInt && this.buffer.equals(other.buffer);
    }
    toString(name) {
        return (0, sshData_1.formatBuffer)(this.buffer, name !== null && name !== void 0 ? name : 'BigInt');
    }
}
exports.BigInt = BigInt;
BigInt.zero = new BigInt(buffer_1.Buffer.alloc(1));
//# sourceMappingURL=bigInt.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionReconnectFailureMessage = exports.SshReconnectFailureReason = exports.SessionReconnectResponseMessage = exports.SessionReconnectRequestMessage = exports.SessionChannelRequestMessage = exports.ExtensionInfoMessage = exports.SessionRequestFailureMessage = exports.SessionRequestSuccessMessage = exports.SessionRequestMessage = exports.ServiceAcceptMessage = exports.ServiceRequestMessage = exports.DebugMessage = exports.UnimplementedMessage = exports.IgnoreMessage = exports.DisconnectMessage = exports.SshDisconnectReason = void 0;
const sshMessage_1 = __webpack_require__(50);
const connectionMessages_1 = __webpack_require__(38);
var SshDisconnectReason;
(function (SshDisconnectReason) {
    SshDisconnectReason[SshDisconnectReason["none"] = 0] = "none";
    SshDisconnectReason[SshDisconnectReason["hostNotAllowedToConnect"] = 1] = "hostNotAllowedToConnect";
    SshDisconnectReason[SshDisconnectReason["protocolError"] = 2] = "protocolError";
    SshDisconnectReason[SshDisconnectReason["keyExchangeFailed"] = 3] = "keyExchangeFailed";
    SshDisconnectReason[SshDisconnectReason["reserved"] = 4] = "reserved";
    SshDisconnectReason[SshDisconnectReason["macError"] = 5] = "macError";
    SshDisconnectReason[SshDisconnectReason["compressionError"] = 6] = "compressionError";
    SshDisconnectReason[SshDisconnectReason["serviceNotAvailable"] = 7] = "serviceNotAvailable";
    SshDisconnectReason[SshDisconnectReason["protocolVersionNotSupported"] = 8] = "protocolVersionNotSupported";
    SshDisconnectReason[SshDisconnectReason["hostKeyNotVerifiable"] = 9] = "hostKeyNotVerifiable";
    SshDisconnectReason[SshDisconnectReason["connectionLost"] = 10] = "connectionLost";
    SshDisconnectReason[SshDisconnectReason["byApplication"] = 11] = "byApplication";
    SshDisconnectReason[SshDisconnectReason["tooManyConnections"] = 12] = "tooManyConnections";
    SshDisconnectReason[SshDisconnectReason["authCancelledByUser"] = 13] = "authCancelledByUser";
    SshDisconnectReason[SshDisconnectReason["noMoreAuthMethodsAvailable"] = 14] = "noMoreAuthMethodsAvailable";
    SshDisconnectReason[SshDisconnectReason["illegalUserName"] = 15] = "illegalUserName";
})(SshDisconnectReason = exports.SshDisconnectReason || (exports.SshDisconnectReason = {}));
class DisconnectMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 1;
    }
    onRead(reader) {
        this.reasonCode = reader.readUInt32();
        this.description = reader.readString('utf8');
        if (reader.available >= 4) {
            this.language = reader.readString('ascii');
        }
        else {
            this.language = null;
        }
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.reasonCode, 'reason code'));
        writer.writeString(this.description || '', 'utf8');
        if (this.language) {
            writer.writeString(this.language, 'ascii');
        }
    }
}
exports.DisconnectMessage = DisconnectMessage;
class IgnoreMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 2;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.IgnoreMessage = IgnoreMessage;
class UnimplementedMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 3;
    }
    onRead(reader) {
        this.sequenceNumber = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.sequenceNumber, 'sequence number'));
    }
    toString() {
        return !!this.unimplementedMessageType
            ? `${super.toString()} (messageType=${this.unimplementedMessageType})`
            : `${super.toString()} (sequenceNumber=${this.sequenceNumber})`;
    }
}
exports.UnimplementedMessage = UnimplementedMessage;
class DebugMessage extends sshMessage_1.SshMessage {
    constructor(message) {
        super();
        this.alwaysDisplay = false;
        this.message = message;
    }
    get messageType() {
        return 4;
    }
    onRead(reader) {
        this.alwaysDisplay = reader.readBoolean();
        this.message = reader.readString('utf8');
        this.language = reader.readString('ascii');
    }
    onWrite(writer) {
        var _a, _b;
        writer.writeBoolean(this.alwaysDisplay);
        writer.writeString((_a = this.message) !== null && _a !== void 0 ? _a : '', 'utf8');
        writer.writeString((_b = this.language) !== null && _b !== void 0 ? _b : '', 'ascii');
    }
    toString() {
        return `${super.toString()}: ${this.message}`;
    }
}
exports.DebugMessage = DebugMessage;
class ServiceRequestMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 5;
    }
    onRead(reader) {
        this.serviceName = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.serviceName, 'service name'), 'ascii');
    }
}
exports.ServiceRequestMessage = ServiceRequestMessage;
class ServiceAcceptMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 6;
    }
    onRead(reader) {
        this.serviceName = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.serviceName, 'service name'), 'ascii');
    }
}
exports.ServiceAcceptMessage = ServiceAcceptMessage;
class SessionRequestMessage extends sshMessage_1.SshMessage {
    constructor(requestType, wantReply) {
        super();
        this.requestType = requestType;
        this.wantReply = wantReply !== null && wantReply !== void 0 ? wantReply : false;
    }
    get messageType() {
        return 80;
    }
    onRead(reader) {
        this.requestType = reader.readString('ascii');
        this.wantReply = reader.readBoolean();
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.requestType, 'request type'), 'ascii');
        writer.writeBoolean(this.wantReply);
    }
    toString() {
        return `${super.toString()} (requestType=${this.requestType})`;
    }
}
exports.SessionRequestMessage = SessionRequestMessage;
class SessionRequestSuccessMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 81;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.SessionRequestSuccessMessage = SessionRequestSuccessMessage;
class SessionRequestFailureMessage extends sshMessage_1.SshMessage {
    get messageType() {
        return 82;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.SessionRequestFailureMessage = SessionRequestFailureMessage;
class ExtensionInfoMessage extends sshMessage_1.SshMessage {
    constructor() {
        // https://tools.ietf.org/html/draft-ietf-curdle-ssh-ext-info-15
        super(...arguments);
        this.extensionInfo = {};
    }
    get messageType() {
        return 7;
    }
    onRead(reader) {
        const count = reader.readUInt32();
        this.extensionInfo = {};
        for (let i = 0; i < count; i++) {
            const key = reader.readString('ascii');
            const value = reader.readString('utf8');
            this.extensionInfo[key] = value;
        }
    }
    onWrite(writer) {
        const keys = Object.keys(this.extensionInfo);
        writer.writeUInt32(keys.length);
        for (let key of keys) {
            writer.writeString(key, 'ascii');
            writer.writeString(this.extensionInfo[key] || '', 'utf8');
        }
    }
    toString() {
        let extensionInfoDetails = '';
        for (const [key, value] of Object.entries(this.extensionInfo)) {
            if (extensionInfoDetails) {
                extensionInfoDetails += '; ';
            }
            extensionInfoDetails += key;
            if (value) {
                extensionInfoDetails += '=' + value;
            }
        }
        return `${super.toString()} (${extensionInfoDetails})`;
    }
}
exports.ExtensionInfoMessage = ExtensionInfoMessage;
ExtensionInfoMessage.serverIndicator = 'ext-info-c';
ExtensionInfoMessage.clientIndicator = 'ext-info-c';
class SessionChannelRequestMessage extends SessionRequestMessage {
    onRead(reader) {
        super.onRead(reader);
        this.senderChannel = reader.readUInt32();
        const request = new connectionMessages_1.ChannelRequestMessage();
        request.read(reader);
        this.request = request;
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeUInt32(this.validateField(this.senderChannel, 'sender channel'));
        this.validateField(this.request, 'request message').write(writer);
    }
}
exports.SessionChannelRequestMessage = SessionChannelRequestMessage;
class SessionReconnectRequestMessage extends SessionRequestMessage {
    onRead(reader) {
        super.onRead(reader);
        this.clientReconnectToken = reader.readBinary();
        this.lastReceivedSequenceNumber = reader.readUInt64();
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeBinary(this.validateField(this.clientReconnectToken, 'clientReconnectToken'));
        writer.writeUInt64(this.validateField(this.lastReceivedSequenceNumber, 'lastReceivedSequenceNumber'));
    }
}
exports.SessionReconnectRequestMessage = SessionReconnectRequestMessage;
class SessionReconnectResponseMessage extends SessionRequestSuccessMessage {
    onRead(reader) {
        super.onRead(reader);
        this.serverReconnectToken = reader.readBinary();
        this.lastReceivedSequenceNumber = reader.readUInt64();
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeBinary(this.validateField(this.serverReconnectToken, 'serverReconnectToken'));
        writer.writeUInt64(this.validateField(this.lastReceivedSequenceNumber, 'lastReceivedSequenceNumber'));
    }
}
exports.SessionReconnectResponseMessage = SessionReconnectResponseMessage;
var SshReconnectFailureReason;
(function (SshReconnectFailureReason) {
    /** No reason was specified. */
    SshReconnectFailureReason[SshReconnectFailureReason["none"] = 0] = "none";
    /**
     * Reconnection failed due to an unknown server-side error.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["unknownServerFailure"] = 1] = "unknownServerFailure";
    /**
     * The session ID requested by the client for reconnection was not found among
     * the server's reconnectable sessions.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["sessionNotFound"] = 2] = "sessionNotFound";
    /**
     * The reconnect token supplied by the client was invalid when checked by the server.
     * The validation ensures that the client knows a secret key negotiated in the
     * previously connected session.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["invalidClientReconnectToken"] = 3] = "invalidClientReconnectToken";
    /**
     * The server was unable to re-send dropped messages that were requested by the client.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["serverDroppedMessages"] = 4] = "serverDroppedMessages";
    /**
     * Reconnection failed due to an unknown client-side error.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["unknownClientFailure"] = 101] = "unknownClientFailure";
    /**
     * The host key supplied by the reconnected server did not match the host key from the
     * original session; the client refused to reconnect to a different host.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["differentServerHostKey"] = 102] = "differentServerHostKey";
    /**
     * The reconnect token supplied by the server was invalid when checked by the client.
     * The validation ensures that the server knows a secret key negotiated in the
     * previously connected session.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["invalidServerReconnectToken"] = 103] = "invalidServerReconnectToken";
    /**
     * The client was unable to re-send dropped messages that were requested by the server.
     */
    SshReconnectFailureReason[SshReconnectFailureReason["clientDroppedMessages"] = 104] = "clientDroppedMessages";
})(SshReconnectFailureReason = exports.SshReconnectFailureReason || (exports.SshReconnectFailureReason = {}));
class SessionReconnectFailureMessage extends SessionRequestFailureMessage {
    onRead(reader) {
        if (reader.available > 0) {
            this.reasonCode = reader.readUInt32();
            this.description = reader.readString('utf8');
            this.language = reader.readString('ascii');
        }
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.reasonCode, 'reason code'));
        writer.writeString(this.description || '', 'utf8');
        writer.writeString(this.language || 'en', 'ascii');
    }
    toString() {
        return `${super.toString} (${SshReconnectFailureReason[this.reasonCode || 0]}: ${this.description})`;
    }
}
exports.SessionReconnectFailureMessage = SessionReconnectFailureMessage;
sshMessage_1.SshMessage.index.set(1, DisconnectMessage);
sshMessage_1.SshMessage.index.set(2, IgnoreMessage);
sshMessage_1.SshMessage.index.set(3, UnimplementedMessage);
sshMessage_1.SshMessage.index.set(5, ServiceRequestMessage);
sshMessage_1.SshMessage.index.set(6, ServiceAcceptMessage);
sshMessage_1.SshMessage.index.set(7, ExtensionInfoMessage);
sshMessage_1.SshMessage.index.set(80, SessionRequestMessage);
sshMessage_1.SshMessage.index.set(81, SessionRequestSuccessMessage);
sshMessage_1.SshMessage.index.set(82, SessionRequestFailureMessage);
//# sourceMappingURL=transportMessages.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer
var Transform = __webpack_require__(35).Transform
var StringDecoder = __webpack_require__(110).StringDecoder
var inherits = __webpack_require__(2)

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BillableOwnerType;
(function (BillableOwnerType) {
    BillableOwnerType["User"] = "User";
    BillableOwnerType["Organization"] = "Organization";
})(BillableOwnerType = exports.BillableOwnerType || (exports.BillableOwnerType = {}));
var StateInfo;
(function (StateInfo) {
    StateInfo["Provisioning"] = "Provisioning";
    StateInfo["Deleted"] = "Deleted";
    StateInfo["Available"] = "Available";
    StateInfo["Unavailable"] = "Unavailable";
    StateInfo["Shutdown"] = "Shutdown";
    StateInfo["ShuttingDown"] = "ShuttingDown";
    StateInfo["Failed"] = "Failed";
    StateInfo["Starting"] = "Starting";
    StateInfo["Exporting"] = "Exporting";
    StateInfo["Queued"] = "Queued";
    StateInfo["Updating"] = "Updating";
    StateInfo["Rebuilding"] = "Rebuilding";
})(StateInfo = exports.StateInfo || (exports.StateInfo = {}));
var EnvironmentMessageCodes;
(function (EnvironmentMessageCodes) {
    EnvironmentMessageCodes[EnvironmentMessageCodes["unknown"] = 0] = "unknown";
    EnvironmentMessageCodes[EnvironmentMessageCodes["exceededQuota"] = 1] = "exceededQuota";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentNameAlreadyExists"] = 2] = "environmentNameAlreadyExists";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentDoesNotExist"] = 3] = "environmentDoesNotExist";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentNotAvailable"] = 6] = "environmentNotAvailable";
    EnvironmentMessageCodes[EnvironmentMessageCodes["environmentNotShutdown"] = 7] = "environmentNotShutdown";
    EnvironmentMessageCodes[EnvironmentMessageCodes["unableToAllocateResources"] = 8] = "unableToAllocateResources";
    EnvironmentMessageCodes[EnvironmentMessageCodes["unableToAllocateResourcesWhileStarting"] = 9] = "unableToAllocateResourcesWhileStarting";
    EnvironmentMessageCodes[EnvironmentMessageCodes["requestedAutoShutdownDelayMinutesIsInvalid"] = 10] = "requestedAutoShutdownDelayMinutesIsInvalid";
    EnvironmentMessageCodes[EnvironmentMessageCodes["unableToUpdateSku"] = 11] = "unableToUpdateSku";
    EnvironmentMessageCodes[EnvironmentMessageCodes["requestedSkuIsInvalid"] = 12] = "requestedSkuIsInvalid";
    EnvironmentMessageCodes[EnvironmentMessageCodes["heartbeatUnhealthy"] = 13] = "heartbeatUnhealthy";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCreationFailed"] = 14] = "customContainersCreationFailed";
    // CLI MESSAGES
    EnvironmentMessageCodes[EnvironmentMessageCodes["shutdownFailed"] = 1001] = "shutdownFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["cMBMutexFailure"] = 1002] = "cMBMutexFailure";
    EnvironmentMessageCodes[EnvironmentMessageCodes["cMBGeneralError"] = 1003] = "cMBGeneralError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerFailedToStartContainer"] = 1004] = "startEnvironmentHandlerFailedToStartContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerRequiredParameterMissing"] = 1005] = "startEnvironmentHandlerRequiredParameterMissing";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerKitchensinkMissing"] = 1006] = "startEnvironmentHandlerKitchensinkMissing";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerLiveshareLoginFailed"] = 1007] = "startEnvironmentHandlerLiveshareLoginFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["startEnvironmentHandlerMoreThanOneContainerFoundOnRestart"] = 1008] = "startEnvironmentHandlerMoreThanOneContainerFoundOnRestart";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersGeneralError"] = 1100] = "customContainersGeneralError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersKitchensinkCreationFailed"] = 1121] = "customContainersKitchensinkCreationFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersKitchensinkStartFailed"] = 1122] = "customContainersKitchensinkStartFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCloneFailed"] = 1151] = "customContainersCloneFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersPrivateClonetimeout"] = 1152] = "customContainersPrivateClonetimeout";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotPullImage"] = 1153] = "customContainersCouldNotPullImage";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotBuildUserImage"] = 1154] = "customContainersCouldNotBuildUserImage";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotCreateUserContainer"] = 1155] = "customContainersCouldNotCreateUserContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCouldNotRunUserContainer"] = 1156] = "customContainersCouldNotRunUserContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCLICopyFailed"] = 1157] = "customContainersCLICopyFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersDependenciesFailed"] = 1158] = "customContainersDependenciesFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersCLIStartFailed"] = 1158] = "customContainersCLIStartFailed";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersIncorrectUserID"] = 1159] = "customContainersIncorrectUserID";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeGeneralError"] = 1200] = "customContainersComposeGeneralError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeValidationError"] = 1201] = "customContainersComposeValidationError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeConfigError"] = 1202] = "customContainersComposeConfigError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersWrongServiceError"] = 1203] = "customContainersWrongServiceError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeUpError"] = 1204] = "customContainersComposeUpError";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainerInvalidDevContainer"] = 1205] = "customContainerInvalidDevContainer";
    EnvironmentMessageCodes[EnvironmentMessageCodes["customContainersComposeUnsupportedVersion"] = 1206] = "customContainersComposeUnsupportedVersion";
})(EnvironmentMessageCodes = exports.EnvironmentMessageCodes || (exports.EnvironmentMessageCodes = {}));


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getUserAgent; });
function getUserAgent() {
    if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
    }
    if (typeof process === "object" && "version" in process) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
    }
    return "<environment undetectable>";
}


//# sourceMappingURL=index.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = __webpack_require__(4).Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15), __webpack_require__(5)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(42).EventEmitter;
var inherits = __webpack_require__(349);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(107);
Stream.Writable = __webpack_require__(355);
Stream.Duplex = __webpack_require__(356);
Stream.Transform = __webpack_require__(357);
Stream.PassThrough = __webpack_require__(358);

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(81);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__(62));
util.inherits = __webpack_require__(2);
/*</replacement>*/

var Readable = __webpack_require__(180);
var Writable = __webpack_require__(109);

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const AssertionError_1 = __webpack_require__(229);
/**
 * Assert that the expression that results in `val` holds, otherwise throw
 * an `AssertionError` with the `errorMessage`. Alternatively, if an error
 * instance is passed as the `errorMessage`, throw that instead.
 */
exports.assert = (val, errorMessage) => {
    if (val !== true) {
        const error = (typeof errorMessage === 'string')
            ? new AssertionError_1.AssertionError(errorMessage)
            : errorMessage;
        throw error;
    }
};
//# sourceMappingURL=assert.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelFailureMessage = exports.ChannelSuccessMessage = exports.ChannelSignalMessage = exports.CommandRequestMessage = exports.ChannelRequestMessage = exports.ChannelRequestType = exports.ChannelCloseMessage = exports.ChannelEofMessage = exports.ChannelDataMessage = exports.ChannelWindowAdjustMessage = exports.ChannelOpenFailureMessage = exports.SshChannelOpenFailureReason = exports.ChannelOpenConfirmationMessage = exports.ChannelOpenMessage = exports.ConnectionMessage = void 0;
const sshMessage_1 = __webpack_require__(50);
const sshData_1 = __webpack_require__(16);
class ConnectionMessage extends sshMessage_1.SshMessage {
}
exports.ConnectionMessage = ConnectionMessage;
class ChannelOpenMessage extends ConnectionMessage {
    get messageType() {
        return 90;
    }
    onRead(reader) {
        this.channelType = reader.readString('ascii');
        this.senderChannel = reader.readUInt32();
        this.initialWindowSize = reader.readUInt32();
        this.maximumPacketSize = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeString(this.validateField(this.channelType, 'channel type'), 'ascii');
        writer.writeUInt32(this.validateField(this.senderChannel, 'sender channel'));
        writer.writeUInt32(this.initialWindowSize || ChannelOpenMessage.defaultInitialWindowSize);
        writer.writeUInt32(this.maximumPacketSize || ChannelOpenMessage.defaultMaximumPacketSize);
    }
}
exports.ChannelOpenMessage = ChannelOpenMessage;
ChannelOpenMessage.defaultInitialWindowSize = 1024 * 1024;
ChannelOpenMessage.defaultMaximumPacketSize = 16 * 1024;
class ChannelOpenConfirmationMessage extends ConnectionMessage {
    get messageType() {
        return 91;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.senderChannel = reader.readUInt32();
        this.initialWindowSize = reader.readUInt32();
        this.maximumPacketSize = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeUInt32(this.validateField(this.senderChannel, 'sender channel'));
        writer.writeUInt32(this.validateField(this.initialWindowSize, 'initial window size'));
        writer.writeUInt32(this.validateField(this.maximumPacketSize, 'max packet size'));
    }
    toString() {
        return `${super.toString()} (recipientChannel=${this.recipientChannel} senderChannel=${this.senderChannel})`;
    }
}
exports.ChannelOpenConfirmationMessage = ChannelOpenConfirmationMessage;
var SshChannelOpenFailureReason;
(function (SshChannelOpenFailureReason) {
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["none"] = 0] = "none";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["administrativelyProhibited"] = 1] = "administrativelyProhibited";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["connectFailed"] = 2] = "connectFailed";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["unknownChannelType"] = 3] = "unknownChannelType";
    SshChannelOpenFailureReason[SshChannelOpenFailureReason["resourceShortage"] = 4] = "resourceShortage";
})(SshChannelOpenFailureReason = exports.SshChannelOpenFailureReason || (exports.SshChannelOpenFailureReason = {}));
class ChannelOpenFailureMessage extends ConnectionMessage {
    get messageType() {
        return 92;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.reasonCode = reader.readUInt32();
        this.description = reader.readString('utf8');
        this.language = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeUInt32(this.validateField(this.reasonCode, 'reason code'));
        writer.writeString(this.description || '', 'utf8');
        writer.writeString(this.language || 'en', 'ascii');
    }
    toString() {
        return `${super.toString} (${SshChannelOpenFailureReason[this.reasonCode || 0]}: ${this.description})`;
    }
}
exports.ChannelOpenFailureMessage = ChannelOpenFailureMessage;
class ChannelWindowAdjustMessage extends ConnectionMessage {
    get messageType() {
        return 93;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.bytesToAdd = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeUInt32(this.validateField(this.bytesToAdd, 'bytes to add'));
    }
}
exports.ChannelWindowAdjustMessage = ChannelWindowAdjustMessage;
class ChannelDataMessage extends ConnectionMessage {
    get messageType() {
        return 94;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.data = reader.readBinary();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
        writer.writeBinary(this.validateField(this.data, 'data'));
    }
    toString() {
        return this.data ? (0, sshData_1.formatBuffer)(this.data, '') : `[0]`;
    }
}
exports.ChannelDataMessage = ChannelDataMessage;
class ChannelEofMessage extends ConnectionMessage {
    get messageType() {
        return 96;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelEofMessage = ChannelEofMessage;
class ChannelCloseMessage extends ConnectionMessage {
    get messageType() {
        return 97;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelCloseMessage = ChannelCloseMessage;
var ChannelRequestType;
(function (ChannelRequestType) {
    ChannelRequestType["command"] = "exec";
    ChannelRequestType["shell"] = "shell";
    ChannelRequestType["terminal"] = "pty-req";
    ChannelRequestType["signal"] = "signal";
    ChannelRequestType["exitSignal"] = "exit-signal";
    ChannelRequestType["exitStatus"] = "exit-status";
})(ChannelRequestType = exports.ChannelRequestType || (exports.ChannelRequestType = {}));
class ChannelRequestMessage extends ConnectionMessage {
    constructor(requestType, wantReply) {
        super();
        this.requestType = requestType;
        this.wantReply = wantReply !== null && wantReply !== void 0 ? wantReply : false;
    }
    get messageType() {
        return 98;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
        this.requestType = reader.readString('ascii');
        this.wantReply = reader.readBoolean();
    }
    onWrite(writer) {
        writer.writeUInt32(this.recipientChannel || 0);
        writer.writeString(this.validateField(this.requestType, 'request type'), 'ascii');
        writer.writeBoolean(this.wantReply);
    }
}
exports.ChannelRequestMessage = ChannelRequestMessage;
class CommandRequestMessage extends ChannelRequestMessage {
    constructor() {
        super();
        this.requestType = ChannelRequestType.command;
    }
    onRead(reader) {
        super.onRead(reader);
        this.command = reader.readString('utf8');
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeString(this.validateField(this.command, 'command'), 'utf8');
    }
    toString() {
        return `${super.toString()} (requestType=${this.requestType})`;
    }
}
exports.CommandRequestMessage = CommandRequestMessage;
class ChannelSignalMessage extends ChannelRequestMessage {
    constructor() {
        super();
    }
    get signal() {
        return this.signalValue;
    }
    set signal(value) {
        this.requestType = ChannelRequestType.signal;
        this.signalValue = value;
    }
    get exitSignal() {
        return this.signalValue;
    }
    set exitSignal(value) {
        this.requestType = ChannelRequestType.exitSignal;
        this.signalValue = value;
    }
    get errorMessage() {
        return this.errorMessageValue;
    }
    set errorMessage(value) {
        if (this.requestType !== ChannelRequestType.exitSignal) {
            throw new Error(`Error message property is only valid for ${ChannelRequestType.exitSignal} messages.`);
        }
        this.errorMessageValue = value;
    }
    get exitStatus() {
        return this.statusValue;
    }
    set exitStatus(value) {
        this.requestType = ChannelRequestType.exitStatus;
        this.statusValue = value;
    }
    onRead(reader) {
        super.onRead(reader);
        switch (this.requestType) {
            case ChannelRequestType.exitStatus:
                this.exitStatus = reader.readUInt32();
                break;
            case ChannelRequestType.signal:
                this.signal = reader.readString('ascii');
                break;
            case ChannelRequestType.exitSignal:
                this.exitSignal = reader.readString('ascii');
                reader.readBoolean(); // Core dumped
                this.errorMessage = reader.readString('utf8');
                reader.readString('ascii'); // Language tag
                break;
            default:
                break;
        }
    }
    onWrite(writer) {
        if (!this.requestType) {
            throw new Error('Signal message request type not set.');
        }
        this.wantReply = false;
        super.onWrite(writer);
        switch (this.requestType) {
            case ChannelRequestType.exitStatus:
                writer.writeUInt32(this.validateField(this.exitStatus, 'exit status'));
                break;
            case ChannelRequestType.signal:
                writer.writeString(this.validateField(this.signal, 'signal'), 'ascii');
                break;
            case ChannelRequestType.exitSignal:
                writer.writeString(this.validateField(this.exitSignal, 'exit signal'), 'ascii');
                writer.writeBoolean(false); // Core dumped
                writer.writeString(this.errorMessage || '', 'utf8');
                writer.writeString('', 'ascii'); // Language tag
                break;
            default:
                throw new Error(`Unknown signal message request type: ${this.requestType}`);
        }
    }
}
exports.ChannelSignalMessage = ChannelSignalMessage;
class ChannelSuccessMessage extends ConnectionMessage {
    get messageType() {
        return 99;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelSuccessMessage = ChannelSuccessMessage;
class ChannelFailureMessage extends ConnectionMessage {
    get messageType() {
        return 100;
    }
    onRead(reader) {
        this.recipientChannel = reader.readUInt32();
    }
    onWrite(writer) {
        writer.writeUInt32(this.validateField(this.recipientChannel, 'recipient channel'));
    }
}
exports.ChannelFailureMessage = ChannelFailureMessage;
sshMessage_1.SshMessage.index.set(90, ChannelOpenMessage);
sshMessage_1.SshMessage.index.set(91, ChannelOpenConfirmationMessage);
sshMessage_1.SshMessage.index.set(92, ChannelOpenFailureMessage);
sshMessage_1.SshMessage.index.set(93, ChannelWindowAdjustMessage);
sshMessage_1.SshMessage.index.set(94, ChannelDataMessage);
sshMessage_1.SshMessage.index.set(96, ChannelEofMessage);
sshMessage_1.SshMessage.index.set(97, ChannelCloseMessage);
sshMessage_1.SshMessage.index.set(98, ChannelRequestMessage);
sshMessage_1.SshMessage.index.set(99, ChannelSuccessMessage);
sshMessage_1.SshMessage.index.set(100, ChannelFailureMessage);
//# sourceMappingURL=connectionMessages.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseCompletionSource = void 0;
class PromiseCompletionSource {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    resolve(result) { }
    reject(e) { }
}
exports.PromiseCompletionSource = PromiseCompletionSource;
//# sourceMappingURL=promiseCompletionSource.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.withCancellation = exports.CancellationError = exports.CancellationTokenSource = exports.CancellationToken = void 0;
const vscode_jsonrpc_1 = __webpack_require__(6);
Object.defineProperty(exports, "CancellationToken", { enumerable: true, get: function () { return vscode_jsonrpc_1.CancellationToken; } });
Object.defineProperty(exports, "CancellationTokenSource", { enumerable: true, get: function () { return vscode_jsonrpc_1.CancellationTokenSource; } });
/**
 * Error thrown when an operation is cancelled via a CancellationToken.
 */
class CancellationError extends Error {
    constructor(message) {
        super(message || 'Operation cancelled.');
    }
}
exports.CancellationError = CancellationError;
function withCancellation(promise, cancellation) {
    if (!cancellation) {
        return promise;
    }
    return Promise.race([
        promise,
        new Promise((resolve, reject) => {
            if (cancellation.isCancellationRequested) {
                reject(new CancellationError());
            }
            else {
                cancellation.onCancellationRequested(() => {
                    reject(new CancellationError());
                });
            }
        }),
    ]);
}
exports.withCancellation = withCancellation;
//# sourceMappingURL=cancellation.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(6);
const changeEmitter = new vscode_jsonrpc_1.Emitter();
exports.onCommandContextChanged = changeEmitter.event;
const contextValues = {};
exports.setCommandContext = async (key, value) => {
    const currentValue = contextValues[key];
    if (!currentValue || currentValue !== value) {
        contextValues[key] = value;
        // Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
        const vscode = await Promise.resolve().then(() => __webpack_require__(1));
        await vscode.commands.executeCommand('setContext', key, value);
        changeEmitter.fire({ key, value });
    }
};
exports.getCommandContext = (key) => {
    return contextValues[key];
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vso_telemetry_1 = __webpack_require__(11);
class CommandError extends Error {
    constructor(parameters = {}) {
        super(parameters.message);
        this.isSuppressUserNotification = false;
        this.code = parameters.code;
        this.userMessage = parameters.userMessage;
        this.telemetryResult = parameters.telemetryResult || vso_telemetry_1.TelemetryResult.Failure;
    }
    withUserMessage(userMessage) {
        this.userMessage = userMessage;
        return this;
    }
    withSuppressUserNotification(suppress) {
        this.isSuppressUserNotification = suppress;
        return this;
    }
}
exports.CommandError = CommandError;
//# sourceMappingURL=CommandError.js.map

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base error, all errors should extened it and specify new `errorType`.
 *
 * The error has:

 *  - `errorType` - idetifies the eror type, every eror that inherits from
 *      this one, override the `errorType` with its own value.
 * - `errorCode` - error code (number) for the specific error case.
 * - `originalErrorType` - if an error with an `errorType`/`errorCode` is
 *     "wrapped" with this error, the data is reserved in the `originalErrorType`
 *     so we don't loose the original context.
 * - `stack`[optional] - error stack trace. If an error is wrapped with this
 *     error, the stack is copied over.
 */
class BaseError extends Error {
    constructor(error, errorCode) {
        super((typeof error === 'string')
            ? error
            : error === null || error === void 0 ? void 0 : error.message);
        this.errorCode = errorCode;
        this.errorType = 'BaseError';
        if (error instanceof Error) {
            this.originalError = error;
            this.stack = error.stack;
            this.originalErrorType = this.getOriginalErrorCode(error);
            this.errorCode = errorCode !== null && errorCode !== void 0 ? errorCode : error.errorCode;
        }
    }
    getOriginalErrorCode(error) {
        const { errorType = '<no-type>', errorCode = '<no-code>', } = error;
        return `[${errorType}:${errorCode}]`;
    }
}
exports.BaseError = BaseError;
;
//# sourceMappingURL=BaseError.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BaseError_1 = __webpack_require__(45);
exports.BaseError = BaseError_1.BaseError;
var ByDesignError_1 = __webpack_require__(471);
exports.ByDesignError = ByDesignError_1.ByDesignError;
var AggregateError_1 = __webpack_require__(472);
exports.AggregateError = AggregateError_1.AggregateError;
var AssertionError_1 = __webpack_require__(229);
exports.AssertionError = AssertionError_1.AssertionError;
var PromiseRaceError_1 = __webpack_require__(231);
exports.PromiseRaceError = PromiseRaceError_1.PromiseRaceError;
var CancellationError_1 = __webpack_require__(125);
exports.CancellationError = CancellationError_1.CancellationError;
var NotImplementedError_1 = __webpack_require__(473);
exports.NotImplementedError = NotImplementedError_1.NotImplementedError;
var AuthenticationError_1 = __webpack_require__(474);
exports.AuthenticationError = AuthenticationError_1.AuthenticationError;
var TimeoutCancellationError_1 = __webpack_require__(475);
exports.TimeoutCancellationError = TimeoutCancellationError_1.TimeoutCancellationError;
//# sourceMappingURL=index.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.algorithmNames = exports.SshAlgorithms = exports.Encryption = exports.ECDsa = exports.Rsa = exports.HmacAlgorithm = exports.EncryptionAlgorithm = exports.PublicKeyAlgorithm = exports.KeyExchangeAlgorithm = void 0;
const keyExchangeAlgorithm_1 = __webpack_require__(131);
Object.defineProperty(exports, "KeyExchangeAlgorithm", { enumerable: true, get: function () { return keyExchangeAlgorithm_1.KeyExchangeAlgorithm; } });
const publicKeyAlgorithm_1 = __webpack_require__(69);
Object.defineProperty(exports, "PublicKeyAlgorithm", { enumerable: true, get: function () { return publicKeyAlgorithm_1.PublicKeyAlgorithm; } });
const encryptionAlgorithm_1 = __webpack_require__(132);
Object.defineProperty(exports, "EncryptionAlgorithm", { enumerable: true, get: function () { return encryptionAlgorithm_1.EncryptionAlgorithm; } });
const hmacAlgorithm_1 = __webpack_require__(133);
Object.defineProperty(exports, "HmacAlgorithm", { enumerable: true, get: function () { return hmacAlgorithm_1.HmacAlgorithm; } });
// Swap imports to node crypto implementations when web crypto is not available.
const useWebCrypto = !!(typeof crypto === 'object' && crypto.subtle);
const webKeyExchange_1 = __webpack_require__(510);
const webRsa_1 = __webpack_require__(511);
const webECDsa_1 = __webpack_require__(512);
const webEncryption_1 = __webpack_require__(513);
const webHmac_1 = __webpack_require__(134);
const webRandom_1 = __webpack_require__(517);
// tslint:disable:variable-name
const DiffieHellman = useWebCrypto
    ? webKeyExchange_1.WebDiffieHellman
    : __webpack_require__(243).NodeDiffieHellman;
const ECDiffieHellman = useWebCrypto
    ? webKeyExchange_1.WebECDiffieHellman
    : __webpack_require__(243).NodeECDiffieHellman;
const Rsa = useWebCrypto ? webRsa_1.WebRsa : __webpack_require__(518).NodeRsa;
exports.Rsa = Rsa;
const ECDsa = useWebCrypto ? webECDsa_1.WebECDsa : __webpack_require__(534).NodeECDsa;
exports.ECDsa = ECDsa;
const Encryption = useWebCrypto
    ? webEncryption_1.WebEncryption
    : __webpack_require__(535).NodeEncryption;
exports.Encryption = Encryption;
const Hmac = useWebCrypto ? webHmac_1.WebHmac : __webpack_require__(136).NodeHmac;
const Random = useWebCrypto ? webRandom_1.WebRandom : __webpack_require__(536).NodeRandom;
class SshAlgorithms {
}
exports.SshAlgorithms = SshAlgorithms;
SshAlgorithms.keyExchange = {
    none: null,
    dhGroup14Sha256: new DiffieHellman('diffie-hellman-group14-sha256', 2048, 'SHA2-256'),
    dhGroup16Sha512: new DiffieHellman('diffie-hellman-group16-sha512', 4096, 'SHA2-512'),
    ecdhNistp256Sha256: new ECDiffieHellman('ecdh-sha2-nistp256', 256, 'SHA2-256'),
    ecdhNistp384Sha384: new ECDiffieHellman('ecdh-sha2-nistp384', 384, 'SHA2-384'),
    ecdhNistp521Sha512: new ECDiffieHellman('ecdh-sha2-nistp521', 521, 'SHA2-512'),
};
SshAlgorithms.publicKey = {
    none: null,
    rsaWithSha256: new Rsa('rsa-sha2-256', 'SHA2-256'),
    rsaWithSha512: new Rsa('rsa-sha2-512', 'SHA2-512'),
    ecdsaSha2Nistp256: new ECDsa('ecdsa-sha2-nistp256', 'SHA2-256'),
    ecdsaSha2Nistp384: new ECDsa('ecdsa-sha2-nistp384', 'SHA2-384'),
    ecdsaSha2Nistp521: new ECDsa('ecdsa-sha2-nistp521', 'SHA2-512'),
};
SshAlgorithms.encryption = {
    none: null,
    ////aes256Cbc: new Encryption('aes256-cbc', 'AES', 'CBC', 256) },
    aes256Ctr: new Encryption('aes256-ctr', 'AES', 'CTR', 256),
    aes256Gcm: new Encryption('aes256-gcm@openssh.com', 'AES', 'GCM', 256),
};
SshAlgorithms.hmac = {
    none: null,
    hmacSha256: new Hmac('hmac-sha2-256', 'SHA2-256'),
    hmacSha512: new Hmac('hmac-sha2-512', 'SHA2-512'),
    hmacSha256Etm: new Hmac('hmac-sha2-256-etm@openssh.com', 'SHA2-256', true),
    hmacSha512Etm: new Hmac('hmac-sha2-512-etm@openssh.com', 'SHA2-512', true),
};
SshAlgorithms.compression = {
    none: null,
};
SshAlgorithms.random = new Random();
function algorithmNames(list) {
    return list.map((a) => (a ? a.name : 'none'));
}
exports.algorithmNames = algorithmNames;
//# sourceMappingURL=sshAlgorithms.js.map

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
    pkcs1: __webpack_require__(521),
    pkcs1_oaep: __webpack_require__(522),
    pss: __webpack_require__(523),

    /**
     * Check if scheme has padding methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isEncryption: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isEncryption;
    },

    /**
     * Check if scheme has sign/verify methods
     * @param scheme {string}
     * @returns {Boolean}
     */
    isSignature: function (scheme) {
        return module.exports[scheme] && module.exports[scheme].isSignature;
    }
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.findService = exports.serviceActivation = void 0;
/**
 * Decorator applied to suclasses of `SshService` that declares how the service gets activated.
 */
function serviceActivation(activation) {
    return (constructor) => {
        if (!constructor.activations) {
            constructor.activations = [];
        }
        constructor.activations.push(activation);
    };
}
exports.serviceActivation = serviceActivation;
/**
 * Locates a service type in configuration, using a predicate to check service activation
 * attributes.
 *
 * @param serviceConfigs Service configuration dictionary from `SshSessionConfiguration.services`.
 * @param predicate Function to test whether a service activation attribute matches some condition.
 * @returns Service type (constructor), or null if no service type satisfies the predicate.
 */
function findService(serviceConfigs, predicate) {
    for (let serviceType of serviceConfigs.keys()) {
        const activations = serviceType.activations;
        let foundActivation = false;
        for (let activation of activations) {
            foundActivation = true;
            if (predicate(activation)) {
                return serviceType;
            }
        }
        if (!foundActivation) {
            throw new Error(`SSH service type '${serviceType.name}' must have one or more ` +
                `'serviceActivation' decorators.`);
        }
    }
    return null;
}
exports.findService = findService;
//# sourceMappingURL=serviceActivation.js.map

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshMessage = void 0;
const buffer_1 = __webpack_require__(0);
const sshData_1 = __webpack_require__(16);
class SshMessage {
    get messageType() {
        return 0;
    }
    toBuffer() {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(16));
        this.write(writer);
        return writer.toBuffer();
    }
    read(reader) {
        this.rawBytes = reader.buffer;
        const number = reader.readByte();
        if (number !== this.messageType) {
            throw new Error(`Message type ${number} is not valid.`);
        }
        this.onRead(reader);
    }
    write(writer) {
        writer.writeByte(this.messageType);
        this.onWrite(writer);
    }
    onRead(reader) {
        throw new Error('Not supported.');
    }
    onWrite(writer) {
        throw new Error('Not supported.');
    }
    validateField(value, name) {
        if (typeof value === 'undefined') {
            throw new Error(`${this.constructor.name} ${name} is required.`);
        }
        return value;
    }
    toString() {
        return this.constructor.name;
    }
    static create(messageType, data) {
        const messageClass = SshMessage.index.get(messageType);
        if (messageClass) {
            const message = new messageClass();
            message.read(new sshData_1.SshDataReader(data));
            return message;
        }
        else {
            return null;
        }
    }
    convertTo(otherMessage, copy = false) {
        const reader = new sshData_1.SshDataReader(copy ? buffer_1.Buffer.from(this.rawBytes) : this.rawBytes);
        otherMessage.read(reader);
        return otherMessage;
    }
}
exports.SshMessage = SshMessage;
SshMessage.index = new Map();
//# sourceMappingURL=sshMessage.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __webpack_require__(77);
const path_1 = __webpack_require__(30);
const fs_1 = __webpack_require__(26);
const stripJsonComments = __webpack_require__(569);
const vscode_command_framework_1 = __webpack_require__(3);
const utils_1 = __webpack_require__(151);
const parseVscsTarget_1 = __webpack_require__(570);
const USER_SETTINGS_FILE = 'codespaces-settings.json';
const USER_SETTINGS_FILE_OVERRIDE = 'CODESPACES_SETTINGS_FILE';
const internalConfig = {
    devExtension: false,
    clientLogsQuantity: 5,
    experimentalFeatures: {
        enableEnsureAgentIsRunning: false,
        useHubAgent: true,
        windowsElevatedPorts: false,
    },
    logTelemetry: false,
    baseUrl: 'https://api.github.com',
    serviceUri: 'https://prod.liveshare.vsengsaas.visualstudio.com/api/v1.2',
};
let internalConfigOverride;
function getInternalConfig(key) {
    if (!internalConfigOverride) {
        internalConfigOverride = loadSystemConfig();
    }
    const environmentOverrides = getEnvironmentOverrides();
    if (environmentOverrides[key] != null) {
        return environmentOverrides[key];
    }
    if (internalConfigOverride[key] != null) {
        return internalConfigOverride[key];
    }
    return internalConfig[key];
}
exports.getInternalConfig = getInternalConfig;
function getIsInternalUser() {
    return !!getInternalConfig('isInternal');
}
exports.getIsInternalUser = getIsInternalUser;
function getEnvironmentOverrides() {
    const configuration = {};
    const name = process.env.CODESPACE_NAME;
    if (name) {
        configuration.codespaceName = name;
    }
    const baseUrl = process.env.GITHUB_API_URL;
    if (baseUrl) {
        configuration.baseUrl = baseUrl;
    }
    return configuration;
}
exports.getEnvironmentOverrides = getEnvironmentOverrides;
function getFeatureFlag(key) {
    const featureConfig = getInternalConfig('experimentalFeatures');
    return featureConfig[key];
}
exports.getFeatureFlag = getFeatureFlag;
function loadSystemConfig() {
    if (utils_1.isRunningInWebWorker) {
        // Cannot read from the user's home directory from a web extension. Bypass the local config file option in web.
        return {};
    }
    try {
        let systemOverridePath = process.env[USER_SETTINGS_FILE_OVERRIDE];
        if (systemOverridePath === undefined) {
            systemOverridePath = path_1.join(os_1.homedir(), USER_SETTINGS_FILE);
        }
        // We are allowing comments in global system settings for cloudEnv extensions.
        const configText = fs_1.readFileSync(systemOverridePath, { encoding: 'utf-8' });
        const json = JSON.parse(stripJsonComments(configText));
        // If not `object` or `null`, return the default config, otherwise get TGenericObject
        if (!json || typeof json !== 'object' || json === null) {
            return {};
        }
        const jsonObject = json;
        // Parse VSCS Target and Region for valid values
        return Object.assign({}, internalConfig, jsonObject, {
            vscsTarget: parseVscsTarget_1.parseVscsTarget(jsonObject.vscsTarget),
        }, {
            experimentalFeatures: Object.assign({}, internalConfig.experimentalFeatures, jsonObject.experimentalFeatures),
        });
    }
    catch (e) {
        if (e.code !== 'ENOENT') {
            vscode_command_framework_1.traceSource.error('failed to load system config', e);
        }
        return {};
    }
}
exports.loadSystemConfig = loadSystemConfig;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const axios_1 = __webpack_require__(146);
const path = __webpack_require__(572);
const cp = __webpack_require__(26);
const child_process_1 = __webpack_require__(26);
const constants_1 = __webpack_require__(149);
const commandContext_1 = __webpack_require__(41);
const IGitHubApi_1 = __webpack_require__(74);
const IEnvironmentsApi_1 = __webpack_require__(573);
class Util {
    static get Instance() {
        if (!Util.singleton) {
            Util.singleton = new Util();
        }
        return Util.singleton;
    }
    /**
     * Helper function to get connection uri for vscode-remote
     */
    getEnvironmentConnectionUri(codespaceName, sessionPath) {
        const forwardSlashPath = sessionPath.replace(/\\/g, '/').replace(/^\//, '');
        return `vscode-remote://codespaces+${codespaceName}/${forwardSlashPath}`;
    }
    /**
     * Causes a delay.
     * @param duration
     */
    delay(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    async waitIfUITestRunning() {
        if (this.isRunningIntegrationTest()) {
            /* prettier-ignore */
            await new Promise((resolve) => setTimeout((resolve), 5000));
        }
    }
    /**
     * checking for a valid & public GIT repo.
     */
    async isPublicGitRepo(value) {
        try {
            await axios_1.default.head(value.toLocaleLowerCase());
            return true;
        }
        catch (error) {
            if (error && error.response && error.response.status === 404) {
                return false;
            }
            throw new Error('Could not fetch information for this repo.');
        }
    }
    /**
     *
     * @param key attempts to get the "git config" for the specified key in the global namespace
     * @returns value if successful, empty string otherwise
     */
    getGitConfig(key) {
        try {
            const result = child_process_1.spawnSync('git', ['config', '--global', key]);
            if (result.error) {
                return '';
            }
            else if (result.stdout) {
                return result.stdout.toString().trim();
            }
            else {
                return '';
            }
        }
        catch (_a) {
            return '';
        }
    }
    exec(command, options = {}) {
        return new Promise((resolve, reject) => {
            const { stdin, exitOnStdout } = options;
            const child = cp.exec(command, options, (error, stdout, stderr) => {
                (error ? reject : resolve)({ error, stdout, stderr });
            });
            if (stdin) {
                child.stdin.write(stdin, (err) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    child.stdin.end((error) => {
                        if (error) {
                            reject(error);
                        }
                    });
                });
            }
            if (exitOnStdout) {
                child.stdout.on('data', (stdout) => {
                    if (exitOnStdout(stdout)) {
                        resolve({ stdout, error: null, stderr: '' });
                    }
                });
            }
        });
    }
    /**
     * Get VSCS Service endpoint base URL.
     */
    getServiceEndpointBaseUrl(codespace) {
        var _a;
        const baseUrl = (_a = codespace === null || codespace === void 0 ? void 0 : codespace.vscs_target_url) !== null && _a !== void 0 ? _a : constants_1.VSCS_PROD_SERVICE_URL;
        return new URL(baseUrl);
    }
    /**
     * Get VSCS Service endpoint URL.
     */
    getServiceApiUrl(endpoint, codespace) {
        const baseUrl = this.getServiceEndpointBaseUrl(codespace);
        const apiVersionRoute = '/api/v1';
        // use the `path.posix` to prevent path join issues on Windows
        baseUrl.pathname = path.posix.join(baseUrl.pathname, apiVersionRoute, endpoint).replace(/\/+(\s+)?$/gim, '');
        return baseUrl.toString();
    }
    /**
     * Get LiveShare endpoint URL.
     */
    getLiveShareBaseEndpointUrl(codespace) {
        var _a;
        const url = (_a = codespace === null || codespace === void 0 ? void 0 : codespace.connection.serviceUri) !== null && _a !== void 0 ? _a : constants_1.LIVESHARE_PROD_URL;
        return new URL(url);
    }
    formatDisplayStringForTarget(message, target) {
        if (!target || target === IGitHubApi_1.VscsTarget.Production) {
            return message;
        }
        if (target === IGitHubApi_1.VscsTarget.Ppe) {
            return message + ' ✨';
        }
        return message + ' 🚧';
    }
    isRunningIntegrationTest() {
        return !!(process.env.VSONLINE_TEST_MODE === constants_1.VSONLINE_INTEGRATION_TEST);
    }
    getRemoteURI(filePath) {
        const isRunningInWeb = commandContext_1.getCommandContext("codespaces:running-in-web" /* IsRunningInWeb */);
        return isRunningInWeb ? filePath : `vscode-remote://${filePath}`;
    }
    /*
     ** This function would sort the codespaces based on the last time they were used.
     ** last used codespace should be on top.
     */
    sortedCodespacesList(codespaces) {
        return codespaces.sort((first, second) => {
            if (first.last_used_at === undefined || second.last_used_at === undefined) {
                return 1;
            }
            if (new Date(first.last_used_at) < new Date(second.last_used_at)) {
                return 1;
            }
            else if (first.last_used_at === second.last_used_at) {
                return 0;
            }
            else {
                return -1;
            }
        });
    }
    getMachineTypeDescription(prebuildAvailability) {
        switch (prebuildAvailability) {
            case IEnvironmentsApi_1.PrebuildAvailability.blob:
            case IEnvironmentsApi_1.PrebuildAvailability.pool:
                return `$(zap)Prebuild ready`;
            default:
                return undefined;
        }
    }
}
exports.Util = Util;
const Instance = Util.Instance;
exports.Instance = Instance;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const environmentInfo_1 = __webpack_require__(32);
const environments_1 = __webpack_require__(611);
const trace_1 = __webpack_require__(612);
const { Available, Provisioning, Shutdown, ShuttingDown, Unavailable, Starting, Exporting, Queued, Rebuilding, } = environmentInfo_1.StateInfo;
/**
 * @param options the options provided to the command
 * @param quickPick If set, user will be prompted to choose from a list of environments
 * @param quickPick.selectMsg Message to display for choosing the environment
 * @param quickPick.filter An optional filter based on available environment commands
 * @param quickPick.fallback Invoked if there are no environments that pass the filter
 */
async function getCodespaceFromCommandOptions(options, quickPick) {
    if (options.name) {
        // If the name is provided, no need to query the whole list. Just lookup directly by name.
        return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsByName(options.name);
    }
    let environmentId = options.id || options.environmentId;
    if (environmentId) {
        let codespaces = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
        let codespace = codespaces.find((e) => e.environment_id === environmentId);
        if (!codespace) {
            codespace = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsById(environmentId);
            // If the valid codespace is missing in cache, it means that cached list was stale.
            // This could happen if connecting via the protocol handler while
            // VS Code was already running.
            if (codespace) {
                // Refresh list asynchronously. 
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.updateCodespacesDetails().catch((e) => {
                    const trace = trace_1.mainTrace.createChild('EnvironmentCommand');
                    trace.error(`Updating codespace details failed. ${JSON.stringify(e)}`);
                });
            }
        }
        else if (options.needConnectionDetails) {
            // We have the codespace metadata cached, but the caller requested the connection details,
            // so we need to fetch the details and return those
            return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsById(environmentId);
        }
        return codespace;
    }
    if (quickPick === undefined) {
        return undefined;
    }
    const selection = await environments_1.promptForEnvironment(quickPick.dependencies, {
        quickPickPrompt: quickPick.selectMsg,
        filter: (x) => quickPick.filter === undefined || quickPick.filter(getAvailableCommands(x)),
        onNoAvailableEnvironments: quickPick.fallback,
    });
    // The list result from the quickpick does not include connection info. Check for this case and
    // query connection info if it's required.
    if (selection && options.needConnectionDetails) {
        return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsByName(selection.name);
    }
    return selection;
}
exports.getCodespaceFromCommandOptions = getCodespaceFromCommandOptions;
/**
 * @param options the options provided to the command
 * @param quickPick If set, user will be prompted to choose from a list of environments
 * @param quickPick.selectMsg Message to display for choosing the environment
 * @param quickPick.filter An optional filter based on available environment commands
 * @param quickPick.fallback Invoked if there are no environments that pass the filter
 */
async function getCodespaceDetailsFromCommandOptions(options, quickPick) {
    options.needConnectionDetails = true;
    const result = await getCodespaceFromCommandOptions(options, quickPick);
    return result;
}
exports.getCodespaceDetailsFromCommandOptions = getCodespaceDetailsFromCommandOptions;
function getAvailableCommands(codespace) {
    let attributes = {};
    if (!codespace) {
        return attributes;
    }
    const connectedEnvironment = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
    const connected = connectedEnvironment && codespace.environment_id === connectedEnvironment.environment_id;
    attributes = {
        connectToEnabled: !connected && (codespace.state === Available ||
            codespace.state === Shutdown ||
            codespace.state === Starting ||
            codespace.state === Provisioning ||
            codespace.state === Queued ||
            codespace.state === ShuttingDown),
        createDevContainerEnabled: connected,
        deleteEnabled: !connected,
        disconnectFromEnabled: connected,
        exportEnabled: !connected &&
            (codespace.state === Available ||
                codespace.state === ShuttingDown ||
                codespace.state === Shutdown ||
                codespace.state === Starting ||
                codespace.state === Queued ||
                codespace.state === Unavailable),
        openInBrowserEnabled: codespace.state === Available ||
            codespace.state === Shutdown ||
            codespace.state === Provisioning ||
            codespace.state === Starting ||
            codespace.state === Queued ||
            codespace.state === Rebuilding,
        openInNewWindowEnabled: !connected && (codespace.state === Available || codespace.state === Shutdown),
        shutdownEnabled: codespace.state === Available ||
            codespace.state === ShuttingDown ||
            codespace.state === Starting ||
            codespace.state === Exporting ||
            codespace.state === Unavailable ||
            codespace.state === Queued ||
            codespace.state === Rebuilding,
        viewCreationLogEnabled: connected
    };
    return attributes;
}
exports.getAvailableCommands = getAvailableCommands;


/***/ }),
/* 54 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const throwIfNotInitialized_1 = __webpack_require__(99);
exports.setExtensionContext = (context) => {
    exports.extensionContext = context;
};
exports.getExtensionContext = () => {
    throwIfNotInitialized_1.throwNotInitialized(exports.extensionContext);
    return exports.extensionContext;
};
//# sourceMappingURL=ExtentionContext.js.map

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
exports.traceSource = new vso_logging_1.TraceSource('Client');
//# sourceMappingURL=traceSource.js.map

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The severity level of a log message.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 1] = "Trace";
    LogLevel[LogLevel["Debug"] = 2] = "Debug";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Warning"] = 4] = "Warning";
    LogLevel[LogLevel["Error"] = 5] = "Error";
    LogLevel[LogLevel["Critical"] = 6] = "Critical";
    LogLevel[LogLevel["Off"] = 7] = "Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
;
//# sourceMappingURL=LogLevel.js.map

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const dateformat = __webpack_require__(314);
const path = __webpack_require__(30);
const Privacy_1 = __webpack_require__(169);
const LoggerSettings_1 = __webpack_require__(170);
const LogLevel_1 = __webpack_require__(57);
const LogValueType_1 = __webpack_require__(101);
const utils_1 = __webpack_require__(171);
const renderObjectToString = (object) => {
    if (typeof object === undefined) {
        return '<undefined>';
    }
    if (typeof object === null) {
        return '<null>';
    }
    if (typeof object === 'string') {
        return `"${object}"`;
    }
    if (typeof object === 'number') {
        return `#${object}`;
    }
    if (typeof object === 'boolean') {
        return `${object}`;
    }
    if (object instanceof Symbol) {
        return object.toString();
    }
    if (object instanceof Error) {
        return utils_1.errorToString(object);
    }
    try {
        return TraceFormat.stringify(object);
    }
    catch (_a) {
        try {
            return object.toString();
        }
        catch (e) {
            return '<unknown type>';
        }
    }
};
class TraceFormat {
    static formatDate(time, mask) {
        return dateformat(time, mask || 'yyyy-mm-dd HH:MM:ss.l ', /*utc*/ true);
    }
    static formatEvent(time, source, logLevel, id, message, ...args) {
        let eventTypeChar;
        switch (logLevel) {
            case LogLevel_1.LogLevel.Critical:
                eventTypeChar = 'C';
                break;
            case LogLevel_1.LogLevel.Error:
                eventTypeChar = 'E';
                break;
            case LogLevel_1.LogLevel.Warning:
                eventTypeChar = 'W';
                break;
            case LogLevel_1.LogLevel.Info:
                eventTypeChar = 'I';
                break;
            case LogLevel_1.LogLevel.Debug:
                eventTypeChar = 'V';
                break;
            default:
                eventTypeChar = '?';
                break;
        }
        const dateString = time === null ? '' : TraceFormat.formatDate(time);
        if (message.length > TraceFormat.maxMessageLength) {
            message = message.substr(0, TraceFormat.maxMessageLength) + '...';
        }
        let line;
        if (id !== 0) {
            line = `[${dateString}${source} ${eventTypeChar}] (${id}) ${message}`;
        }
        else {
            line = `[${dateString}${source} ${eventTypeChar}] ${message}`;
        }
        const renderedObjects = args
            .map(renderObjectToString)
            .map((str, i) => {
            return `> object #${i}: ${str}`;
        });
        line += renderedObjects.join('\n');
        return line;
    }
    static parseEventId(formattedMessage) {
        let m = formattedMessage.match(/\] \(([0-9]+)\)/);
        return m ? parseInt(m[1], 10) : 0;
    }
    static formatPath(value) {
        if (!value) {
            return '<null>';
        }
        else if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return value;
        }
        // Obfuscate the directory and file names, but preserve the extension
        // and whether it's an absolute or relative path.
        const directoryHash = Privacy_1.Privacy.getShortHash(path.dirname(value));
        const extension = path.extname(value);
        const fileHash = Privacy_1.Privacy.getShortHash(path.basename(value, extension));
        const slashIndex = value.replace('\\', '/').indexOf('/');
        if (slashIndex === 2 && value[1] === ':') {
            // Windows style absolute path
            return `<?:${value[2]}${directoryHash}${value[2]}${fileHash}${extension}>`;
        }
        else if (slashIndex === 0) {
            // Unix style absolute path
            return `<${value[0]}${directoryHash}${value[0]}${fileHash}${extension}>`;
        }
        else if (slashIndex > 0) {
            // Relative path
            return `<${directoryHash}${value[slashIndex]}${fileHash}${extension}>`;
        }
        else {
            // Simple file name
            return `<${fileHash}${extension}>`;
        }
    }
    static formatEmail(value) {
        if (!value) {
            return '<null>';
        }
        else if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return value;
        }
        const emailHash = Privacy_1.Privacy.getShortHash(value);
        return `<${emailHash.substr(0, 4)}@${emailHash.substr(4)}>`;
    }
    static formatText(value) {
        if (!value) {
            return '<null>';
        }
        else if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return value;
        }
        const valueHash = Privacy_1.Privacy.getShortHash(value);
        return `<${value.length}:${valueHash}>`;
    }
    static stringify(value) {
        if (LoggerSettings_1.LoggerSettings.disableObfuscation) {
            return JSON.stringify(value, null, 2);
        }
        return JSON.stringify(value, (key, value) => {
            if (value instanceof Error) {
                return utils_1.errorToString(value);
            }
            const logValueType = LoggerSettings_1.LoggerSettings.obfuscateProperties[key];
            if (logValueType) {
                switch (logValueType) {
                    case LogValueType_1.LogValueType.Text:
                        return TraceFormat.formatText(value);
                    case LogValueType_1.LogValueType.Email:
                        return TraceFormat.formatEmail(value);
                    case LogValueType_1.LogValueType.Path:
                        return TraceFormat.formatPath(value);
                }
            }
            return value;
        }, 2);
    }
}
exports.TraceFormat = TraceFormat;
TraceFormat.maxMessageLength = 5120;
//# sourceMappingURL=TraceFormat.js.map

/***/ }),
/* 59 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(2)
var MD5 = __webpack_require__(106)
var RIPEMD160 = __webpack_require__(111)
var sha = __webpack_require__(112)
var Base = __webpack_require__(31)

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var assert = __webpack_require__(19);

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;

asn1.bignum = __webpack_require__(9);

asn1.define = __webpack_require__(406).define;
asn1.base = __webpack_require__(66);
asn1.constants = __webpack_require__(210);
asn1.decoders = __webpack_require__(411);
asn1.encoders = __webpack_require__(413);


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;

base.Reporter = __webpack_require__(408).Reporter;
base.DecoderBuffer = __webpack_require__(209).DecoderBuffer;
base.EncoderBuffer = __webpack_require__(209).EncoderBuffer;
base.Node = __webpack_require__(409);


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class BrowserFileAccess {
}
exports.fileAccess = new BrowserFileAccess();


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshSessionConfiguration = exports.SshProtocolExtensionNames = void 0;
const sshAlgorithms_1 = __webpack_require__(47);
const keyExchangeService_1 = __webpack_require__(247);
const connectionService_1 = __webpack_require__(73);
const authenticationService_1 = __webpack_require__(144);
var SshProtocolExtensionNames;
(function (SshProtocolExtensionNames) {
    /**
     * Lists host key signature algorithms enabled by the sender.
     *
     * This is a "standard" protocol extension supported by most SSH implementations.
     */
    SshProtocolExtensionNames["serverSignatureAlgorithms"] = "server-sig-algs";
    /**
     * An optimization that enables sending an initial channel request without
     * waiting for a channel open confirmation message.
     */
    SshProtocolExtensionNames["openChannelRequest"] = "open-channel-request@microsoft.com";
    /**
     * Enables reconnecting to a session that was recently disconnected.
     */
    SshProtocolExtensionNames["sessionReconnect"] = "session-reconnect@microsoft.com";
    /**
     * Enables continual latency measurements between client and server.
     *
     * This extension requires that the reconnect extension is also enabled, because
     * it leverages some of the session history info for reconnect to compute latency.
     */
    SshProtocolExtensionNames["sessionLatency"] = "session-latency@microsoft.com";
})(SshProtocolExtensionNames = exports.SshProtocolExtensionNames || (exports.SshProtocolExtensionNames = {}));
/**
 * Specifies the sets of algorithms and other configuration for an SSH session.
 *
 * Each collection of algorithms is in order of preference. Server and client
 * negotiate the most-preferred algorithm that is supported by both.
 */
class SshSessionConfiguration {
    constructor(useSecurity = true) {
        /**
         * Gets the protocol extensions that are enabled for the session.
         */
        this.protocolExtensions = [];
        /**
         * Gets a dictionary that maps from service types to service configuration objects.
         *
         * Service types must extend the `SshService` abstract class.
         *
         * The service configuration object is passed to the service constructor upon activation.
         */
        this.services = new Map();
        /**
         * Gets the collection of algorithms that are enabled for key exchange.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         *
         * If this collection includes `null`, and if negotiation selects it, then the session is
         * allowed to skip key exchange and connect with no security of any kind: No key exchange,
         * no authentication, no encryption, no HMAC, and no compression.
         */
        this.keyExchangeAlgorithms = [];
        /**
         * Gets the collection of algorithms that are enabled for server (host) and client
         * public-key authentication.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.publicKeyAlgorithms = [];
        /*
         * Gets the collection of algorithms that are enabled for encryption.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.encryptionAlgorithms = [];
        /**
         * Gets the collection of algorithms that are enabled for message integrity (HMAC).
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.hmacAlgorithms = [];
        /**
         * Gets the collection of algorithms that are enabled for message compression.
         *
         * Client and server sides negotiate which of these algorithms will be used.
         */
        this.compressionAlgorithms = [];
        /**
         * Gets or sets the number of times the server will allow a client to attempt to
         * authenticate.
         *
         * The default value is 5.
         *
         * This setting applies only to server sessions. If the client has failed to authenticate
         * after the maximum number of atttempts, the server will close the session.
         *
         * The SSH protocol allows a client to make multiple attempts to authenticate with
         * the server, e.g. to find which public key algorithm a server will support, or to
         * retry a mis-typed password. This maximum prevents unlimited retries, which would
         * make it easier to "guess" a password.
         *
         * In certain applications the server may only support a single authentication method
         * (which is not a typed password). Then it could be appropriate to set this value to 1.
         */
        this.maxClientAuthenticationAttempts = 5;
        /**
         * Gets or sets whether the client sends a key-exchange "guess" message before receiving
         * the server's key-exchange algorithm preferences, slightly reducing the time to connect.
         *
         * This setting only applies to client sessions. (The server always supports the option when
         * used by a client.)
         *
         * The "guess" mechanism is somewhat ambiguously defined in the SSH protocol spec, and as
         * a result is not implemented or incorrectly implemented by some server implementations,
         * including older versions of this library. Therefore it is disabled in the default
         * configuration, and should only be enabled when connecting to a known-good server.
         */
        this.enableKeyExchangeGuess = false;
        /* @internal */
        this.keyRotationThreshold = 512 * 1024 * 1024; // 0.5 GiB;
        this.protocolExtensions.push(SshProtocolExtensionNames.serverSignatureAlgorithms);
        this.protocolExtensions.push(SshProtocolExtensionNames.openChannelRequest);
        this.services.set(keyExchangeService_1.KeyExchangeService, null);
        this.services.set(connectionService_1.ConnectionService, null);
        this.services.set(authenticationService_1.AuthenticationService, null);
        if (useSecurity) {
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.ecdhNistp384Sha384);
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.ecdhNistp256Sha256);
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.dhGroup16Sha512);
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.dhGroup14Sha256);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.rsaWithSha512);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.rsaWithSha256);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.ecdsaSha2Nistp384);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.ecdsaSha2Nistp256);
            ////this.encryptionAlgorithms.push(SshAlgorithms.encryption.aes256Cbc);
            this.encryptionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.encryption.aes256Gcm);
            this.encryptionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.encryption.aes256Ctr);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha512Etm);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha256Etm);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha512);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.hmacSha256);
        }
        else {
            this.keyExchangeAlgorithms.push(sshAlgorithms_1.SshAlgorithms.keyExchange.none);
            this.publicKeyAlgorithms.push(sshAlgorithms_1.SshAlgorithms.publicKey.none);
            this.encryptionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.encryption.none);
            this.hmacAlgorithms.push(sshAlgorithms_1.SshAlgorithms.hmac.none);
        }
        this.compressionAlgorithms.push(sshAlgorithms_1.SshAlgorithms.compression.none);
    }
    /**
     * Adds a service to the configuration.
     */
    addService(serviceType, serviceConfig) {
        if (this.services.has(serviceType)) {
            throw new Error('Duplicate service entry.');
        }
        this.services.set(serviceType, serviceConfig);
    }
    getKeyExchangeAlgorithm(name) {
        return this.getAlgorithm(name, this.keyExchangeAlgorithms);
    }
    getPublicKeyAlgorithm(name) {
        return this.getAlgorithm(name, this.publicKeyAlgorithms);
    }
    getEncryptionAlgorithm(name) {
        return this.getAlgorithm(name, this.encryptionAlgorithms);
    }
    getHmacAlgorithm(name) {
        return this.getAlgorithm(name, this.hmacAlgorithms);
    }
    getCompressionAlgorithm(name) {
        return this.getAlgorithm(name, this.compressionAlgorithms);
    }
    getAlgorithm(name, collection) {
        const algorithm = collection.find((a) => (a ? a.name === name : false));
        if (!algorithm) {
            if (name === 'none') {
                return null;
            }
            throw new Error('Algorithm not found: ' + name);
        }
        return algorithm;
    }
}
exports.SshSessionConfiguration = SshSessionConfiguration;
//# sourceMappingURL=sshSessionConfiguration.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicKeyAlgorithm = void 0;
const buffer_1 = __webpack_require__(0);
const sshData_1 = __webpack_require__(16);
class PublicKeyAlgorithm {
    constructor(name, keyAlgorithmName, hashAlgorithmName) {
        this.name = name;
        this.keyAlgorithmName = keyAlgorithmName;
        this.hashAlgorithmName = hashAlgorithmName;
    }
    readSignatureData(signatureData) {
        const reader = new sshData_1.SshDataReader(signatureData);
        const algorithmName = reader.readString('ascii');
        if (algorithmName !== this.name) {
            throw new Error('Mismatched public key algorithm: ' +
                `got '${algorithmName}', expected '${this.name}'.`);
        }
        const signature = reader.readBinary();
        return signature;
    }
    createSignatureData(signature) {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(this.name.length + signature.length + 20));
        writer.writeString(this.name, 'ascii');
        writer.writeBinary(signature);
        return writer.toBuffer();
    }
}
exports.PublicKeyAlgorithm = PublicKeyAlgorithm;
//# sourceMappingURL=publicKeyAlgorithm.js.map

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * Basic JavaScript BN library - subset useful for RSA encryption.
 * 
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

/*
 * Added Node.js Buffers support
 * 2014 rzcoder
 */

var crypt = __webpack_require__(10);
var _ = __webpack_require__(21)._;

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary & 0xffffff) == 0xefcafe);

// (public) Constructor
function BigInteger(a, b) {
    if (a != null) {
        if ("number" == typeof a) {
            this.fromNumber(a, b);
        } else if (Buffer.isBuffer(a)) {
            this.fromBuffer(a);
        } else if (b == null && "string" != typeof a) {
            this.fromByteArray(a);
        } else {
            this.fromString(a, b);
        }
    }
}

// return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
}

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
    while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
    }
    return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff, xh = x >> 15;
    while (--n >= 0) {
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
    }
    return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}

// We need to select the fastest one that works in this environment. 
//if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
//	BigInteger.prototype.am = am2;
//	dbits = 30;
//} else if (j_lm && (navigator.appName != "Netscape")) {
//	BigInteger.prototype.am = am1;
//	dbits = 26;
//} else { // Mozilla/Netscape seems to prefer am3
//	BigInteger.prototype.am = am3;
//	dbits = 28;
//}

// For node.js, we pick am3 with max dbits to 28.
BigInteger.prototype.am = am3;
dbits = 28;

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1 << dbits) - 1);
BigInteger.prototype.DV = (1 << dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c == null) ? -1 : c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = (x < 0) ? -1 : 0;
    if (x > 0) this[0] = x;
    else if (x < -1) this[0] = x + DV;
    else this.t = 0;
}

// return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
}

// (protected) set from string and radix
function bnpFromString(data, radix, unsigned) {
    var k;
    switch (radix) {
        case 2:
            k = 1;
            break;
        case 4:
            k = 2;
            break;
        case 8:
            k = 3;
            break;
        case 16:
            k = 4;
            break;
        case 32:
            k = 5;
            break;
        case 256:
            k = 8;
            break;
        default:
            this.fromRadix(data, radix);
            return;
    }

    this.t = 0;
    this.s = 0;

    var i = data.length;
    var mi = false;
    var sh = 0;

    while (--i >= 0) {
        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);
        if (x < 0) {
            if (data.charAt(i) == "-") mi = true;
            continue;
        }
        mi = false;
        if (sh === 0)
            this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
            this[this.t++] = (x >> (this.DB - sh));
        }
        else
            this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
    }
    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
}

function bnpFromByteArray(a, unsigned) {
    this.fromString(a, 256, unsigned)
}

function bnpFromBuffer(a) {
    this.fromString(a, 256, true)
}

// (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - (i * this.DB) % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while (i >= 0) {
            if (p < k) {
                d = (this[i] & ((1 << p) - 1)) << (k - p);
                d |= this[--i] >> (p += this.DB - k);
            }
            else {
                d = (this[i] >> (p -= k)) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0) m = true;
            if (m) r += int2char(d);
        }
    }
    return m ? r : "0";
}

// (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}

// (public) |this|
function bnAbs() {
    return (this.s < 0) ? this.negate() : this;
}

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return (this.s < 0) ? -r : r;
    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
    return 0;
}

// returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
    for (i = n - 1; i >= 0; --i) r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for (var i = n; i < this.t; ++i) r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;
    for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
    }
    for (i = ds - 1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;
    else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
    }
    if (r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]);	// normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    }
    else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 === 0) return;
    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y);	// "negative" y so we can replace sub with am later
    while (y.t < ys) y[y.t++] = 0;
    while (--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {	// Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while (r[i] < --qd) r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r);	// Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
}

// (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) {
    this.m = m;
}
function cConvert(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
}
function cRevert(x) {
    return x;
}
function cReduce(x) {
    x.divRemTo(this.m, null, x);
}
function cMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
function cSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) === 0) return 0;
    var y = x & 3;		// y == 1/x mod 2^2
    y = (y * (2 - (x & 0xf) * y)) & 0xf;	// y == 1/x mod 2^4
    y = (y * (2 - (x & 0xff) * y)) & 0xff;	// y == 1/x mod 2^8
    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y * (2 - x * y % this.DV)) % this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y > 0) ? this.DV - y : -y;
}

// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << (m.DB - 15)) - 1;
    this.mt2 = 2 * m.t;
}

// xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
}

// x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while (x.t <= this.mt2)	// pad x so am has enough room later
        x[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while (x[j] >= x.DV) {
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}

// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() {
    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;
}

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e, z) {
    if (e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
    g.copyTo(r);
    while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
        else {
            var t = r;
            r = r2;
            r2 = t;
        }
    }
    return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e, m) {
    var z;
    if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e, z);
}

// Copyright (c) 2005-2009  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Extended JavaScript BN functions, required for RSA private ops.

// Version 1.1: new BigInteger("0", 10) returns "proper" zero
// Version 1.2: square() API, isProbablePrime fix

//(public)
function bnClone() {
    var r = nbi();
    this.copyTo(r);
    return r;
}

//(public) return value as integer
function bnIntValue() {
    if (this.s < 0) {
        if (this.t == 1) return this[0] - this.DV;
        else if (this.t === 0) return -1;
    }
    else if (this.t == 1) return this[0];
    else if (this.t === 0) return 0;
// assumes 16 < DB < 32
    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
}

//(public) return value as byte
function bnByteValue() {
    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;
}

//(public) return value as short (assumes DB>=16)
function bnShortValue() {
    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;
}

//(protected) return x s.t. r^x < DV
function bnpChunkSize(r) {
    return Math.floor(Math.LN2 * this.DB / Math.log(r));
}

//(public) 0 if this === 0, 1 if this > 0
function bnSigNum() {
    if (this.s < 0) return -1;
    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
}

//(protected) convert to radix string
function bnpToRadix(b) {
    if (b == null) b = 10;
    if (this.signum() === 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d, y, z);
    while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
}

//(protected) convert from radix string
function bnpFromRadix(s, b) {
    this.fromInt(0);
    if (b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
    for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-" && this.signum() === 0) mi = true;
            continue;
        }
        w = b * w + x;
        if (++j >= cs) {
            this.dMultiply(d);
            this.dAddOffset(w, 0);
            j = 0;
            w = 0;
        }
    }
    if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
    }
    if (mi) BigInteger.ZERO.subTo(this, this);
}

//(protected) alternate constructor
function bnpFromNumber(a, b) {
    if ("number" == typeof b) {
        // new BigInteger(int,int,RNG)
        if (a < 2) this.fromInt(1);
        else {
            this.fromNumber(a);
            if (!this.testBit(a - 1))	// force MSB set
                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
            if (this.isEven()) this.dAddOffset(1, 0); // force odd
            while (!this.isProbablePrime(b)) {
                this.dAddOffset(2, 0);
                if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
            }
        }
    } else {
        // new BigInteger(int,RNG)
        var x = crypt.randomBytes((a >> 3) + 1)
        var t = a & 7;

        if (t > 0)
            x[0] &= ((1 << t) - 1);
        else
            x[0] = 0;

        this.fromByteArray(x);
    }
}

//(public) convert to bigendian byte array
function bnToByteArray() {
    var i = this.t, r = new Array();
    r[0] = this.s;
    var p = this.DB - (i * this.DB) % 8, d, k = 0;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
            r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
            if (p < 8) {
                d = (this[i] & ((1 << p) - 1)) << (8 - p);
                d |= this[--i] >> (p += this.DB - 8);
            }
            else {
                d = (this[i] >> (p -= 8)) & 0xff;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if ((d & 0x80) != 0) d |= -256;
            if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;
            if (k > 0 || d != this.s) r[k++] = d;
        }
    }
    return r;
}

/**
 * return Buffer object
 * @param trim {boolean} slice buffer if first element == 0
 * @returns {Buffer}
 */
function bnToBuffer(trimOrSize) {
    var res = Buffer.from(this.toByteArray());
    if (trimOrSize === true && res[0] === 0) {
        res = res.slice(1);
    } else if (_.isNumber(trimOrSize)) {
        if (res.length > trimOrSize) {
            for (var i = 0; i < res.length - trimOrSize; i++) {
                if (res[i] !== 0) {
                    return null;
                }
            }
            return res.slice(res.length - trimOrSize);
        } else if (res.length < trimOrSize) {
            var padded = Buffer.alloc(trimOrSize);
            padded.fill(0, 0, trimOrSize - res.length);
            res.copy(padded, trimOrSize - res.length);
            return padded;
        }
    }
    return res;
}

function bnEquals(a) {
    return (this.compareTo(a) == 0);
}
function bnMin(a) {
    return (this.compareTo(a) < 0) ? this : a;
}
function bnMax(a) {
    return (this.compareTo(a) > 0) ? this : a;
}

//(protected) r = this op a (bitwise)
function bnpBitwiseTo(a, op, r) {
    var i, f, m = Math.min(a.t, this.t);
    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
    if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);
        r.t = this.t;
    }
    else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
        r.t = a.t;
    }
    r.s = op(this.s, a.s);
    r.clamp();
}

//(public) this & a
function op_and(x, y) {
    return x & y;
}
function bnAnd(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
}

//(public) this | a
function op_or(x, y) {
    return x | y;
}
function bnOr(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
}

//(public) this ^ a
function op_xor(x, y) {
    return x ^ y;
}
function bnXor(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
}

//(public) this & ~a
function op_andnot(x, y) {
    return x & ~y;
}
function bnAndNot(a) {
    var r = nbi();
    this.bitwiseTo(a, op_andnot, r);
    return r;
}

//(public) ~this
function bnNot() {
    var r = nbi();
    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
}

//(public) this << n
function bnShiftLeft(n) {
    var r = nbi();
    if (n < 0) this.rShiftTo(-n, r); else this.lShiftTo(n, r);
    return r;
}

//(public) this >> n
function bnShiftRight(n) {
    var r = nbi();
    if (n < 0) this.lShiftTo(-n, r); else this.rShiftTo(n, r);
    return r;
}

//return index of lowest 1-bit in x, x < 2^31
function lbit(x) {
    if (x === 0) return -1;
    var r = 0;
    if ((x & 0xffff) === 0) {
        x >>= 16;
        r += 16;
    }
    if ((x & 0xff) === 0) {
        x >>= 8;
        r += 8;
    }
    if ((x & 0xf) === 0) {
        x >>= 4;
        r += 4;
    }
    if ((x & 3) === 0) {
        x >>= 2;
        r += 2;
    }
    if ((x & 1) === 0) ++r;
    return r;
}

//(public) returns index of lowest 1-bit (or -1 if none)
function bnGetLowestSetBit() {
    for (var i = 0; i < this.t; ++i)
        if (this[i] != 0) return i * this.DB + lbit(this[i]);
    if (this.s < 0) return this.t * this.DB;
    return -1;
}

//return number of 1 bits in x
function cbit(x) {
    var r = 0;
    while (x != 0) {
        x &= x - 1;
        ++r;
    }
    return r;
}

//(public) return number of set bits
function bnBitCount() {
    var r = 0, x = this.s & this.DM;
    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
    return r;
}

//(public) true iff nth bit is set
function bnTestBit(n) {
    var j = Math.floor(n / this.DB);
    if (j >= this.t) return (this.s != 0);
    return ((this[j] & (1 << (n % this.DB))) != 0);
}

//(protected) this op (1<<n)
function bnpChangeBit(n, op) {
    var r = BigInteger.ONE.shiftLeft(n);
    this.bitwiseTo(r, op, r);
    return r;
}

//(public) this | (1<<n)
function bnSetBit(n) {
    return this.changeBit(n, op_or);
}

//(public) this & ~(1<<n)
function bnClearBit(n) {
    return this.changeBit(n, op_andnot);
}

//(public) this ^ (1<<n)
function bnFlipBit(n) {
    return this.changeBit(n, op_xor);
}

//(protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    }
    else {
        c += this.s;
        while (i < a.t) {
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = (c < 0) ? -1 : 0;
    if (c > 0) r[i++] = c;
    else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}

//(public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
}

//(public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
}

//(public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
}

// (public) this^2
function bnSquare() {
    var r = nbi();
    this.squareTo(r);
    return r;
}

//(public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
}

//(public) this % a
function bnRemainder(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
}

//(public) [this/a,this%a]
function bnDivideAndRemainder(a) {
    var q = nbi(), r = nbi();
    this.divRemTo(a, q, r);
    return new Array(q, r);
}

//(protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
}

//(protected) this += n << w words, this >= 0
function bnpDAddOffset(n, w) {
    if (n === 0) return;
    while (this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t) this[this.t++] = 0;
        ++this[w];
    }
}

//A "null" reducer
function NullExp() {
}
function nNop(x) {
    return x;
}
function nMulTo(x, y, r) {
    x.multiplyTo(y, r);
}
function nSqrTo(x, r) {
    x.squareTo(r);
}

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;

//(public) this^e
function bnPow(e) {
    return this.exp(e, new NullExp());
}

//(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.
function bnpMultiplyLowerTo(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while (i > 0) r[--i] = 0;
    var j;
    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);
    r.clamp();
}

//(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.
function bnpMultiplyUpperTo(a, n, r) {
    --n;
    var i = r.t = this.t + a.t - n;
    r.s = 0; // assumes a,this >= 0
    while (--i >= 0) r[i] = 0;
    for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
    r.clamp();
    r.drShiftTo(1, r);
}

//Barrett modular reduction
function Barrett(m) {
// setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
}

function barrettConvert(x) {
    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
    else if (x.compareTo(this.m) < 0) return x;
    else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }
}

function barrettRevert(x) {
    return x;
}

//x = x mod m (HAC 14.42)
function barrettReduce(x) {
    x.drShiftTo(this.m.t - 1, this.r2);
    if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
    }
    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
    x.subTo(this.r2, x);
    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}

//r = x^2 mod m; x != r
function barrettSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}

//r = x*y mod m; x,y != r
function barrettMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;

//(public) this^e % m (HAC 14.85)
function bnModPow(e, m) {
    var i = e.bitLength(), k, r = nbv(1), z;
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6;
    if (i < 8)
        z = new Classic(m);
    else if (m.isEven())
        z = new Barrett(m);
    else
        z = new Montgomery(m);

// precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }

    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j]) - 1;
    while (j >= 0) {
        if (i >= k1) w = (e[j] >> (i - k1)) & km;
        else {
            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
            if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
        }

        n = k;
        while ((w & 1) === 0) {
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) {	// ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        }
        else {
            while (n > 1) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0) z.sqrTo(r, r2); else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }

        while (j >= 0 && (e[j] & (1 << i)) === 0) {
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    return z.revert(r);
}

//(public) gcd(this,a) (HAC 14.54)
function bnGCD(a) {
    var x = (this.s < 0) ? this.negate() : this.clone();
    var y = (a.s < 0) ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
    }
    var i = x.getLowestSetBit(), g = y.getLowestSetBit();
    if (g < 0) return x;
    if (i < g) g = i;
    if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
    }
    while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
            x.subTo(y, x);
            x.rShiftTo(1, x);
        }
        else {
            y.subTo(x, y);
            y.rShiftTo(1, y);
        }
    }
    if (g > 0) y.lShiftTo(g, y);
    return y;
}

//(protected) this % n, n < 2^26
function bnpModInt(n) {
    if (n <= 0) return 0;
    var d = this.DV % n, r = (this.s < 0) ? n - 1 : 0;
    if (this.t > 0)
        if (d === 0) r = this[0] % n;
        else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
    return r;
}

//(public) 1/this % m (HAC 14.61)
function bnModInverse(m) {
    var ac = m.isEven();
    if ((this.isEven() && ac) || m.signum() === 0) return BigInteger.ZERO;
    var u = m.clone(), v = this.clone();
    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
    while (u.signum() != 0) {
        while (u.isEven()) {
            u.rShiftTo(1, u);
            if (ac) {
                if (!a.isEven() || !b.isEven()) {
                    a.addTo(this, a);
                    b.subTo(m, b);
                }
                a.rShiftTo(1, a);
            }
            else if (!b.isEven()) b.subTo(m, b);
            b.rShiftTo(1, b);
        }
        while (v.isEven()) {
            v.rShiftTo(1, v);
            if (ac) {
                if (!c.isEven() || !d.isEven()) {
                    c.addTo(this, c);
                    d.subTo(m, d);
                }
                c.rShiftTo(1, c);
            }
            else if (!d.isEven()) d.subTo(m, d);
            d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
            u.subTo(v, u);
            if (ac) a.subTo(c, a);
            b.subTo(d, b);
        }
        else {
            v.subTo(u, v);
            if (ac) c.subTo(a, c);
            d.subTo(b, d);
        }
    }
    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    if (d.compareTo(m) >= 0) return d.subtract(m);
    if (d.signum() < 0) d.addTo(m, d); else return d;
    if (d.signum() < 0) return d.add(m); else return d;
}

var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

//(public) test primality with certainty >= 1-.5^t
function bnIsProbablePrime(t) {
    var i, x = this.abs();
    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
            if (x[0] == lowprimes[i]) return true;
        return false;
    }
    if (x.isEven()) return false;
    i = 1;
    while (i < lowprimes.length) {
        var m = lowprimes[i], j = i + 1;
        while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j) if (m % lowprimes[i++] === 0) return false;
    }
    return x.millerRabin(t);
}

//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
function bnpMillerRabin(t) {
    var n1 = this.subtract(BigInteger.ONE);
    var k = n1.getLowestSetBit();
    if (k <= 0) return false;
    var r = n1.shiftRight(k);
    t = (t + 1) >> 1;
    if (t > lowprimes.length) t = lowprimes.length;
    var a = nbi();
    for (var i = 0; i < t; ++i) {
        //Pick bases at random, instead of starting at 2
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
            var j = 1;
            while (j++ < k && y.compareTo(n1) != 0) {
                y = y.modPowInt(2, this);
                if (y.compareTo(BigInteger.ONE) === 0) return false;
            }
            if (y.compareTo(n1) != 0) return false;
        }
    }
    return true;
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.fromByteArray = bnpFromByteArray;
BigInteger.prototype.fromBuffer = bnpFromBuffer;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin;


// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.toBuffer = bnToBuffer;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
BigInteger.int2char = int2char;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// JSBN-specific extension
BigInteger.prototype.square = bnSquare;

//BigInteger interfaces not implemented in jsbn:

//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)

module.exports = BigInteger;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshSession = void 0;
const trace_1 = __webpack_require__(24);
const buffer_1 = __webpack_require__(0);
const vscode_jsonrpc_1 = __webpack_require__(6);
const sshSessionConfiguration_1 = __webpack_require__(68);
const sshChannel_1 = __webpack_require__(141);
const sshVersionInfo_1 = __webpack_require__(250);
const sshProtocol_1 = __webpack_require__(537);
const keyExchangeService_1 = __webpack_require__(247);
const serviceActivation_1 = __webpack_require__(49);
const connectionService_1 = __webpack_require__(73);
const authenticationService_1 = __webpack_require__(144);
const kexMessages_1 = __webpack_require__(143);
const connectionMessages_1 = __webpack_require__(38);
const authenticationMessages_1 = __webpack_require__(252);
const transportMessages_1 = __webpack_require__(29);
const sessionMetrics_1 = __webpack_require__(253);
const promiseCompletionSource_1 = __webpack_require__(39);
const sshSessionClosedEventArgs_1 = __webpack_require__(254);
const sshRequestEventArgs_1 = __webpack_require__(142);
const sshAlgorithms_1 = __webpack_require__(47);
const cancellation_1 = __webpack_require__(40);
const errors_1 = __webpack_require__(25);
const semaphore_1 = __webpack_require__(72);
/**
 * Base class for an SSH server or client connection; coordinates high-level SSH
 * protocol details and dispatches messages to registered internal services.
 * Enables opening and accepting `SshChannel` instances.
 */
class SshSession {
    constructor(config, isClientSession) {
        this.config = config;
        this.remoteVersion = null;
        this.activatedServices = new Map();
        this.connectionService = null;
        this.requestHandler = null;
        this.blockedMessages = [];
        this.blockedMessagesSemaphore = new semaphore_1.Semaphore(1);
        this.connected = false;
        this.disposed = false;
        /**
         * Gets an object that reports current and cumulative measurements about the session.
         */
        this.metrics = new sessionMetrics_1.SessionMetrics();
        /* @internal */
        this.reconnecting = false;
        this.sessionId = null;
        this.principalValue = null;
        this.authenticatingEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event that is raised when a client or server is requesting authentication.
         *
         * See `SshAuthenticationType` for a description of the different authentication
         * methods and how they map to the event-args object.
         *
         * After validating the credentials, the event handler must set the
         * `SshAuthenticatingEventArgs.authenticationPromise` property to a task that
         * resolves to a principal object to indicate successful authentication. That principal will
         * then be associated with the sesssion as the `principal` property.
         */
        this.onAuthenticating = this.authenticatingEmitter.event;
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClosed = this.closedEmitter.event;
        this.disconnectedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onDisconnected = this.disconnectedEmitter.event;
        this.serviceActivatedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onServiceActivated = this.serviceActivatedEmitter.event;
        this.channelOpeningEmitter = new vscode_jsonrpc_1.Emitter();
        this.onChannelOpening = this.channelOpeningEmitter.event;
        this.requestEmitter = new vscode_jsonrpc_1.Emitter();
        this.onRequest = this
            .requestEmitter.event;
        if (!config)
            throw new TypeError('Session configuration is required.');
        if (!config.keyExchangeAlgorithms.find((a) => !!a)) {
            if (config.encryptionAlgorithms.length > 0 &&
                config.encryptionAlgorithms.indexOf(null) < 0) {
                throw new Error('Encryption requires a key-exchange algorithm to be configured.');
            }
            else if (config.hmacAlgorithms.length > 0 && config.hmacAlgorithms.indexOf(null) < 0) {
                throw new Error('HMAC requires a key-exchange algorithm to be configured.');
            }
            else if (config.publicKeyAlgorithms.length > 0 &&
                config.publicKeyAlgorithms.indexOf(null) < 0) {
                throw new Error('Host authentication requires a key-exchange algorithm to be configured.');
            }
            // No key exchange, no encryption, no HMAC.
            this.kexService = null;
        }
        else {
            this.kexService = new keyExchangeService_1.KeyExchangeService(this, isClientSession !== null && isClientSession !== void 0 ? isClientSession : false);
        }
    }
    get algorithms() {
        return this.protocol ? this.protocol.algorithms : null;
    }
    /**
     * Gets an object containing claims about the server or client on the
     * other end of the session, or `null` if the session is not authenticated.
     *
     * This property is initially `null` for an unauthenticated session. On
     * successful authentication, the session Authenticating event handler
     * provides a Task that returns a principal that is stored here.
     */
    get principal() {
        return this.principalValue;
    }
    /* @internal */
    set principal(value) {
        this.principalValue = value;
    }
    get isConnected() {
        return this.connected;
    }
    get isClosed() {
        return this.disposed;
    }
    get services() {
        return [...this.activatedServices.values()];
    }
    get channels() {
        var _a, _b;
        return (_b = (_a = this.connectionService) === null || _a === void 0 ? void 0 : _a.channels) !== null && _b !== void 0 ? _b : [];
    }
    get protocolExtensions() {
        var _a;
        return ((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.extensions) || null;
    }
    /**
     * Gets an activated service instance by type.
     *
     * @returns The service instance, or `null` if the service has not been activated.
     */
    getService(serviceType) {
        const service = this.activatedServices.get(serviceType);
        return service ? service : null;
    }
    /* @internal */
    activateService(serviceTypeOrName) {
        let serviceType;
        if (typeof serviceTypeOrName === 'function') {
            serviceType = serviceTypeOrName;
        }
        else {
            let serviceName = serviceTypeOrName;
            serviceType = (0, serviceActivation_1.findService)(this.config.services, (a) => a.serviceRequest === serviceName);
            if (!serviceType) {
                return null;
            }
        }
        let activatedService = this.activatedServices.get(serviceType);
        if (!activatedService) {
            if (!this.config.services.has(serviceType)) {
                throw new Error(`Service type not configured: ${serviceType.name}`);
            }
            const serviceConfig = this.config.services.get(serviceType);
            activatedService = new serviceType(this, serviceConfig);
            // This service is maintained in a separate member because it is accessed frequently.
            if (serviceType === connectionService_1.ConnectionService) {
                this.connectionService = activatedService;
            }
            this.activatedServices.set(serviceType, activatedService);
            this.serviceActivatedEmitter.fire(activatedService);
        }
        return activatedService;
    }
    async connect(stream, cancellation) {
        if (!stream)
            throw new TypeError('A session stream is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (!this.connectPromise) {
            this.connectPromise = this.doConnect(stream, cancellation);
        }
        await this.connectPromise;
    }
    async doConnect(stream, cancellation) {
        (0, trace_1.trace)(`${this} ${this.reconnecting ? 're' : ''}connecting...`);
        this.protocol = new sshProtocol_1.SshProtocol(stream, this.config, this.metrics);
        this.protocol.kexService = this.kexService;
        await this.exchangeVersions(cancellation);
        if (this.kexService) {
            await this.encrypt(cancellation);
        }
        else {
            // When encrypting, the key-exchange step will wait on the version-exchange.
            // When not encrypting, it must be directly awaited.
            await (0, cancellation_1.withCancellation)(this.versionExchangePromise, cancellation);
            this.connected = true;
        }
        this.processMessages().catch((e) => {
            (0, trace_1.trace)(`Unhandled error processing messages: ${e.message || JSON.stringify(e)}`);
        });
    }
    async exchangeVersions(cancellation) {
        const writePromise = this.protocol.writeProtocolVersion(SshSession.localVersion.toString(), cancellation);
        const readPromise = this.protocol.readProtocolVersion(cancellation);
        // Don't wait for and verify the other side's version info yet.
        // Instead save a promise that can be awaited later.
        this.versionExchangePromise = readPromise.then(async (remoteVersion) => {
            (0, trace_1.trace)(`Local version: ${SshSession.localVersion}, remote version: ${remoteVersion}`);
            let errorMessage;
            const remoteVersionInfo = sshVersionInfo_1.SshVersionInfo.tryParse(remoteVersion);
            if (remoteVersionInfo) {
                this.remoteVersion = remoteVersionInfo;
                if (remoteVersionInfo.protocolVersion === '2.0') {
                    return;
                }
                errorMessage =
                    `Remote SSH version ${this.remoteVersion} is not supported. ` +
                        'This library only supports SSH v2.0.';
            }
            else {
                errorMessage = `Could not parse remote SSH version ${remoteVersion}`;
            }
            await this.close(transportMessages_1.SshDisconnectReason.protocolVersionNotSupported, errorMessage, new Error(errorMessage));
        });
        await writePromise;
    }
    async encrypt(cancellation) {
        var _a, _b;
        const protocol = this.protocol;
        if (!protocol)
            throw new errors_1.ObjectDisposedError(this);
        await protocol.considerReExchange(true, cancellation);
        // Ensure the protocol version has been received before receiving any messages.
        await (0, cancellation_1.withCancellation)(this.versionExchangePromise, cancellation);
        this.connected = true;
        let message = null;
        while (!this.isClosed &&
            !((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.algorithms) &&
            !(message instanceof transportMessages_1.DisconnectMessage)) {
            message = await protocol.receiveMessage(cancellation);
            if (!message) {
                break;
            }
            await this.dispatchMessage(message, cancellation);
        }
        if (!((_b = this.protocol) === null || _b === void 0 ? void 0 : _b.algorithms)) {
            throw new errors_1.SshConnectionError('Session closed while encrypting.', transportMessages_1.SshDisconnectReason.connectionLost);
        }
        else if (this.protocol.algorithms.cipher) {
            (0, trace_1.trace)(`${this} encrypted.`);
        }
    }
    /* @internal */
    async processMessages() {
        var _a;
        this.connected = true;
        while (!this.disposed) {
            const protocol = this.protocol;
            if (!protocol) {
                break;
            }
            let message = null;
            try {
                message = await protocol.receiveMessage();
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                let reason = transportMessages_1.SshDisconnectReason.protocolError;
                if (e instanceof errors_1.SshConnectionError) {
                    reason = (_a = e.reason) !== null && _a !== void 0 ? _a : reason;
                }
                else {
                    (0, trace_1.trace)(`Error receiving message: ${e.message || JSON.stringify(e)}`);
                }
                await this.close(reason, e.message, e);
            }
            if (!message) {
                await this.close(transportMessages_1.SshDisconnectReason.connectionLost, 'Connection lost.');
                break;
            }
            try {
                await this.dispatchMessage(message);
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                (0, trace_1.trace)(`Error handling ${message}: ${e.message || JSON.stringify(e)}`);
                await this.close(transportMessages_1.SshDisconnectReason.protocolError, e.message, e);
            }
        }
        this.connected = false;
    }
    /**
     * Checks whether the session is in a state that allows requests, such as session requests
     * and open-channel requests.
     *
     * A session with disabled crypto (no key-exchange service) always allows requests. A
     * session with enabled crypto does not allow requests until the first key-exchange has
     * completed (algorithms are negotiated). If the negotiated algorithms enabled encryption,
     * then the session must be authenticated (have a principal) before allowing requests.
     */
    /* @internal */
    get canAcceptRequests() {
        var _a;
        return (!this.kexService ||
            (!!((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.algorithms) && (!this.protocol.algorithms.cipher || !!this.principal)));
    }
    async sendMessage(message, cancellation) {
        var _a, _b;
        if (!message)
            throw new TypeError('Message expected.');
        if (cancellation && cancellation.isCancellationRequested)
            throw new cancellation_1.CancellationError();
        const protocol = this.protocol;
        if (!protocol || this.disposed) {
            throw new errors_1.ObjectDisposedError(this);
        }
        // Delay sending messages if in the middle of a key (re-)exchange.
        if (this.kexService &&
            this.kexService.exchanging &&
            message.messageType > 4 &&
            (message.messageType < 20 || message.messageType > 49)) {
            this.blockedMessages.push(message);
            return;
        }
        await this.blockedMessagesSemaphore.wait(cancellation);
        let result;
        try {
            result = await protocol.sendMessage(message, cancellation);
            this.blockedMessagesSemaphore.release();
        }
        catch (e) {
            this.blockedMessagesSemaphore.release();
            if (e instanceof errors_1.SshConnectionError) {
                const ce = e;
                if (ce.reason === transportMessages_1.SshDisconnectReason.connectionLost &&
                    ((_a = this.protocolExtensions) === null || _a === void 0 ? void 0 : _a.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
                    // Connection-lost error when reconnect is enabled. Don't throw an error;
                    // the message will remain in the reconnect message cache and will be re-sent
                    // upon reconnection.
                    return;
                }
            }
            if (!(e instanceof Error))
                throw e;
            (0, trace_1.trace)(`Error sending ${message}: ${e.message || JSON.stringify(e)}`);
            throw e;
        }
        if (!result) {
            // Sending failed due to a closed stream, but don't throw when reconnect is enabled.
            // In that case the sent message is buffered and will be re-sent after reconnecting.
            if (!((_b = this.protocolExtensions) === null || _b === void 0 ? void 0 : _b.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
                throw new errors_1.SshConnectionError('Session disconnected.', transportMessages_1.SshDisconnectReason.connectionLost);
            }
        }
    }
    dispatchMessage(message, cancellation) {
        var _a;
        if (message instanceof connectionMessages_1.ConnectionMessage && this.connectionService) {
            return this.connectionService.handleMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.NewKeysMessage) {
            return this.handleNewKeysMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.KeyExchangeMessage) {
            return this.handleKeyExchangeMessage(message, cancellation);
        }
        else if (message instanceof authenticationMessages_1.AuthenticationMessage) {
            return (_a = this.getService(authenticationService_1.AuthenticationService)) === null || _a === void 0 ? void 0 : _a.handleMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.ServiceRequestMessage) {
            return this.handleServiceRequestMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.ServiceAcceptMessage) {
            return this.handleServiceAcceptMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.SessionRequestMessage) {
            return this.handleRequestMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.SessionRequestSuccessMessage) {
            return this.handleRequestSuccessMessage(message);
        }
        else if (message instanceof transportMessages_1.SessionRequestFailureMessage) {
            return this.handleRequestFailureMessage(message);
        }
        else if (message instanceof transportMessages_1.ExtensionInfoMessage) {
            return this.handleExtensionInfoMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.UnimplementedMessage) {
            return this.handleUnimplementedMessage(message, cancellation);
        }
        else if (message instanceof transportMessages_1.DebugMessage) {
            return this.handleDebugMessage(message);
        }
        else {
            // Ignore any other message types.
        }
    }
    /* @internal */
    async handleRequestMessage(message, cancellation) {
        var _a;
        let result = false;
        if (message.requestType === "initial-channel-request@microsoft.com" /* initialChannelRequest */ &&
            this.config.protocolExtensions.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.openChannelRequest)) {
            const sessionChannelRequest = message.convertTo(new transportMessages_1.SessionChannelRequestMessage());
            const remoteChannelId = sessionChannelRequest.senderChannel;
            const channel = this.channels.find((c) => c.remoteChannelId === remoteChannelId);
            if (channel && sessionChannelRequest.request) {
                sessionChannelRequest.request.wantReply = false; // Avoid redundant reply
                result = await channel.handleRequest(sessionChannelRequest.request, cancellation);
            }
        }
        else if (message.requestType === "enable-session-reconnect@microsoft.com" /* enableSessionReconnect */ &&
            ((_a = this.config.protocolExtensions) === null || _a === void 0 ? void 0 : _a.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            if (!this.protocol.incomingMessagesHaveReconnectInfo) {
                // Starting immediately after this message, all incoming messages include
                // an extra field or two after the payload.
                this.protocol.incomingMessagesHaveReconnectInfo = true;
                this.protocol.incomingMessagesHaveLatencyInfo = this.protocol.extensions.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionLatency);
                result = true;
            }
        }
        else if (!this.canAcceptRequests) {
            (0, trace_1.trace)('Session request blocked because the session is not yet authenticated.');
            result = false;
        }
        else {
            const args = new sshRequestEventArgs_1.SshRequestEventArgs(message.requestType || '', message, this.principal);
            const serviceType = (0, serviceActivation_1.findService)(this.config.services, (a) => a.sessionRequest === message.requestType);
            if (serviceType) {
                // A service was configured for activation via this session request type.
                const service = this.activateService(serviceType);
                // `onSessionRequest` should really be 'protected internal'.
                await service.onSessionRequest(args, cancellation);
                // The service should have handled sending the response message, if any.
                return;
            }
            else {
                // Raise a request event to let an event listener handle this request.
                this.raiseSessionRequest(args);
            }
            result = args.isAuthorized || false;
        }
        if (message.wantReply) {
            await this.sendMessage(result ? new transportMessages_1.SessionRequestSuccessMessage() : new transportMessages_1.SessionRequestFailureMessage(), cancellation);
        }
    }
    /* @internal */
    raiseSessionRequest(args) {
        this.requestEmitter.fire(args);
    }
    /* @internal */
    async handleServiceRequestMessage(message, cancellation) {
        // Do nothing. Subclasses may override.
    }
    /* @internal */
    async handleServiceAcceptMessage(message, cancellation) {
        // Do nothing. Subclasses may override.
    }
    async handleKeyExchangeMessage(message, cancellation) {
        if (!this.kexService) {
            if (message instanceof kexMessages_1.KeyExchangeInitMessage && this.protocol) {
                // This side didn't configure security, but the other side still wants to negotiate.
                // Start the KEX sequence just to try to negotiate 'none'.
                this.kexService = this.activateService(keyExchangeService_1.KeyExchangeService);
                this.protocol.kexService = this.kexService;
                await this.protocol.considerReExchange(true, cancellation);
            }
            else {
                await this.close(transportMessages_1.SshDisconnectReason.keyExchangeFailed);
                return;
            }
        }
        return this.kexService.handleMessage(message, cancellation);
    }
    /* @internal */
    async handleNewKeysMessage(message, cancellation) {
        try {
            await this.blockedMessagesSemaphore.wait(cancellation);
            await this.protocol.handleNewKeys(cancellation);
            try {
                // Send messages that were blocked during key exchange.
                while (this.blockedMessages.length > 0) {
                    const blockedMessage = this.blockedMessages.shift();
                    if (!this.protocol)
                        throw new errors_1.ObjectDisposedError(this);
                    await this.protocol.sendMessage(blockedMessage, cancellation);
                }
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                await this.close(transportMessages_1.SshDisconnectReason.protocolError, undefined, e);
            }
        }
        finally {
            this.blockedMessagesSemaphore.release();
        }
    }
    async handleUnimplementedMessage(message, cancellation) {
        if (message.unimplementedMessageType !== undefined) {
            // Received a message type that is unimplemented by this side.
            // Send a reply to inform the other side.
            await this.sendMessage(message, cancellation);
        }
        else {
            // This is a reply indicating this side previously sent a message type
            // that is not implemented by the other side. It has already been traced.
        }
    }
    handleDebugMessage(message) {
        if (message.message) {
            (0, trace_1.trace)(message.message);
        }
    }
    /* @internal */
    async raiseAuthenticatingEvent(args) {
        (0, trace_1.trace)(`${this} Authenticating(${args})`);
        this.authenticatingEmitter.fire(args);
        let authPromise = args.authenticationPromise;
        if (!authPromise) {
            authPromise = Promise.resolve(null);
        }
        const principal = await authPromise;
        return principal;
    }
    /**
     * Sends a session request and waits for a response.
     *
     * Note if `wantReply` is `false`, this method returns `true` immediately after sending
     * the request, without waiting for a response.
     *
     * @returns The authorization status of the response; if `false`, the other side denied the
     * request.
     */
    async request(request, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        if (!request.wantReply) {
            await this.sendMessage(request, cancellation);
            return true;
        }
        const response = await this.requestResponse(request, transportMessages_1.SessionRequestSuccessMessage, transportMessages_1.SessionRequestFailureMessage, cancellation);
        return response instanceof transportMessages_1.SessionRequestSuccessMessage;
    }
    /**
     * Sends a session request and waits for a specific type of success or failure message.
     *
     * @returns The success or failure response message.
     */
    async requestResponse(request, successType, failureType, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        if (!successType)
            throw new TypeError('Success response type is required.');
        if (!failureType)
            throw new TypeError('Failure response type is required.');
        if (this.requestHandler) {
            throw new Error('Another request is already pending.');
        }
        request.wantReply = true;
        // Capture as a local variable because the member may change.
        const requestCompletionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested(() => {
                this.requestHandler = null;
                requestCompletionSource.reject(new cancellation_1.CancellationError());
            });
        }
        this.requestHandler = (err, result) => {
            var _a, _b;
            this.requestHandler = null;
            if (err) {
                requestCompletionSource.reject(err);
            }
            else if (result instanceof transportMessages_1.SessionRequestFailureMessage) {
                const failure = (_a = result === null || result === void 0 ? void 0 : result.convertTo(new failureType(), true)) !== null && _a !== void 0 ? _a : null;
                requestCompletionSource.resolve(failure);
            }
            else if (result instanceof transportMessages_1.SessionRequestSuccessMessage) {
                // Make a copy of the response message because the continuation may be
                // asynchronous; meanwhile the receive buffer will be re-used.
                const success = (_b = result === null || result === void 0 ? void 0 : result.convertTo(new successType(), true)) !== null && _b !== void 0 ? _b : null;
                requestCompletionSource.resolve(success);
            }
            else {
                requestCompletionSource.reject(new Error('Unknown response message type.'));
            }
        };
        await this.sendMessage(request, cancellation);
        return await requestCompletionSource.promise;
    }
    handleRequestSuccessMessage(message) {
        if (this.requestHandler) {
            this.requestHandler(undefined, message);
        }
    }
    handleRequestFailureMessage(message) {
        if (this.requestHandler) {
            this.requestHandler(undefined, message);
        }
    }
    async acceptChannel(channelTypeOrCancellation, cancellation) {
        const channelType = typeof channelTypeOrCancellation === 'string' ? channelTypeOrCancellation : undefined;
        if (!cancellation && typeof channelTypeOrCancellation === 'object')
            cancellation = channelTypeOrCancellation;
        this.activateService(connectionService_1.ConnectionService);
        // Prepare to accept the channel before connecting. This ensures that if the channel
        // open request comes in immediately after connecting then the channel won't be missed
        // in case of a task scheduling delay.
        const acceptPromise = this.connectionService.acceptChannel(channelType || sshChannel_1.SshChannel.sessionChannelType, cancellation);
        return await acceptPromise;
    }
    async openChannel(channelTypeOrOpenMessageOrCancellation, initialRequestOrCancellation, cancellation) {
        let openMessage;
        if (typeof channelTypeOrOpenMessageOrCancellation === 'string' ||
            channelTypeOrOpenMessageOrCancellation === null) {
            openMessage = new connectionMessages_1.ChannelOpenMessage();
            openMessage.channelType =
                channelTypeOrOpenMessageOrCancellation !== null && channelTypeOrOpenMessageOrCancellation !== void 0 ? channelTypeOrOpenMessageOrCancellation : sshChannel_1.SshChannel.sessionChannelType;
        }
        else if (channelTypeOrOpenMessageOrCancellation instanceof connectionMessages_1.ChannelOpenMessage) {
            openMessage = channelTypeOrOpenMessageOrCancellation;
        }
        else {
            openMessage = new connectionMessages_1.ChannelOpenMessage();
            openMessage.channelType = sshChannel_1.SshChannel.sessionChannelType;
            cancellation = channelTypeOrOpenMessageOrCancellation;
        }
        if (initialRequestOrCancellation instanceof connectionMessages_1.ChannelRequestMessage) {
            return await this.openChannelWithInitialRequest(openMessage, initialRequestOrCancellation, cancellation);
        }
        else if (!cancellation && initialRequestOrCancellation !== null) {
            cancellation = initialRequestOrCancellation;
        }
        this.activateService(connectionService_1.ConnectionService);
        const completionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        await this.connectionService.openChannel(openMessage, completionSource, cancellation);
        return await completionSource.promise;
    }
    async openChannelWithInitialRequest(openMessage, initialRequest, cancellation) {
        var _a;
        this.activateService(connectionService_1.ConnectionService);
        const completionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        const channelId = await this.connectionService.openChannel(openMessage, completionSource, cancellation);
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested(() => completionSource.reject(new cancellation_1.CancellationError()));
        }
        let channel;
        let requestResult;
        const isExtensionSupported = this.config.protocolExtensions.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.openChannelRequest) &&
            ((_a = this.protocolExtensions) === null || _a === void 0 ? void 0 : _a.has(sshSessionConfiguration_1.SshProtocolExtensionNames.openChannelRequest));
        if (isExtensionSupported === false) {
            // The local or remote side definitely doesn't support this extension. Just send a
            // normal channel request after waiting for the channel open confirmation.
            channel = await completionSource.promise;
            requestResult = await channel.request(initialRequest, cancellation);
        }
        else {
            // The remote side does or might support this extension. If uncertain then a reply
            // is required.
            const wantReply = initialRequest.wantReply || isExtensionSupported === undefined;
            // Send the initial channel request message BEFORE waiting for the
            // channel open confirmation.
            const sessionRequest = new transportMessages_1.SessionChannelRequestMessage();
            sessionRequest.requestType = "initial-channel-request@microsoft.com" /* initialChannelRequest */;
            sessionRequest.senderChannel = channelId;
            sessionRequest.request = initialRequest;
            sessionRequest.wantReply = wantReply;
            const requestPromise = this.request(sessionRequest, cancellation);
            // Wait for the channel open confirmation.
            channel = await completionSource.promise;
            if (!wantReply) {
                requestResult = true;
            }
            else {
                // Wait for the response to the initial channel request.
                requestResult = await requestPromise;
                if (!requestResult && isExtensionSupported === undefined) {
                    // The initial request failed. This could be because the other side doesn't
                    // support the initial-request extension or because the request was denied.
                    // Try sending the request again as a regular channel request.
                    requestResult = await channel.request(initialRequest);
                }
            }
        }
        if (!requestResult) {
            // The regular request still failed, so close the channel and throw.
            await channel.close();
            throw new Error('The initial channel request was denied.');
        }
        return channel;
    }
    /* @internal */
    async handleChannelOpening(args, cancellation) {
        const serviceType = (0, serviceActivation_1.findService)(this.config.services, (a) => a.channelType === args.channel.channelType && !a.channelRequest);
        if (serviceType) {
            // A service was configured for activation via this channel type.
            const service = this.activateService(serviceType);
            // `onChannelOpening` should really be 'protected internal'.
            await service.onChannelOpening(args, cancellation);
        }
        else {
            this.raiseChannelOpening(args);
        }
    }
    /* @internal */
    raiseChannelOpening(args) {
        this.channelOpeningEmitter.fire(args);
    }
    /* @internal */
    async sendExtensionInfo(cancellation) {
        const message = new transportMessages_1.ExtensionInfoMessage();
        message.extensionInfo = {};
        for (let extensionName of this.config.protocolExtensions) {
            if (extensionName === sshSessionConfiguration_1.SshProtocolExtensionNames.serverSignatureAlgorithms) {
                // Send the list of enabled host key signature algorithms.
                const publicKeyAlgorithms = Array.from(new Set((0, sshAlgorithms_1.algorithmNames)(this.config.publicKeyAlgorithms))).join(',');
                message.extensionInfo[extensionName] = publicKeyAlgorithms;
            }
            else {
                message.extensionInfo[extensionName] = '';
            }
        }
        await this.sendMessage(message, cancellation);
    }
    async handleExtensionInfoMessage(message, cancellation) {
        if (!this.protocol) {
            return;
        }
        this.protocol.extensions = new Map();
        const proposedExtensions = message.extensionInfo;
        if (!proposedExtensions) {
            return;
        }
        for (let extensionName of this.config.protocolExtensions) {
            const proposedExtension = message.extensionInfo[extensionName];
            if (typeof proposedExtension === 'string') {
                this.protocol.extensions.set(extensionName, proposedExtension);
            }
        }
        if (this.protocol.extensions.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect)) {
            await this.enableReconnect(cancellation);
        }
    }
    async close(reason, message, error) {
        var _a, _b, _c;
        if (this.disposed || !this.connected) {
            return;
        }
        this.connected = false;
        (0, trace_1.trace)(`${this} Close(${transportMessages_1.SshDisconnectReason[reason]}, "${message || ''}")`);
        if (reason !== transportMessages_1.SshDisconnectReason.connectionLost) {
            try {
                const disconnectMessage = new transportMessages_1.DisconnectMessage();
                disconnectMessage.reasonCode = reason;
                disconnectMessage.description = message || '';
                await ((_a = this.protocol) === null || _a === void 0 ? void 0 : _a.sendMessage(disconnectMessage));
            }
            catch (e) {
                // Already disconnected.
            }
        }
        else if (this.handleDisconnected()) {
            // Keep the session in a disconnected (but not closed) state.
            (_b = this.protocol) === null || _b === void 0 ? void 0 : _b.dispose();
            (0, trace_1.trace)(`${this} disconnected.`);
            this.disconnectedEmitter.fire();
            return;
        }
        this.disposed = true;
        if (error) {
            (_c = this.connectionService) === null || _c === void 0 ? void 0 : _c.close(error);
        }
        this.closedEmitter.fire(new sshSessionClosedEventArgs_1.SshSessionClosedEventArgs(reason, message || 'Disconnected.', error || null));
        this.dispose();
    }
    /* @internal */
    handleDisconnected() {
        var _a, _b;
        this.connectPromise = undefined;
        (_a = this.kexService) === null || _a === void 0 ? void 0 : _a.abortKeyExchange();
        if (!((_b = this.protocolExtensions) === null || _b === void 0 ? void 0 : _b.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            return false;
        }
        return true;
    }
    dispose() {
        var _a, _b;
        if (!this.disposed) {
            (0, trace_1.trace)(`${this} disposed.`);
            this.disposed = true;
            this.closedEmitter.fire(new sshSessionClosedEventArgs_1.SshSessionClosedEventArgs(transportMessages_1.SshDisconnectReason.none, 'SshSession disposed', null));
        }
        if (this.requestHandler) {
            this.requestHandler(new errors_1.SshConnectionError('Connection closed.'));
        }
        this.metrics.close();
        // Dispose the connection service before other services, to ensure
        // channels are disposed before services that work with them.
        (_a = this.connectionService) === null || _a === void 0 ? void 0 : _a.dispose();
        for (let service of this.activatedServices.values()) {
            if (service !== this.connectionService) {
                service.dispose();
            }
        }
        this.activatedServices.clear();
        (_b = this.protocol) === null || _b === void 0 ? void 0 : _b.dispose();
        this.protocol = undefined;
    }
    /* @internal */
    async enableReconnect(cancellation) {
        var _a;
        try {
            // Ensure no other messages are sent in the middle of turning this on.
            await this.blockedMessagesSemaphore.wait();
            // This should not be done during a key-exchange, however that should never
            // be the case since the EnableSessionReconnectRequest is sent in response
            // to an ExtensionInfo message which is sent in response to a NewKeys message.
            // So a key exchange just finished and won't be restarted again soon.
            if ((_a = this.kexService) === null || _a === void 0 ? void 0 : _a.exchanging) {
                (0, trace_1.trace)('Failed to initialize session reconnect because a key-exchange was in-progress.');
            }
            else {
                // Send the message indicating reconnect message tracking is starting.
                const enableReconnectMessage = new transportMessages_1.SessionRequestMessage("enable-session-reconnect@microsoft.com" /* enableSessionReconnect */, false);
                await this.protocol.sendMessage(enableReconnectMessage, cancellation);
                // Start using the protocol extensions that include an extra field or two
                // with every sent message.
                if (this.protocol) {
                    this.protocol.outgoingMessagesHaveReconnectInfo = true;
                    this.protocol.outgoingMessagesHaveLatencyInfo = this.protocol.extensions.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionLatency);
                }
            }
            this.blockedMessagesSemaphore.release();
        }
        catch (e) {
            // This is not in a finally block because the semaphore must be released before
            // the call to close() which tries to send a message.
            this.blockedMessagesSemaphore.release();
            if (e instanceof Error) {
                await this.close(transportMessages_1.SshDisconnectReason.protocolError, undefined, e);
            }
            throw e;
        }
    }
    /* @internal */
    async createReconnectToken(previousSessionId, newSessionId) {
        // To generate the reconnect token, combine the old session ID and new (re-negotiated)
        // session ID and sign the result using the new negotiated HMAC algorithm and key. This
        // proves that the old (secret) session ID is known while not disclosing it, and also
        // prevents replay attacks.
        const reconnectToken = await this.algorithms.signer.sign(buffer_1.Buffer.concat([previousSessionId, newSessionId]));
        return reconnectToken;
    }
    /* @internal */
    async verifyReconnectToken(previousSessionId, newSessionId, reconnectToken) {
        const result = await this.algorithms.verifier.verify(buffer_1.Buffer.concat([previousSessionId, newSessionId]), reconnectToken);
        return result;
    }
    toString() {
        return this.constructor.name;
    }
}
exports.SshSession = SshSession;
SshSession.localVersion = sshVersionInfo_1.SshVersionInfo.getLocalVersion();
//# sourceMappingURL=sshSession.js.map

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.Semaphore = void 0;
const promiseCompletionSource_1 = __webpack_require__(39);
const cancellation_1 = __webpack_require__(40);
const errors_1 = __webpack_require__(25);
/**
 * Semaphore-like object that allows multiple awaiters to coordinate exclusive access to a resource.
 */
class Semaphore {
    /**
     * Creates a new semaphore instance.
     * @param initialCount Optional initial count. Defaults to 0.
     */
    constructor(initialCount = 0) {
        this.completions = [];
        this.disposed = false;
        this.count = initialCount;
    }
    /**
     * Gets the current available count of the semaphore.
     */
    get currentCount() {
        return this.count;
    }
    /**
     * Releases the semaphore, increasing the available count or unblicking one or more awaiters.
     * @param releaseCount Optional specified count to release. Defaults to 1.
     * @returns The previous count (before release).
     */
    release(releaseCount = 1) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        const previousCount = this.count;
        for (; releaseCount > 0; releaseCount--) {
            if (this.completions.length > 0) {
                // Something is waiting on the semaphore.
                // Remove and complete the wait without incrementing the count.
                const completion = this.completions.shift();
                completion.resolve(true);
            }
            else {
                // Nothing is currently waiting on the semaphore. Increment the available count.
                this.count++;
            }
        }
        return previousCount;
    }
    /**
     * Releases the semaphore, but does not throw an `ObjectDisposedError` if it is already disposed.
     */
    tryRelease() {
        try {
            this.release();
        }
        catch (e) {
            if (!(e instanceof errors_1.ObjectDisposedError)) {
                throw e;
            }
        }
    }
    async wait(timeoutOrCancellation, cancellation) {
        const millisecondsTimeout = typeof timeoutOrCancellation === 'number' ? timeoutOrCancellation : undefined;
        if (typeof cancellation === 'undefined' && typeof timeoutOrCancellation === 'object') {
            cancellation = timeoutOrCancellation;
        }
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (cancellation === null || cancellation === void 0 ? void 0 : cancellation.isCancellationRequested)
            throw new cancellation_1.CancellationError();
        if (this.count > 0) {
            // The semaphore is available now.
            this.count--;
            return true;
        }
        else if (millisecondsTimeout === 0) {
            // The semaphore is not available and the caller doesn't want to wait.
            return false;
        }
        else {
            const completion = new promiseCompletionSource_1.PromiseCompletionSource();
            this.completions.push(completion);
            // Start with a promise that completes with `true` when the wait succeeds.
            const promises = [completion.promise];
            if (millisecondsTimeout) {
                // Race against a promise that completes with `false` when the timeout expires.
                promises.push(new Promise((resolve) => setTimeout(() => resolve(false), millisecondsTimeout)));
            }
            if (cancellation) {
                // Race against a promise that throws when the cancellation token is cancelled.
                const cancellationCompletion = new promiseCompletionSource_1.PromiseCompletionSource();
                cancellation.onCancellationRequested(() => {
                    cancellationCompletion.reject(new cancellation_1.CancellationError());
                });
                promises.push(cancellationCompletion.promise);
            }
            if (await Promise.race(promises)) {
                // The wait succeeded.
                return true;
            }
            else {
                // The wait timed out. Remove the (not-completed) completion from the array.
                const completionIndex = this.completions.indexOf(completion);
                if (completionIndex >= 0)
                    this.completions.splice(completionIndex, 1);
                return false;
            }
        }
    }
    /**
     * Disposes the semaphore and throws a diposed error to any awaiters.
     */
    dispose() {
        if (this.disposed)
            return;
        this.disposed = true;
        for (let completion of this.completions) {
            completion.reject(new errors_1.ObjectDisposedError(this));
        }
        this.completions.splice(0, this.completions.length);
        this.count = 0;
    }
}
exports.Semaphore = Semaphore;
//# sourceMappingURL=semaphore.js.map

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ConnectionService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionService = void 0;
const trace_1 = __webpack_require__(24);
const sshService_1 = __webpack_require__(94);
const connectionMessages_1 = __webpack_require__(38);
const promiseCompletionSource_1 = __webpack_require__(39);
const sshChannel_1 = __webpack_require__(141);
const cancellation_1 = __webpack_require__(40);
const errors_1 = __webpack_require__(25);
const sshChannelOpeningEventArgs_1 = __webpack_require__(251);
const serviceActivation_1 = __webpack_require__(49);
let ConnectionService = ConnectionService_1 = class ConnectionService extends sshService_1.SshService {
    constructor(session) {
        super(session);
        this.channelCounter = 0;
        this.channelMap = new Map();
        this.nonAcceptedChannels = new Map();
        this.pendingChannels = new Map();
        this.pendingAcceptChannels = new Map();
    }
    get channels() {
        return Array.from(this.channelMap.values());
    }
    close(e) {
        for (let channel of this.channelMap.values()) {
            channel.close(e);
        }
    }
    dispose() {
        const channels = [...this.channelMap.values()];
        let channelCompletions = [...this.pendingChannels.values()].map((pc) => pc.completionSource);
        if (this.pendingAcceptChannels.size > 0) {
            channelCompletions = channelCompletions.concat([...this.pendingAcceptChannels.values()].reduce((a, b) => a.concat(b)));
        }
        for (let channel of channels) {
            channel.dispose();
        }
        for (let channelCompletion of channelCompletions) {
            channelCompletion.reject(new errors_1.SshConnectionError('Session closed.'));
        }
        super.dispose();
    }
    async acceptChannel(channelType, cancellation) {
        const completionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        let cancellationRegistration;
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellationRegistration = cancellation.onCancellationRequested(() => {
                const list = this.pendingAcceptChannels.get(channelType);
                if (list) {
                    const index = list.findIndex((item) => Object.is(item, completionSource));
                    if (index >= 0) {
                        list.splice(index, 1);
                    }
                }
                completionSource.reject(new cancellation_1.CancellationError());
            });
        }
        let channel = null;
        channel =
            Array.from(this.nonAcceptedChannels.values()).find((c) => c.channelType === channelType) ||
                null;
        if (channel) {
            // Found a channel that was already opened but not accepted.
            this.nonAcceptedChannels.delete(channel.channelId);
        }
        else {
            // Set up the completion source to wait for a channel of the requested type.
            let list = this.pendingAcceptChannels.get(channelType);
            if (!list) {
                list = [];
                this.pendingAcceptChannels.set(channelType, list);
            }
            list.push(completionSource);
        }
        try {
            return channel || (await completionSource.promise);
        }
        finally {
            if (cancellationRegistration)
                cancellationRegistration.dispose();
        }
    }
    async openChannel(openMessage, completionSource, cancellation) {
        const channelId = ++this.channelCounter;
        openMessage.senderChannel = channelId;
        let cancellationRegistration = null;
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellationRegistration = cancellation.onCancellationRequested(() => {
                if (this.pendingChannels.delete(channelId)) {
                    completionSource.reject(new cancellation_1.CancellationError());
                }
            });
        }
        this.pendingChannels.set(channelId, {
            openMessage: openMessage,
            completionSource: completionSource,
            cancellationRegistration: cancellationRegistration,
        });
        await this.session.sendMessage(openMessage);
        return channelId;
    }
    handleMessage(message, cancellation) {
        if (message instanceof connectionMessages_1.ChannelDataMessage) {
            return this.handleDataMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelWindowAdjustMessage) {
            return this.handleAdjustWindowMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelEofMessage) {
            return this.handleEofMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelOpenMessage) {
            return this.handleOpenMessage(message, cancellation);
        }
        else if (message instanceof connectionMessages_1.ChannelCloseMessage) {
            return this.handleCloseMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelOpenConfirmationMessage) {
            return this.handleOpenConfirmationMessage(message, cancellation);
        }
        else if (message instanceof connectionMessages_1.ChannelOpenFailureMessage) {
            return this.handleOpenFailureMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelRequestMessage) {
            return this.handleRequestMessage(message, cancellation);
        }
        else if (message instanceof connectionMessages_1.ChannelSuccessMessage) {
            return this.handleSuccessMessage(message);
        }
        else if (message instanceof connectionMessages_1.ChannelFailureMessage) {
            return this.handleFailureMessage(message);
        }
        else {
            throw new Error(`Message not implemented: ${message}`);
        }
    }
    async handleOpenMessage(message, cancellation) {
        if (!this.session.canAcceptRequests) {
            (0, trace_1.trace)('Channel open request blocked because the session is not yet authenticated.');
            const openFailureMessage = new connectionMessages_1.ChannelOpenFailureMessage();
            openFailureMessage.recipientChannel = message.senderChannel;
            openFailureMessage.reasonCode = connectionMessages_1.SshChannelOpenFailureReason.administrativelyProhibited;
            openFailureMessage.description = 'Authenticate before opening channels.';
            await this.session.sendMessage(openFailureMessage, cancellation);
            return;
        }
        else if (!message.channelType) {
            const openFailureMessage = new connectionMessages_1.ChannelOpenFailureMessage();
            openFailureMessage.recipientChannel = message.senderChannel;
            openFailureMessage.reasonCode = connectionMessages_1.SshChannelOpenFailureReason.unknownChannelType;
            openFailureMessage.description = 'Channel type not specified.';
            await this.session.sendMessage(openFailureMessage, cancellation);
            return;
        }
        const channel = new sshChannel_1.SshChannel(this, message.channelType, message.senderChannel, message.initialWindowSize, message.maximumPacketSize, ++this.channelCounter);
        const args = new sshChannelOpeningEventArgs_1.SshChannelOpeningEventArgs(message, channel, true);
        try {
            await this.session.handleChannelOpening(args, cancellation);
        }
        catch (e) {
            channel.dispose();
            throw e;
        }
        if (args.failureReason !== connectionMessages_1.SshChannelOpenFailureReason.none) {
            const failureMessage = new connectionMessages_1.ChannelOpenFailureMessage();
            failureMessage.recipientChannel = channel.remoteChannelId;
            failureMessage.reasonCode = args.failureReason;
            failureMessage.description = args.failureDescription || undefined;
            try {
                await this.session.sendMessage(failureMessage, cancellation);
            }
            finally {
                channel.dispose();
            }
            return;
        }
        // The session might have been closed while opening the channel.
        if (this.session.isClosed) {
            channel.dispose();
            return;
        }
        this.channelMap.set(channel.channelId, channel);
        const confirmationMessage = new connectionMessages_1.ChannelOpenConfirmationMessage();
        confirmationMessage.recipientChannel = channel.remoteChannelId;
        confirmationMessage.senderChannel = channel.channelId;
        confirmationMessage.initialWindowSize = message.initialWindowSize;
        confirmationMessage.maximumPacketSize = message.maximumPacketSize;
        await this.session.sendMessage(confirmationMessage, cancellation);
        // Check if there are any accept operations waiting on this channel type.
        let accepted = false;
        const list = this.pendingAcceptChannels.get(channel.channelType);
        while (list && list.length > 0) {
            const acceptCompletionSource = list.shift();
            acceptCompletionSource.resolve(channel);
            accepted = true;
            break;
        }
        if (!accepted) {
            this.nonAcceptedChannels.set(channel.channelId, channel);
        }
        this.onChannelOpenCompleted(channel.channelId, channel);
        channel.enableSending();
    }
    handleCloseMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            channel.handleClose();
        }
    }
    async handleOpenConfirmationMessage(message, cancellation) {
        var _a;
        let completionSource = null;
        let openMessage;
        const pendingChannel = this.pendingChannels.get(message.recipientChannel);
        if (pendingChannel) {
            openMessage = pendingChannel.openMessage;
            completionSource = pendingChannel.completionSource;
            if (pendingChannel.cancellationRegistration) {
                pendingChannel.cancellationRegistration.dispose();
            }
            this.pendingChannels.delete(message.recipientChannel);
        }
        else if (this.channelMap.has(message.recipientChannel)) {
            throw new Error('Duplicate channel ID.');
        }
        else {
            throw new Error('Channel confirmation was not requested.');
        }
        const channel = new sshChannel_1.SshChannel(this, openMessage.channelType || sshChannel_1.SshChannel.sessionChannelType, message.senderChannel, message.initialWindowSize, message.maximumPacketSize, message.recipientChannel);
        this.channelMap.set(channel.channelId, channel);
        const args = new sshChannelOpeningEventArgs_1.SshChannelOpeningEventArgs(openMessage, channel, false);
        await this.session.handleChannelOpening(args, cancellation);
        if (completionSource) {
            if (args.failureReason === connectionMessages_1.SshChannelOpenFailureReason.none) {
                completionSource.resolve(channel);
            }
            else {
                completionSource.reject(new errors_1.SshChannelError((_a = args.failureDescription) !== null && _a !== void 0 ? _a : 'Channel open failure.', args.failureReason));
                return;
            }
        }
        else {
            this.onChannelOpenCompleted(channel.channelId, channel);
        }
        channel.enableSending();
    }
    handleOpenFailureMessage(message) {
        let completionSource = null;
        const pendingChannel = this.pendingChannels.get(message.recipientChannel);
        if (pendingChannel) {
            completionSource = pendingChannel.completionSource;
            if (pendingChannel.cancellationRegistration) {
                pendingChannel.cancellationRegistration.dispose();
            }
            this.pendingChannels.delete(message.recipientChannel);
        }
        if (completionSource != null) {
            completionSource.reject(new errors_1.SshChannelError(message.description || 'Channel open rejected.', message.reasonCode));
        }
        else {
            this.onChannelOpenCompleted(message.recipientChannel, null);
        }
    }
    async handleRequestMessage(message, cancellation) {
        const channel = this.findChannelById(message.recipientChannel);
        if (!channel) {
            (0, trace_1.trace)(`Invalid channel ID ${message.recipientChannel} in channel request message.`);
            return;
        }
        await channel.handleRequest(message, cancellation);
    }
    handleSuccessMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (!channel) {
            (0, trace_1.trace)(`Invalid channel ID ${message.recipientChannel} in channel success message.`);
            return;
        }
        channel.handleResponse(true);
    }
    handleFailureMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (!channel) {
            (0, trace_1.trace)(`Invalid channel ID ${message.recipientChannel} in channel failure message.`);
            return;
        }
        channel.handleResponse(false);
    }
    handleDataMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            return channel.handleDataReceived(message.data);
        }
    }
    handleAdjustWindowMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            channel.adjustRemoteWindow(message.bytesToAdd);
        }
    }
    handleEofMessage(message) {
        const channel = this.findChannelById(message.recipientChannel);
        if (channel) {
            channel.handleEof();
        }
    }
    onChannelOpenCompleted(channelId, channel) {
        if (channel) {
            (0, trace_1.trace)(`${this.session} ChannelOpenCompleted(${channel})`);
        }
        else {
            (0, trace_1.trace)(`${this.session} ChannelOpenCompleted(${channelId} failed)`);
        }
    }
    findChannelById(id) {
        var _a;
        const channel = (_a = this.channelMap.get(id)) !== null && _a !== void 0 ? _a : null;
        return channel;
    }
    _removeChannel(channel) {
        this.channelMap.delete(channel.channelId);
        this.pendingChannels.delete(channel.channelId);
    }
};
ConnectionService.serviceName = 'ssh-connection';
ConnectionService = ConnectionService_1 = __decorate([
    (0, serviceActivation_1.serviceActivation)({ serviceRequest: ConnectionService_1.serviceName })
], ConnectionService);
exports.ConnectionService = ConnectionService;
//# sourceMappingURL=connectionService.js.map

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var OwnerType;
(function (OwnerType) {
    OwnerType["User"] = "User";
    OwnerType["Organization"] = "Organization";
})(OwnerType = exports.OwnerType || (exports.OwnerType = {}));
var VscsTarget;
(function (VscsTarget) {
    VscsTarget["Local"] = "local";
    VscsTarget["Development"] = "development";
    VscsTarget["DevGen2"] = "devgen2";
    VscsTarget["Ppe"] = "ppe";
    VscsTarget["Canary"] = "canary";
    VscsTarget["Production"] = "production";
})(VscsTarget = exports.VscsTarget || (exports.VscsTarget = {}));


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const vscs_utils_1 = __webpack_require__(8);
const vscode_jsonrpc_1 = __webpack_require__(6);
function getEventPropertyName(eventName) {
    return `on${eventName.substr(0, 1).toUpperCase()}${eventName.substr(1)}`;
}
exports.getEventPropertyName = getEventPropertyName;
/**
 * Hookup all events from a service and invoke a generic listener
 * @param service The service instance
 * @param eventNames the name of the rpc events to hookup.
 * @param listener Callback to invoke when each event is fired.
 * @returns A disposable instance to un hookup
 */
function onAllEvents(service, eventNames, listener) {
    const disposables = [];
    for (const eventName of eventNames) {
        const eventPropertyName = getEventPropertyName(eventName);
        const event = service[eventPropertyName];
        disposables.push(event((e) => listener(eventName, e)));
    }
    return vscs_utils_1.createDisposable(() => {
        disposables.forEach((d) => d.dispose());
    });
}
exports.onAllEvents = onAllEvents;
/**
 * notify a set of rpc connections
 * @param rpcConnections list of rpc connections.
 * @param serviceAndMethod service and method name
 * @param e Event argument
 * @param logger optional logger instance.
 */
function notifyConnections(rpcConnections, serviceAndMethod, e, logger) {
    rpcConnections.forEach((mc) => {
        try {
            mc.sendNotification(serviceAndMethod, e);
        }
        catch (err) {
            logger === null || logger === void 0 ? void 0 : logger.error(`failed to send notification method:${serviceAndMethod} index:${rpcConnections.indexOf(mc)}`);
        }
    });
}
exports.notifyConnections = notifyConnections;
class WrappedMessageReader {
    constructor(messageReader, messageTransformer) {
        this.messageReader = messageReader;
        this.messageTransformer = messageTransformer;
        this.onError = this.messageReader.onError;
        this.onClose = this.messageReader.onClose;
        this.onPartialMessage = this.messageReader.onPartialMessage;
    }
    listen(callback) {
        const wrappedCallback = (msg) => {
            callback(this.messageTransformer(msg));
        };
        this.messageReader.listen(wrappedCallback);
    }
    dispose() {
        this.messageReader.dispose();
    }
}
exports.WrappedMessageReader = WrappedMessageReader;
class WrappedMessageWriter {
    constructor(messageWriter, messageTransformer) {
        this.messageWriter = messageWriter;
        this.messageTransformer = messageTransformer;
        this.onError = this.messageWriter.onError;
        this.onClose = this.messageWriter.onClose;
    }
    write(msg) {
        this.messageWriter.write(this.messageTransformer(msg));
    }
    dispose() {
        this.messageWriter.dispose();
    }
}
exports.WrappedMessageWriter = WrappedMessageWriter;
class TimingFilter {
    constructor() {
        // Map from message ids to when the message was received/sent
        this.times = new Map();
    }
    filter(isWrite, msg) {
        if (typeof msg.id !== 'number') {
            return msg;
        }
        if (this.times.has(msg.id)) {
            const duration = Date.now() - this.times.get(msg.id);
            this.times.delete(msg.id);
            // If one of the RPC clients doesn't include timing information (e.g. they are an older version),
            // none of them should to avoid misleading data.
            if (isWrite || typeof msg.times !== 'undefined') {
                msg.times = TimedRpcMessageUtils.addTime(msg.times, duration);
            }
        }
        else {
            this.times.set(msg.id, Date.now());
        }
        return msg;
    }
}
exports.TimingFilter = TimingFilter;
/*
The "times" property on an RPC message is an
array of times in milliseconds taken to send/receive/respond to requests
Includes times from sending requests to receiving responses and
time from receiving requests to returning responses.

E.g. a simple scenario where A makes a request to B:
A sends a request to B and begins timing.
B receives the request and begins timing.
B processes the request.
B is ready to resolve the request, so stops timing, stamps
the time it took to respond on the response message, and sends the reponse.
A receives the response, stops timing, subtracts off the time taken for B to respond (this time is
included in the response message) and adds another item to the list of handling times on the response message.
The first time in the list of handling times is the amount of time it took B to process the request,
and the second time in the list is the communication latency between A and B.

In more complicated scenarios where requests go through multiple clients,
the list of handling times can be used to find the communication latency between
each RPC client in the chain, and how long processing took at each client.

In general, the last client in the chain will only contribute one time to the list:
the amount of time it took to respond to the request. So this is always
the first item in the list. Similarly, the first client in the chain (the one that made the initial request)
only contributes one time to the list: the communication latency between itself and the
first client in the chain. So this is always the last item in the list. Intermediate clients contribute 2 times each:
the first is the communication latency between the client and the next in the chain. The second is the time
it took the client to do any intermediate processing before forwarding the request on to the next client and
returning the response to the previous client.

E.g. if times = [a, b, c, d], there were three clients involved in the request. a is the time it took
the last client to handle the request, b is the communication latency between the second and third client,
c is the time it took the second client from receiving the request from the first client to forward the request
to the third client plus the time from receiving the response from the third client to sending it to the first client,
and d is the communication latency between the first and second client. The full time from the first client
making the request to receiving the response is a + b + c + d. In general, the latency of the request is the sum of
every other item in the list, starting at index 1 (here b + d), and the processing time is the sum of every other item
in the list, starting at index 0 (here a + c).
*/
class TimedRpcMessageUtils {
    static addTime(times, time) {
        if (typeof times === 'undefined') {
            times = [];
        }
        const timeToAdd = time - TimedRpcMessageUtils.getTotalTime(times);
        times.push(timeToAdd > 0 ? timeToAdd : 0);
        return times;
    }
    // The latency is the sum of every other item in the list of times, starting at index 1.
    // See comment above this class for detailed explanation.
    static getLatency(times) {
        let latency = 0;
        if (times) {
            for (let i = 1; i < times.length; i += 2) {
                latency += times[i];
            }
        }
        return latency;
    }
    // The processing time is the sum of every other item in the list of times, starting at index 0.
    // See comment above this class for detailed explanation.
    static getProcessingTime(times) {
        let processingTime = 0;
        if (times) {
            for (let i = 0; i < times.length; i += 2) {
                processingTime += times[i];
            }
        }
        return processingTime;
    }
    static getTotalTime(times) {
        return (TimedRpcMessageUtils.getLatency(times) + TimedRpcMessageUtils.getProcessingTime(times));
    }
}
exports.TimedRpcMessageUtils = TimedRpcMessageUtils;
/*
    RPC message filter that adds message context to the parameter object of RPC messages
*/
function addContextToRpcMessage(msg) {
    if (!msg) {
        return msg;
    }
    const context = msg.context;
    const params = msg.params;
    if (typeof context !== 'object' ||
        typeof params !== 'object' ||
        Array.isArray(params) ||
        params.context) {
        return msg;
    }
    return Object.assign({}, msg, { params: Object.assign({ context }, params) });
}
exports.addContextToRpcMessage = addContextToRpcMessage;
class RpcRequestsWithContext {
    constructor() {
        this.methods = new Set();
        this.readFilter = this.filterMessage.bind(this);
    }
    add(method) {
        if (method) {
            this.methods.add(method);
        }
    }
    filterMessage(msg) {
        const request = msg;
        if (!request.method || !this.methods.has(request.method)) {
            return msg;
        }
        const context = msg.context || {};
        if (!request.params) {
            request.params = [context];
        }
        else if (Array.isArray(request.params)) {
            request.params.push(context);
        }
        return request;
    }
}
exports.RpcRequestsWithContext = RpcRequestsWithContext;
function createMethodNotFoundResponse(method) {
    return new vscode_jsonrpc_1.ResponseError(vscode_jsonrpc_1.ErrorCodes.MethodNotFound, `method:${method} not supported`);
}
exports.createMethodNotFoundResponse = createMethodNotFoundResponse;
//# sourceMappingURL=RpcUtils.js.map

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Identifiers for Cloud Environment tree views.
 */
var View;
(function (View) {
    View["Environments"] = "github.codespaces.explorer";
    View["EnvironmentPerformance"] = "github.codespaces.performanceExplorer";
})(View = exports.View || (exports.View = {}));
/**
 * Identifiers for Cloud Environment tree view items.
 */
var ViewItem;
(function (ViewItem) {
    ViewItem["ServiceUnavailable"] = "serviceUnavailable";
    // Environment Types
    ViewItem["CloudHostedEnvironments"] = "cloudHostedEnvironments";
    ViewItem["CodespaceRecentPath"] = "codespaceRecentPath";
    ViewItem["Folder"] = "folder";
    //session item groups
    ViewItem["ConnectToEnvironment"] = "environments.connectToEnvironment";
    ViewItem["CreateEnvironment"] = "environments.createEnvironment";
    ViewItem["RegisterEnvironment"] = "environments.registerEnvironment";
    ViewItem["SignIn"] = "environments.signIn";
    ViewItem["Environment"] = "environments.environment";
    ViewItem["SelectedEnvironment"] = "environments.selectedEnvironment";
    ViewItem["Ports"] = "Environments.ports";
    ViewItem["ForwardedPorts"] = "Environments.forwardedPorts";
    ViewItem["RepoName"] = "Environments.repo";
    ViewItem["Branch"] = "Environments.branch";
    ViewItem["CreatedAt"] = "Environments.createdAt";
    ViewItem["SkuDisplayName"] = "Environments.skuDisplayName";
    ViewItem["SuspendTimeout"] = "Environments.suspendTimeout";
    ViewItem["VscsTarget"] = "Environments.vscsTarget";
    ViewItem["CodespaceCpuUsage"] = "EnvironmentPerformance.codespaceCpuUsage";
    ViewItem["ClientCpuUsage"] = "EnvironmentPerformance.clientCpuUsage";
    ViewItem["MemoryUsed"] = "EnvironmentPerformance.memoryUsed";
    ViewItem["FileShareDiskUsed"] = "EnvironmentPerformance.fileShareDiskUsed";
    ViewItem["DockerLibDiskUsed"] = "EnvironmentPerformance.dockerLibDiskUsed";
    ViewItem["EnvironmentID"] = "EnvironmentPerformance.id";
    ViewItem["EnvironmentRegion"] = "EnvironmentPerformance.region";
    ViewItem["SessionID"] = "EnvironmentPerformance.sessionId";
    ViewItem["SessionDisconnections"] = "EnvironmentPerformance.sessionDisconnections";
    ViewItem["SessionBytesIn"] = "EnvironmentPerformance.sessionBytesIn";
    ViewItem["SessionBytesOut"] = "EnvironmentPerformance.sessionBytesOut";
    ViewItem["SessionLatencyCurrent"] = "EnvironmentPerformance.sessionLatencyCurrent";
    ViewItem["SessionLatencyDetails"] = "EnvironmentPerformance.sessionLatencyDetails";
    ViewItem["CreateCodespaceTime"] = "EnvironmentPerformance.createCodespaceTime";
    ViewItem["ResumeCodespaceTime"] = "EnvironmentPerformance.resumeCodespaceTime";
    ViewItem["NotConnected"] = "EnvironmentPerformance.notConnected";
    ViewItem["DontAskAgain"] = "help.dontAskAgain";
    ViewItem["GoodFeedback"] = "help.goodFeedback";
    ViewItem["BadFeedback"] = "help.badFeedback";
    ViewItem["Thankyou"] = "help.thankyou";
    ViewItem["Survey"] = "help.survey";
    ViewItem["SessionFeedbackQuestion"] = "help.sessionFeedback";
    ViewItem["TweetUsYourFeedback"] = "help.tweetUsYourFeedback";
    ViewItem["ReportAProblem"] = "help.reportAProblem";
    ViewItem["MoreInfo"] = "help.moreinfo";
    ViewItem["other"] = "other";
})(ViewItem = exports.ViewItem || (exports.ViewItem = {}));


/***/ }),
/* 77 */
/***/ (function(module, exports) {

exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const TraceFormat_1 = __webpack_require__(58);
/**
 * Base class for a listener for events from a TraceSource.
 */
class TraceListener {
    constructor() {
        this.filter = null;
    }
    traceEvent(source, logLevel, id, message, ...args) {
        if (!this.filter || this.filter.shouldTrace(source, logLevel, id)) {
            this.writeEvent(source, logLevel, id, message, ...args);
        }
    }
    writeLine(source, line, includeTimestamp) {
        if (includeTimestamp) {
            line = `[${TraceFormat_1.TraceFormat.formatDate(new Date())} ${source}] ${line}`;
        }
        this.writeTo(line);
    }
}
exports.TraceListener = TraceListener;
//# sourceMappingURL=TraceListener.js.map

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class TelemetryEventNames {
}
exports.TelemetryEventNames = TelemetryEventNames;
TelemetryEventNames.FAULT_PREFIX = 'Fault/';
TelemetryEventNames.NAME_LOGS_FILE_FAILED = TelemetryEventNames.FAULT_PREFIX + 'name-logfile-failed';
TelemetryEventNames.OPEN_LOGS_FAILED = TelemetryEventNames.FAULT_PREFIX + 'open-logs-failed';
TelemetryEventNames.WRITE_LOGS_FAILED = TelemetryEventNames.FAULT_PREFIX + 'write-logs-failed';
TelemetryEventNames.UNHANDLED_COMMAND_ERROR_FAULT = TelemetryEventNames.FAULT_PREFIX + 'unhandled-commanderror-fault';
class TelemetryPropertyNames {
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.FEATURE_NAME = 'vscode-vsls-command.';
TelemetryPropertyNames.FEATURE_NAME_V2 = TelemetryPropertyNames.FEATURE_NAME + 'v2.';
TelemetryPropertyNames.COMMAND_TEXT = TelemetryPropertyNames.FEATURE_NAME + 'CommandText';
TelemetryPropertyNames.TELEMETRY_EVENT_VERSION = TelemetryPropertyNames.FEATURE_NAME + 'TelemetryEventVersion';
TelemetryPropertyNames.CURRENT_AB_EXPERIMENT = TelemetryPropertyNames.FEATURE_NAME + 'CurrentAbExperiment';
TelemetryPropertyNames.CURRENT_AB_EXPERIMENT_GROUP = TelemetryPropertyNames.FEATURE_NAME + 'CurrentAbExperimentGroup';
TelemetryPropertyNames.COUNT_OF_CONCURRENT_AB_EXPERIMENTS = TelemetryPropertyNames.FEATURE_NAME + 'CountOfConcurrentAbExperiments';
TelemetryPropertyNames.IS_FIRST_ACTIVATION = TelemetryPropertyNames.FEATURE_NAME + 'IsFirstActivation';
//# sourceMappingURL=telemetryStrings.js.map

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        var foundCallbackWithDifferentContext = false;
        for (var i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (var i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                let result;
                result = {
                    dispose: () => {
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
Emitter._noop = function () { };
exports.Emitter = Emitter;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(4).Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer
var MD5 = __webpack_require__(106)

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var utils = __webpack_require__(20);
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(405)
var aesid = __webpack_require__(416)
var fixProc = __webpack_require__(417)
var ciphers = __webpack_require__(114)
var compat = __webpack_require__(189)
var Buffer = __webpack_require__(4).Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var objectAssign = __webpack_require__(446);

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(122);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// decorators
__export(__webpack_require__(469));
// assertion utils
__export(__webpack_require__(232));
// misc utils
var wait_1 = __webpack_require__(126);
exports.wait = wait_1.wait;
var once_1 = __webpack_require__(479);
exports.once = once_1.once;
var onlyOnce_1 = __webpack_require__(480);
exports.onlyOnce = onlyOnce_1.onlyOnce;
var raceAsync_1 = __webpack_require__(481);
exports.raceAsync = raceAsync_1.raceAsync;
var withCache_1 = __webpack_require__(486);
exports.withCache = withCache_1.withCache;
var continueWhen_1 = __webpack_require__(487);
exports.continueWhen = continueWhen_1.continueWhen;
var getPromiseState_1 = __webpack_require__(488);
exports.getPromiseState = getPromiseState_1.getPromiseState;
var idFunction_1 = __webpack_require__(489);
exports.idFunction = idFunction_1.idFunction;
var withRetries_1 = __webpack_require__(230);
exports.withRetries = withRetries_1.withRetries;
var connectEvents_1 = __webpack_require__(490);
exports.connectEvents = connectEvents_1.connectEvents;
var withMutexByArguments_1 = __webpack_require__(491);
exports.withMutexByArguments = withMutexByArguments_1.withMutexByArguments;
var cleanupPII_1 = __webpack_require__(237);
exports.cleanupPII = cleanupPII_1.cleanupPII;
exports.cleanupObjectValuesPII = cleanupPII_1.cleanupObjectValuesPII;
exports.obfusticatePaths = cleanupPII_1.obfusticatePaths;
exports.obfusticateEmailAddresses = cleanupPII_1.obfusticateEmailAddresses;
exports.obfusticateCodespaceNames = cleanupPII_1.obfusticateCodespaceNames;
exports.CODESPACE_URL_PII_LABEL = cleanupPII_1.CODESPACE_URL_PII_LABEL;
var randomInt_1 = __webpack_require__(129);
exports.randomInt = randomInt_1.randomInt;
var randomItem_1 = __webpack_require__(492);
exports.randomItem = randomItem_1.randomItem;
var randomBytes_1 = __webpack_require__(238);
exports.randomBytes = randomBytes_1.randomBytes;
var randomString_1 = __webpack_require__(493);
exports.randomString = randomString_1.randomString;
var randomBoolean_1 = __webpack_require__(494);
exports.randomBoolean = randomBoolean_1.randomBoolean;
var hashString_1 = __webpack_require__(236);
exports.hashString = hashString_1.hashString;
var debounce_1 = __webpack_require__(495);
exports.debounce = debounce_1.debounce;
var throttle_1 = __webpack_require__(496);
exports.throttle = throttle_1.throttle;
var defer_1 = __webpack_require__(128);
exports.defer = defer_1.defer;
var arrayUnique_1 = __webpack_require__(497);
exports.arrayUnique = arrayUnique_1.arrayUnique;
var isThenable_1 = __webpack_require__(498);
exports.isThenable = isThenable_1.isThenable;
var createDisposable_1 = __webpack_require__(235);
exports.createDisposable = createDisposable_1.createDisposable;
var timeoutPromise_1 = __webpack_require__(234);
exports.timeoutPromise = timeoutPromise_1.timeoutPromise;
var errorToObject_1 = __webpack_require__(239);
exports.errorToObject = errorToObject_1.errorToObject;
var errorToString_1 = __webpack_require__(499);
exports.errorToString = errorToString_1.errorToString;
var notImplemented_1 = __webpack_require__(500);
exports.notImplemented = notImplemented_1.notImplemented;
var promiseAny_1 = __webpack_require__(501);
exports.promiseAny = promiseAny_1.promiseAny;
var toCamelCase_1 = __webpack_require__(502);
exports.toCamelCase = toCamelCase_1.toCamelCase;
var crc32_1 = __webpack_require__(503);
exports.crc32 = crc32_1.crc32;
__export(__webpack_require__(233));
// TODO legomushroom - cleanup?
function propertiesToJSON(o) {
    if (o) {
        return JSON.stringify(o, Object.getOwnPropertyNames(o));
    }
}
exports.propertiesToJSON = propertiesToJSON;
function propertiesToString(o) {
    var _a;
    return `type:${(_a = o === null || o === void 0 ? void 0 : o.constructor) === null || _a === void 0 ? void 0 : _a.name} props:${propertiesToJSON(o)}`;
}
exports.propertiesToString = propertiesToString;
//# sourceMappingURL=index.js.map

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __webpack_require__(37);
/**
 * Assert the `val` object is not `null` nor `undefined`, if it is
 * throw an `AssertionError` with the `errorMessage`. Alternatively,
 * if an error instance is passed as the `errorMessage`, throw that instead.
 */
exports.assertDefined = (val, errorMessage) => {
    return assert_1.assert(val != null, errorMessage);
};
//# sourceMappingURL=assertDefined.js.map

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var DisposableClass_1 = __webpack_require__(482);
exports.DisposableClass = DisposableClass_1.DisposableClass;
var Signal_1 = __webpack_require__(127);
exports.Signal = Signal_1.Signal;
var Mutex_1 = __webpack_require__(483);
exports.Mutex = Mutex_1.Mutex;
var CallbackContainer_1 = __webpack_require__(484);
exports.CallbackContainer = CallbackContainer_1.CallbackContainer;
__export(__webpack_require__(485));
//# sourceMappingURL=index.js.map

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.curves = void 0;
/**
 * List of EC curves supported by the SSH ECDSA algorithm.
 */
exports.curves = [
    {
        shortName: 'P-256',
        name: 'nistp256',
        oid: '1.2.840.10045.3.1.7',
        keySize: 256,
    },
    {
        shortName: 'P-384',
        name: 'nistp384',
        oid: '1.3.132.0.34',
        keySize: 384,
    },
    {
        shortName: 'P-521',
        name: 'nistp521',
        oid: '1.3.132.0.35',
        keySize: 521,
    },
];
//# sourceMappingURL=ecdsaCurves.js.map

/***/ }),
/* 92 */
/***/ (function(module) {

module.exports = JSON.parse("{\"O_RDONLY\":0,\"O_WRONLY\":1,\"O_RDWR\":2,\"S_IFMT\":61440,\"S_IFREG\":32768,\"S_IFDIR\":16384,\"S_IFCHR\":8192,\"S_IFBLK\":24576,\"S_IFIFO\":4096,\"S_IFLNK\":40960,\"S_IFSOCK\":49152,\"O_CREAT\":512,\"O_EXCL\":2048,\"O_NOCTTY\":131072,\"O_TRUNC\":1024,\"O_APPEND\":8,\"O_DIRECTORY\":1048576,\"O_NOFOLLOW\":256,\"O_SYNC\":128,\"O_SYMLINK\":2097152,\"O_NONBLOCK\":4,\"S_IRWXU\":448,\"S_IRUSR\":256,\"S_IWUSR\":128,\"S_IXUSR\":64,\"S_IRWXG\":56,\"S_IRGRP\":32,\"S_IWGRP\":16,\"S_IXGRP\":8,\"S_IRWXO\":7,\"S_IROTH\":4,\"S_IWOTH\":2,\"S_IXOTH\":1,\"E2BIG\":7,\"EACCES\":13,\"EADDRINUSE\":48,\"EADDRNOTAVAIL\":49,\"EAFNOSUPPORT\":47,\"EAGAIN\":35,\"EALREADY\":37,\"EBADF\":9,\"EBADMSG\":94,\"EBUSY\":16,\"ECANCELED\":89,\"ECHILD\":10,\"ECONNABORTED\":53,\"ECONNREFUSED\":61,\"ECONNRESET\":54,\"EDEADLK\":11,\"EDESTADDRREQ\":39,\"EDOM\":33,\"EDQUOT\":69,\"EEXIST\":17,\"EFAULT\":14,\"EFBIG\":27,\"EHOSTUNREACH\":65,\"EIDRM\":90,\"EILSEQ\":92,\"EINPROGRESS\":36,\"EINTR\":4,\"EINVAL\":22,\"EIO\":5,\"EISCONN\":56,\"EISDIR\":21,\"ELOOP\":62,\"EMFILE\":24,\"EMLINK\":31,\"EMSGSIZE\":40,\"EMULTIHOP\":95,\"ENAMETOOLONG\":63,\"ENETDOWN\":50,\"ENETRESET\":52,\"ENETUNREACH\":51,\"ENFILE\":23,\"ENOBUFS\":55,\"ENODATA\":96,\"ENODEV\":19,\"ENOENT\":2,\"ENOEXEC\":8,\"ENOLCK\":77,\"ENOLINK\":97,\"ENOMEM\":12,\"ENOMSG\":91,\"ENOPROTOOPT\":42,\"ENOSPC\":28,\"ENOSR\":98,\"ENOSTR\":99,\"ENOSYS\":78,\"ENOTCONN\":57,\"ENOTDIR\":20,\"ENOTEMPTY\":66,\"ENOTSOCK\":38,\"ENOTSUP\":45,\"ENOTTY\":25,\"ENXIO\":6,\"EOPNOTSUPP\":102,\"EOVERFLOW\":84,\"EPERM\":1,\"EPIPE\":32,\"EPROTO\":100,\"EPROTONOSUPPORT\":43,\"EPROTOTYPE\":41,\"ERANGE\":34,\"EROFS\":30,\"ESPIPE\":29,\"ESRCH\":3,\"ESTALE\":70,\"ETIME\":101,\"ETIMEDOUT\":60,\"ETXTBSY\":26,\"EWOULDBLOCK\":35,\"EXDEV\":18,\"SIGHUP\":1,\"SIGINT\":2,\"SIGQUIT\":3,\"SIGILL\":4,\"SIGTRAP\":5,\"SIGABRT\":6,\"SIGIOT\":6,\"SIGBUS\":10,\"SIGFPE\":8,\"SIGKILL\":9,\"SIGUSR1\":30,\"SIGSEGV\":11,\"SIGUSR2\":31,\"SIGPIPE\":13,\"SIGALRM\":14,\"SIGTERM\":15,\"SIGCHLD\":20,\"SIGCONT\":19,\"SIGSTOP\":17,\"SIGTSTP\":18,\"SIGTTIN\":21,\"SIGTTOU\":22,\"SIGURG\":16,\"SIGXCPU\":24,\"SIGXFSZ\":25,\"SIGVTALRM\":26,\"SIGPROF\":27,\"SIGWINCH\":28,\"SIGIO\":23,\"SIGSYS\":12,\"SSL_OP_ALL\":2147486719,\"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\":262144,\"SSL_OP_CIPHER_SERVER_PREFERENCE\":4194304,\"SSL_OP_CISCO_ANYCONNECT\":32768,\"SSL_OP_COOKIE_EXCHANGE\":8192,\"SSL_OP_CRYPTOPRO_TLSEXT_BUG\":2147483648,\"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\":2048,\"SSL_OP_EPHEMERAL_RSA\":0,\"SSL_OP_LEGACY_SERVER_CONNECT\":4,\"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER\":32,\"SSL_OP_MICROSOFT_SESS_ID_BUG\":1,\"SSL_OP_MSIE_SSLV2_RSA_PADDING\":0,\"SSL_OP_NETSCAPE_CA_DN_BUG\":536870912,\"SSL_OP_NETSCAPE_CHALLENGE_BUG\":2,\"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG\":1073741824,\"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG\":8,\"SSL_OP_NO_COMPRESSION\":131072,\"SSL_OP_NO_QUERY_MTU\":4096,\"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION\":65536,\"SSL_OP_NO_SSLv2\":16777216,\"SSL_OP_NO_SSLv3\":33554432,\"SSL_OP_NO_TICKET\":16384,\"SSL_OP_NO_TLSv1\":67108864,\"SSL_OP_NO_TLSv1_1\":268435456,\"SSL_OP_NO_TLSv1_2\":134217728,\"SSL_OP_PKCS1_CHECK_1\":0,\"SSL_OP_PKCS1_CHECK_2\":0,\"SSL_OP_SINGLE_DH_USE\":1048576,\"SSL_OP_SINGLE_ECDH_USE\":524288,\"SSL_OP_SSLEAY_080_CLIENT_DH_BUG\":128,\"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG\":0,\"SSL_OP_TLS_BLOCK_PADDING_BUG\":512,\"SSL_OP_TLS_D5_BUG\":256,\"SSL_OP_TLS_ROLLBACK_BUG\":8388608,\"ENGINE_METHOD_DSA\":2,\"ENGINE_METHOD_DH\":4,\"ENGINE_METHOD_RAND\":8,\"ENGINE_METHOD_ECDH\":16,\"ENGINE_METHOD_ECDSA\":32,\"ENGINE_METHOD_CIPHERS\":64,\"ENGINE_METHOD_DIGESTS\":128,\"ENGINE_METHOD_STORE\":256,\"ENGINE_METHOD_PKEY_METHS\":512,\"ENGINE_METHOD_PKEY_ASN1_METHS\":1024,\"ENGINE_METHOD_ALL\":65535,\"ENGINE_METHOD_NONE\":0,\"DH_CHECK_P_NOT_SAFE_PRIME\":2,\"DH_CHECK_P_NOT_PRIME\":1,\"DH_UNABLE_TO_CHECK_GENERATOR\":4,\"DH_NOT_SUITABLE_GENERATOR\":8,\"NPN_ENABLED\":1,\"RSA_PKCS1_PADDING\":1,\"RSA_SSLV23_PADDING\":2,\"RSA_NO_PADDING\":3,\"RSA_PKCS1_OAEP_PADDING\":4,\"RSA_X931_PADDING\":5,\"RSA_PKCS1_PSS_PADDING\":6,\"POINT_CONVERSION_COMPRESSED\":2,\"POINT_CONVERSION_UNCOMPRESSED\":4,\"POINT_CONVERSION_HYBRID\":6,\"F_OK\":0,\"R_OK\":4,\"W_OK\":2,\"X_OK\":1,\"UV_UDP_REUSEADDR\":4}");

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
/**
 * Generic iterable queue implementation using an auto-expanding circular array buffer.
 * Designed to be more efficient for high-volume use compared to a simpler JS queue using
 * `Array.shift()` (which would cause a lot of allocations).
 */
class Queue {
    constructor() {
        this.array = new Array();
        this.first = 0;
        this.count = 0;
        /**
         * The version is incremented upon any changes to the queue, so that any iterators can detect the
         * change and become invalid. `MAX_SAFE_INTEGER` is 2^53-1 so this isn't likely to ever overflow.
         */
        this.version = 0;
    }
    /**
     * Gets the current size of the queue.
     */
    get size() {
        return this.count;
    }
    /**
     * Adds an item to the end of the queue.
     */
    enqueue(item) {
        if (this.count === this.array.length) {
            const newArray = new Array(Math.max(16, this.count * 2));
            for (let i = 0; i < this.count; i++) {
                newArray[i] = this.array[(this.first + i) % this.count];
            }
            this.array = newArray;
            this.first = 0;
        }
        this.array[(this.first + this.count) % this.array.length] = item;
        this.count++;
        this.version++;
    }
    /**
     * Removes an item from the front of the queue.
     * @returns The removed item, or `undefined` if the queue is empty.
     */
    dequeue() {
        if (this.count === 0)
            return undefined;
        const item = this.array[this.first];
        this.array[this.first] = undefined; // Allow the item to be GC'd.
        this.first = (this.first + 1) % this.array.length;
        this.count--;
        this.version++;
        return item;
    }
    /**
     * Gets the item at the front of the queue without removing it.
     * @returns The front item, or `undefined` if the queue is empty.
     */
    peek() {
        if (this.count === 0)
            return undefined;
        const item = this.array[this.first];
        return item;
    }
    /**
     * Clears the queue.
     */
    clear() {
        this.first = 0;
        this.count = 0;
        this.array.fill(undefined); // Allow items to be GC'd.
        this.version++;
    }
    /**
     * Creates an iterator over the items in the queue.
     * (Any changes to the queue will invalidate the iterator.)
     */
    *[Symbol.iterator]() {
        const iteratorVersion = this.version;
        for (let i = 0; i < this.count; i++) {
            const item = this.array[(this.first + i) % this.array.length];
            yield item;
            if (this.version !== iteratorVersion) {
                throw new Error('Iterator is invalid due to changes in the collection.');
            }
        }
    }
}
exports.Queue = Queue;
//# sourceMappingURL=queue.js.map

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshService = void 0;
/**
 * Base class for SSH session services that handle incoming requests.
 *
 * Services can be on either the server side or the client side, because either side may
 * send requests to the other's services.
 *
 * Service subclasses must have one or more `serviceActivation` decorators applied to them to
 * declare the type(s) of requests that cause the service to be activated. Only one instance
 * of each service type gets activated for a session, even if there are multiple activation
 * rules. After activation, a service remains active for the duration of the session,
 * handling any additional requests, until it is disposed when the session is disposed.
 *
 * To enable activation of a service, add the service type to
 * `SshSessionConfiguration.services`. When a service is activated, the session raises a
 * `SshSession.serviceActivated` event.
 */
class SshService {
    constructor(session) {
        this.session = session;
    }
    dispose() { }
    /**
     * Services that are activated via session requests must override this method to handle
     * incoming session requests.
     *
     * Implementations must send a success or failure response message if
     * `SessionRequestMessage.wantReply` is true.
     */
    async onSessionRequest(request, cancellation) {
        this.session.raiseSessionRequest(request);
    }
    /**
     * Services that are activated via channel types must override this method to handle
     * incoming requests to open a channel.
     *
     * Implementations may set `SshChannelOpeningEventArgs.failureReason`
     * to block opening of the channel. The default behavior allows the channel to open.
     *
     * Requests on the opened channel will not be directed to `onChannelRequest`
     * unless the service also declares activation on specific channel request(s). Otherwise,
     * an implementation of this method may add any event-handlers to the
     * `SshChannelOpeningEventArgs.channel` including a request event handler.
     */
    async onChannelOpening(request, cancellation) {
        this.session.raiseChannelOpening(request);
    }
    /**
     * Services that are activated via channel requests must override this method to handle
     * incoming channel requests.
     *
     * Implementations must set `SshRequestEventArgs.isAuthorized` to `true` or `false` to
     * indicate whether the request was allowed.
     */
    async onChannelRequest(channel, request, cancellation) { }
    /**
     * Sends any message.
     */
    async sendMessage(message, cancellation) {
        await this.session.sendMessage(message, cancellation);
    }
}
exports.SshService = SshService;
//# sourceMappingURL=sshService.js.map

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isSpanContextValid = exports.isValidSpanId = exports.isValidTraceId = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;
var trace_flags_1 = __webpack_require__(280);
var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
exports.INVALID_SPANID = '0000000000000000';
exports.INVALID_TRACEID = '00000000000000000000000000000000';
exports.INVALID_SPAN_CONTEXT = {
    traceId: exports.INVALID_TRACEID,
    spanId: exports.INVALID_SPANID,
    traceFlags: trace_flags_1.TraceFlags.NONE,
};
function isValidTraceId(traceId) {
    return VALID_TRACEID_REGEX.test(traceId) && traceId !== exports.INVALID_TRACEID;
}
exports.isValidTraceId = isValidTraceId;
function isValidSpanId(spanId) {
    return VALID_SPANID_REGEX.test(spanId) && spanId !== exports.INVALID_SPANID;
}
exports.isValidSpanId = isValidSpanId;
/**
 * Returns true if this {@link SpanContext} is valid.
 * @return true if this {@link SpanContext} is valid.
 */
function isSpanContextValid(spanContext) {
    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));
}
exports.isSpanContextValid = isSpanContextValid;
//# sourceMappingURL=spancontext-utils.js.map

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.API_BACKWARDS_COMPATIBILITY_VERSION = exports.makeGetter = exports._global = exports.GLOBAL_TRACE_API_KEY = exports.GLOBAL_PROPAGATION_API_KEY = exports.GLOBAL_METRICS_API_KEY = exports.GLOBAL_CONTEXT_MANAGER_API_KEY = void 0;
var platform_1 = __webpack_require__(647);
exports.GLOBAL_CONTEXT_MANAGER_API_KEY = Symbol.for('io.opentelemetry.js.api.context');
exports.GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');
exports.GLOBAL_PROPAGATION_API_KEY = Symbol.for('io.opentelemetry.js.api.propagation');
exports.GLOBAL_TRACE_API_KEY = Symbol.for('io.opentelemetry.js.api.trace');
exports._global = platform_1._globalThis;
/**
 * Make a function which accepts a version integer and returns the instance of an API if the version
 * is compatible, or a fallback version (usually NOOP) if it is not.
 *
 * @param requiredVersion Backwards compatibility version which is required to return the instance
 * @param instance Instance which should be returned if the required version is compatible
 * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible
 */
function makeGetter(requiredVersion, instance, fallback) {
    return function (version) {
        return version === requiredVersion ? instance : fallback;
    };
}
exports.makeGetter = makeGetter;
/**
 * A number which should be incremented each time a backwards incompatible
 * change is made to the API. This number is used when an API package
 * attempts to access the global API to ensure it is getting a compatible
 * version. If the global API is not compatible with the API package
 * attempting to get it, a NOOP API implementation will be returned.
 */
exports.API_BACKWARDS_COMPATIBILITY_VERSION = 2;
//# sourceMappingURL=global-utils.js.map

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.openTelemetryTracerName = 'codespaces tracer';
exports.openTelemetrySpanName = 'opentelemetry-span';
exports.openTelemetryCodespaceId = 'codespaceId';
exports.performanceListKey = 'performanceListKey';
var OpenTelemetrySpans;
(function (OpenTelemetrySpans) {
    OpenTelemetrySpans["connectCodespace"] = "connectCodespace";
    OpenTelemetrySpans["createCodespace"] = "createCodespace";
    OpenTelemetrySpans["resumeCodespace"] = "resumeCodespace";
    OpenTelemetrySpans["githubAPICall"] = "githubAPICall";
})(OpenTelemetrySpans = exports.OpenTelemetrySpans || (exports.OpenTelemetrySpans = {}));
// The open telemetry package that we use for desktop depends on some node functionality. 
// This is a no-op implementation for the browser.
class OpenTelemetryProvider {
    static init(context) {
    }
}
exports.OpenTelemetryProvider = OpenTelemetryProvider;
function getPerformanceValues(context, codespaceId) {
    return undefined;
}
exports.getPerformanceValues = getPerformanceValues;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.throwNotInitialized = (object) => {
    if (!object) {
        throw new Error('The API was not initialized, please call `initialize` method first.');
    }
    return object;
};
//# sourceMappingURL=throwIfNotInitialized.js.map

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel_1 = __webpack_require__(57);
exports.LogLevel = LogLevel_1.LogLevel;
var LogValueType_1 = __webpack_require__(101);
exports.LogValueType = LogValueType_1.LogValueType;
//# sourceMappingURL=index.js.map

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The log value types we support.
 */
var LogValueType;
(function (LogValueType) {
    LogValueType[LogValueType["None"] = 0] = "None";
    LogValueType[LogValueType["Text"] = 1] = "Text";
    LogValueType[LogValueType["Path"] = 2] = "Path";
    LogValueType[LogValueType["Email"] = 3] = "Email";
})(LogValueType = exports.LogValueType || (exports.LogValueType = {}));
;
//# sourceMappingURL=LogValueType.js.map

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
class TelemetryPropertyNames {
    static get FAULT_TYPE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'FaultType';
    }
    static get EVENT_ID() {
        return TelemetryPropertyNames.FEATURE_NAME + 'EventId';
    }
    static get CORRELATION_ID() {
        return TelemetryPropertyNames.FEATURE_NAME + 'CorrelationId';
    }
    static get LOG_LINES() {
        return TelemetryPropertyNames.FEATURE_NAME + 'LogLines';
    }
    static get EVENT_MESSAGE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Message';
    }
    static get EVENT_EXCEPTION_STACK() {
        return TelemetryPropertyNames.FEATURE_NAME + 'ExceptionStack';
    }
    static get EVENT_RESULT() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Result';
    }
    static get EVENT_TYPE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Type';
    }
    static get EVENT_DURATION() {
        return TelemetryPropertyNames.FEATURE_NAME + 'Duration';
    }
    static get EVENT_CREATION_TIME() {
        return TelemetryPropertyNames.FEATURE_NAME + 'CreationTime';
    }
    static get SESSION_ID() {
        return TelemetryPropertyNames.FEATURE_NAME + 'SessionId';
    }
    static get EVENT_EXCEPTION_CODE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'ExceptionCode';
    }
    static get SAMPLE_RATE() {
        return TelemetryPropertyNames.FEATURE_NAME + 'SampleRate';
    }
    static get SEQUENCE_NUMBER() {
        return TelemetryPropertyNames.FEATURE_NAME + 'SequenceNumber';
    }
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.FEATURE_NAME = 'liveshare.';
class TelemetryPropertyValues {
}
exports.TelemetryPropertyValues = TelemetryPropertyValues;
TelemetryPropertyValues.START = 'start';
TelemetryPropertyValues.END = 'end';
//# sourceMappingURL=TelemetryStrings.js.map

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(344);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(80);
const Is = __webpack_require__(60);
let DefaultSize = 8192;
let CR = Buffer.from('\r', 'ascii')[0];
let LF = Buffer.from('\n', 'ascii')[0];
let CRLF = '\r\n';
class MessageBuffer {
    constructor(encoding = 'utf8') {
        this.encoding = encoding;
        this.index = 0;
        this.buffer = Buffer.allocUnsafe(DefaultSize);
    }
    append(chunk) {
        var toAppend = chunk;
        if (typeof (chunk) === 'string') {
            var str = chunk;
            var bufferLen = Buffer.byteLength(str, this.encoding);
            toAppend = Buffer.allocUnsafe(bufferLen);
            toAppend.write(str, 0, bufferLen, this.encoding);
        }
        if (this.buffer.length - this.index >= toAppend.length) {
            toAppend.copy(this.buffer, this.index, 0, toAppend.length);
        }
        else {
            var newSize = (Math.ceil((this.index + toAppend.length) / DefaultSize) + 1) * DefaultSize;
            if (this.index === 0) {
                this.buffer = Buffer.allocUnsafe(newSize);
                toAppend.copy(this.buffer, 0, 0, toAppend.length);
            }
            else {
                this.buffer = Buffer.concat([this.buffer.slice(0, this.index), toAppend], newSize);
            }
        }
        this.index += toAppend.length;
    }
    tryReadHeaders() {
        let result = undefined;
        let current = 0;
        while (current + 3 < this.index && (this.buffer[current] !== CR || this.buffer[current + 1] !== LF || this.buffer[current + 2] !== CR || this.buffer[current + 3] !== LF)) {
            current++;
        }
        // No header / body separator found (e.g CRLFCRLF)
        if (current + 3 >= this.index) {
            return result;
        }
        result = Object.create(null);
        let headers = this.buffer.toString('ascii', 0, current).split(CRLF);
        headers.forEach((header) => {
            let index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            let key = header.substr(0, index);
            let value = header.substr(index + 1).trim();
            result[key] = value;
        });
        let nextStart = current + 4;
        this.buffer = this.buffer.slice(nextStart);
        this.index = this.index - nextStart;
        return result;
    }
    tryReadContent(length) {
        if (this.index < length) {
            return null;
        }
        let result = this.buffer.toString(this.encoding, 0, length);
        let nextStart = length;
        this.buffer.copy(this.buffer, 0, nextStart);
        this.index = this.index - nextStart;
        return result;
    }
    get numberOfBytes() {
        return this.index;
    }
}
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader recevied error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
class StreamMessageReader extends AbstractMessageReader {
    constructor(readable, encoding = 'utf8') {
        super();
        this.readable = readable;
        this.buffer = new MessageBuffer(encoding);
        this._partialMessageTimeout = 10000;
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        this.readable.on('data', (data) => {
            this.onData(data);
        });
        this.readable.on('error', (error) => this.fireError(error));
        this.readable.on('close', () => this.fireClose());
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                let headers = this.buffer.tryReadHeaders();
                if (!headers) {
                    return;
                }
                let contentLength = headers['Content-Length'];
                if (!contentLength) {
                    throw new Error('Header must provide a Content-Length property.');
                }
                let length = parseInt(contentLength);
                if (isNaN(length)) {
                    throw new Error('Content-Length value must be a number.');
                }
                this.nextMessageLength = length;
                // Take the encoding form the header. For compatibility
                // treat both utf-8 and utf8 as node utf8
            }
            var msg = this.buffer.tryReadContent(this.nextMessageLength);
            if (msg === null) {
                /** We haven't recevied the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            this.messageToken++;
            var json = JSON.parse(msg);
            this.callback(json);
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            clearTimeout(this.partialMessageTimer);
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.StreamMessageReader = StreamMessageReader;
class IPCMessageReader extends AbstractMessageReader {
    constructor(process) {
        super();
        this.process = process;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose());
    }
    listen(callback) {
        this.process.on('message', callback);
    }
}
exports.IPCMessageReader = IPCMessageReader;
class SocketMessageReader extends StreamMessageReader {
    constructor(socket, encoding = 'utf-8') {
        super(socket, encoding);
    }
}
exports.SocketMessageReader = SocketMessageReader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(80);
const Is = __webpack_require__(60);
let ContentLength = 'Content-Length: ';
let CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer recevied error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
class StreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, encoding = 'utf8') {
        super();
        this.writable = writable;
        this.encoding = encoding;
        this.errorCount = 0;
        this.writable.on('error', (error) => this.fireError(error));
        this.writable.on('close', () => this.fireClose());
    }
    write(msg) {
        let json = JSON.stringify(msg);
        let contentLength = Buffer.byteLength(json, this.encoding);
        let headers = [
            ContentLength, contentLength.toString(), CRLF,
            CRLF
        ];
        try {
            // Header must be written in ASCII encoding
            this.writable.write(headers.join(''), 'ascii');
            // Now write the content. This can be written in any encoding
            this.writable.write(json, this.encoding);
            this.errorCount = 0;
        }
        catch (error) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
        }
    }
}
exports.StreamMessageWriter = StreamMessageWriter;
class IPCMessageWriter extends AbstractMessageWriter {
    constructor(process) {
        super();
        this.process = process;
        this.errorCount = 0;
        this.queue = [];
        this.sending = false;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose);
    }
    write(msg) {
        if (!this.sending && this.queue.length === 0) {
            // See https://github.com/nodejs/node/issues/7657
            this.doWriteMessage(msg);
        }
        else {
            this.queue.push(msg);
        }
    }
    doWriteMessage(msg) {
        try {
            if (this.process.send) {
                this.sending = true;
                this.process.send(msg, undefined, undefined, (error) => {
                    this.sending = false;
                    if (error) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    else {
                        this.errorCount = 0;
                    }
                    if (this.queue.length > 0) {
                        this.doWriteMessage(this.queue.shift());
                    }
                });
            }
        }
        catch (error) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
        }
    }
}
exports.IPCMessageWriter = IPCMessageWriter;
class SocketMessageWriter extends AbstractMessageWriter {
    constructor(socket, encoding = 'utf8') {
        super();
        this.socket = socket;
        this.queue = [];
        this.sending = false;
        this.encoding = encoding;
        this.errorCount = 0;
        this.socket.on('error', (error) => this.fireError(error));
        this.socket.on('close', () => this.fireClose());
    }
    write(msg) {
        if (!this.sending && this.queue.length === 0) {
            // See https://github.com/nodejs/node/issues/7657
            this.doWriteMessage(msg);
        }
        else {
            this.queue.push(msg);
        }
    }
    doWriteMessage(msg) {
        let json = JSON.stringify(msg);
        let contentLength = Buffer.byteLength(json, this.encoding);
        let headers = [
            ContentLength, contentLength.toString(), CRLF,
            CRLF
        ];
        try {
            // Header must be written in ASCII encoding
            this.sending = true;
            this.socket.write(headers.join(''), 'ascii', (error) => {
                if (error) {
                    this.handleError(error, msg);
                }
                try {
                    // Now write the content. This can be written in any encoding
                    this.socket.write(json, this.encoding, (error) => {
                        this.sending = false;
                        if (error) {
                            this.handleError(error, msg);
                        }
                        else {
                            this.errorCount = 0;
                        }
                        if (this.queue.length > 0) {
                            this.doWriteMessage(this.queue.shift());
                        }
                    });
                }
                catch (error) {
                    this.handleError(error, msg);
                }
            });
        }
        catch (error) {
            this.handleError(error, msg);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
}
exports.SocketMessageWriter = SocketMessageWriter;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(2)
var HashBase = __webpack_require__(179)
var Buffer = __webpack_require__(4).Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(180);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(109);
exports.Duplex = __webpack_require__(36);
exports.Transform = __webpack_require__(183);
exports.PassThrough = __webpack_require__(354);


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(0)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(81);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__(62));
util.inherits = __webpack_require__(2);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(353)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(181);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(108).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(182);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(36);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(36);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(103).setImmediate, __webpack_require__(15)))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(4).Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(0).Buffer
var inherits = __webpack_require__(2)
var HashBase = __webpack_require__(179)

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(359)
exports.sha1 = __webpack_require__(360)
exports.sha224 = __webpack_require__(361)
exports.sha256 = __webpack_require__(184)
exports.sha384 = __webpack_require__(362)
exports.sha512 = __webpack_require__(185)


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(19);

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(371)
var deciphers = __webpack_require__(379)
var modes = __webpack_require__(197)

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__(372),
  CBC: __webpack_require__(373),
  CFB: __webpack_require__(374),
  CFB8: __webpack_require__(375),
  CFB1: __webpack_require__(376),
  OFB: __webpack_require__(377),
  CTR: __webpack_require__(195),
  GCM: __webpack_require__(195)
}

var modes = __webpack_require__(197)

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(382);
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(9);
var randomBytes = __webpack_require__(34);
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(387).version;
elliptic.utils = __webpack_require__(20);
elliptic.rand = __webpack_require__(116);
elliptic.curve = __webpack_require__(205);
elliptic.curves = __webpack_require__(119);

// Protocols
elliptic.ec = __webpack_require__(398);
elliptic.eddsa = __webpack_require__(402);


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(120);
var curve = __webpack_require__(205);
var utils = __webpack_require__(20);

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = __webpack_require__(397);
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;

hash.utils = __webpack_require__(27);
hash.common = __webpack_require__(64);
hash.sha = __webpack_require__(391);
hash.ripemd = __webpack_require__(395);
hash.hmac = __webpack_require__(396);

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const fileAccess_1 = __webpack_require__(67);
const stripJsonComments = __webpack_require__(429);
const cache = new Map();
exports.loadJSON = (filePath, isCache = false) => {
    if (isCache) {
        const data = cache.get(filePath);
        if (data !== undefined) {
            return data;
        }
    }
    const jsonWithComments = fileAccess_1.fileAccess.readFileSync(filePath, 'utf8');
    const json = stripJsonComments(jsonWithComments);
    const result = JSON.parse(json);
    if (isCache) {
        cache.set(filePath, result);
    }
    return result;
};
//# sourceMappingURL=loadJSON.js.map

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(447);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(448);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Extends the base class by adding a method to control active state.
 */
// tslint:disable-next-line:variable-name
function Activatable(BaseType) {
    return class extends BaseType {
        /**
         * Activates the instance. The operation is idempotent.
         */
        activate() {
            this.isActivated = true;
            return Promise.resolve(this.isActivated);
        }
        /**
         * Deactivates the instance. The operation is idempotent.
         */
        deactivate() {
            this.isActivated = false;
            return Promise.resolve();
        }
    };
}
exports.Activatable = Activatable;
/**
 * Extends the base class by adding a method to initialize the instance.
 */
// tslint:disable-next-line:variable-name
function Inittable(BaseType) {
    return class extends BaseType {
        /**
         * Initializes the instance. The operation is idempotent.
         */
        init() {
            this.isInitialized = true;
            return Promise.resolve();
        }
    };
}
exports.Inittable = Inittable;
/**
 * Extends the base type by adding a method allowing to dispose an instance.
 */
// tslint:disable-next-line:variable-name
function Disposable(BaseType) {
    return class extends BaseType {
        /**
         * Disposes the instance. The operation is idempotent.
         */
        dispose() {
            this.isDisposed = true;
            return Promise.resolve();
        }
    };
}
exports.Disposable = Disposable;
//# sourceMappingURL=Mixins.js.map

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Mixins_1 = __webpack_require__(123);
const traceSource_1 = __webpack_require__(56);
/**
 * Manages registered terminal output data scrapers.
 * Utilizes registered builders to instantiate one instance of each data scraper kind per terminal window.
 */
class DataScrapingManager extends Mixins_1.Inittable(Mixins_1.Disposable(Object)) {
    constructor() {
        super();
        this.disposables = [];
        this.deferredWork = Promise.resolve(true);
        this.builders = new Map();
        this.jobs = [];
        this.trace = traceSource_1.traceSource.withName('DataScrapingManager');
        this.deferredWork = this.deferredWork
            .then(() => this.init())
            .catch((reason) => {
            this.trace.error(reason.message);
        });
    }
    // Defer import of `vscode` package.
    static get vscode() {
        return __webpack_require__(1);
    }
    static get Instance() {
        if (!DataScrapingManager.singleton) {
            DataScrapingManager.singleton = new DataScrapingManager();
        }
        return DataScrapingManager.singleton;
    }
    /**
     * Event triggered when a [[DataScrapingJob]] is created for a [[vscode.Terminal]]
     * @returns the corresponding [[vscode.Terminal]] instance
     */
    get onScrappingStarted() {
        if (!this.eventEmitter) {
            this.eventEmitter = new DataScrapingManager.vscode.EventEmitter();
        }
        return this.eventEmitter.event;
    }
    dispose() {
        const _super = Object.create(null, {
            dispose: { get: () => super.dispose }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deferredWork;
            this.disposables.splice(0).forEach((d) => d.dispose());
            this.jobs.splice(0).forEach((d) => d.dispose());
            yield _super.dispose.call(this);
        });
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isInitialized || !DataScrapingManager.vscode.window.onDidOpenTerminal) {
                return;
            }
            DataScrapingManager.vscode.window.onDidOpenTerminal(this.handleTerminalCreated, this, this.disposables);
            DataScrapingManager.vscode.window.onDidCloseTerminal(this.handleTerminalClosed, this, this.disposables);
            DataScrapingManager.vscode.window.terminals.forEach(this.handleTerminalCreated, this);
            yield _super.init.call(this);
        });
    }
    registerDataScraper(kind, builder) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deferredWork;
            this.builders.set(kind, builder);
            if (this.isInitialized) {
                const promises = DataScrapingManager.vscode.window.terminals.map((terminal) => __awaiter(this, void 0, void 0, function* () {
                    const dataScraper = builder(terminal);
                    if (dataScraper) {
                        yield dataScraper.init();
                        this.createJob(terminal, dataScraper, kind);
                    }
                }));
                yield Promise.all(promises);
            }
            return new DataScrapingManager.vscode.Disposable(() => this.unregisterDataScraper(kind));
        });
    }
    unregisterDataScraper(kind) {
        this.builders.delete(kind);
        const activeJobs = this.jobs.splice(0);
        activeJobs.filter((x) => x.kind === kind).forEach((job) => job.dispose());
        this.jobs.push(...activeJobs.filter((x) => x.kind !== kind));
    }
    handleTerminalCreated(terminal) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [...this.builders.entries()].map((entry) => __awaiter(this, void 0, void 0, function* () {
                const [kind, builder] = entry;
                const dataScraper = builder(terminal);
                if (dataScraper) {
                    yield dataScraper.init();
                    this.createJob(terminal, dataScraper, kind);
                }
            }));
            this.deferredWork = this.deferredWork
                .then(() => Promise.all(promises))
                .catch((reason) => {
                this.trace.error(reason.message);
            });
        });
    }
    createJob(terminal, dataScraper, kind) {
        let registration;
        if (typeof DataScrapingManager.vscode.window.onDidWriteTerminalData === 'function') {
            registration = DataScrapingManager.vscode.window.onDidWriteTerminalData((e) => {
                if (e.terminal === terminal) {
                    dataScraper.processData(e.data);
                }
            });
        }
        else {
            registration = terminal.onDidWriteData(dataScraper.processData, dataScraper);
        }
        const job = {
            kind,
            dataScraper,
            terminal,
            registration,
            dispose: () => {
                registration.dispose();
                return dataScraper.dispose();
            },
        };
        this.jobs.push(job);
        if (!this.eventEmitter) {
            this.eventEmitter = new DataScrapingManager.vscode.EventEmitter();
        }
        this.eventEmitter.fire(job.terminal);
        return job;
    }
    handleTerminalClosed(terminal) {
        const activeJobs = this.jobs.splice(0);
        activeJobs.filter((x) => x.terminal === terminal).forEach((job) => job.dispose());
        this.jobs.push(...activeJobs.filter((x) => x.terminal !== terminal));
    }
}
exports.DataScrapingManager = DataScrapingManager;
const dataScrapingManagerInstance = DataScrapingManager.Instance;
exports.dataScrapingManagerInstance = dataScrapingManagerInstance;
//# sourceMappingURL=dataScrapingManager.js.map

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BaseError_1 = __webpack_require__(45);
/**
 * Error thrown when something is cancelled. Used by `Signal`.
 */
class CancellationError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'CancellationError';
    }
}
exports.CancellationError = CancellationError;
//# sourceMappingURL=CancellationError.js.map

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Wait on `delay` milliseconds asynronously before proceeding.
 */
exports.wait = (delay) => {
    return new Promise((resolve) => {
        setTimeout(resolve, delay);
    });
};
//# sourceMappingURL=wait.js.map

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(88);
const errors_1 = __webpack_require__(46);
/**
 * An abstraction above a promise, makes it easy to `resolve`/`reject`
 * promise afterward and keeps the promise state attributes.
 */
class Signal {
    constructor(cancellationToken) {
        this.stateReference = 'pending';
        // tslint:disable-next-line: promise-must-complete
        this.promiseReference = new Promise((resolve, reject) => {
            this.promiseResolve = resolve;
            this.promiseReject = reject;
        });
        this.resolve = this.resolve.bind(this);
        this.reject = this.reject.bind(this);
        this.cancel = this.cancel.bind(this);
        if (!cancellationToken) {
            return;
        }
        if (cancellationToken.isCancellationRequested) {
            this.cancel();
        }
        else if (cancellationToken.onCancellationRequested) {
            cancellationToken.onCancellationRequested(() => {
                if (this.isFulfilled) {
                    return;
                }
                this.cancel();
            });
        }
    }
    get isFulfilled() {
        return this.state !== 'pending';
    }
    get state() {
        return this.stateReference;
    }
    get isResolved() {
        return this.state === 'resolved';
    }
    get isRejected() {
        return this.state === 'rejected';
    }
    get isCancelled() {
        return this.state === 'cancelled';
    }
    resolve(result) {
        if (this.isFulfilled) {
            return;
        }
        this.stateReference = 'resolved';
        utils_1.assertDefined(this.promiseResolve, 'No `promiseResolve` function found.');
        this.promiseResolve(result);
    }
    reject(error) {
        if (this.isFulfilled) {
            return;
        }
        this.stateReference = 'rejected';
        utils_1.assertDefined(this.promiseReject, 'No `promiseReject` function found.');
        this.promiseReject(error);
    }
    cancel() {
        if (this.isFulfilled) {
            return;
        }
        this.stateReference = 'cancelled';
        utils_1.assertDefined(this.promiseReject, 'No `promiseReject` function found.');
        this.promiseReject(new errors_1.CancellationError());
    }
    get promise() {
        return this.promiseReference;
    }
    static from(value) {
        const signal = new Signal();
        if (utils_1.isThenable(value)) {
            value.then(signal.resolve, signal.reject);
        }
        else {
            signal.resolve(value);
        }
        return signal;
    }
    dispose() {
        if (this.isFulfilled) {
            return;
        }
        this.cancel();
    }
}
exports.Signal = Signal;
//# sourceMappingURL=Signal.js.map

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defer execution by `timout` milliseconds.
 */
exports.defer = (fn, timeout = 1) => {
    const timer = setTimeout(fn, timeout);
    return timer;
};
//# sourceMappingURL=defer.js.map

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __webpack_require__(37);
/**
 * Function to get a random integer from a defined range.
 */
exports.randomInt = (max, min = 0) => {
    assert_1.assert(!isNaN(min), '"min" param is not a number.');
    assert_1.assert(!isNaN(max), '"max" param is not a number.');
    assert_1.assert(isFinite(max), '"max" param is not finite.');
    assert_1.assert(isFinite(min), '"min" param is not finite.');
    assert_1.assert(max > min, `"max"(${max}) param should be greater than "min"(${min}).`);
    const delta = max - min;
    const randomFloat = delta * Math.random();
    return Math.round(min + randomFloat);
};
//# sourceMappingURL=randomInt.js.map

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectDisposedError = exports.SshReconnectError = exports.SshConnectionError = exports.SshChannelError = exports.BigInt = exports.DerWriter = exports.DerReader = exports.formatBuffer = exports.SshDataWriter = exports.SshDataReader = exports.ECDsa = exports.Rsa = exports.Encryption = exports.HmacAlgorithm = exports.EncryptionAlgorithm = exports.PublicKeyAlgorithm = exports.KeyExchangeAlgorithm = exports.SshAlgorithms = exports.CommandRequestMessage = exports.ChannelRequestType = exports.ChannelRequestMessage = exports.ChannelOpenMessage = exports.SshChannelOpenFailureReason = exports.SshReconnectFailureReason = exports.SshDisconnectReason = exports.SessionRequestFailureMessage = exports.SessionRequestSuccessMessage = exports.DebugMessage = exports.SessionRequestMessage = exports.SshMessage = exports.SshChannelClosedEventArgs = exports.SshSessionClosedEventArgs = exports.SshChannelOpeningEventArgs = exports.SshRequestEventArgs = exports.SshAuthenticatingEventArgs = exports.SshAuthenticationType = exports.serviceActivation = exports.SshService = exports.SshRpcMessageStream = exports.WebSocketStream = exports.NodeStream = exports.BaseStream = exports.SshStream = exports.SshChannel = exports.SshServerSession = exports.SshClientSession = exports.SshSession = exports.SshVersionInfo = exports.SshProtocolExtensionNames = exports.SshSessionConfiguration = void 0;
exports.MultiChannelStream = exports.SessionContour = exports.ChannelMetrics = exports.SessionMetrics = exports.Queue = exports.Semaphore = exports.PromiseCompletionSource = exports.CancellationError = exports.CancellationTokenSource = exports.CancellationToken = void 0;
var sshSessionConfiguration_1 = __webpack_require__(68);
Object.defineProperty(exports, "SshSessionConfiguration", { enumerable: true, get: function () { return sshSessionConfiguration_1.SshSessionConfiguration; } });
Object.defineProperty(exports, "SshProtocolExtensionNames", { enumerable: true, get: function () { return sshSessionConfiguration_1.SshProtocolExtensionNames; } });
var sshVersionInfo_1 = __webpack_require__(250);
Object.defineProperty(exports, "SshVersionInfo", { enumerable: true, get: function () { return sshVersionInfo_1.SshVersionInfo; } });
var sshSession_1 = __webpack_require__(71);
Object.defineProperty(exports, "SshSession", { enumerable: true, get: function () { return sshSession_1.SshSession; } });
var sshClientSession_1 = __webpack_require__(539);
Object.defineProperty(exports, "SshClientSession", { enumerable: true, get: function () { return sshClientSession_1.SshClientSession; } });
var sshServerSession_1 = __webpack_require__(540);
Object.defineProperty(exports, "SshServerSession", { enumerable: true, get: function () { return sshServerSession_1.SshServerSession; } });
var sshChannel_1 = __webpack_require__(141);
Object.defineProperty(exports, "SshChannel", { enumerable: true, get: function () { return sshChannel_1.SshChannel; } });
var sshStream_1 = __webpack_require__(255);
Object.defineProperty(exports, "SshStream", { enumerable: true, get: function () { return sshStream_1.SshStream; } });
var streams_1 = __webpack_require__(541);
Object.defineProperty(exports, "BaseStream", { enumerable: true, get: function () { return streams_1.BaseStream; } });
Object.defineProperty(exports, "NodeStream", { enumerable: true, get: function () { return streams_1.NodeStream; } });
Object.defineProperty(exports, "WebSocketStream", { enumerable: true, get: function () { return streams_1.WebSocketStream; } });
var sshRpcMessageStream_1 = __webpack_require__(542);
Object.defineProperty(exports, "SshRpcMessageStream", { enumerable: true, get: function () { return sshRpcMessageStream_1.SshRpcMessageStream; } });
var sshService_1 = __webpack_require__(94);
Object.defineProperty(exports, "SshService", { enumerable: true, get: function () { return sshService_1.SshService; } });
var serviceActivation_1 = __webpack_require__(49);
Object.defineProperty(exports, "serviceActivation", { enumerable: true, get: function () { return serviceActivation_1.serviceActivation; } });
var sshAuthenticatingEventArgs_1 = __webpack_require__(145);
Object.defineProperty(exports, "SshAuthenticationType", { enumerable: true, get: function () { return sshAuthenticatingEventArgs_1.SshAuthenticationType; } });
Object.defineProperty(exports, "SshAuthenticatingEventArgs", { enumerable: true, get: function () { return sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs; } });
var sshRequestEventArgs_1 = __webpack_require__(142);
Object.defineProperty(exports, "SshRequestEventArgs", { enumerable: true, get: function () { return sshRequestEventArgs_1.SshRequestEventArgs; } });
var sshChannelOpeningEventArgs_1 = __webpack_require__(251);
Object.defineProperty(exports, "SshChannelOpeningEventArgs", { enumerable: true, get: function () { return sshChannelOpeningEventArgs_1.SshChannelOpeningEventArgs; } });
var sshSessionClosedEventArgs_1 = __webpack_require__(254);
Object.defineProperty(exports, "SshSessionClosedEventArgs", { enumerable: true, get: function () { return sshSessionClosedEventArgs_1.SshSessionClosedEventArgs; } });
var sshChannelClosedEventArgs_1 = __webpack_require__(249);
Object.defineProperty(exports, "SshChannelClosedEventArgs", { enumerable: true, get: function () { return sshChannelClosedEventArgs_1.SshChannelClosedEventArgs; } });
var sshMessage_1 = __webpack_require__(50);
Object.defineProperty(exports, "SshMessage", { enumerable: true, get: function () { return sshMessage_1.SshMessage; } });
var transportMessages_1 = __webpack_require__(29);
Object.defineProperty(exports, "SessionRequestMessage", { enumerable: true, get: function () { return transportMessages_1.SessionRequestMessage; } });
Object.defineProperty(exports, "DebugMessage", { enumerable: true, get: function () { return transportMessages_1.DebugMessage; } });
Object.defineProperty(exports, "SessionRequestSuccessMessage", { enumerable: true, get: function () { return transportMessages_1.SessionRequestSuccessMessage; } });
Object.defineProperty(exports, "SessionRequestFailureMessage", { enumerable: true, get: function () { return transportMessages_1.SessionRequestFailureMessage; } });
Object.defineProperty(exports, "SshDisconnectReason", { enumerable: true, get: function () { return transportMessages_1.SshDisconnectReason; } });
Object.defineProperty(exports, "SshReconnectFailureReason", { enumerable: true, get: function () { return transportMessages_1.SshReconnectFailureReason; } });
var connectionMessages_1 = __webpack_require__(38);
Object.defineProperty(exports, "SshChannelOpenFailureReason", { enumerable: true, get: function () { return connectionMessages_1.SshChannelOpenFailureReason; } });
Object.defineProperty(exports, "ChannelOpenMessage", { enumerable: true, get: function () { return connectionMessages_1.ChannelOpenMessage; } });
Object.defineProperty(exports, "ChannelRequestMessage", { enumerable: true, get: function () { return connectionMessages_1.ChannelRequestMessage; } });
Object.defineProperty(exports, "ChannelRequestType", { enumerable: true, get: function () { return connectionMessages_1.ChannelRequestType; } });
Object.defineProperty(exports, "CommandRequestMessage", { enumerable: true, get: function () { return connectionMessages_1.CommandRequestMessage; } });
var sshAlgorithms_1 = __webpack_require__(47);
Object.defineProperty(exports, "SshAlgorithms", { enumerable: true, get: function () { return sshAlgorithms_1.SshAlgorithms; } });
Object.defineProperty(exports, "KeyExchangeAlgorithm", { enumerable: true, get: function () { return sshAlgorithms_1.KeyExchangeAlgorithm; } });
Object.defineProperty(exports, "PublicKeyAlgorithm", { enumerable: true, get: function () { return sshAlgorithms_1.PublicKeyAlgorithm; } });
Object.defineProperty(exports, "EncryptionAlgorithm", { enumerable: true, get: function () { return sshAlgorithms_1.EncryptionAlgorithm; } });
Object.defineProperty(exports, "HmacAlgorithm", { enumerable: true, get: function () { return sshAlgorithms_1.HmacAlgorithm; } });
Object.defineProperty(exports, "Encryption", { enumerable: true, get: function () { return sshAlgorithms_1.Encryption; } });
Object.defineProperty(exports, "Rsa", { enumerable: true, get: function () { return sshAlgorithms_1.Rsa; } });
Object.defineProperty(exports, "ECDsa", { enumerable: true, get: function () { return sshAlgorithms_1.ECDsa; } });
var sshData_1 = __webpack_require__(16);
Object.defineProperty(exports, "SshDataReader", { enumerable: true, get: function () { return sshData_1.SshDataReader; } });
Object.defineProperty(exports, "SshDataWriter", { enumerable: true, get: function () { return sshData_1.SshDataWriter; } });
Object.defineProperty(exports, "formatBuffer", { enumerable: true, get: function () { return sshData_1.formatBuffer; } });
var derData_1 = __webpack_require__(137);
Object.defineProperty(exports, "DerReader", { enumerable: true, get: function () { return derData_1.DerReader; } });
Object.defineProperty(exports, "DerWriter", { enumerable: true, get: function () { return derData_1.DerWriter; } });
var bigInt_1 = __webpack_require__(28);
Object.defineProperty(exports, "BigInt", { enumerable: true, get: function () { return bigInt_1.BigInt; } });
var errors_1 = __webpack_require__(25);
Object.defineProperty(exports, "SshChannelError", { enumerable: true, get: function () { return errors_1.SshChannelError; } });
Object.defineProperty(exports, "SshConnectionError", { enumerable: true, get: function () { return errors_1.SshConnectionError; } });
Object.defineProperty(exports, "SshReconnectError", { enumerable: true, get: function () { return errors_1.SshReconnectError; } });
Object.defineProperty(exports, "ObjectDisposedError", { enumerable: true, get: function () { return errors_1.ObjectDisposedError; } });
var cancellation_1 = __webpack_require__(40);
Object.defineProperty(exports, "CancellationToken", { enumerable: true, get: function () { return cancellation_1.CancellationToken; } });
Object.defineProperty(exports, "CancellationTokenSource", { enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } });
Object.defineProperty(exports, "CancellationError", { enumerable: true, get: function () { return cancellation_1.CancellationError; } });
var promiseCompletionSource_1 = __webpack_require__(39);
Object.defineProperty(exports, "PromiseCompletionSource", { enumerable: true, get: function () { return promiseCompletionSource_1.PromiseCompletionSource; } });
var semaphore_1 = __webpack_require__(72);
Object.defineProperty(exports, "Semaphore", { enumerable: true, get: function () { return semaphore_1.Semaphore; } });
var queue_1 = __webpack_require__(93);
Object.defineProperty(exports, "Queue", { enumerable: true, get: function () { return queue_1.Queue; } });
var sessionMetrics_1 = __webpack_require__(253);
Object.defineProperty(exports, "SessionMetrics", { enumerable: true, get: function () { return sessionMetrics_1.SessionMetrics; } });
var channelMetrics_1 = __webpack_require__(248);
Object.defineProperty(exports, "ChannelMetrics", { enumerable: true, get: function () { return channelMetrics_1.ChannelMetrics; } });
var sessionContour_1 = __webpack_require__(543);
Object.defineProperty(exports, "SessionContour", { enumerable: true, get: function () { return sessionContour_1.SessionContour; } });
var multiChannelStream_1 = __webpack_require__(544);
Object.defineProperty(exports, "MultiChannelStream", { enumerable: true, get: function () { return multiChannelStream_1.MultiChannelStream; } });
//# sourceMappingURL=index.js.map

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyExchangeAlgorithm = void 0;
class KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName, hashDigestLength) {
        this.name = name;
        this.keySizeInBits = keySizeInBits;
        this.hashAlgorithmName = hashAlgorithmName;
        this.hashDigestLength = hashDigestLength;
    }
}
exports.KeyExchangeAlgorithm = KeyExchangeAlgorithm;
//# sourceMappingURL=keyExchangeAlgorithm.js.map

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionAlgorithm = void 0;
class EncryptionAlgorithm {
    constructor(name) {
        this.name = name;
    }
}
exports.EncryptionAlgorithm = EncryptionAlgorithm;
//# sourceMappingURL=encryptionAlgorithm.js.map

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.HmacAlgorithm = void 0;
class HmacAlgorithm {
    constructor(name, algorithmName, keyLength, digestLength) {
        this.name = name;
        this.algorithmName = algorithmName;
        this.keyLength = keyLength;
        this.digestLength = digestLength;
    }
}
exports.HmacAlgorithm = HmacAlgorithm;
//# sourceMappingURL=hmacAlgorithm.js.map

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebHmac = void 0;
const buffer_1 = __webpack_require__(0);
const hmacAlgorithm_1 = __webpack_require__(133);
class WebHmac extends hmacAlgorithm_1.HmacAlgorithm {
    constructor(name, algorithmName, encryptThenMac = false) {
        super(name, algorithmName, WebHmac.getHashKeyLength(algorithmName), WebHmac.getHashDigestLength(algorithmName));
        this.encryptThenMac = encryptThenMac;
    }
    async createSigner(key) {
        const hmac = new WebSignerVerifier(this.algorithmName, true, this.digestLength, this.encryptThenMac);
        await hmac.init(key);
        return hmac;
    }
    async createVerifier(key) {
        const hmac = new WebSignerVerifier(this.algorithmName, false, this.digestLength, this.encryptThenMac);
        await hmac.init(key);
        return hmac;
    }
    static getHashKeyLength(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 512 / 8;
        if (hashAlgorithmName === 'SHA2-384')
            return 384 / 8;
        if (hashAlgorithmName === 'SHA2-256')
            return 256 / 8;
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
    static getHashDigestLength(hashAlgorithmName) {
        return this.getHashKeyLength(hashAlgorithmName);
    }
    static getWebHashAlgorithmName(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 'SHA-512';
        if (hashAlgorithmName === 'SHA2-384')
            return 'SHA-384';
        if (hashAlgorithmName === 'SHA2-256')
            return 'SHA-256';
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
}
exports.WebHmac = WebHmac;
class WebSignerVerifier {
    constructor(algorithmName, isSigning, digestLength, encryptThenMac) {
        this.algorithmName = algorithmName;
        this.isSigning = isSigning;
        this.digestLength = digestLength;
        this.encryptThenMac = encryptThenMac;
    }
    async init(key) {
        try {
            const name = this.algorithmName.replace('SHA2-', 'SHA-');
            this.key = await crypto.subtle.importKey('raw', key, { name: 'HMAC', hash: { name } }, false, this.isSigning ? ['sign'] : ['verify']);
        }
        catch (e) {
            throw new Error('Failed to initialize HMAC: ' + e);
        }
    }
    async sign(data) {
        return buffer_1.Buffer.from(await crypto.subtle.sign({ name: 'HMAC', hash: { name: this.algorithmName } }, this.key, data));
    }
    async verify(data, signature) {
        return await crypto.subtle.verify({ name: 'HMAC', hash: { name: this.algorithmName } }, this.key, signature, data);
    }
    dispose() { }
}
//# sourceMappingURL=webHmac.js.map

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonWebKeyFormatter = void 0;
const bigInt_1 = __webpack_require__(28);
const ecdsaCurves_1 = __webpack_require__(91);
/**
 * Provides *minimal* JWK import/export support for web keys.
 *
 * This code is redundant with some of the JWK import/export code in the separate
 * `ssh-keys` library; that is intentional, and necessary to support a consistent
 * interface for importing/exporting key parameters in the core `ssh` library.
 */
class JsonWebKeyFormatter {
    static formatRsa(rsa, includePrivate) {
        const formatBigInt = JsonWebKeyFormatter.formatBigInt;
        let jwk;
        if (includePrivate !== false && rsa.d && rsa.p && rsa.q && rsa.dp && rsa.dq && rsa.qi) {
            jwk = {
                kty: 'RSA',
                n: formatBigInt(rsa.modulus),
                e: formatBigInt(rsa.exponent),
                d: formatBigInt(rsa.d),
                p: formatBigInt(rsa.p),
                q: formatBigInt(rsa.q),
                dp: formatBigInt(rsa.dp),
                dq: formatBigInt(rsa.dq),
                qi: formatBigInt(rsa.qi),
            };
        }
        else if (!includePrivate) {
            jwk = {
                kty: 'RSA',
                n: formatBigInt(rsa.modulus),
                e: formatBigInt(rsa.exponent),
            };
        }
        else {
            throw new Error('Missing private key parameters.');
        }
        return jwk;
    }
    static parseRsa(jwk, includePrivate) {
        if ((jwk === null || jwk === void 0 ? void 0 : jwk.kty) !== 'RSA' || !(jwk.n && jwk.e))
            throw new Error('Invalid RSA JWK.');
        const parseBigInt = JsonWebKeyFormatter.parseBigInt;
        let rsa;
        if (includePrivate !== false && jwk.d && jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi) {
            rsa = {
                modulus: parseBigInt(jwk.n),
                exponent: parseBigInt(jwk.e),
                d: parseBigInt(jwk.d),
                p: parseBigInt(jwk.p),
                q: parseBigInt(jwk.q),
                dp: parseBigInt(jwk.dp),
                dq: parseBigInt(jwk.dq),
                qi: parseBigInt(jwk.qi),
            };
        }
        else {
            rsa = {
                modulus: parseBigInt(jwk.n),
                exponent: parseBigInt(jwk.e),
            };
        }
        return rsa;
    }
    static formatEC(ec, includePrivate) {
        const formatBigInt = JsonWebKeyFormatter.formatBigInt;
        const curve = ecdsaCurves_1.curves.find((c) => c.oid === ec.curve.oid || c.name === ec.curve.name || c.shortName === ec.curve.name);
        const keySizeInBytes = Math.ceil(curve.keySize / 8);
        const jwk = {
            kty: 'EC',
            crv: ec.curve.name,
            x: formatBigInt(ec.x, keySizeInBytes),
            y: formatBigInt(ec.y, keySizeInBytes),
        };
        if (includePrivate !== false && ec.d) {
            jwk.d = formatBigInt(ec.d, keySizeInBytes);
        }
        else if (includePrivate) {
            throw new Error('Missing private key parameters.');
        }
        return jwk;
    }
    static parseEC(jwk, includePrivate) {
        if ((jwk === null || jwk === void 0 ? void 0 : jwk.kty) !== 'EC' || !(jwk.crv && jwk.x && jwk.y))
            throw new Error('Invalid EC JWK.');
        const parseBigInt = JsonWebKeyFormatter.parseBigInt;
        const ec = {
            curve: { name: jwk.crv },
            x: parseBigInt(jwk.x),
            y: parseBigInt(jwk.y),
        };
        if (includePrivate !== false && jwk.d) {
            ec.d = parseBigInt(jwk.d);
        }
        return ec;
    }
    static formatBigInt(value, length) {
        return JsonWebKeyFormatter.base64UrlEncode(value.toBytes({ unsigned: true, length }));
    }
    static parseBigInt(value) {
        return bigInt_1.BigInt.fromBytes(Buffer.from(value, 'base64'), { unsigned: true });
    }
    static base64UrlEncode(data) {
        // JWK format uses base64-url-encoding, which is base64 but with 2 substituted characters.
        // (Note Buffer's base64 DECODING implicitly supports this format.)
        return data
            .toString('base64')
            .replace(/=+$/g, '')
            .replace(/\+/g, '-')
            .replace(/\//g, '_');
    }
}
exports.JsonWebKeyFormatter = JsonWebKeyFormatter;
//# sourceMappingURL=jsonWebKeyFormatter.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeHmac = void 0;
const crypto = __webpack_require__(10);
const buffer_1 = __webpack_require__(0);
const hmacAlgorithm_1 = __webpack_require__(133);
class NodeHmac extends hmacAlgorithm_1.HmacAlgorithm {
    constructor(name, algorithmName, encryptThenMac = false) {
        super(name, algorithmName, NodeHmac.getHashKeyLength(algorithmName), NodeHmac.getHashDigestLength(algorithmName));
        this.encryptThenMac = encryptThenMac;
    }
    async createSigner(key) {
        const hmac = new NodeSignerVerifier(NodeHmac.getNodeHashAlgorithmName(this.algorithmName), this.digestLength, this.encryptThenMac, key);
        return hmac;
    }
    async createVerifier(key) {
        const hmac = new NodeSignerVerifier(NodeHmac.getNodeHashAlgorithmName(this.algorithmName), this.digestLength, this.encryptThenMac, key);
        return hmac;
    }
    static getHashKeyLength(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 512 / 8;
        if (hashAlgorithmName === 'SHA2-384')
            return 384 / 8;
        if (hashAlgorithmName === 'SHA2-256')
            return 256 / 8;
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
    static getHashDigestLength(hashAlgorithmName) {
        return this.getHashKeyLength(hashAlgorithmName);
    }
    static getNodeHashAlgorithmName(hashAlgorithmName) {
        if (hashAlgorithmName === 'SHA2-512')
            return 'sha512';
        if (hashAlgorithmName === 'SHA2-384')
            return 'sha384';
        if (hashAlgorithmName === 'SHA2-256')
            return 'sha256';
        throw new Error(`Unsupported hash algorithm: ${hashAlgorithmName}`);
    }
}
exports.NodeHmac = NodeHmac;
class NodeSignerVerifier {
    constructor(algorithmName, digestLength, encryptThenMac, key) {
        this.algorithmName = algorithmName;
        this.digestLength = digestLength;
        this.encryptThenMac = encryptThenMac;
        // crypto.createSecretKey is only available on node >= 11.6.
        this.key = crypto.createSecretKey ? crypto.createSecretKey(key) : buffer_1.Buffer.from(key);
    }
    async sign(data) {
        const signer = crypto.createHmac(this.algorithmName, this.key);
        signer.update(data);
        const hmac = signer.digest();
        return hmac;
    }
    async verify(data, signature) {
        const verifier = crypto.createHmac(this.algorithmName, this.key);
        verifier.update(data);
        const hmac = verifier.digest();
        const result = hmac.equals(signature);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=nodeHmac.js.map

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.DerWriter = exports.DerReader = void 0;
const buffer_1 = __webpack_require__(0);
const bigInt_1 = __webpack_require__(28);
/**
 * Reads data in DER (Distinguished Encoding Rules) format.
 *
 * Enables importing and exporting key files, which are commonly DER-encoded.
 */
class DerReader {
    constructor(buffer, dataType = 32 /* Constructed */ | 16 /* Sequence */) {
        this.buffer = buffer;
        this.position = 0;
        this.readType(dataType);
        const length = this.readLength();
        if (length > this.buffer.length - this.position) {
            throw new Error('Read out of bounds.');
        }
        this.buffer = this.buffer.slice(0, this.position + length);
    }
    get available() {
        return this.buffer.length - this.position;
    }
    readNull() {
        this.readType(5 /* Null */);
        if (this.readByte() !== 0) {
            throw new Error('Expected a 0 after Null type.');
        }
    }
    readInteger() {
        this.readType(2 /* Integer */);
        const length = this.readLength();
        const bytes = this.readBytes(length);
        const result = new bigInt_1.BigInt(bytes);
        return result;
    }
    readOctetString() {
        this.readType(4 /* OctetString */);
        const length = this.readLength();
        const result = this.readBytes(length);
        return result;
    }
    readBitString() {
        this.readType(3 /* BitString */);
        const length = this.readLength();
        const padding = this.readByte();
        if (padding !== 0) {
            throw new Error('Padded bit strings are not supported.');
        }
        const result = this.readBytes(length - 1);
        return result;
    }
    readObjectIdentifier(expected) {
        this.readType(6 /* ObjectIdentifier */);
        const length = this.readLength();
        const end = this.position + length;
        const values = [];
        const first = this.readByte();
        values.push(Math.trunc(first / 40));
        values.push(first % 40);
        let next = 0;
        while (this.position < end) {
            const b = this.readByte();
            if ((b & 0x80) !== 0) {
                next = next * 128 + (b & 0x7f);
            }
            else {
                next = next * 128 + b;
                values.push(next);
                next = 0;
            }
        }
        if (next !== 0) {
            throw new Error('Invalid OID format.');
        }
        const result = values.join('.');
        if (expected && result !== expected) {
            throw new Error(`Expected OID ${expected}, found: ${result}`);
        }
        return result;
    }
    readSequence() {
        const start = this.position;
        this.readType(32 /* Constructed */ | 16 /* Sequence */);
        const length = this.readLength();
        this.position += length;
        return new DerReader(this.buffer.slice(start, this.position));
    }
    tryReadTagged(tagId) {
        if (this.position >= this.buffer.length) {
            return null;
        }
        const type = this.buffer[this.position];
        if ((type & 160 /* Tagged */) === 0 || (type & ~160 /* Tagged */) !== tagId) {
            return null;
        }
        const start = this.position;
        this.position++;
        const length = this.readLength();
        this.position += length;
        const taggedData = new DerReader(this.buffer.slice(start, this.position), type);
        return taggedData;
    }
    /** Reads the type of the next value in the sequence WITHOUT advancing the reader position. */
    peek() {
        if (this.position >= this.buffer.length) {
            throw new Error('Read out of bounds.');
        }
        return this.buffer[this.position];
    }
    readLength() {
        let length = this.readByte();
        if (length === 0x80) {
            throw new Error('Indefinite-length encoding is not supported.');
        }
        if (length > 127) {
            const size = length & 0x7f;
            if (size > 4) {
                throw new Error(`DER length size is ${size} and cannot be more than 4 bytes.`);
            }
            length = 0;
            for (let i = 0; i < size; i++) {
                const next = this.readByte();
                length = (length << 8) + next;
            }
            if (length < 0) {
                throw new Error('Corrupted data - negative length found');
            }
        }
        return length;
    }
    readByte() {
        if (this.position >= this.buffer.length) {
            throw new Error('Read out of bounds.');
        }
        return this.buffer[this.position++];
    }
    readBytes(length) {
        if (this.position + length > this.buffer.length) {
            throw new Error('Read out of bounds.');
        }
        const result = this.buffer.slice(this.position, this.position + length);
        this.position += length;
        return result;
    }
    readType(expectedType) {
        const type = this.readByte();
        if (type !== expectedType) {
            throw new Error(`Expected ${expectedType} data type, found : ${type}`);
        }
    }
}
exports.DerReader = DerReader;
/**
 * Writes data in DER (Distinguished Encoding Rules) format.
 *
 * Enables importing and exporting key files, which are commonly DER-encoded.
 */
class DerWriter {
    constructor(buffer, dataType = 32 /* Constructed */ | 16 /* Sequence */) {
        this.buffer = buffer;
        this.dataType = dataType;
        this.position = 0;
        this.buffer = buffer;
    }
    toBuffer() {
        // Move the data over to make space for the type + length prefix.
        const length = this.position;
        const lengthBytes = DerWriter.getLength(length);
        this.ensureCapacity(1 + lengthBytes.length + length);
        const result = this.buffer.slice(0, 1 + lengthBytes.length + length);
        this.buffer.copy(result, 1 + lengthBytes.length);
        // Write the type + length prefix.
        result[0] = this.dataType;
        lengthBytes.copy(result, 1, 0);
        // Restore the writer buffer to its previous state (without the type + length prefix).
        this.buffer = this.buffer.slice(1 + lengthBytes.length, result.length);
        this.position = length;
        return result;
    }
    writeSequence(data) {
        this.writeBytes(data.toBuffer());
    }
    writeTagged(tagId, data) {
        if (tagId > 0xf)
            throw new Error('Invalid DER tag.');
        this.writeByte(160 /* Tagged */ | tagId);
        const lengthBytes = DerWriter.getLength(data.position);
        this.writeBytes(lengthBytes);
        this.writeBytes(data.buffer.slice(0, data.position));
    }
    writeNull() {
        this.writeByte(5 /* Null */);
        this.writeByte(0);
    }
    writeInteger(value) {
        this.writeByte(2 /* Integer */);
        const integerBytes = value.toBytes();
        const lengthBytes = DerWriter.getLength(integerBytes.length);
        this.writeBytes(lengthBytes);
        this.writeBytes(integerBytes);
    }
    writeOctetString(data) {
        this.writeByte(4 /* OctetString */);
        const lengthBytes = DerWriter.getLength(data.length);
        this.writeBytes(lengthBytes);
        this.writeBytes(data);
    }
    writeBitString(data) {
        this.writeByte(3 /* BitString */);
        const lengthBytes = DerWriter.getLength(1 + data.length);
        this.writeBytes(lengthBytes);
        this.writeByte(0);
        this.writeBytes(data);
    }
    writeObjectIdentifier(oid) {
        if (!oid)
            throw new TypeError('OID value is null or empty.');
        const values = oid.split('.').map(Number);
        if (values.length < 2 || values[0] > 3 || values[1] >= 40) {
            throw new Error(`Invalid OID: ${oid}`);
        }
        this.writeByte(6 /* ObjectIdentifier */);
        let length = values.length - 1;
        for (let i = 2; i < values.length; i++) {
            let value = values[i];
            while (value > 128) {
                length++;
                value /= 128;
            }
        }
        const lengthBytes = DerWriter.getLength(length);
        this.writeBytes(lengthBytes);
        this.writeByte(values[0] * 40 + values[1]);
        for (let i = 2; i < values.length; i++) {
            let value = values[i];
            if (value >= 128) {
                let bytes = [];
                bytes.push(value & 0x7f);
                while (value >= 128) {
                    value /= 128;
                    bytes.push(0x80 | (value & 0x7f));
                }
                while (bytes.length > 0) {
                    this.writeByte(bytes.pop());
                }
            }
            else {
                this.writeByte(value);
            }
        }
    }
    static getLength(length) {
        if (length > 127) {
            let size = 1;
            for (let val = length >> 8; val !== 0; val >>= 8) {
                size++;
            }
            const lengthBytes = DerWriter.lengthBuffer.slice(0, size + 1);
            lengthBytes[0] = size | 0x80;
            for (let i = (size - 1) * 8, j = 1; i >= 0; i -= 8, j++) {
                lengthBytes[j] = length >> i;
            }
            return lengthBytes;
        }
        else {
            const lengthBytes = DerWriter.lengthBuffer.slice(0, 1);
            lengthBytes[0] = length;
            return lengthBytes;
        }
    }
    writeByte(value) {
        this.ensureCapacity(this.position + 1);
        this.buffer[this.position++] = value;
    }
    writeBytes(value) {
        this.ensureCapacity(this.position + value.length);
        value.copy(this.buffer, this.position);
        this.position += value.length;
    }
    ensureCapacity(capacity) {
        if (this.buffer.length < capacity) {
            let newLength = Math.max(512, this.buffer.length * 2);
            while (newLength < capacity)
                newLength *= 2;
            const newBuffer = buffer_1.Buffer.alloc(newLength);
            this.buffer.copy(newBuffer, 0, 0, this.position);
            this.buffer = newBuffer;
        }
    }
}
exports.DerWriter = DerWriter;
DerWriter.lengthBuffer = buffer_1.Buffer.alloc(10);
//# sourceMappingURL=derData.js.map

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

// If you have no idea what ASN.1 or BER is, see this:
// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc

var Ber = __webpack_require__(527);



// --- Exported API

module.exports = {

  Ber: Ber,

  BerReader: Ber.Reader,

  BerWriter: Ber.Writer

};


/***/ }),
/* 139 */
/***/ (function(module, exports) {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


module.exports = {

  newInvalidAsn1Error: function (msg) {
    var e = new Error();
    e.name = 'InvalidAsn1Error';
    e.message = msg || '';
    return e;
  }

};


/***/ }),
/* 140 */
/***/ (function(module, exports) {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.


module.exports = {
  EOC: 0,
  Boolean: 1,
  Integer: 2,
  BitString: 3,
  OctetString: 4,
  Null: 5,
  OID: 6,
  ObjectDescriptor: 7,
  External: 8,
  Real: 9, // float
  Enumeration: 10,
  PDV: 11,
  Utf8String: 12,
  RelativeOID: 13,
  Sequence: 16,
  Set: 17,
  NumericString: 18,
  PrintableString: 19,
  T61String: 20,
  VideotexString: 21,
  IA5String: 22,
  UTCTime: 23,
  GeneralizedTime: 24,
  GraphicString: 25,
  VisibleString: 26,
  GeneralString: 28,
  UniversalString: 29,
  CharacterString: 30,
  BMPString: 31,
  Constructor: 32,
  Context: 128
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshChannel = void 0;
const trace_1 = __webpack_require__(24);
const vscode_jsonrpc_1 = __webpack_require__(6);
const serviceActivation_1 = __webpack_require__(49);
const connectionMessages_1 = __webpack_require__(38);
const transportMessages_1 = __webpack_require__(29);
const channelMetrics_1 = __webpack_require__(248);
const promiseCompletionSource_1 = __webpack_require__(39);
const errors_1 = __webpack_require__(25);
const sshRequestEventArgs_1 = __webpack_require__(142);
const sshChannelClosedEventArgs_1 = __webpack_require__(249);
const cancellation_1 = __webpack_require__(40);
const semaphore_1 = __webpack_require__(72);
/**
 * Represents a channel on an SSH session. A session may include multiple channels, which
 * are multiplexed over the connection. Each channel within a session has a unique integer ID.
 */
class SshChannel {
    /* @internal */
    constructor(connectionService, channelType, remoteChannelId, remoteWindowSize, remoteMaxPacketSize, channelId) {
        this.connectionService = connectionService;
        this.channelType = channelType;
        this.remoteChannelId = remoteChannelId;
        this.remoteWindowSize = remoteWindowSize;
        this.remoteMaxPacketSize = remoteMaxPacketSize;
        this.channelId = channelId;
        this.remoteClosed = false;
        this.localClosed = false;
        this.sentEof = false;
        this.disposed = false;
        this.openSendingWindowCompletionSource = null;
        this.requestCompletionSource = null;
        this.sendSemaphore = new semaphore_1.Semaphore(0);
        /**
         * Gets an object that reports measurements about the channel.
         */
        this.metrics = new channelMetrics_1.ChannelMetrics();
        this.dataReceivedEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event raised when a data message is received on the channel.
         *
         * Users of a channel MUST add a `onDataReceived` event handler immediately after a
         * channel is opened/accepted, or else all session communication will be blocked.
         * (The `SshStream` class does this automatically.)
         *
         * The event handler must call `adjustWindow` when the data has been consumed,
         * to notify the remote side that it may send more data.
         */
        this.onDataReceived = this.dataReceivedEmitter.event;
        this.eofEmitter = new vscode_jsonrpc_1.Emitter();
        /**
         * Event raised when an EOF message is received on the channel.
         */
        this.onEof = this.eofEmitter.event;
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClosed = this.closedEmitter.event;
        this.requestEmitter = new vscode_jsonrpc_1.Emitter();
        this.onRequest = this
            .requestEmitter.event;
        this.windowSize = SshChannel.initialWindowSize;
        this.maxPacketSize = SshChannel.dataPacketSize;
    }
    get session() {
        return this.connectionService.session;
    }
    get isClosed() {
        return this.localClosed || this.remoteClosed;
    }
    /**
     * Sends a channel request and waits for a response.
     *
     * Note if `wantReply` is `false`, this method returns `true` immediately after sending the
     * request, without waiting for a reply.
     *
     * @returns The authorization status of the response; if false, the other side denied the
     * request.
     * @throws `ObjectDisposedError` if the channel was closed before sending the request.
     * @throws `SshChannelError` if the channel was closed while waiting for a reply to the request.
     */
    async request(request, cancellation) {
        if (!request)
            throw new TypeError('Request is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        request.recipientChannel = this.remoteChannelId;
        if (!request.wantReply) {
            // If a reply is not requested, there's no need to set up a completion source.
            await this.session.sendMessage(request, cancellation);
            return true;
        }
        if (this.requestCompletionSource != null) {
            throw new Error('Another request is already pending.');
        }
        // Capture as a local variable because the member may change.
        const requestCompletionSource = new promiseCompletionSource_1.PromiseCompletionSource();
        this.requestCompletionSource = requestCompletionSource;
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested(() => {
                requestCompletionSource.reject(new cancellation_1.CancellationError());
            });
        }
        await this.session.sendMessage(request, cancellation);
        return await requestCompletionSource.promise;
    }
    async send(data, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (data.length === 0) {
            await this.sendEof();
            return;
        }
        else if (this.sentEof) {
            throw new Error('Cannot send more data after EOF.');
        }
        // Prevent out-of-order message chunks even if the caller does not await.
        // Also don't send until the channel is fully opened.
        await this.sendSemaphore.wait(cancellation);
        try {
            let offset = 0;
            let count = data.length;
            while (count > 0) {
                let packetSize = Math.min(Math.min(this.remoteWindowSize, this.remoteMaxPacketSize), count);
                while (packetSize === 0) {
                    if (!this.openSendingWindowCompletionSource) {
                        this.openSendingWindowCompletionSource = new promiseCompletionSource_1.PromiseCompletionSource();
                    }
                    (0, trace_1.trace)(`${this} send window is full. Waiting for window adjustment before sending.`);
                    await (0, cancellation_1.withCancellation)(this.openSendingWindowCompletionSource.promise, cancellation);
                    this.openSendingWindowCompletionSource = null;
                    packetSize = Math.min(Math.min(this.remoteWindowSize, this.remoteMaxPacketSize), count);
                }
                const msg = new connectionMessages_1.ChannelDataMessage();
                msg.recipientChannel = this.remoteChannelId;
                // Unfortunately the data must be copied to a new buffer at this point
                // to ensure it is still available to be re-sent later in case of disconnect.
                msg.data = Buffer.from(data.slice(offset, offset + packetSize));
                await this.session.sendMessage(msg, cancellation);
                this.remoteWindowSize -= packetSize;
                count -= packetSize;
                offset += packetSize;
                this.metrics.addBytesSent(packetSize);
            }
        }
        finally {
            this.sendSemaphore.tryRelease();
        }
    }
    /* @internal */
    enableSending() {
        this.sendSemaphore.tryRelease();
    }
    async sendEof(cancellation) {
        if (this.sentEof) {
            return;
        }
        await this.sendSemaphore.wait(cancellation);
        try {
            this.sentEof = true;
            const msg = new connectionMessages_1.ChannelEofMessage();
            msg.recipientChannel = this.remoteChannelId;
            await this.session.sendMessage(msg, cancellation);
        }
        finally {
            this.sendSemaphore.tryRelease();
        }
    }
    /* @internal */
    async handleRequest(request, cancellation) {
        if (!request.requestType) {
            throw new errors_1.SshConnectionError('Channel request type not specified.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        if (request.requestType === connectionMessages_1.ChannelRequestType.exitStatus) {
            const signal = new connectionMessages_1.ChannelSignalMessage();
            request.convertTo(signal);
            this.exitStatus = signal.exitStatus;
            return true;
        }
        else if (request.requestType === connectionMessages_1.ChannelRequestType.exitSignal) {
            const signal = new connectionMessages_1.ChannelSignalMessage();
            request.convertTo(signal);
            this.exitSignal = signal.exitSignal;
            this.exitErrorMessage = signal.errorMessage;
            return true;
        }
        else if (request.requestType === connectionMessages_1.ChannelRequestType.signal) {
            const signal = new connectionMessages_1.ChannelSignalMessage();
            request.convertTo(signal);
        }
        const args = new sshRequestEventArgs_1.SshRequestEventArgs(request.requestType, request, this.session.principal);
        const serviceType = (0, serviceActivation_1.findService)(this.session.config.services, (a) => (!a.channelType || a.channelType === this.channelType) &&
            a.channelRequest === request.requestType);
        await this.sendSemaphore.wait(cancellation);
        try {
            if (serviceType) {
                // A service was configured for activation via this session request type.
                const service = this.session.activateService(serviceType);
                // `onChannelRequest` should really be 'protected internal'.
                await service.onChannelRequest(this, args, cancellation);
            }
            else {
                this.requestEmitter.fire(args);
            }
            if (request.wantReply) {
                let replyMessage;
                if (args.isAuthorized) {
                    const successMessage = new connectionMessages_1.ChannelSuccessMessage();
                    successMessage.recipientChannel = this.remoteChannelId;
                    replyMessage = successMessage;
                }
                else {
                    const failureMessage = new connectionMessages_1.ChannelFailureMessage();
                    failureMessage.recipientChannel = this.remoteChannelId;
                    replyMessage = failureMessage;
                }
                await this.session.sendMessage(replyMessage, cancellation);
            }
        }
        finally {
            this.sendSemaphore.tryRelease();
        }
        return args.isAuthorized || false;
    }
    /* @internal */
    handleResponse(result) {
        if (this.requestCompletionSource) {
            this.requestCompletionSource.resolve(result);
            this.requestCompletionSource = null;
        }
    }
    /* @internal */
    handleDataReceived(data) {
        this.metrics.addBytesReceived(data.length);
        // DataReceived handler is to adjust the window when it's done with the data.
        this.dataReceivedEmitter.fire(data);
    }
    /**
     * Adjusts the local receiving window size by the specified amount, notifying
     * the remote side that it is free to send more data.
     *
     * This method MUST be called either immediately or eventually by the
     * `onDataReceived` event handler as incoming data is processed.
     */
    adjustWindow(messageLength) {
        if (this.disposed)
            return;
        this.windowSize -= messageLength;
        if (this.windowSize <= this.maxPacketSize) {
            const windowAdjustMessage = new connectionMessages_1.ChannelWindowAdjustMessage();
            windowAdjustMessage.recipientChannel = this.remoteChannelId;
            windowAdjustMessage.bytesToAdd = SshChannel.initialWindowSize - this.windowSize;
            this.windowSize = SshChannel.initialWindowSize;
            this.session.sendMessage(windowAdjustMessage).catch((e) => {
                (0, trace_1.trace)(`Error sending window adjust message: ${e.message || JSON.stringify(e)}`);
            });
        }
    }
    /* @internal */
    adjustRemoteWindow(bytesToAdd) {
        this.remoteWindowSize += bytesToAdd;
        if (this.openSendingWindowCompletionSource) {
            this.openSendingWindowCompletionSource.resolve(undefined);
        }
    }
    /* @internal */
    handleEof() {
        (0, trace_1.trace)(`${this} EOF received.`);
        this.eofEmitter.fire();
    }
    close(exitStatusOrSignal, errorMessage, cancellation) {
        if (exitStatusOrSignal instanceof Error) {
            const error = exitStatusOrSignal;
            if (!this.localClosed) {
                this.localClosed = true;
                (0, trace_1.trace)(`${this} Closed: ${error.message}`);
                this.closedEmitter.fire(new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs(error));
            }
            this.disposeInternal();
            return;
        }
        if (typeof exitStatusOrSignal === 'number') {
            return this.closeWithStatus(exitStatusOrSignal, errorMessage);
        }
        else if (typeof exitStatusOrSignal === 'string') {
            return this.closeWithSignal(exitStatusOrSignal, errorMessage, cancellation);
        }
        else {
            return this.closeDefault(exitStatusOrSignal);
        }
    }
    async closeDefault(cancellation) {
        var _a;
        if (!this.remoteClosed && !this.localClosed) {
            this.remoteClosed = true;
            await this.sendSemaphore.wait(cancellation);
            try {
                const closeMessage = new connectionMessages_1.ChannelCloseMessage();
                closeMessage.recipientChannel = this.remoteChannelId;
                await this.session.sendMessage(closeMessage);
            }
            catch (e) {
                // The session was already closed.
            }
            finally {
                this.sendSemaphore.tryRelease();
            }
        }
        if (!this.localClosed) {
            this.localClosed = true;
            const closedMessage = this.raiseClosedEvent();
            (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.SshChannelError(closedMessage));
        }
        this.disposeInternal();
    }
    async closeWithStatus(exitStatus, cancellation) {
        if (!this.remoteClosed && !this.localClosed) {
            this.exitStatus = exitStatus;
            const signalMessage = new connectionMessages_1.ChannelSignalMessage();
            signalMessage.recipientChannel = this.remoteChannelId;
            signalMessage.exitStatus = exitStatus;
            await this.session.sendMessage(signalMessage);
        }
        await this.closeDefault(cancellation);
    }
    async closeWithSignal(exitSignal, errorMessage, cancellation) {
        if (!this.remoteClosed && !this.localClosed) {
            this.exitSignal = exitSignal;
            this.exitErrorMessage = errorMessage;
            const signalMessage = new connectionMessages_1.ChannelSignalMessage();
            signalMessage.recipientChannel = this.remoteChannelId;
            signalMessage.exitSignal = exitSignal;
            signalMessage.errorMessage = errorMessage;
            await this.session.sendMessage(signalMessage);
        }
        await this.closeDefault(cancellation);
    }
    /* @internal */
    handleClose() {
        var _a;
        if (!this.localClosed) {
            this.localClosed = true;
            const closedMessage = this.raiseClosedEvent(true);
            (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.SshChannelError(closedMessage));
        }
        this.disposeInternal();
    }
    raiseClosedEvent(closedByRemote = false) {
        const metricsMessage = ` (S: ${this.metrics.bytesSent}, R: ${this.metrics.bytesReceived})`;
        const originMessage = closedByRemote ? 'remotely' : 'locally';
        let closedMessage;
        let args;
        if (typeof this.exitStatus !== 'undefined') {
            args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs(this.exitStatus);
            closedMessage = `${this} closed ${originMessage}: status=${this.exitStatus}`;
        }
        else if (typeof this.exitSignal !== 'undefined') {
            args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs(this.exitSignal, this.exitErrorMessage);
            closedMessage = `${this} closed ${originMessage}: signal=${this.exitSignal} ${this.exitErrorMessage}`;
        }
        else {
            args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs();
            closedMessage = `${this} closed ${originMessage}.`;
        }
        (0, trace_1.trace)(closedMessage + metricsMessage);
        this.closedEmitter.fire(args);
        return closedMessage;
    }
    dispose() {
        var _a;
        if (!this.disposed && !this.localClosed) {
            if (!this.remoteClosed) {
                this.remoteClosed = true;
                const closeMessage = new connectionMessages_1.ChannelCloseMessage();
                closeMessage.recipientChannel = this.remoteChannelId;
                this.session.sendMessage(closeMessage).catch((e) => {
                    // The session was already closed, or some other sending error occurred.
                    // The details have already been traced.
                });
            }
            const message = this.session.isClosed ? `${this.session} closed.` : `${this} disposed.`;
            (0, trace_1.trace)(message);
            const args = new sshChannelClosedEventArgs_1.SshChannelClosedEventArgs('SIGABRT', message);
            this.localClosed = true;
            this.closedEmitter.fire(args);
            (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.SshChannelError(message));
        }
        this.disposeInternal();
    }
    disposeInternal() {
        var _a;
        if (this.disposed)
            return;
        this.disposed = true;
        (_a = this.requestCompletionSource) === null || _a === void 0 ? void 0 : _a.reject(new errors_1.ObjectDisposedError(this));
        this.connectionService._removeChannel(this);
        this.sendSemaphore.dispose();
    }
    toString() {
        return `SshChannel(Type: ${this.channelType}, Id: ${this.channelId}, RemoteId: ${this.remoteChannelId})`;
    }
}
exports.SshChannel = SshChannel;
SshChannel.sessionChannelType = 'session';
SshChannel.dataPacketSize = 32 * 1024;
SshChannel.initialWindowSize = SshChannel.dataPacketSize * 32;
//# sourceMappingURL=sshChannel.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshRequestEventArgs = void 0;
class SshRequestEventArgs {
    constructor(requestType, request, principal) {
        this.requestType = requestType;
        this.request = request;
        this.principal = principal;
    }
    toString() {
        return `RequestType: ${this.requestType}` + this.request ? ` Request: ${this.request}` : '';
    }
}
exports.SshRequestEventArgs = SshRequestEventArgs;
//# sourceMappingURL=sshRequestEventArgs.js.map

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewKeysMessage = exports.KeyExchangeDhReplyMessage = exports.KeyExchangeDhInitMessage = exports.KeyExchangeInitMessage = exports.KeyExchangeMessage = void 0;
const buffer_1 = __webpack_require__(0);
const sshMessage_1 = __webpack_require__(50);
const sshAlgorithms_1 = __webpack_require__(47);
class KeyExchangeMessage extends sshMessage_1.SshMessage {
}
exports.KeyExchangeMessage = KeyExchangeMessage;
class KeyExchangeInitMessage extends KeyExchangeMessage {
    get messageType() {
        return 20;
    }
    onRead(reader) {
        this.cookie = reader.read(16);
        this.keyExchangeAlgorithms = reader.readList('ascii');
        this.serverHostKeyAlgorithms = reader.readList('ascii');
        this.encryptionAlgorithmsClientToServer = reader.readList('ascii');
        this.encryptionAlgorithmsServerToClient = reader.readList('ascii');
        this.macAlgorithmsClientToServer = reader.readList('ascii');
        this.macAlgorithmsServerToClient = reader.readList('ascii');
        this.compressionAlgorithmsClientToServer = reader.readList('ascii');
        this.compressionAlgorithmsServerToClient = reader.readList('ascii');
        this.languagesClientToServer = reader.readList('ascii');
        this.languagesServerToClient = reader.readList('ascii');
        this.firstKexPacketFollows = reader.readBoolean();
        this.reserved = reader.readUInt32();
    }
    onWrite(writer) {
        if (!this.cookie) {
            this.cookie = buffer_1.Buffer.alloc(16);
            sshAlgorithms_1.SshAlgorithms.random.getBytes(this.cookie);
        }
        writer.write(this.cookie);
        writer.writeList(this.keyExchangeAlgorithms || [], 'ascii');
        writer.writeList(this.serverHostKeyAlgorithms || [], 'ascii');
        writer.writeList(this.encryptionAlgorithmsClientToServer || [], 'ascii');
        writer.writeList(this.encryptionAlgorithmsServerToClient || [], 'ascii');
        writer.writeList(this.macAlgorithmsClientToServer || [], 'ascii');
        writer.writeList(this.macAlgorithmsServerToClient || [], 'ascii');
        writer.writeList(this.compressionAlgorithmsClientToServer || [], 'ascii');
        writer.writeList(this.compressionAlgorithmsServerToClient || [], 'ascii');
        writer.writeList(this.languagesClientToServer || [], 'ascii');
        writer.writeList(this.languagesServerToClient || [], 'ascii');
        writer.writeBoolean(this.validateField(this.firstKexPacketFollows, 'first KEX package follows'));
        writer.writeUInt32(this.reserved || 0);
    }
}
exports.KeyExchangeInitMessage = KeyExchangeInitMessage;
class KeyExchangeDhInitMessage extends KeyExchangeMessage {
    get messageType() {
        return 30;
    }
    onRead(reader) {
        this.e = reader.readBinary();
    }
    onWrite(writer) {
        writer.writeBinary(this.validateField(this.e, 'E'));
    }
}
exports.KeyExchangeDhInitMessage = KeyExchangeDhInitMessage;
class KeyExchangeDhReplyMessage extends KeyExchangeMessage {
    get messageType() {
        return 31;
    }
    onRead(reader) {
        this.hostKey = reader.readBinary();
        this.f = reader.readBinary();
        this.signature = reader.readBinary();
    }
    onWrite(writer) {
        writer.writeBinary(this.validateField(this.hostKey, 'host key'));
        writer.writeBinary(this.validateField(this.f, 'F'));
        writer.writeBinary(this.validateField(this.signature, 'signature'));
    }
}
exports.KeyExchangeDhReplyMessage = KeyExchangeDhReplyMessage;
class NewKeysMessage extends KeyExchangeMessage {
    get messageType() {
        return 21;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.NewKeysMessage = NewKeysMessage;
sshMessage_1.SshMessage.index.set(20, KeyExchangeInitMessage);
sshMessage_1.SshMessage.index.set(30, KeyExchangeDhInitMessage);
sshMessage_1.SshMessage.index.set(31, KeyExchangeDhReplyMessage);
sshMessage_1.SshMessage.index.set(21, NewKeysMessage);
//# sourceMappingURL=kexMessages.js.map

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AuthenticationService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationService = void 0;
const trace_1 = __webpack_require__(24);
const sshService_1 = __webpack_require__(94);
const authenticationMessages_1 = __webpack_require__(252);
const vscode_jsonrpc_1 = __webpack_require__(6);
const sshData_1 = __webpack_require__(16);
const transportMessages_1 = __webpack_require__(29);
const sshAuthenticatingEventArgs_1 = __webpack_require__(145);
const connectionService_1 = __webpack_require__(73);
const serviceActivation_1 = __webpack_require__(49);
const queue_1 = __webpack_require__(93);
/**
 * Handles SSH protocol messages related to client authentication.
 */
let AuthenticationService = AuthenticationService_1 = class AuthenticationService extends sshService_1.SshService {
    constructor(session) {
        var _a;
        super(session);
        this.authenticationFailureCount = 0;
        this.disposeCancellationSource = new vscode_jsonrpc_1.CancellationTokenSource();
        const algorithmName = (_a = session.algorithms) === null || _a === void 0 ? void 0 : _a.publicKeyAlgorithmName;
        if (!algorithmName) {
            throw new Error('Algorithms not initialized.');
        }
        this.publicKeyAlgorithmName = algorithmName;
    }
    handleMessage(message, cancellation) {
        if (message instanceof authenticationMessages_1.AuthenticationSuccessMessage) {
            return this.handleSuccessMessage(message);
        }
        else if (message instanceof authenticationMessages_1.AuthenticationFailureMessage) {
            return this.handleFailureMessage(message);
        }
        else if (message instanceof authenticationMessages_1.AuthenticationRequestMessage) {
            return this.handleAuthenticationRequestMessage(message, cancellation);
        }
        else {
            throw new Error(`Message not implemented: ${message}`);
        }
    }
    async handleAuthenticationRequestMessage(message, cancellation) {
        (0, trace_1.trace)(`Authentication request: ${message.methodName}`);
        if (message.methodName === "publickey" /* publicKey */ ||
            message.methodName === "hostbased" /* hostBased */) {
            return this.handlePublicKeyRequestMessage(message.convertTo(new authenticationMessages_1.PublicKeyRequestMessage()), cancellation);
        }
        else if (message.methodName === "password" /* password */) {
            return this.handlePasswordRequestMessage(message.convertTo(new authenticationMessages_1.PasswordRequestMessage()), cancellation);
        }
        else if (message.methodName === "none" /* none */) {
            return this.handleAuthenticating(message, new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientNone, { username: message.username }, cancellation));
        }
        else {
            const failureMessage = new authenticationMessages_1.AuthenticationFailureMessage();
            failureMessage.methodNames = [
                "publickey" /* publicKey */,
                "password" /* password */,
                "hostbased" /* hostBased */,
            ];
            await this.session.sendMessage(failureMessage, cancellation);
        }
    }
    async handlePublicKeyRequestMessage(message, cancellation) {
        var _a, _b, _c;
        const publicKeyAlg = this.session.config.getPublicKeyAlgorithm(message.keyAlgorithmName);
        if (!publicKeyAlg) {
            const failureMessage = new authenticationMessages_1.AuthenticationFailureMessage();
            failureMessage.methodNames = [
                "publickey" /* publicKey */,
                "password" /* password */,
            ];
            await this.session.sendMessage(failureMessage, cancellation);
            return;
        }
        const publicKey = publicKeyAlg.createKeyPair();
        await publicKey.setPublicKeyBytes(message.publicKey);
        let args;
        if (message.methodName === "hostbased" /* hostBased */) {
            args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientHostBased, {
                username: (_a = message.username) !== null && _a !== void 0 ? _a : '',
                publicKey: publicKey,
                clientHostname: message.clientHostname,
                clientUsername: message.clientUsername,
            });
        }
        else if (!message.hasSignature) {
            args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPublicKeyQuery, {
                username: (_b = message.username) !== null && _b !== void 0 ? _b : '',
                publicKey: publicKey,
            });
        }
        else {
            // Verify that the signature matches the public key.
            const signature = publicKeyAlg.readSignatureData(message.signature);
            const sessionId = this.session.sessionId;
            if (sessionId == null) {
                throw new Error('Session ID not initialized.');
            }
            const writer = new sshData_1.SshDataWriter(Buffer.alloc(sessionId.length + message.payloadWithoutSignature.length + 20));
            writer.writeBinary(sessionId);
            writer.write(message.payloadWithoutSignature);
            const signedData = writer.toBuffer();
            const verifier = publicKeyAlg.createVerifier(publicKey);
            const verified = await verifier.verify(signedData, signature);
            if (!verified) {
                await this.handleAuthenticationFailure('Public key authentication failed: invalid signature.', cancellation);
            }
            args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPublicKey, {
                username: (_c = message.username) !== null && _c !== void 0 ? _c : '',
                publicKey: publicKey,
            });
        }
        // Raise an Authenticating event that allows handlers to do additional verification
        // of the client's username and public key.
        await this.handleAuthenticating(message, args, cancellation);
    }
    async handlePasswordRequestMessage(message, cancellation) {
        var _a, _b;
        // Raise an Authenticating event that allows handlers to do verification
        // of the client's username and password.
        const args = new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPassword, {
            username: (_a = message.username) !== null && _a !== void 0 ? _a : '',
            password: (_b = message.password) !== null && _b !== void 0 ? _b : '',
        });
        await this.handleAuthenticating(message, args, cancellation);
    }
    async handleAuthenticating(requestMessage, args, cancellation) {
        var _a;
        let authenticatedPrincipal = null;
        try {
            authenticatedPrincipal = await this.session.raiseAuthenticatingEvent(args);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            (0, trace_1.trace)('Error while authenticating client: ' + ((_a = e.message) !== null && _a !== void 0 ? _a : e));
            authenticatedPrincipal = null;
        }
        if (authenticatedPrincipal) {
            if (args.authenticationType === sshAuthenticatingEventArgs_1.SshAuthenticationType.clientPublicKeyQuery) {
                const publicKeyRequest = requestMessage;
                const okMessage = new authenticationMessages_1.PublicKeyOKMessage();
                okMessage.keyAlgorithmName = publicKeyRequest.keyAlgorithmName;
                okMessage.publicKey = publicKeyRequest.publicKey;
                await this.session.sendMessage(okMessage, cancellation);
            }
            else {
                this.session.principal = authenticatedPrincipal;
                if (requestMessage.serviceName) {
                    this.session.activateService(requestMessage.serviceName);
                }
                (0, trace_1.trace)(`${sshAuthenticatingEventArgs_1.SshAuthenticationType[args.authenticationType]} authentication succeeded.`);
                await this.session.sendMessage(new authenticationMessages_1.AuthenticationSuccessMessage(), cancellation);
            }
        }
        else {
            await this.handleAuthenticationFailure(`${sshAuthenticatingEventArgs_1.SshAuthenticationType[args.authenticationType]} authentication failed.`);
        }
    }
    async handleAuthenticationFailure(message, cancellation) {
        this.authenticationFailureCount++;
        (0, trace_1.trace)(message);
        const failureMessage = new authenticationMessages_1.AuthenticationFailureMessage();
        failureMessage.methodNames = [
            "publickey" /* publicKey */,
            "password" /* password */,
            "hostbased" /* hostBased */,
        ];
        await this.session.sendMessage(failureMessage, cancellation);
        // Allow trying again with another authentication method. But prevent unlimited tries.
        if (this.authenticationFailureCount >= this.session.config.maxClientAuthenticationAttempts) {
            await this.session.close(transportMessages_1.SshDisconnectReason.noMoreAuthMethodsAvailable, 'Authentication failed.');
        }
    }
    async authenticateClient(credentials, cancellation) {
        var _a, _b, _c, _d;
        this.clientAuthenticationMethods = new queue_1.Queue();
        for (let publicKey of (_a = credentials.publicKeys) !== null && _a !== void 0 ? _a : []) {
            if (!publicKey)
                continue;
            const username = (_b = credentials.username) !== null && _b !== void 0 ? _b : '';
            let privateKey = publicKey;
            const privateKeyProvider = credentials.privateKeyProvider;
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                if (!privateKey.hasPrivateKey) {
                    if (privateKeyProvider == null) {
                        throw new Error('A private key provider is required.');
                    }
                    privateKey = await privateKeyProvider(publicKey, cancellation2 !== null && cancellation2 !== void 0 ? cancellation2 : vscode_jsonrpc_1.CancellationToken.None);
                }
                if (privateKey) {
                    await this.requestPublicKeyAuthentication(username, privateKey, cancellation2);
                }
                else {
                    await this.session.close(transportMessages_1.SshDisconnectReason.authCancelledByUser);
                }
            });
        }
        const passwordCredentialProvider = credentials.passwordProvider;
        if (passwordCredentialProvider) {
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                var _a;
                const passwordCredentialPromise = passwordCredentialProvider(cancellation2 !== null && cancellation2 !== void 0 ? cancellation2 : vscode_jsonrpc_1.CancellationToken.None);
                const passwordCredential = passwordCredentialPromise
                    ? await passwordCredentialPromise
                    : null;
                if (passwordCredential) {
                    await this.requestPasswordAuthentication((_a = passwordCredential[0]) !== null && _a !== void 0 ? _a : '', passwordCredential[1], cancellation2);
                }
                else {
                    await this.session.close(transportMessages_1.SshDisconnectReason.authCancelledByUser);
                }
            });
        }
        else if (credentials.password) {
            const username = (_c = credentials.username) !== null && _c !== void 0 ? _c : '';
            const password = credentials.password;
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                await this.requestPasswordAuthentication(username, password, cancellation2);
            });
        }
        if (this.clientAuthenticationMethods.size === 0) {
            const username = (_d = credentials.username) !== null && _d !== void 0 ? _d : '';
            this.clientAuthenticationMethods.enqueue(async (cancellation2) => {
                await this.requestUsernameAuthentication(username, cancellation2);
            });
        }
        const firstAuthMethod = this.clientAuthenticationMethods.dequeue();
        await firstAuthMethod(cancellation);
    }
    async requestUsernameAuthentication(username, cancellation) {
        const authMessage = new authenticationMessages_1.AuthenticationRequestMessage();
        authMessage.serviceName = connectionService_1.ConnectionService.serviceName;
        authMessage.methodName = "none" /* none */;
        authMessage.username = username;
        await this.session.sendMessage(authMessage, cancellation);
        // Assume the included service request succeeds, without waiting for an auth success
        // message. If not, a following channel open request will fail anyway.
        this.session.activateService(connectionService_1.ConnectionService);
    }
    async requestPublicKeyAuthentication(username, key, cancellation) {
        const algorithm = this.session.config.publicKeyAlgorithms.find((a) => (a === null || a === void 0 ? void 0 : a.keyAlgorithmName) === key.keyAlgorithmName);
        if (!algorithm) {
            throw new Error(`Public key algorithm '${key.keyAlgorithmName}' is not in session config.`);
        }
        const authMessage = new authenticationMessages_1.PublicKeyRequestMessage();
        authMessage.serviceName = connectionService_1.ConnectionService.serviceName;
        authMessage.username = username;
        authMessage.keyAlgorithmName = algorithm.name;
        authMessage.publicKey = (await key.getPublicKeyBytes(algorithm.name));
        authMessage.signature = await this.createAuthenticationSignature(authMessage, algorithm, key);
        await this.session.sendMessage(authMessage, cancellation);
        if (this.clientAuthenticationMethods.size === 0) {
            // There are no remaining auth methods. Assume the service request
            // included here succeeds, without waiting for an auth success message
            // If not, a following channel open request will fail anyway.
            this.session.activateService(connectionService_1.ConnectionService);
        }
    }
    async requestPasswordAuthentication(username, password, cancellation) {
        const authMessage = new authenticationMessages_1.PasswordRequestMessage();
        authMessage.serviceName = connectionService_1.ConnectionService.serviceName;
        authMessage.username = username;
        authMessage.password = password;
        await this.session.sendMessage(authMessage, cancellation);
        // Assume the included service request succeeds, without waiting for an auth success
        // message. If not, a following channel open request will fail anyway.
        this.session.activateService(connectionService_1.ConnectionService);
    }
    handleFailureMessage(message) {
        this.session.onAuthenticationComplete(false);
    }
    handleSuccessMessage(message) {
        // The authentication request included the connection service name.
        // So it should be registered when authentication succeeded.
        this.session.activateService(connectionService_1.ConnectionService);
        this.session.onAuthenticationComplete(true);
    }
    async createAuthenticationSignature(requestMessage, algorithm, key) {
        const sessionId = this.session.sessionId;
        if (sessionId == null) {
            throw new Error('Session ID not initialized.');
        }
        const writer = new sshData_1.SshDataWriter(Buffer.alloc(requestMessage.publicKey.length + (requestMessage.username || '').length + 400));
        writer.writeBinary(sessionId);
        writer.writeByte(requestMessage.messageType);
        writer.writeString(requestMessage.username || '', 'utf8');
        writer.writeString(requestMessage.serviceName || '', 'ascii');
        writer.writeString("publickey" /* publicKey */, 'ascii');
        writer.writeBoolean(true);
        writer.writeString(requestMessage.keyAlgorithmName, 'ascii');
        writer.writeBinary(requestMessage.publicKey);
        const signer = algorithm.createSigner(key);
        const signature = await signer.sign(writer.toBuffer());
        return algorithm.createSignatureData(signature);
    }
};
AuthenticationService.serviceName = 'ssh-userauth';
AuthenticationService = AuthenticationService_1 = __decorate([
    (0, serviceActivation_1.serviceActivation)({ serviceRequest: AuthenticationService_1.serviceName })
], AuthenticationService);
exports.AuthenticationService = AuthenticationService;
//# sourceMappingURL=authenticationService.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshAuthenticatingEventArgs = exports.SshAuthenticationType = void 0;
const vscode_jsonrpc_1 = __webpack_require__(6);
/**
 * Indicates the type of authentication being requested by an SSH client or server when an
 * `SshSession.authenticating` event is raised.
 */
var SshAuthenticationType;
(function (SshAuthenticationType) {
    /**
     * The client is attempting to authenticate without any credentials, or with only a
     * username, or is merely checking what authentication methods are supported by the server.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "none" method. With this method, all of the credential properties in the
     * `SshAuthenticatingEventArgs` are null.
     *
     * If the server app wishes to allow the client to authenticate with only a username, it may
     * return a principal for the user. Othwerwise, the "none" authentication method fails, and
     * the client may make a follow-up attempt to authenticate _with_ credentials.
     */
    SshAuthenticationType[SshAuthenticationType["clientNone"] = 0] = "clientNone";
    /**
     * The client is attempting to authenticate with a client host public key.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "hostbased" method. The authentication handler must verify that the public key
     * actually belongs to the client host name, _and_ that the network address the client
     * connected from matches that host name, before returning a user principal to indicate
     * successful authentication.
     */
    SshAuthenticationType[SshAuthenticationType["clientHostBased"] = 1] = "clientHostBased";
    /**
     * The client is attempting to authenticate with a username and password credential.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "password" method. The authentication handler must verify that the username
     * and password match known credentials on the server, before returning a user principal
     * to indicate successful authentication.
     */
    SshAuthenticationType[SshAuthenticationType["clientPassword"] = 2] = "clientPassword";
    /**
     * The client is querying whether authentication may be possible for a specified username and
     * public key without yet proving they have the private key.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "publickey" method _without_ providing a signature. The authentication handler
     * must verify that the username and public key match known credentials on the server. If
     * they match, an _unauthenticated_ principal should be returned. That indicates to the
     * client that they may proceed to actually authenticate using that username and public key.
     */
    SshAuthenticationType[SshAuthenticationType["clientPublicKeyQuery"] = 3] = "clientPublicKeyQuery";
    /**
     * The client is attempting to authenticate with a username and public key credential.
     *
     * This event is raised by an `SshServerSession` when the client requests authentication
     * using the "publickey" method, including a signature that proves they have the private
     * key. The authentication handler must verify that the username and public key match known
     * credentials on the server, before returning a user principal to indicate successful
     * authentication.
     */
    SshAuthenticationType[SshAuthenticationType["clientPublicKey"] = 4] = "clientPublicKey";
    /**
     * The server is attempting to authenticate with a public key credential.
     *
     * This event is raised by an `SshClientSession` when the server requests
     * authentication by providing a signature that proves it has the private key. The client
     * authentication handler must verify that the public key matches known public key(s) for
     * that server. Or if not known (often the case for the first time connecting to that server)
     * it may prompt the user to consent, and then save the public key for later reference. To
     * indicate successful authentication, the client authentication handler returns a principal
     * that represents the server.
     */
    SshAuthenticationType[SshAuthenticationType["serverPublicKey"] = 10] = "serverPublicKey";
})(SshAuthenticationType = exports.SshAuthenticationType || (exports.SshAuthenticationType = {}));
/**
 * Arguments for the `SshSession.Authenticating` event that is raised when a client
 * or server is requesting authentication.
 *
 * See `SshAuthenticationType` for a description of the different authentication methods and
 * how they map to properties in this event-args object.
 *
 * After validating the credentials, the event handler must set the `authenticationPromise`
 * property to a task that resolves to a principal object to indicate successful authentication.
 * That principal will then be associated with the sesssion as the `SshSession.principal` property.
 */
class SshAuthenticatingEventArgs {
    constructor(authenticationType, { username, password, publicKey, clientHostname, clientUsername, }, cancellation) {
        this.authenticationType = authenticationType;
        const validate = ({ usernameRequired, passwordRequired, publicKeyRequired, clientHostnameRequired, clientUsernameRequired, }) => {
            // This is intentionally not checking for empty strings. The authentication handler
            // should determine whether any non-null string values are valid.
            if ((typeof username === 'string') !== !!usernameRequired)
                return false;
            if ((typeof password === 'string') !== !!passwordRequired)
                return false;
            if (!!publicKey !== !!publicKeyRequired)
                return false;
            if ((typeof clientHostname === 'string') !== !!clientHostnameRequired)
                return false;
            if ((typeof clientUsername === 'string') !== !!clientUsernameRequired)
                return false;
            return true;
        };
        let valid;
        switch (authenticationType) {
            case SshAuthenticationType.clientNone:
                valid = validate({ usernameRequired: true });
                break;
            case SshAuthenticationType.clientHostBased:
                valid = validate({
                    usernameRequired: true,
                    publicKeyRequired: true,
                    clientHostnameRequired: true,
                    clientUsernameRequired: true,
                });
                break;
            case SshAuthenticationType.clientPassword:
                valid = validate({ usernameRequired: true, passwordRequired: true });
                break;
            case SshAuthenticationType.clientPublicKeyQuery:
            case SshAuthenticationType.clientPublicKey:
                valid = validate({ usernameRequired: true, publicKeyRequired: true });
                break;
            case SshAuthenticationType.serverPublicKey:
                valid = validate({ publicKeyRequired: true });
                break;
            default:
                throw new Error(`Invalid authentication type: ${authenticationType}`);
        }
        if (!valid) {
            throw new Error(`Invalid arguments for authentication type: ${authenticationType}`);
        }
        this.username = username !== null && username !== void 0 ? username : null;
        this.password = password !== null && password !== void 0 ? password : null;
        this.publicKey = publicKey !== null && publicKey !== void 0 ? publicKey : null;
        this.clientHostname = clientHostname !== null && clientHostname !== void 0 ? clientHostname : null;
        this.clientUsername = clientUsername !== null && clientUsername !== void 0 ? clientUsername : null;
        this.cancellationValue = cancellation !== null && cancellation !== void 0 ? cancellation : vscode_jsonrpc_1.CancellationToken.None;
    }
    /**
     * Gets a token that is cancelled if the session ends before the authentication handler
     * completes.
     */
    get cancellation() {
        return this.cancellationValue;
    }
    /* @internal */
    set cancellation(value) {
        this.cancellationValue = value;
    }
    toString() {
        if (this.password) {
            return `${this.username ? '"' + this.username + '" ' : ''}[password]`;
        }
        else if (this.publicKey) {
            return `${this.username ? '"' + this.username + '" ' : ''}[${this.publicKey.keyAlgorithmName}]`;
        }
        else {
            return `"${this.username}"`;
        }
    }
}
exports.SshAuthenticatingEventArgs = SshAuthenticatingEventArgs;
//# sourceMappingURL=sshAuthenticatingEventArgs.js.map

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(546);

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(17);
var normalizeHeaderName = __webpack_require__(551);
var enhanceError = __webpack_require__(258);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(259);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(259);
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(564).default;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GITHUB_EXTENSION_NAME = 'GitHub.codespaces';
exports.DEFAULT_EXTENSIONS = [exports.GITHUB_EXTENSION_NAME, 'GitHub.vscode-pull-request-github'];
exports.VSONLINE_INTEGRATION_TEST = 'vso-integration-test';
exports.GH_SPENDING_LIMIT_IDENTIFIER = 'GH_SPENDING_LIMIT';
exports.GH_MACHINE_POLICY_IDENTIFIER = 'GH_MACHINE_POLICY';
exports.DEFAULT_FORWARDING_HOST = '127.0.0.1';
exports.IPV6_ANY_ADDRESS = '0:0:0:0:0:0:0:0';
exports.ALLOWED_FORWARDING_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', exports.IPV6_ANY_ADDRESS];
exports.TELEMETRY_EVENTS_MAX_CLIENT_LOGS_SIZE = 5000;
exports.RESOURCE_USAGE_FILE = 'resource-usage.json';
exports.CLIENT_ENVIRONMENT_SETTINGS_FILE = 'client-environment-settings.json';
exports.LIVESHARE_PROD_URL = 'https://prod.liveshare.vsengsaas.visualstudio.com';
exports.LIVESHARE_PPE_URL = 'https://ppe.liveshare.vsengsaas.visualstudio.com';
exports.VSCS_PROD_SERVICE_HOSTNAME = 'online.visualstudio.com';
exports.VSCS_PROD_SERVICE_URL = `https://${exports.VSCS_PROD_SERVICE_HOSTNAME}`;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ConfigurationKey;
(function (ConfigurationKey) {
    /* Extension config name */
    ConfigurationKey["configName"] = "github.codespaces";
    /* Extension settings */
    ConfigurationKey["defaultExtensions"] = "defaultExtensions";
    /* Use PFS for Https settings */
    ConfigurationKey["usePortForwardingServiceForHTTPS"] = "usePortForwardingServiceForHTTPS";
    /* Performance Explorer settings */
    ConfigurationKey["showPerformanceExplorer"] = "showPerformanceExplorer";
    ConfigurationKey["createCodespaceInNewWindow"] = "createCodespaceInNewWindow";
    /* VS Code workbench config section */
    ConfigurationKey["workbench"] = "workbench";
    /* VS Code theme */
    ConfigurationKey["theme"] = "colorTheme";
    /* Connection type used by the new resolver flow. */
    ConfigurationKey["ConnectionType"] = "connectionType";
    /* Notification preference used for devcontainer changes */
    ConfigurationKey["DevcontainerChangedNotificationStyle"] = "devcontainerChangedNotificationStyle";
})(ConfigurationKey = exports.ConfigurationKey || (exports.ConfigurationKey = {}));
var OS;
(function (OS) {
    OS[OS["Linux"] = 0] = "Linux";
    OS[OS["OSX"] = 1] = "OSX";
    OS[OS["Windows"] = 2] = "Windows";
})(OS = exports.OS || (exports.OS = {}));
;
var TDevContainerChangeNotificationTypes;
(function (TDevContainerChangeNotificationTypes) {
    TDevContainerChangeNotificationTypes["None"] = "none";
    TDevContainerChangeNotificationTypes["Notification"] = "notification";
    TDevContainerChangeNotificationTypes["Modal"] = "modal";
})(TDevContainerChangeNotificationTypes = exports.TDevContainerChangeNotificationTypes || (exports.TDevContainerChangeNotificationTypes = {}));
;
var TConfigConnectionTypes;
(function (TConfigConnectionTypes) {
    TConfigConnectionTypes["MainThread"] = "main thread";
    TConfigConnectionTypes["SeparateThread"] = "separate thread";
    TConfigConnectionTypes["Any"] = "any";
})(TConfigConnectionTypes = exports.TConfigConnectionTypes || (exports.TConfigConnectionTypes = {}));
;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
async function isNodeInstalled() {
    return false;
}
exports.isNodeInstalled = isNodeInstalled;
exports.isRunningInWebWorker = true;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var RpcProxy_1 = __webpack_require__(265);
exports.RpcErrorCodes = RpcProxy_1.RpcErrorCodes;
exports.RpcProxy = RpcProxy_1.RpcProxy;
var RpcServiceHandler_1 = __webpack_require__(154);
exports.RpcServiceHandler = RpcServiceHandler_1.RpcServiceHandler;
exports.methodProgress = RpcServiceHandler_1.methodProgress;
var RpcClient_1 = __webpack_require__(584);
exports.RpcClient = RpcClient_1.RpcClient;
var RpcClientProxy_1 = __webpack_require__(153);
exports.RpcClientProxy = RpcClientProxy_1.RpcClientProxy;
exports.RpcClientProxyBase = RpcClientProxy_1.RpcClientProxyBase;
var RpcLoggerAdapter_1 = __webpack_require__(266);
exports.RpcLoggerAdapter = RpcLoggerAdapter_1.RpcLoggerAdapter;
var RpcConnectionErrors_1 = __webpack_require__(267);
exports.RpcConnectionClosedError = RpcConnectionErrors_1.RpcConnectionClosedError;
exports.RpcConnectionShutdownError = RpcConnectionErrors_1.RpcConnectionShutdownError;
var RpcError_1 = __webpack_require__(268);
exports.RpcError = RpcError_1.RpcError;
var RpcServer_1 = __webpack_require__(585);
exports.RpcServer = RpcServer_1.RpcServer;
var RpcMessageWriter_1 = __webpack_require__(586);
exports.RpcMessageWriter = RpcMessageWriter_1.RpcMessageWriter;
var DataFormat_1 = __webpack_require__(587);
exports.DataFormat = DataFormat_1.DataFormat;
exports.dataFormat = DataFormat_1.dataFormat;
var RpcProxyCache_1 = __webpack_require__(588);
exports.RpcProxyCache = RpcProxyCache_1.RpcProxyCache;
var Channel_1 = __webpack_require__(589);
exports.Channel = Channel_1.Channel;
const rpcUtils = __importStar(__webpack_require__(75));
exports.rpcUtils = rpcUtils;
__export(__webpack_require__(269));
var createDuplexRpcMessageStreams_1 = __webpack_require__(590);
exports.createDuplexRpcMessageStreams = createDuplexRpcMessageStreams_1.createDuplexRpcMessageStreams;
exports.rpcMaxMessageSize = 10 * 1024 * 1024; // 10 MB
__export(__webpack_require__(591));
//# sourceMappingURL=index.js.map

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
const vscs_utils_1 = __webpack_require__(8);
class RpcClientProxyBase extends vscs_utils_1.DisposableClass {
    constructor(logger) {
        super(logger);
    }
    sendNotification(logger, serviceAndName, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.ensureConnectionAsync();
            // Event args may contain sensitive data, so only trace when obfuscation is disabled.
            const argsString = vso_logging_1.LoggerSettings.disableObfuscation ? JSON.stringify(args) : '';
            logger.verbose(`sendNotification-> ${serviceAndName}: ${argsString}`);
            if (Array.isArray(args)) {
                // Method-style notification: 0 or more arguments.
                connection.sendNotification(serviceAndName, ...args);
            }
            else {
                // Event-style notification: a single EventArgs argument.
                connection.sendNotification(serviceAndName, args);
            }
        });
    }
    sendRequest(logger, serviceAndMethodName, progress, cancellationToken, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const cancellationMessage = 'The request was cancelled.';
            let connectionCompleted = false;
            const connection = yield Promise.race([
                this.ensureConnectionAsync(),
                new Promise((resolve, reject) => {
                    if (cancellationToken) {
                        if (cancellationToken.isCancellationRequested) {
                            return reject(new vscs_utils_1.CancellationError(cancellationMessage));
                        }
                        cancellationToken.onCancellationRequested(() => {
                            if (!connectionCompleted) {
                                reject(new vscs_utils_1.CancellationError(cancellationMessage));
                            }
                        });
                    }
                }),
            ]);
            connectionCompleted = true;
            let argsString = '';
            if (vso_logging_1.LoggerSettings.disableObfuscation) {
                // Arguments may contain sensitive data, so only trace when obfuscation is disabled.
                argsString = JSON.stringify(args);
                argsString = argsString.substr(1, argsString.length - 2);
            }
            logger.verbose(`< ${serviceAndMethodName}(${argsString})`);
            const start = Date.now();
            let result;
            try {
                if (progress) {
                    // Attach the progress handler to the args; the write filter will detect and register it.
                    // Also attach the cancellation token so progress notifications can be cancelled.
                    progress.cancellation = cancellationToken;
                    args.progress = progress;
                }
                // The vscode-jsonrpc sendRequest() method can only detect a cancellation token argument
                // if it is not null.
                let sendPromise;
                if (cancellationToken) {
                    sendPromise = connection.sendRequest(serviceAndMethodName, args, cancellationToken);
                }
                else {
                    sendPromise = connection.sendRequest(serviceAndMethodName, args);
                }
                result = yield sendPromise;
            }
            catch (err) {
                if (this.isDisposed) {
                    // // This will either block (during deactivation) or throw a connection-closed error.
                    // await this.initPromise;
                }
                // The error 'data' property should be the remote stack trace.
                logger.error(`> ${serviceAndMethodName}() error: ` + err.data);
                throw err;
            }
            const time = (Date.now() - start).toFixed(1);
            // Result may contain sensitive data, so only trace when obfuscation is disabled.
            if (vso_logging_1.LoggerSettings.disableObfuscation) {
                logger.verbose(`> ${serviceAndMethodName}() => ${JSON.stringify(result)} t:${time}`);
            }
            else {
                logger.verbose(`> ${serviceAndMethodName}() succeeded t:${time}`);
            }
            return result;
        });
    }
}
exports.RpcClientProxyBase = RpcClientProxyBase;
class RpcClientProxy extends RpcClientProxyBase {
    constructor(promise, logger) {
        super(logger);
        this.promise = promise;
        this.initPromise = Promise.resolve();
    }
    static fromRpcConnection(connection, logger) {
        return new RpcClientProxy(Promise.resolve(connection), logger);
    }
    static fromPromise(promise, logger) {
        return new RpcClientProxy(promise, logger);
    }
    ensureConnectionAsync() {
        return this.promise;
    }
}
exports.RpcClientProxy = RpcClientProxy;
//# sourceMappingURL=RpcClientProxy.js.map

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __importStar(__webpack_require__(6));
const vscs_utils_1 = __webpack_require__(8);
const RpcUtils_1 = __webpack_require__(75);
const RpcLoggerAdapter_1 = __webpack_require__(266);
const RpcUtils_2 = __webpack_require__(75);
exports.methodProgress = '$/progress';
const RESTRICTED_HANDLERS_FIELD = '$RestrictedHandlers$';
/**
 * Base class to handle common tasks related with handling rpc request and notifications.
 */
class RpcServiceHandlerBase extends vscs_utils_1.DisposableClass {
    constructor(logger) {
        super(logger);
        this.rpcRequestsWithContext = new RpcUtils_1.RpcRequestsWithContext();
        this.rpcReadFilters = [
            this.rpcRequestsWithContext.readFilter,
        ];
        this.rpcWriteFilters = [];
        this.progressHandlers = new Map();
        this.requests = new Map();
        this.requestsWithProgress = new Set();
        this.notifications = new Map();
        this.notificationsCookies = 0;
        this.handleNoneRequestCallbacks = new vscs_utils_1.CallbackContainer();
        this.handleNoneNotificationCallbacks = new vscs_utils_1.CallbackContainer();
        this.addProgressFilters();
    }
    get serviceNames() {
        const serviceNames = new Set();
        const addServices = (keys) => {
            for (const key of keys) {
                serviceNames.add(key.split('.')[0]);
            }
        };
        addServices(this.requests.keys());
        addServices(this.notifications.keys());
        return Array.from(serviceNames);
    }
    clear() {
        this.requests.clear();
        this.requestsWithProgress.clear();
        this.notifications.clear();
        this.handleNoneRequestCallbacks.clear();
        this.handleNoneNotificationCallbacks.clear();
    }
    onHandleNoneRequest(callback) {
        return this.handleNoneRequestCallbacks.add(callback);
    }
    onHandleNoneNotification(callback) {
        return this.handleNoneNotificationCallbacks.add(callback);
    }
    createRpcConnection(rpcMessageStream, logger) {
        const rpcConnection = rpc.createMessageConnection(this.createFilteredMessageReader(rpcMessageStream.reader), this.createFilteredMessageWriter(rpcMessageStream.writer), new RpcLoggerAdapter_1.RpcLoggerAdapter(logger));
        return rpcConnection;
    }
    addReadFilter(filter) {
        return addRpcFilter(this.rpcReadFilters, filter);
    }
    addWriteFilter(filter) {
        return addRpcFilter(this.rpcWriteFilters, filter);
    }
    addRequestMethod(method, requestHandler) {
        this.requests.set(method, requestHandler);
    }
    addRequestMethodWithContext(method, requestHandler) {
        this.addRequestMethod(method, requestHandler);
        this.rpcRequestsWithContext.add(method);
    }
    addRequestMethodWithProgress(method, requestHandler) {
        this.addRequestMethod(method, requestHandler);
        this.requestsWithProgress.add(method);
    }
    removeRequestMethod(method) {
        this.requests.delete(method);
        this.requestsWithProgress.delete(method);
    }
    addNotificationHandler(method, notificationHandler) {
        let entrys = this.notifications.get(method);
        if (!entrys) {
            entrys = [];
            this.notifications.set(method, entrys);
        }
        const entry = {
            cookie: ++this.notificationsCookies,
            notificationHandler,
        };
        entrys.push(entry);
        return entry.cookie;
    }
    removeNotificationHandler(method, cookie) {
        const entrys = this.notifications.get(method);
        if (entrys) {
            const indexEntry = entrys.findIndex((i) => i.cookie === cookie);
            if (indexEntry !== -1) {
                return entrys.splice(indexEntry, 1)[0].notificationHandler;
            }
        }
        return undefined;
    }
    onRequest(requestHandlerInvoke, rpcConnection, method, ...params) {
        const requestHandler = this.requests.get(method);
        if (!requestHandler) {
            for (const callback of this.handleNoneRequestCallbacks.items) {
                const result = callback(rpcConnection, method, ...params);
                if (result !== undefined) {
                    return result;
                }
            }
            return Promise.resolve(RpcUtils_2.createMethodNotFoundResponse(method));
        }
        // The request ID was inserted into the args by the read filter. (It's not used here.)
        const [requestId] = params.splice(0, 1);
        if (this.requestsWithProgress.has(method)) {
            const progress = {
                report: (value) => {
                    rpcConnection.sendNotification(exports.methodProgress, { id: requestId, value });
                },
            };
            // Insert progress into args just before the last (cancellation) arg.
            params.splice(params.length - 1, 0, progress);
        }
        if (requestHandlerInvoke) {
            return requestHandlerInvoke(requestHandler, ...params);
        }
        return requestHandler(...params);
    }
    onNotification(rpcConnection, method, ...params) {
        if (method === exports.methodProgress && typeof params[0] === 'object') {
            // Note: the progress notification is being handled on the rpc read filter
            // and its better to no op.
            return;
        }
        else if (this.notifications.has(method)) {
            this.notifications.get(method).forEach((item) => {
                item.notificationHandler(...params);
            });
        }
        else {
            for (const callback of this.handleNoneNotificationCallbacks.items) {
                callback(rpcConnection, method, ...params);
            }
        }
    }
    createFilteredMessageReader(reader) {
        return new RpcUtils_1.WrappedMessageReader(reader, (msg) => RpcServiceHandlerBase.filterMessage(msg, this.rpcReadFilters));
    }
    createFilteredMessageWriter(writer) {
        return new RpcUtils_1.WrappedMessageWriter(writer, (msg) => RpcServiceHandlerBase.filterMessage(msg, this.rpcWriteFilters));
    }
    static filterMessage(msg, filters) {
        for (const filter of filters) {
            msg = filter(msg);
        }
        return msg;
    }
    addProgressFilters() {
        this.rpcReadFilters.push((msg) => {
            const msgObj = msg;
            const requestId = msgObj.id;
            if (typeof requestId !== 'undefined') {
                if (Array.isArray(msgObj.params)) {
                    // This is an incoming request message.
                    // Insert the request ID into the params in case it is needed for progress.
                    msgObj.params.splice(0, 0, requestId);
                }
                else if (msgObj.params !== undefined) {
                    // single parameter support
                    msgObj.params = [requestId, msgObj.params];
                }
                else {
                    msgObj.params = [requestId];
                }
                if (typeof msgObj.result !== 'undefined' || typeof msgObj.error !== 'undefined') {
                    // This is an incoming response message.
                    // Unregister any progress handler for the response's request ID.
                    this.progressHandlers.delete(requestId);
                }
            }
            else if (msgObj.method === exports.methodProgress) {
                let progressArgs = msgObj.params;
                if (progressArgs.id === undefined) {
                    progressArgs = msgObj.params[0];
                }
                const progress = this.progressHandlers.get(progressArgs.id);
                if (progress) {
                    progress.report(progressArgs.value, progressArgs.id);
                }
            }
            return msg;
        });
        this.rpcWriteFilters.push((msg) => {
            const msgObj = msg;
            const requestId = msgObj.id;
            const params = msgObj.params;
            if (typeof requestId !== 'undefined' &&
                params &&
                params.progress &&
                typeof params.progress.report === 'function') {
                // An outgoing message has a progress handler attached to the params.
                // Register the progress handler for the request ID.
                this.progressHandlers.set(msgObj.id, msgObj.params.progress);
                // Unregister the progress handler when the request is cancelled.
                const cancellation = params.progress.cancellation;
                if (cancellation) {
                    cancellation.onCancellationRequested(() => {
                        this.progressHandlers.delete(requestId);
                    });
                }
                delete params.progress;
            }
            return msg;
        });
    }
}
exports.RpcServiceHandlerBase = RpcServiceHandlerBase;
class RpcServiceHandler extends RpcServiceHandlerBase {
    /**
     * Registers an RPC service and returns a disposable registration object.
     * @param service Service instance. The class should implement the service interface.
     * @param serviceInfo Service metadata.
     * @param trace Trace source.
     * @param disposables Collection of disposable objects where the registration object will be added to.
     */
    registerRpcService(service, serviceInfo, contextMethods, strict) {
        if (!service) {
            throw new Error('service argument is missing or undefined');
        }
        if (!serviceInfo) {
            throw new Error('serviceInfo argument is missing or undefined');
        }
        if (contextMethods &&
            contextMethods.filter((method) => serviceInfo.methods.indexOf(method) < 0).length > 0) {
            throw new Error('invalid context method');
        }
        const serviceName = serviceInfo.name;
        if (!serviceName) {
            throw new Error('serviceInfo.serviceName is empty or undefined');
        }
        let isServiceActive = true;
        const addedRequestMethods = new Set();
        const addedNotificationMethods = new Map();
        let eventDisposables = [];
        const result = {
            dispose: () => {
                isServiceActive = false;
                for (const d of eventDisposables) {
                    d.dispose();
                }
                eventDisposables = [];
                for (const handlerName of addedRequestMethods) {
                    this.removeRequestMethod(handlerName);
                }
                addedRequestMethods.clear();
                for (const [handlerName, cookie] of addedNotificationMethods) {
                    this.removeNotificationHandler(handlerName, cookie);
                }
                addedNotificationMethods.clear();
            },
        };
        const restrictedHandlers = service[RESTRICTED_HANDLERS_FIELD];
        try {
            for (const method of serviceInfo.methods) {
                const handlerName = `${serviceName}.${method}`;
                const restrictedHandler = restrictedHandlers && restrictedHandlers.get(method);
                if (restrictedHandler) {
                    this.addRequestMethodWithContext(handlerName, (...args) => restrictedHandler.apply(service, args));
                    addedRequestMethods.add(handlerName);
                    continue;
                }
                const impl = service[method] || service[method + 'Async'];
                if (typeof impl !== 'function') {
                    if (strict || strict === undefined) {
                        throw new Error(`Object ${serviceInfo.name} does not implement method '${method}' of service '${serviceName}'.`);
                    }
                    else {
                        continue;
                    }
                }
                if (contextMethods && contextMethods.indexOf(method) >= 0) {
                    this.addRequestMethodWithContext(handlerName, (...args) => impl.apply(service, args));
                }
                else {
                    this.addRequestMethod(handlerName, (...args) => impl.apply(service, args));
                }
                addedRequestMethods.add(handlerName);
            }
            if (serviceInfo.voidMethods) {
                for (const method of serviceInfo.voidMethods) {
                    const handlerName = `${serviceName}.${method}`;
                    if (restrictedHandlers && restrictedHandlers.get(method)) {
                        throw new Error(`Restricted operation check is not supported yet for notification methods. Object ${serviceInfo.name} restricts notification '${method}' of service '${serviceName}'.`);
                    }
                    const impl = this[method] || service[method];
                    if (typeof impl !== 'function') {
                        if (strict) {
                            throw new Error(`Object ${serviceInfo.name} does not implement notification '${method}' of service '${serviceName}'.`);
                        }
                        else {
                            continue;
                        }
                    }
                    const cookie = this.addNotificationHandler(handlerName, (...args) => impl.apply(service, args));
                    addedNotificationMethods.set(handlerName, cookie);
                }
            }
            if (serviceInfo.events) {
                for (const eventName of serviceInfo.events) {
                    if (!eventName) {
                        continue;
                    }
                    const propertyName = RpcUtils_2.getEventPropertyName(eventName);
                    const event = service[propertyName];
                    if (typeof event === 'function') {
                        event((e) => {
                            if (isServiceActive) {
                                this.sendNotification(this.trace, `${serviceName}.${eventName}`, e).catch((err) => this.trace.error(`Failed to send notification:${serviceName}.${eventName}`, err));
                            }
                        }, eventDisposables);
                    }
                }
            }
        }
        catch (err) {
            result.dispose();
            throw err;
        }
        return result;
    }
}
exports.RpcServiceHandler = RpcServiceHandler;
/**
 * helper function to add an rpc filter and be able to remove it.
 */
function addRpcFilter(filters, filter) {
    filters.push(filter);
    return {
        dispose: () => {
            const index = filters.indexOf(filter);
            if (index !== -1) {
                filters.splice(index, 1);
            }
        },
    };
}
//# sourceMappingURL=RpcServiceHandler.js.map

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o) {
  var i = 0;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  i = o[Symbol.iterator]();
  return i.next.bind(i);
}

// these aren't really private, but nor are they really useful to document

/**
 * @private
 */
var LuxonError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(LuxonError, _Error);

  function LuxonError() {
    return _Error.apply(this, arguments) || this;
  }

  return LuxonError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * @private
 */


var InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {
  _inheritsLoose(InvalidDateTimeError, _LuxonError);

  function InvalidDateTimeError(reason) {
    return _LuxonError.call(this, "Invalid DateTime: " + reason.toMessage()) || this;
  }

  return InvalidDateTimeError;
}(LuxonError);
/**
 * @private
 */

var InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {
  _inheritsLoose(InvalidIntervalError, _LuxonError2);

  function InvalidIntervalError(reason) {
    return _LuxonError2.call(this, "Invalid Interval: " + reason.toMessage()) || this;
  }

  return InvalidIntervalError;
}(LuxonError);
/**
 * @private
 */

var InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {
  _inheritsLoose(InvalidDurationError, _LuxonError3);

  function InvalidDurationError(reason) {
    return _LuxonError3.call(this, "Invalid Duration: " + reason.toMessage()) || this;
  }

  return InvalidDurationError;
}(LuxonError);
/**
 * @private
 */

var ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {
  _inheritsLoose(ConflictingSpecificationError, _LuxonError4);

  function ConflictingSpecificationError() {
    return _LuxonError4.apply(this, arguments) || this;
  }

  return ConflictingSpecificationError;
}(LuxonError);
/**
 * @private
 */

var InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {
  _inheritsLoose(InvalidUnitError, _LuxonError5);

  function InvalidUnitError(unit) {
    return _LuxonError5.call(this, "Invalid unit " + unit) || this;
  }

  return InvalidUnitError;
}(LuxonError);
/**
 * @private
 */

var InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {
  _inheritsLoose(InvalidArgumentError, _LuxonError6);

  function InvalidArgumentError() {
    return _LuxonError6.apply(this, arguments) || this;
  }

  return InvalidArgumentError;
}(LuxonError);
/**
 * @private
 */

var ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {
  _inheritsLoose(ZoneIsAbstractError, _LuxonError7);

  function ZoneIsAbstractError() {
    return _LuxonError7.call(this, "Zone is an abstract class") || this;
  }

  return ZoneIsAbstractError;
}(LuxonError);

/**
 * @private
 */
var n = "numeric",
    s = "short",
    l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hour12: false
};
/**
 * {@link toLocaleString}; format like '09:30:23', always 24-hour.
 */

var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hour12: false
};
/**
 * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.
 */

var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hour12: false,
  timeZoneName: s
};
/**
 * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.
 */

var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hour12: false,
  timeZoneName: l
};
/**
 * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
 */

var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
/**
 * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
 */

var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

/*
  This is just a junk drawer, containing anything used across multiple classes.
  Because Luxon is small(ish), this should stay small and we won't worry about splitting
  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
*/
/**
 * @private
 */
// TYPES

function isUndefined(o) {
  return typeof o === "undefined";
}
function isNumber(o) {
  return typeof o === "number";
}
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
  return typeof o === "string";
}
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
} // CAPABILITIES

function hasIntl() {
  try {
    return typeof Intl !== "undefined" && Intl.DateTimeFormat;
  } catch (e) {
    return false;
  }
}
function hasFormatToParts() {
  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);
}
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
} // OBJECTS AND ARRAYS

function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [thing];
}
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return undefined;
  }

  return arr.reduce(function (best, next) {
    var pair = [by(next), next];

    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
function pick(obj, keys) {
  return keys.reduce(function (a, k) {
    a[k] = obj[k];
    return a;
  }, {});
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
} // NUMBERS AND STRINGS

function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
} // x % n but takes the sign of n instead of x

function floorMod(x, n) {
  return x - n * Math.floor(x / n);
}
function padStart(input, n) {
  if (n === void 0) {
    n = 2;
  }

  var minus = input < 0 ? "-" : "";
  var target = minus ? input * -1 : input;
  var result;

  if (target.toString().length < n) {
    result = ("0".repeat(n) + target).slice(-n);
  } else {
    result = target.toString();
  }

  return "" + minus + result;
}
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return undefined;
  } else {
    return parseInt(string, 10);
  }
}
function parseMillis(fraction) {
  // Return undefined (instead of 0) in these cases, where fraction is not set
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return undefined;
  } else {
    var f = parseFloat("0." + fraction) * 1000;
    return Math.floor(f);
  }
}
function roundTo(number, digits, towardZero) {
  if (towardZero === void 0) {
    towardZero = false;
  }

  var factor = Math.pow(10, digits),
      rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
} // DATE BASICS

function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
  var modMonth = floorMod(month - 1, 12) + 1,
      modYear = year + (month - modMonth) / 12;

  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
  }
} // covert a calendar object to a local timestamp (epoch, but with the offset baked in)

function objToLocalTS(obj) {
  var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that

  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }

  return +d;
}
function weeksInWeekYear(weekYear) {
  var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,
      last = weekYear - 1,
      p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
  return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > 60 ? 1900 + year : 2000 + year;
} // PARSING

function parseZoneInfo(ts, offsetFormat, locale, timeZone) {
  if (timeZone === void 0) {
    timeZone = null;
  }

  var date = new Date(ts),
      intlOpts = {
    hour12: false,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };

  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }

  var modified = Object.assign({
    timeZoneName: offsetFormat
  }, intlOpts),
      intl = hasIntl();

  if (intl && hasFormatToParts()) {
    var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {
      return m.type.toLowerCase() === "timezonename";
    });
    return parsed ? parsed.value : null;
  } else if (intl) {
    // this probably doesn't work for all locales
    var without = new Intl.DateTimeFormat(locale, intlOpts).format(date),
        included = new Intl.DateTimeFormat(locale, modified).format(date),
        diffed = included.substring(without.length),
        trimmed = diffed.replace(/^[, \u200e]+/, "");
    return trimmed;
  } else {
    return null;
  }
} // signedOffset('-5', '30') -> -330

function signedOffset(offHourStr, offMinuteStr) {
  var offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0

  if (Number.isNaN(offHour)) {
    offHour = 0;
  }

  var offMin = parseInt(offMinuteStr, 10) || 0,
      offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
} // COERCION

function asNumber(value) {
  var numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError("Invalid unit value " + value);
  return numericValue;
}
function normalizeObject(obj, normalizer, nonUnitKeys) {
  var normalized = {};

  for (var u in obj) {
    if (hasOwnProperty(obj, u)) {
      if (nonUnitKeys.indexOf(u) >= 0) continue;
      var v = obj[u];
      if (v === undefined || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }

  return normalized;
}
function formatOffset(offset, format) {
  var hours = Math.trunc(Math.abs(offset / 60)),
      minutes = Math.trunc(Math.abs(offset % 60)),
      sign = offset >= 0 ? "+" : "-";

  switch (format) {
    case "short":
      return "" + sign + padStart(hours, 2) + ":" + padStart(minutes, 2);

    case "narrow":
      return "" + sign + hours + (minutes > 0 ? ":" + minutes : "");

    case "techie":
      return "" + sign + padStart(hours, 2) + padStart(minutes, 2);

    default:
      throw new RangeError("Value format " + format + " is out of range for property format");
  }
}
function timeObject(obj) {
  return pick(obj, ["hour", "minute", "second", "millisecond"]);
}
var ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;

function stringify(obj) {
  return JSON.stringify(obj, Object.keys(obj).sort());
}
/**
 * @private
 */


var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
function months(length) {
  switch (length) {
    case "narrow":
      return monthsNarrow;

    case "short":
      return monthsShort;

    case "long":
      return monthsLong;

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];

    case "2-digit":
      return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

    default:
      return null;
  }
}
var weekdaysLong = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return weekdaysNarrow;

    case "short":
      return weekdaysShort;

    case "long":
      return weekdaysLong;

    case "numeric":
      return ["1", "2", "3", "4", "5", "6", "7"];

    default:
      return null;
  }
}
var meridiems = ["AM", "PM"];
var erasLong = ["Before Christ", "Anno Domini"];
var erasShort = ["BC", "AD"];
var erasNarrow = ["B", "A"];
function eras(length) {
  switch (length) {
    case "narrow":
      return erasNarrow;

    case "short":
      return erasShort;

    case "long":
      return erasLong;

    default:
      return null;
  }
}
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric, narrow) {
  if (numeric === void 0) {
    numeric = "always";
  }

  if (narrow === void 0) {
    narrow = false;
  }

  var units = {
    years: ["year", "yr."],
    quarters: ["quarter", "qtr."],
    months: ["month", "mo."],
    weeks: ["week", "wk."],
    days: ["day", "day", "days"],
    hours: ["hour", "hr."],
    minutes: ["minute", "min."],
    seconds: ["second", "sec."]
  };
  var lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

  if (numeric === "auto" && lastable) {
    var isDay = unit === "days";

    switch (count) {
      case 1:
        return isDay ? "tomorrow" : "next " + units[unit][0];

      case -1:
        return isDay ? "yesterday" : "last " + units[unit][0];

      case 0:
        return isDay ? "today" : "this " + units[unit][0];

    }
  }

  var isInPast = Object.is(count, -0) || count < 0,
      fmtValue = Math.abs(count),
      singular = fmtValue === 1,
      lilUnits = units[unit],
      fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
  return isInPast ? fmtValue + " " + fmtUnit + " ago" : "in " + fmtValue + " " + fmtUnit;
}
function formatString(knownFormat) {
  // these all have the offsets removed because we don't have access to them
  // without all the intl stuff this is backfilling
  var filtered = pick(knownFormat, ["weekday", "era", "year", "month", "day", "hour", "minute", "second", "timeZoneName", "hour12"]),
      key = stringify(filtered),
      dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";

  switch (key) {
    case stringify(DATE_SHORT):
      return "M/d/yyyy";

    case stringify(DATE_MED):
      return "LLL d, yyyy";

    case stringify(DATE_MED_WITH_WEEKDAY):
      return "EEE, LLL d, yyyy";

    case stringify(DATE_FULL):
      return "LLLL d, yyyy";

    case stringify(DATE_HUGE):
      return "EEEE, LLLL d, yyyy";

    case stringify(TIME_SIMPLE):
      return "h:mm a";

    case stringify(TIME_WITH_SECONDS):
      return "h:mm:ss a";

    case stringify(TIME_WITH_SHORT_OFFSET):
      return "h:mm a";

    case stringify(TIME_WITH_LONG_OFFSET):
      return "h:mm a";

    case stringify(TIME_24_SIMPLE):
      return "HH:mm";

    case stringify(TIME_24_WITH_SECONDS):
      return "HH:mm:ss";

    case stringify(TIME_24_WITH_SHORT_OFFSET):
      return "HH:mm";

    case stringify(TIME_24_WITH_LONG_OFFSET):
      return "HH:mm";

    case stringify(DATETIME_SHORT):
      return "M/d/yyyy, h:mm a";

    case stringify(DATETIME_MED):
      return "LLL d, yyyy, h:mm a";

    case stringify(DATETIME_FULL):
      return "LLLL d, yyyy, h:mm a";

    case stringify(DATETIME_HUGE):
      return dateTimeHuge;

    case stringify(DATETIME_SHORT_WITH_SECONDS):
      return "M/d/yyyy, h:mm:ss a";

    case stringify(DATETIME_MED_WITH_SECONDS):
      return "LLL d, yyyy, h:mm:ss a";

    case stringify(DATETIME_MED_WITH_WEEKDAY):
      return "EEE, d LLL yyyy, h:mm a";

    case stringify(DATETIME_FULL_WITH_SECONDS):
      return "LLLL d, yyyy, h:mm:ss a";

    case stringify(DATETIME_HUGE_WITH_SECONDS):
      return "EEEE, LLLL d, yyyy, h:mm:ss a";

    default:
      return dateTimeHuge;
  }
}

function stringifyTokens(splits, tokenToString) {
  var s = "";

  for (var _iterator = _createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;) {
    var token = _step.value;

    if (token.literal) {
      s += token.val;
    } else {
      s += tokenToString(token.val);
    }
  }

  return s;
}

var _macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
/**
 * @private
 */

var Formatter = /*#__PURE__*/function () {
  Formatter.create = function create(locale, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new Formatter(locale, opts);
  };

  Formatter.parseFormat = function parseFormat(fmt) {
    var current = null,
        currentFull = "",
        bracketed = false;
    var splits = [];

    for (var i = 0; i < fmt.length; i++) {
      var c = fmt.charAt(i);

      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed,
            val: currentFull
          });
        }

        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({
            literal: false,
            val: currentFull
          });
        }

        currentFull = c;
        current = c;
      }
    }

    if (currentFull.length > 0) {
      splits.push({
        literal: bracketed,
        val: currentFull
      });
    }

    return splits;
  };

  Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {
    return _macroTokenToFormatOpts[token];
  };

  function Formatter(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }

  var _proto = Formatter.prototype;

  _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }

    var df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTime = function formatDateTime(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.format();
  };

  _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.formatToParts();
  };

  _proto.resolvedOptions = function resolvedOptions(dt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
    return df.resolvedOptions();
  };

  _proto.num = function num(n, p) {
    if (p === void 0) {
      p = 0;
    }

    // we get some perf out of doing this here, annoyingly
    if (this.opts.forceSimple) {
      return padStart(n, p);
    }

    var opts = Object.assign({}, this.opts);

    if (p > 0) {
      opts.padTo = p;
    }

    return this.loc.numberFormatter(opts).format(n);
  };

  _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {
    var _this = this;

    var knownEnglish = this.loc.listingMode() === "en",
        useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),
        string = function string(opts, extract) {
      return _this.loc.extract(dt, opts, extract);
    },
        formatOffset = function formatOffset(opts) {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }

      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    },
        meridiem = function meridiem() {
      return knownEnglish ? meridiemForDateTime(dt) : string({
        hour: "numeric",
        hour12: true
      }, "dayperiod");
    },
        month = function month(length, standalone) {
      return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
        month: length
      } : {
        month: length,
        day: "numeric"
      }, "month");
    },
        weekday = function weekday(length, standalone) {
      return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
        weekday: length
      } : {
        weekday: length,
        month: "long",
        day: "numeric"
      }, "weekday");
    },
        maybeMacro = function maybeMacro(token) {
      var formatOpts = Formatter.macroTokenToFormatOpts(token);

      if (formatOpts) {
        return _this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    },
        era = function era(length) {
      return knownEnglish ? eraForDateTime(dt, length) : string({
        era: length
      }, "era");
    },
        tokenToString = function tokenToString(token) {
      // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles
      switch (token) {
        // ms
        case "S":
          return _this.num(dt.millisecond);

        case "u": // falls through

        case "SSS":
          return _this.num(dt.millisecond, 3);
        // seconds

        case "s":
          return _this.num(dt.second);

        case "ss":
          return _this.num(dt.second, 2);
        // minutes

        case "m":
          return _this.num(dt.minute);

        case "mm":
          return _this.num(dt.minute, 2);
        // hours

        case "h":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);

        case "hh":
          return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);

        case "H":
          return _this.num(dt.hour);

        case "HH":
          return _this.num(dt.hour, 2);
        // offset

        case "Z":
          // like +6
          return formatOffset({
            format: "narrow",
            allowZ: _this.opts.allowZ
          });

        case "ZZ":
          // like +06:00
          return formatOffset({
            format: "short",
            allowZ: _this.opts.allowZ
          });

        case "ZZZ":
          // like +0600
          return formatOffset({
            format: "techie",
            allowZ: _this.opts.allowZ
          });

        case "ZZZZ":
          // like EST
          return dt.zone.offsetName(dt.ts, {
            format: "short",
            locale: _this.loc.locale
          });

        case "ZZZZZ":
          // like Eastern Standard Time
          return dt.zone.offsetName(dt.ts, {
            format: "long",
            locale: _this.loc.locale
          });
        // zone

        case "z":
          // like America/New_York
          return dt.zoneName;
        // meridiems

        case "a":
          return meridiem();
        // dates

        case "d":
          return useDateTimeFormatter ? string({
            day: "numeric"
          }, "day") : _this.num(dt.day);

        case "dd":
          return useDateTimeFormatter ? string({
            day: "2-digit"
          }, "day") : _this.num(dt.day, 2);
        // weekdays - standalone

        case "c":
          // like 1
          return _this.num(dt.weekday);

        case "ccc":
          // like 'Tues'
          return weekday("short", true);

        case "cccc":
          // like 'Tuesday'
          return weekday("long", true);

        case "ccccc":
          // like 'T'
          return weekday("narrow", true);
        // weekdays - format

        case "E":
          // like 1
          return _this.num(dt.weekday);

        case "EEE":
          // like 'Tues'
          return weekday("short", false);

        case "EEEE":
          // like 'Tuesday'
          return weekday("long", false);

        case "EEEEE":
          // like 'T'
          return weekday("narrow", false);
        // months - standalone

        case "L":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric",
            day: "numeric"
          }, "month") : _this.num(dt.month);

        case "LL":
          // like 01, doesn't seem to work
          return useDateTimeFormatter ? string({
            month: "2-digit",
            day: "numeric"
          }, "month") : _this.num(dt.month, 2);

        case "LLL":
          // like Jan
          return month("short", true);

        case "LLLL":
          // like January
          return month("long", true);

        case "LLLLL":
          // like J
          return month("narrow", true);
        // months - format

        case "M":
          // like 1
          return useDateTimeFormatter ? string({
            month: "numeric"
          }, "month") : _this.num(dt.month);

        case "MM":
          // like 01
          return useDateTimeFormatter ? string({
            month: "2-digit"
          }, "month") : _this.num(dt.month, 2);

        case "MMM":
          // like Jan
          return month("short", false);

        case "MMMM":
          // like January
          return month("long", false);

        case "MMMMM":
          // like J
          return month("narrow", false);
        // years

        case "y":
          // like 2014
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year);

        case "yy":
          // like 14
          return useDateTimeFormatter ? string({
            year: "2-digit"
          }, "year") : _this.num(dt.year.toString().slice(-2), 2);

        case "yyyy":
          // like 0012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 4);

        case "yyyyyy":
          // like 000012
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : _this.num(dt.year, 6);
        // eras

        case "G":
          // like AD
          return era("short");

        case "GG":
          // like Anno Domini
          return era("long");

        case "GGGGG":
          return era("narrow");

        case "kk":
          return _this.num(dt.weekYear.toString().slice(-2), 2);

        case "kkkk":
          return _this.num(dt.weekYear, 4);

        case "W":
          return _this.num(dt.weekNumber);

        case "WW":
          return _this.num(dt.weekNumber, 2);

        case "o":
          return _this.num(dt.ordinal);

        case "ooo":
          return _this.num(dt.ordinal, 3);

        case "q":
          // like 1
          return _this.num(dt.quarter);

        case "qq":
          // like 01
          return _this.num(dt.quarter, 2);

        case "X":
          return _this.num(Math.floor(dt.ts / 1000));

        case "x":
          return _this.num(dt.ts);

        default:
          return maybeMacro(token);
      }
    };

    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
  };

  _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {
    var _this2 = this;

    var tokenToField = function tokenToField(token) {
      switch (token[0]) {
        case "S":
          return "millisecond";

        case "s":
          return "second";

        case "m":
          return "minute";

        case "h":
          return "hour";

        case "d":
          return "day";

        case "M":
          return "month";

        case "y":
          return "year";

        default:
          return null;
      }
    },
        tokenToString = function tokenToString(lildur) {
      return function (token) {
        var mapped = tokenToField(token);

        if (mapped) {
          return _this2.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      };
    },
        tokens = Formatter.parseFormat(fmt),
        realTokens = tokens.reduce(function (found, _ref) {
      var literal = _ref.literal,
          val = _ref.val;
      return literal ? found : found.concat(val);
    }, []),
        collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function (t) {
      return t;
    }));

    return stringifyTokens(tokens, tokenToString(collapsed));
  };

  return Formatter;
}();

var Invalid = /*#__PURE__*/function () {
  function Invalid(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }

  var _proto = Invalid.prototype;

  _proto.toMessage = function toMessage() {
    if (this.explanation) {
      return this.reason + ": " + this.explanation;
    } else {
      return this.reason;
    }
  };

  return Invalid;
}();

/**
 * @interface
 */

var Zone = /*#__PURE__*/function () {
  function Zone() {}

  var _proto = Zone.prototype;

  /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */
  _proto.offsetName = function offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */
  ;

  _proto.formatOffset = function formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */
  ;

  _proto.offset = function offset(ts) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */
  ;

  _createClass(Zone, [{
    key: "type",

    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get: function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */

  }, {
    key: "name",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */

  }, {
    key: "universal",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }, {
    key: "isValid",
    get: function get() {
      throw new ZoneIsAbstractError();
    }
  }]);

  return Zone;
}();

var singleton = null;
/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */

var LocalZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(LocalZone, _Zone);

  function LocalZone() {
    return _Zone.apply(this, arguments) || this;
  }

  var _proto = LocalZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "local";
  }
  /** @override **/
  ;

  _createClass(LocalZone, [{
    key: "type",

    /** @override **/
    get: function get() {
      return "local";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      if (hasIntl()) {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
      } else return "local";
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }], [{
    key: "instance",

    /**
     * Get a singleton instance of the local zone
     * @return {LocalZone}
     */
    get: function get() {
      if (singleton === null) {
        singleton = new LocalZone();
      }

      return singleton;
    }
  }]);

  return LocalZone;
}(Zone);

var matchingRegex = RegExp("^" + ianaRegex.source + "$");
var dtfCache = {};

function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit"
    });
  }

  return dtfCache[zone];
}

var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};

function hackyOffset(dtf, date) {
  var formatted = dtf.format(date).replace(/\u200E/g, ""),
      parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted),
      fMonth = parsed[1],
      fDay = parsed[2],
      fYear = parsed[3],
      fHour = parsed[4],
      fMinute = parsed[5],
      fSecond = parsed[6];
  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
}

function partsOffset(dtf, date) {
  var formatted = dtf.formatToParts(date),
      filled = [];

  for (var i = 0; i < formatted.length; i++) {
    var _formatted$i = formatted[i],
        type = _formatted$i.type,
        value = _formatted$i.value,
        pos = typeToPos[type];

    if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }

  return filled;
}

var ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */

var IANAZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(IANAZone, _Zone);

  /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */
  IANAZone.create = function create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new IANAZone(name);
    }

    return ianaZoneCache[name];
  }
  /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  ;

  IANAZone.resetCache = function resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidSpecifier = function isValidSpecifier(s) {
    return !!(s && s.match(matchingRegex));
  }
  /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */
  ;

  IANAZone.isValidZone = function isValidZone(zone) {
    try {
      new Intl.DateTimeFormat("en-US", {
        timeZone: zone
      }).format();
      return true;
    } catch (e) {
      return false;
    }
  } // Etc/GMT+8 -> -480

  /** @ignore */
  ;

  IANAZone.parseGMTOffset = function parseGMTOffset(specifier) {
    if (specifier) {
      var match = specifier.match(/^Etc\/GMT([+-]\d{1,2})$/i);

      if (match) {
        return -60 * parseInt(match[1]);
      }
    }

    return null;
  };

  function IANAZone(name) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.zoneName = name;
    /** @private **/

    _this.valid = IANAZone.isValidZone(name);
    return _this;
  }
  /** @override **/


  var _proto = IANAZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName(ts, _ref) {
    var format = _ref.format,
        locale = _ref.locale;
    return parseZoneInfo(ts, format, locale, this.name);
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  ;

  _proto.offset = function offset(ts) {
    var date = new Date(ts),
        dtf = makeDTF(this.name),
        _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),
        year = _ref2[0],
        month = _ref2[1],
        day = _ref2[2],
        hour = _ref2[3],
        minute = _ref2[4],
        second = _ref2[5],
        adjustedHour = hour === 24 ? 0 : hour;

    var asUTC = objToLocalTS({
      year: year,
      month: month,
      day: day,
      hour: adjustedHour,
      minute: minute,
      second: second,
      millisecond: 0
    });
    var asTS = +date;
    var over = asTS % 1000;
    asTS -= over >= 0 ? over : 1000 + over;
    return (asUTC - asTS) / (60 * 1000);
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  /** @override **/
  ;

  _createClass(IANAZone, [{
    key: "type",
    get: function get() {
      return "iana";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return this.valid;
    }
  }]);

  return IANAZone;
}(Zone);

var singleton$1 = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */

var FixedOffsetZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(FixedOffsetZone, _Zone);

  /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */
  FixedOffsetZone.instance = function instance(offset) {
    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
  }
  /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */
  ;

  FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {
    if (s) {
      var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);

      if (r) {
        return new FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }

    return null;
  };

  _createClass(FixedOffsetZone, null, [{
    key: "utcInstance",

    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    get: function get() {
      if (singleton$1 === null) {
        singleton$1 = new FixedOffsetZone(0);
      }

      return singleton$1;
    }
  }]);

  function FixedOffsetZone(offset) {
    var _this;

    _this = _Zone.call(this) || this;
    /** @private **/

    _this.fixed = offset;
    return _this;
  }
  /** @override **/


  var _proto = FixedOffsetZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return this.name;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset$1(ts, format) {
    return formatOffset(this.fixed, format);
  }
  /** @override **/
  ;

  /** @override **/
  _proto.offset = function offset() {
    return this.fixed;
  }
  /** @override **/
  ;

  _proto.equals = function equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  /** @override **/
  ;

  _createClass(FixedOffsetZone, [{
    key: "type",
    get: function get() {
      return "fixed";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.fixed === 0 ? "UTC" : "UTC" + formatOffset(this.fixed, "narrow");
    }
  }, {
    key: "universal",
    get: function get() {
      return true;
    }
  }, {
    key: "isValid",
    get: function get() {
      return true;
    }
  }]);

  return FixedOffsetZone;
}(Zone);

/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */

var InvalidZone = /*#__PURE__*/function (_Zone) {
  _inheritsLoose(InvalidZone, _Zone);

  function InvalidZone(zoneName) {
    var _this;

    _this = _Zone.call(this) || this;
    /**  @private */

    _this.zoneName = zoneName;
    return _this;
  }
  /** @override **/


  var _proto = InvalidZone.prototype;

  /** @override **/
  _proto.offsetName = function offsetName() {
    return null;
  }
  /** @override **/
  ;

  _proto.formatOffset = function formatOffset() {
    return "";
  }
  /** @override **/
  ;

  _proto.offset = function offset() {
    return NaN;
  }
  /** @override **/
  ;

  _proto.equals = function equals() {
    return false;
  }
  /** @override **/
  ;

  _createClass(InvalidZone, [{
    key: "type",
    get: function get() {
      return "invalid";
    }
    /** @override **/

  }, {
    key: "name",
    get: function get() {
      return this.zoneName;
    }
    /** @override **/

  }, {
    key: "universal",
    get: function get() {
      return false;
    }
  }, {
    key: "isValid",
    get: function get() {
      return false;
    }
  }]);

  return InvalidZone;
}(Zone);

/**
 * @private
 */
function normalizeZone(input, defaultZone) {
  var offset;

  if (isUndefined(input) || input === null) {
    return defaultZone;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    var lowered = input.toLowerCase();
    if (lowered === "local") return defaultZone;else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;else if ((offset = IANAZone.parseGMTOffset(input)) != null) {
      // handle Etc/GMT-4, which V8 chokes on
      return FixedOffsetZone.instance(offset);
    } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
    // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
  } else {
    return new InvalidZone(input);
  }
}

var now = function now() {
  return Date.now();
},
    defaultZone = null,
    // not setting this directly to LocalZone.instance bc loading order issues
defaultLocale = null,
    defaultNumberingSystem = null,
    defaultOutputCalendar = null,
    throwOnInvalid = false;
/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */


var Settings = /*#__PURE__*/function () {
  function Settings() {}

  /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */
  Settings.resetCaches = function resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
  };

  _createClass(Settings, null, [{
    key: "now",

    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    get: function get() {
      return now;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    ,
    set: function set(n) {
      now = n;
    }
    /**
     * Get the default time zone to create DateTimes in.
     * @type {string}
     */

  }, {
    key: "defaultZoneName",
    get: function get() {
      return Settings.defaultZone.name;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(z) {
      if (!z) {
        defaultZone = null;
      } else {
        defaultZone = normalizeZone(z);
      }
    }
    /**
     * Get the default time zone object to create DateTimes in. Does not affect existing instances.
     * @type {Zone}
     */

  }, {
    key: "defaultZone",
    get: function get() {
      return defaultZone || LocalZone.instance;
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultLocale",
    get: function get() {
      return defaultLocale;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(locale) {
      defaultLocale = locale;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultNumberingSystem",
    get: function get() {
      return defaultNumberingSystem;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */

  }, {
    key: "defaultOutputCalendar",
    get: function get() {
      return defaultOutputCalendar;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    ,
    set: function set(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */

  }, {
    key: "throwOnInvalid",
    get: function get() {
      return throwOnInvalid;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    ,
    set: function set(t) {
      throwOnInvalid = t;
    }
  }]);

  return Settings;
}();

var intlDTCache = {};

function getCachedDTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var dtf = intlDTCache[key];

  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }

  return dtf;
}

var intlNumCache = {};

function getCachedINF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var key = JSON.stringify([locString, opts]);
  var inf = intlNumCache[key];

  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }

  return inf;
}

var intlRelCache = {};

function getCachedRTF(locString, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var _opts = opts,
      base = _opts.base,
      cacheKeyOpts = _objectWithoutPropertiesLoose(_opts, ["base"]); // exclude `base` from the options


  var key = JSON.stringify([locString, cacheKeyOpts]);
  var inf = intlRelCache[key];

  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }

  return inf;
}

var sysLocaleCache = null;

function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else if (hasIntl()) {
    var computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to "und". Override that because that is dumb

    sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;
    return sysLocaleCache;
  } else {
    sysLocaleCache = "en-US";
    return sysLocaleCache;
  }
}

function parseLocaleString(localeStr) {
  // I really want to avoid writing a BCP 47 parser
  // see, e.g. https://github.com/wooorm/bcp-47
  // Instead, we'll do this:
  // a) if the string has no -u extensions, just leave it alone
  // b) if it does, use Intl to resolve everything
  // c) if Intl fails, try again without the -u
  var uIndex = localeStr.indexOf("-u-");

  if (uIndex === -1) {
    return [localeStr];
  } else {
    var options;
    var smaller = localeStr.substring(0, uIndex);

    try {
      options = getCachedDTF(localeStr).resolvedOptions();
    } catch (e) {
      options = getCachedDTF(smaller).resolvedOptions();
    }

    var _options = options,
        numberingSystem = _options.numberingSystem,
        calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it

    return [smaller, numberingSystem, calendar];
  }
}

function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (hasIntl()) {
    if (outputCalendar || numberingSystem) {
      localeStr += "-u";

      if (outputCalendar) {
        localeStr += "-ca-" + outputCalendar;
      }

      if (numberingSystem) {
        localeStr += "-nu-" + numberingSystem;
      }

      return localeStr;
    } else {
      return localeStr;
    }
  } else {
    return [];
  }
}

function mapMonths(f) {
  var ms = [];

  for (var i = 1; i <= 12; i++) {
    var dt = DateTime.utc(2016, i, 1);
    ms.push(f(dt));
  }

  return ms;
}

function mapWeekdays(f) {
  var ms = [];

  for (var i = 1; i <= 7; i++) {
    var dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }

  return ms;
}

function listStuff(loc, length, defaultOK, englishFn, intlFn) {
  var mode = loc.listingMode(defaultOK);

  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}

function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
/**
 * @private
 */


var PolyNumberFormatter = /*#__PURE__*/function () {
  function PolyNumberFormatter(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;

    if (!forceSimple && hasIntl()) {
      var intlOpts = {
        useGrouping: false
      };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }

  var _proto = PolyNumberFormatter.prototype;

  _proto.format = function format(i) {
    if (this.inf) {
      var fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      // to match the browser's numberformatter defaults
      var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);

      return padStart(_fixed, this.padTo);
    }
  };

  return PolyNumberFormatter;
}();
/**
 * @private
 */


var PolyDateFormatter = /*#__PURE__*/function () {
  function PolyDateFormatter(dt, intl, opts) {
    this.opts = opts;
    this.hasIntl = hasIntl();
    var z;

    if (dt.zone.universal && this.hasIntl) {
      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
      // That is why fixed-offset TZ is set to that unless it is:
      // 1. Outside of the supported range Etc/GMT-14 to Etc/GMT+12.
      // 2. Not a whole hour, e.g. UTC+4:30.
      var gmtOffset = -1 * (dt.offset / 60);

      if (gmtOffset >= -14 && gmtOffset <= 12 && gmtOffset % 1 === 0) {
        z = gmtOffset >= 0 ? "Etc/GMT+" + gmtOffset : "Etc/GMT" + gmtOffset;
        this.dt = dt;
      } else {
        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.
        // So we have to make do. Two cases:
        // 1. The format options tell us to show the zone. We can't do that, so the best
        // we can do is format the date in UTC.
        // 2. The format options don't tell us to show the zone. Then we can adjust them
        // the time and tell the formatter to show it to us in UTC, so that the time is right
        // and the bad zone doesn't show up.
        z = "UTC";

        if (opts.timeZoneName) {
          this.dt = dt;
        } else {
          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
        }
      }
    } else if (dt.zone.type === "local") {
      this.dt = dt;
    } else {
      this.dt = dt;
      z = dt.zone.name;
    }

    if (this.hasIntl) {
      var intlOpts = Object.assign({}, this.opts);

      if (z) {
        intlOpts.timeZone = z;
      }

      this.dtf = getCachedDTF(intl, intlOpts);
    }
  }

  var _proto2 = PolyDateFormatter.prototype;

  _proto2.format = function format() {
    if (this.hasIntl) {
      return this.dtf.format(this.dt.toJSDate());
    } else {
      var tokenFormat = formatString(this.opts),
          loc = Locale.create("en-US");
      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);
    }
  };

  _proto2.formatToParts = function formatToParts() {
    if (this.hasIntl && hasFormatToParts()) {
      return this.dtf.formatToParts(this.dt.toJSDate());
    } else {
      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings
      // and IMO it's too weird to have an uncanny valley like that
      return [];
    }
  };

  _proto2.resolvedOptions = function resolvedOptions() {
    if (this.hasIntl) {
      return this.dtf.resolvedOptions();
    } else {
      return {
        locale: "en-US",
        numberingSystem: "latn",
        outputCalendar: "gregory"
      };
    }
  };

  return PolyDateFormatter;
}();
/**
 * @private
 */


var PolyRelFormatter = /*#__PURE__*/function () {
  function PolyRelFormatter(intl, isEnglish, opts) {
    this.opts = Object.assign({
      style: "long"
    }, opts);

    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }

  var _proto3 = PolyRelFormatter.prototype;

  _proto3.format = function format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  };

  _proto3.formatToParts = function formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  };

  return PolyRelFormatter;
}();
/**
 * @private
 */


var Locale = /*#__PURE__*/function () {
  Locale.fromOpts = function fromOpts(opts) {
    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
  };

  Locale.create = function create(locale, numberingSystem, outputCalendar, defaultToEN) {
    if (defaultToEN === void 0) {
      defaultToEN = false;
    }

    var specifiedLocale = locale || Settings.defaultLocale,
        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
    localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),
        numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,
        outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
  };

  Locale.resetCache = function resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  };

  Locale.fromObject = function fromObject(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        outputCalendar = _ref.outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar);
  };

  function Locale(locale, numbering, outputCalendar, specifiedLocale) {
    var _parseLocaleString = parseLocaleString(locale),
        parsedLocale = _parseLocaleString[0],
        parsedNumberingSystem = _parseLocaleString[1],
        parsedOutputCalendar = _parseLocaleString[2];

    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = {
      format: {},
      standalone: {}
    };
    this.monthsCache = {
      format: {},
      standalone: {}
    };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }

  var _proto4 = Locale.prototype;

  _proto4.listingMode = function listingMode(defaultOK) {
    if (defaultOK === void 0) {
      defaultOK = true;
    }

    var intl = hasIntl(),
        hasFTP = intl && hasFormatToParts(),
        isActuallyEn = this.isEnglish(),
        hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");

    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {
      return "error";
    } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {
      return "en";
    } else {
      return "intl";
    }
  };

  _proto4.clone = function clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
    }
  };

  _proto4.redefaultToEN = function redefaultToEN(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(Object.assign({}, alts, {
      defaultToEN: true
    }));
  };

  _proto4.redefaultToSystem = function redefaultToSystem(alts) {
    if (alts === void 0) {
      alts = {};
    }

    return this.clone(Object.assign({}, alts, {
      defaultToEN: false
    }));
  };

  _proto4.months = function months$1(length, format, defaultOK) {
    var _this = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, months, function () {
      var intl = format ? {
        month: length,
        day: "numeric"
      } : {
        month: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this.monthsCache[formatStr][length]) {
        _this.monthsCache[formatStr][length] = mapMonths(function (dt) {
          return _this.extract(dt, intl, "month");
        });
      }

      return _this.monthsCache[formatStr][length];
    });
  };

  _proto4.weekdays = function weekdays$1(length, format, defaultOK) {
    var _this2 = this;

    if (format === void 0) {
      format = false;
    }

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, weekdays, function () {
      var intl = format ? {
        weekday: length,
        year: "numeric",
        month: "long",
        day: "numeric"
      } : {
        weekday: length
      },
          formatStr = format ? "format" : "standalone";

      if (!_this2.weekdaysCache[formatStr][length]) {
        _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {
          return _this2.extract(dt, intl, "weekday");
        });
      }

      return _this2.weekdaysCache[formatStr][length];
    });
  };

  _proto4.meridiems = function meridiems$1(defaultOK) {
    var _this3 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, undefined, defaultOK, function () {
      return meridiems;
    }, function () {
      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
      // for AM and PM. This is probably wrong, but it's makes parsing way easier.
      if (!_this3.meridiemCache) {
        var intl = {
          hour: "numeric",
          hour12: true
        };
        _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {
          return _this3.extract(dt, intl, "dayperiod");
        });
      }

      return _this3.meridiemCache;
    });
  };

  _proto4.eras = function eras$1(length, defaultOK) {
    var _this4 = this;

    if (defaultOK === void 0) {
      defaultOK = true;
    }

    return listStuff(this, length, defaultOK, eras, function () {
      var intl = {
        era: length
      }; // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
      // to definitely enumerate them.

      if (!_this4.eraCache[length]) {
        _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {
          return _this4.extract(dt, intl, "era");
        });
      }

      return _this4.eraCache[length];
    });
  };

  _proto4.extract = function extract(dt, intlOpts, field) {
    var df = this.dtFormatter(dt, intlOpts),
        results = df.formatToParts(),
        matching = results.find(function (m) {
      return m.type.toLowerCase() === field;
    });
    return matching ? matching.value : null;
  };

  _proto4.numberFormatter = function numberFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
    // (in contrast, the rest of the condition is used heavily)
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  };

  _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {
    if (intlOpts === void 0) {
      intlOpts = {};
    }

    return new PolyDateFormatter(dt, this.intl, intlOpts);
  };

  _proto4.relFormatter = function relFormatter(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  };

  _proto4.isEnglish = function isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  };

  _proto4.equals = function equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  };

  _createClass(Locale, [{
    key: "fastNumbers",
    get: function get() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }

      return this.fastNumbersCached;
    }
  }]);

  return Locale;
}();

/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */

function combineRegexes() {
  for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {
    regexes[_key] = arguments[_key];
  }

  var full = regexes.reduce(function (f, r) {
    return f + r.source;
  }, "");
  return RegExp("^" + full + "$");
}

function combineExtractors() {
  for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    extractors[_key2] = arguments[_key2];
  }

  return function (m) {
    return extractors.reduce(function (_ref, ex) {
      var mergedVals = _ref[0],
          mergedZone = _ref[1],
          cursor = _ref[2];

      var _ex = ex(m, cursor),
          val = _ex[0],
          zone = _ex[1],
          next = _ex[2];

      return [Object.assign(mergedVals, val), mergedZone || zone, next];
    }, [{}, null, 1]).slice(0, 2);
  };
}

function parse(s) {
  if (s == null) {
    return [null, null];
  }

  for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    patterns[_key3 - 1] = arguments[_key3];
  }

  for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {
    var _patterns$_i = _patterns[_i],
        regex = _patterns$_i[0],
        extractor = _patterns$_i[1];
    var m = regex.exec(s);

    if (m) {
      return extractor(m);
    }
  }

  return [null, null];
}

function simpleParse() {
  for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    keys[_key4] = arguments[_key4];
  }

  return function (match, cursor) {
    var ret = {};
    var i;

    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match[cursor + i]);
    }

    return [ret, null, cursor + i];
  };
} // ISO and SQL parsing


var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
    isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,
    isoTimeRegex = RegExp("" + isoTimeBaseRegex.source + offsetRegex.source + "?"),
    isoTimeExtensionRegex = RegExp("(?:T" + isoTimeRegex.source + ")?"),
    isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
    isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
    isoOrdinalRegex = /(\d{4})-?(\d{3})/,
    extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),
    extractISOOrdinalData = simpleParse("year", "ordinal"),
    sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/,
    // dumbed-down version of the ISO one
sqlTimeRegex = RegExp(isoTimeBaseRegex.source + " ?(?:" + offsetRegex.source + "|(" + ianaRegex.source + "))?"),
    sqlTimeExtensionRegex = RegExp("(?: " + sqlTimeRegex.source + ")?");

function int(match, pos, fallback) {
  var m = match[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}

function extractISOYmd(match, cursor) {
  var item = {
    year: int(match, cursor),
    month: int(match, cursor + 1, 1),
    day: int(match, cursor + 2, 1)
  };
  return [item, null, cursor + 3];
}

function extractISOTime(match, cursor) {
  var item = {
    hours: int(match, cursor, 0),
    minutes: int(match, cursor + 1, 0),
    seconds: int(match, cursor + 2, 0),
    milliseconds: parseMillis(match[cursor + 3])
  };
  return [item, null, cursor + 4];
}

function extractISOOffset(match, cursor) {
  var local = !match[cursor] && !match[cursor + 1],
      fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
      zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [{}, zone, cursor + 3];
}

function extractIANAZone(match, cursor) {
  var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
  return [{}, zone, cursor + 1];
} // ISO time parsing


var isoTimeOnly = RegExp("^T?" + isoTimeBaseRegex.source + "$"); // ISO duration parsing

var isoDuration = /^-?P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;

function extractISODuration(match) {
  var s = match[0],
      yearStr = match[1],
      monthStr = match[2],
      weekStr = match[3],
      dayStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      millisecondsStr = match[8];
  var hasNegativePrefix = s[0] === "-";

  var maybeNegate = function maybeNegate(num) {
    return num && hasNegativePrefix ? -num : num;
  };

  return [{
    years: maybeNegate(parseInteger(yearStr)),
    months: maybeNegate(parseInteger(monthStr)),
    weeks: maybeNegate(parseInteger(weekStr)),
    days: maybeNegate(parseInteger(dayStr)),
    hours: maybeNegate(parseInteger(hourStr)),
    minutes: maybeNegate(parseInteger(minuteStr)),
    seconds: maybeNegate(parseInteger(secondStr)),
    milliseconds: maybeNegate(parseMillis(millisecondsStr))
  }];
} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that


var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};

function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);

  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }

  return result;
} // RFC 2822/5322


var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

function extractRFC2822(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      obsOffset = match[8],
      milOffset = match[9],
      offHourStr = match[10],
      offMinuteStr = match[11],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  var offset;

  if (obsOffset) {
    offset = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset = 0;
  } else {
    offset = signedOffset(offHourStr, offMinuteStr);
  }

  return [result, new FixedOffsetZone(offset)];
}

function preprocessRFC2822(s) {
  // Remove comments and folding whitespace and replace multiple-spaces with a single space
  return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
} // http date


var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
    rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
    ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

function extractRFC1123Or850(match) {
  var weekdayStr = match[1],
      dayStr = match[2],
      monthStr = match[3],
      yearStr = match[4],
      hourStr = match[5],
      minuteStr = match[6],
      secondStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

function extractASCII(match) {
  var weekdayStr = match[1],
      monthStr = match[2],
      dayStr = match[3],
      hourStr = match[4],
      minuteStr = match[5],
      secondStr = match[6],
      yearStr = match[7],
      result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [result, FixedOffsetZone.utcInstance];
}

var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);
var extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);
/**
 * @private
 */

function parseISODate(s) {
  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
}
function parseRFC2822Date(s) {
  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
}
function parseHTTPDate(s) {
  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
}
function parseISODuration(s) {
  return parse(s, [isoDuration, extractISODuration]);
}
var extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s) {
  return parse(s, [isoTimeOnly, extractISOTimeOnly]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s) {
  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
}

var INVALID = "Invalid Duration"; // unit conversion constants

var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1000
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1000
  },
  hours: {
    minutes: 60,
    seconds: 60 * 60,
    milliseconds: 60 * 60 * 1000
  },
  minutes: {
    seconds: 60,
    milliseconds: 60 * 1000
  },
  seconds: {
    milliseconds: 1000
  }
},
    casualMatrix = Object.assign({
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1000
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix),
    daysInYearAccurate = 146097.0 / 400,
    daysInMonthAccurate = 146097.0 / 4800,
    accurateMatrix = Object.assign({
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
  }
}, lowOrderMatrix); // units ordered by size

var orderedUnits = ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"];
var reverseUnits = orderedUnits.slice(0).reverse(); // clone really means "create another instance just like this one, but with these changes"

function clone(dur, alts, clear) {
  if (clear === void 0) {
    clear = false;
  }

  // deep merge for vals
  var conf = {
    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
  };
  return new Duration(conf);
}

function antiTrunc(n) {
  return n < 0 ? Math.floor(n) : Math.ceil(n);
} // NB: mutates parameters


function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
  var conv = matrix[toUnit][fromUnit],
      raw = fromMap[fromUnit] / conv,
      sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
      // ok, so this is wild, but see the matrix in the tests
  added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
  toMap[toUnit] += added;
  fromMap[fromUnit] -= added * conv;
} // NB: mutates parameters


function normalizeValues(matrix, vals) {
  reverseUnits.reduce(function (previous, current) {
    if (!isUndefined(vals[current])) {
      if (previous) {
        convert(matrix, vals, previous, vals, current);
      }

      return current;
    } else {
      return previous;
    }
  }, null);
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.
 * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */


var Duration = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Duration(config) {
    var accurate = config.conversionAccuracy === "longterm" || false;
    /**
     * @access private
     */

    this.values = config.values;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.conversionAccuracy = accurate ? "longterm" : "casual";
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.matrix = accurate ? accurateMatrix : casualMatrix;
    /**
     * @access private
     */

    this.isLuxonDuration = true;
  }
  /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */


  Duration.fromMillis = function fromMillis(count, opts) {
    return Duration.fromObject(Object.assign({
      milliseconds: count
    }, opts));
  }
  /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {string} [obj.locale='en-US'] - the locale to use
   * @param {string} obj.numberingSystem - the numbering system to use
   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  Duration.fromObject = function fromObject(obj) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got " + (obj === null ? "null" : typeof obj));
    }

    return new Duration({
      values: normalizeObject(obj, Duration.normalizeUnit, ["locale", "numberingSystem", "conversionAccuracy", "zone" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this
      ]),
      loc: Locale.fromObject(obj),
      conversionAccuracy: obj.conversionAccuracy
    });
  }
  /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */
  ;

  Duration.fromISO = function fromISO(text, opts) {
    var _parseISODuration = parseISODuration(text),
        parsed = _parseISODuration[0];

    if (parsed) {
      var obj = Object.assign(parsed, opts);
      return Duration.fromObject(obj);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }
  /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */
  ;

  Duration.fromISOTime = function fromISOTime(text, opts) {
    var _parseISOTimeOnly = parseISOTimeOnly(text),
        parsed = _parseISOTimeOnly[0];

    if (parsed) {
      var obj = Object.assign(parsed, opts);
      return Duration.fromObject(obj);
    } else {
      return Duration.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
    }
  }
  /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */
  ;

  Duration.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new Duration({
        invalid: invalid
      });
    }
  }
  /**
   * @private
   */
  ;

  Duration.normalizeUnit = function normalizeUnit(unit) {
    var normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Duration.isDuration = function isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */
  ;

  var _proto = Duration.prototype;

  /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */
  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    // reverse-compat since 1.2; we always round down now, never up, and we do it by default
    var fmtOpts = Object.assign({}, opts, {
      floor: opts.round !== false && opts.floor !== false
    });
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
  }
  /**
   * Returns a JavaScript object with this Duration's values.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};
    var base = Object.assign({}, this.values);

    if (opts.includeConfig) {
      base.conversionAccuracy = this.conversionAccuracy;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO() {
    // we could use the formatter, but this is an easier way to get the minimum string
    if (!this.isValid) return null;
    var s = "P";
    if (this.years !== 0) s += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s += this.weeks + "W";
    if (this.days !== 0) s += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
    if (this.hours !== 0) s += this.hours + "H";
    if (this.minutes !== 0) s += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
    if (s === "P") s += "T0S";
    return s;
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return null;
    var millis = this.toMillis();
    if (millis < 0 || millis >= 86400000) return null;
    opts = Object.assign({
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended"
    }, opts);
    var value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
    var fmt = opts.format === "basic" ? "hhmm" : "hh:mm";

    if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
      fmt += opts.format === "basic" ? "ss" : ":ss";

      if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
        fmt += ".SSS";
      }
    }

    var str = value.toFormat(fmt);

    if (opts.includePrefix) {
      str = "T" + str;
    }

    return str;
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.toISO();
  }
  /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */
  ;

  _proto.toMillis = function toMillis() {
    return this.as("milliseconds");
  }
  /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }
  /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration),
        result = {};

    for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits), _step; !(_step = _iterator()).done;) {
      var k = _step.value;

      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }

    return clone(this, {
      values: result
    }, true);
  }
  /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration);
    return this.plus(dur.negate());
  }
  /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */
  ;

  _proto.mapUnits = function mapUnits(fn) {
    if (!this.isValid) return this;
    var result = {};

    for (var _i = 0, _Object$keys = Object.keys(this.values); _i < _Object$keys.length; _i++) {
      var k = _Object$keys[_i];
      result[k] = asNumber(fn(this.values[k], k));
    }

    return clone(this, {
      values: result
    }, true);
  }
  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3
   * @return {number}
   */
  ;

  _proto.get = function get(unit) {
    return this[Duration.normalizeUnit(unit)];
  }
  /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));
    return clone(this, {
      values: mixed
    });
  }
  /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        locale = _ref.locale,
        numberingSystem = _ref.numberingSystem,
        conversionAccuracy = _ref.conversionAccuracy;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem
    }),
        opts = {
      loc: loc
    };

    if (conversionAccuracy) {
      opts.conversionAccuracy = conversionAccuracy;
    }

    return clone(this, opts);
  }
  /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */
  ;

  _proto.as = function as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  /**
   * Reduce this Duration to its canonical representation in its current units.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @return {Duration}
   */
  ;

  _proto.normalize = function normalize() {
    if (!this.isValid) return this;
    var vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone(this, {
      values: vals
    }, true);
  }
  /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */
  ;

  _proto.shiftTo = function shiftTo() {
    for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {
      units[_key] = arguments[_key];
    }

    if (!this.isValid) return this;

    if (units.length === 0) {
      return this;
    }

    units = units.map(function (u) {
      return Duration.normalizeUnit(u);
    });
    var built = {},
        accumulated = {},
        vals = this.toObject();
    var lastUnit;

    for (var _iterator2 = _createForOfIteratorHelperLoose(orderedUnits), _step2; !(_step2 = _iterator2()).done;) {
      var k = _step2.value;

      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        var own = 0; // anything we haven't boiled down yet should get boiled to this unit

        for (var ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        } // plus anything that's already in this unit


        if (isNumber(vals[k])) {
          own += vals[k];
        }

        var i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit
        // plus anything further down the chain that should be rolled up in to this

        for (var down in vals) {
          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
            convert(this.matrix, vals, down, built, k);
          }
        } // otherwise, keep it in the wings to boil it later

      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    } // anything leftover becomes the decimal for the last unit
    // lastUnit must be defined since units is not empty


    for (var key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }

    return clone(this, {
      values: built
    }, true).normalize();
  }
  /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */
  ;

  _proto.negate = function negate() {
    if (!this.isValid) return this;
    var negated = {};

    for (var _i2 = 0, _Object$keys2 = Object.keys(this.values); _i2 < _Object$keys2.length; _i2++) {
      var k = _Object$keys2[_i2];
      negated[k] = -this.values[k];
    }

    return clone(this, {
      values: negated
    }, true);
  }
  /**
   * Get the years.
   * @type {number}
   */
  ;

  /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */
  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    if (!this.loc.equals(other.loc)) {
      return false;
    }

    function eq(v1, v2) {
      // Consider 0 and undefined as equal
      if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
      return v1 === v2;
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(orderedUnits), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;

      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }

    return true;
  };

  _createClass(Duration, [{
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
  }, {
    key: "years",
    get: function get() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */

  }, {
    key: "quarters",
    get: function get() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */

  }, {
    key: "months",
    get: function get() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */

  }, {
    key: "weeks",
    get: function get() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */

  }, {
    key: "days",
    get: function get() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */

  }, {
    key: "hours",
    get: function get() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */

  }, {
    key: "minutes",
    get: function get() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */

  }, {
    key: "seconds",
    get: function get() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */

  }, {
    key: "milliseconds",
    get: function get() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Duration;
}();
function friendlyDuration(durationish) {
  if (isNumber(durationish)) {
    return Duration.fromMillis(durationish);
  } else if (Duration.isDuration(durationish)) {
    return durationish;
  } else if (typeof durationish === "object") {
    return Duration.fromObject(durationish);
  } else {
    throw new InvalidArgumentError("Unknown duration argument " + durationish + " of type " + typeof durationish);
  }
}

var INVALID$1 = "Invalid Interval"; // checks if the start is equal to or before the end

function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=" + start.toISO() + " and end=" + end.toISO());
  } else {
    return null;
  }
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.
 * * **Accessors** Use {@link start} and {@link end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.
 * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.
 * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.
 */


var Interval = /*#__PURE__*/function () {
  /**
   * @private
   */
  function Interval(config) {
    /**
     * @access private
     */
    this.s = config.start;
    /**
     * @access private
     */

    this.e = config.end;
    /**
     * @access private
     */

    this.invalid = config.invalid || null;
    /**
     * @access private
     */

    this.isLuxonInterval = true;
  }
  /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */


  Interval.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new Interval({
        invalid: invalid
      });
    }
  }
  /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */
  ;

  Interval.fromDateTimes = function fromDateTimes(start, end) {
    var builtStart = friendlyDateTime(start),
        builtEnd = friendlyDateTime(end);
    var validateError = validateStartEnd(builtStart, builtEnd);

    if (validateError == null) {
      return new Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.after = function after(start, duration) {
    var dur = friendlyDuration(duration),
        dt = friendlyDateTime(start);
    return Interval.fromDateTimes(dt, dt.plus(dur));
  }
  /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */
  ;

  Interval.before = function before(end, duration) {
    var dur = friendlyDuration(duration),
        dt = friendlyDateTime(end);
    return Interval.fromDateTimes(dt.minus(dur), dt);
  }
  /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */
  ;

  Interval.fromISO = function fromISO(text, opts) {
    var _split = (text || "").split("/", 2),
        s = _split[0],
        e = _split[1];

    if (s && e) {
      var start, startIsValid;

      try {
        start = DateTime.fromISO(s, opts);
        startIsValid = start.isValid;
      } catch (e) {
        startIsValid = false;
      }

      var end, endIsValid;

      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e) {
        endIsValid = false;
      }

      if (startIsValid && endIsValid) {
        return Interval.fromDateTimes(start, end);
      }

      if (startIsValid) {
        var dur = Duration.fromISO(e, opts);

        if (dur.isValid) {
          return Interval.after(start, dur);
        }
      } else if (endIsValid) {
        var _dur = Duration.fromISO(s, opts);

        if (_dur.isValid) {
          return Interval.before(end, _dur);
        }
      }
    }

    return Interval.invalid("unparsable", "the input \"" + text + "\" can't be parsed as ISO 8601");
  }
  /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  Interval.isInterval = function isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  /**
   * Returns the start of the Interval
   * @type {DateTime}
   */
  ;

  var _proto = Interval.prototype;

  /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */
  _proto.length = function length(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;
  }
  /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @return {number}
   */
  ;

  _proto.count = function count(unit) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (!this.isValid) return NaN;
    var start = this.start.startOf(unit),
        end = this.end.startOf(unit);
    return Math.floor(end.diff(start, unit).get(unit)) + 1;
  }
  /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */
  ;

  _proto.isEmpty = function isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isAfter = function isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }
  /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.isBefore = function isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }
  /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */
  ;

  _proto.contains = function contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */
  ;

  _proto.set = function set(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        start = _ref.start,
        end = _ref.end;

    if (!this.isValid) return this;
    return Interval.fromDateTimes(start || this.s, end || this.e);
  }
  /**
   * Split this Interval at each of the specified DateTimes
   * @param {...[DateTime]} dateTimes - the unit of time to count.
   * @return {[Interval]}
   */
  ;

  _proto.splitAt = function splitAt() {
    var _this = this;

    if (!this.isValid) return [];

    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {
      return _this.contains(d);
    }).sort(),
        results = [];
    var s = this.s,
        i = 0;

    while (s < this.e) {
      var added = sorted[i] || this.e,
          next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
      i += 1;
    }

    return results;
  }
  /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {[Interval]}
   */
  ;

  _proto.splitBy = function splitBy(duration) {
    var dur = friendlyDuration(duration);

    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }

    var s = this.s,
        added,
        next;
    var results = [];

    while (s < this.e) {
      added = s.plus(dur);
      next = +added > +this.e ? this.e : added;
      results.push(Interval.fromDateTimes(s, next));
      s = next;
    }

    return results;
  }
  /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {[Interval]}
   */
  ;

  _proto.divideEqually = function divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.overlaps = function overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsStart = function abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }
  /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.abutsEnd = function abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }
  /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.engulfs = function engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }
  /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }

    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.intersection = function intersection(other) {
    if (!this.isValid) return this;
    var s = this.s > other.s ? this.s : other.s,
        e = this.e < other.e ? this.e : other.e;

    if (s > e) {
      return null;
    } else {
      return Interval.fromDateTimes(s, e);
    }
  }
  /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */
  ;

  _proto.union = function union(other) {
    if (!this.isValid) return this;
    var s = this.s < other.s ? this.s : other.s,
        e = this.e > other.e ? this.e : other.e;
    return Interval.fromDateTimes(s, e);
  }
  /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {[Interval]} intervals
   * @return {[Interval]}
   */
  ;

  Interval.merge = function merge(intervals) {
    var _intervals$sort$reduc = intervals.sort(function (a, b) {
      return a.s - b.s;
    }).reduce(function (_ref2, item) {
      var sofar = _ref2[0],
          current = _ref2[1];

      if (!current) {
        return [sofar, item];
      } else if (current.overlaps(item) || current.abutsStart(item)) {
        return [sofar, current.union(item)];
      } else {
        return [sofar.concat([current]), item];
      }
    }, [[], null]),
        found = _intervals$sort$reduc[0],
        final = _intervals$sort$reduc[1];

    if (final) {
      found.push(final);
    }

    return found;
  }
  /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {[Interval]} intervals
   * @return {[Interval]}
   */
  ;

  Interval.xor = function xor(intervals) {
    var _Array$prototype;

    var start = null,
        currentCount = 0;

    var results = [],
        ends = intervals.map(function (i) {
      return [{
        time: i.s,
        type: "s"
      }, {
        time: i.e,
        type: "e"
      }];
    }),
        flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends),
        arr = flattened.sort(function (a, b) {
      return a.time - b.time;
    });

    for (var _iterator = _createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;) {
      var i = _step.value;
      currentCount += i.type === "s" ? 1 : -1;

      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(Interval.fromDateTimes(start, i.time));
        }

        start = null;
      }
    }

    return Interval.merge(results);
  }
  /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {[Interval]}
   */
  ;

  _proto.difference = function difference() {
    var _this2 = this;

    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      intervals[_key2] = arguments[_key2];
    }

    return Interval.xor([this].concat(intervals)).map(function (i) {
      return _this2.intersection(i);
    }).filter(function (i) {
      return i && !i.isEmpty();
    });
  }
  /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    if (!this.isValid) return INVALID$1;
    return "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")";
  }
  /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime.toISO}
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISO(opts) + "/" + this.e.toISO(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate() {
    if (!this.isValid) return INVALID$1;
    return this.s.toISODate() + "/" + this.e.toISODate();
  }
  /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime.toISO}
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(opts) {
    if (!this.isValid) return INVALID$1;
    return this.s.toISOTime(opts) + "/" + this.e.toISOTime(opts);
  }
  /**
   * Returns a string representation of this Interval formatted according to the specified format string.
   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.
   * @param {Object} opts - options
   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(dateFormat, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2,
        _ref3$separator = _ref3.separator,
        separator = _ref3$separator === void 0 ? " – " : _ref3$separator;

    if (!this.isValid) return INVALID$1;
    return "" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);
  }
  /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */
  ;

  _proto.toDuration = function toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }

    return this.e.diff(this.s, unit, opts);
  }
  /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */
  ;

  _proto.mapEndpoints = function mapEndpoints(mapFn) {
    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  };

  _createClass(Interval, [{
    key: "start",
    get: function get() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */

  }, {
    key: "end",
    get: function get() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */

  }, {
    key: "isValid",
    get: function get() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
  }]);

  return Interval;
}();

/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */

var Info = /*#__PURE__*/function () {
  function Info() {}

  /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */
  Info.hasDST = function hasDST(zone) {
    if (zone === void 0) {
      zone = Settings.defaultZone;
    }

    var proto = DateTime.now().setZone(zone).set({
      month: 12
    });
    return !zone.universal && proto.offset !== proto.set({
      month: 6
    }).offset;
  }
  /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */
  ;

  Info.isValidIANAZone = function isValidIANAZone(zone) {
    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);
  }
  /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone.isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */
  ;

  Info.normalizeZone = function normalizeZone$1(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {[string]}
   */
  ;

  Info.months = function months(length, _temp) {
    if (length === void 0) {
      length = "long";
    }

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$locale = _ref.locale,
        locale = _ref$locale === void 0 ? null : _ref$locale,
        _ref$numberingSystem = _ref.numberingSystem,
        numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,
        _ref$outputCalendar = _ref.outputCalendar,
        outputCalendar = _ref$outputCalendar === void 0 ? "gregory" : _ref$outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar).months(length);
  }
  /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {[string]}
   */
  ;

  Info.monthsFormat = function monthsFormat(length, _temp2) {
    if (length === void 0) {
      length = "long";
    }

    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        _ref2$locale = _ref2.locale,
        locale = _ref2$locale === void 0 ? null : _ref2$locale,
        _ref2$numberingSystem = _ref2.numberingSystem,
        numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,
        _ref2$outputCalendar = _ref2.outputCalendar,
        outputCalendar = _ref2$outputCalendar === void 0 ? "gregory" : _ref2$outputCalendar;

    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);
  }
  /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {[string]}
   */
  ;

  Info.weekdays = function weekdays(length, _temp3) {
    if (length === void 0) {
      length = "long";
    }

    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        _ref3$locale = _ref3.locale,
        locale = _ref3$locale === void 0 ? null : _ref3$locale,
        _ref3$numberingSystem = _ref3.numberingSystem,
        numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem;

    return Locale.create(locale, numberingSystem, null).weekdays(length);
  }
  /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link weekdays}
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @return {[string]}
   */
  ;

  Info.weekdaysFormat = function weekdaysFormat(length, _temp4) {
    if (length === void 0) {
      length = "long";
    }

    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        _ref4$locale = _ref4.locale,
        locale = _ref4$locale === void 0 ? null : _ref4$locale,
        _ref4$numberingSystem = _ref4.numberingSystem,
        numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem;

    return Locale.create(locale, numberingSystem, null).weekdays(length, true);
  }
  /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {[string]}
   */
  ;

  Info.meridiems = function meridiems(_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        _ref5$locale = _ref5.locale,
        locale = _ref5$locale === void 0 ? null : _ref5$locale;

    return Locale.create(locale).meridiems();
  }
  /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {[string]}
   */
  ;

  Info.eras = function eras(length, _temp6) {
    if (length === void 0) {
      length = "short";
    }

    var _ref6 = _temp6 === void 0 ? {} : _temp6,
        _ref6$locale = _ref6.locale,
        locale = _ref6$locale === void 0 ? null : _ref6$locale;

    return Locale.create(locale, null, "gregory").eras(length);
  }
  /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `zones`: whether this environment supports IANA timezones
   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing
   * * `intl`: whether this environment supports general internationalization
   * * `relative`: whether this environment supports relative time formatting
   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }
   * @return {Object}
   */
  ;

  Info.features = function features() {
    var intl = false,
        intlTokens = false,
        zones = false,
        relative = false;

    if (hasIntl()) {
      intl = true;
      intlTokens = hasFormatToParts();
      relative = hasRelative();

      try {
        zones = new Intl.DateTimeFormat("en", {
          timeZone: "America/New_York"
        }).resolvedOptions().timeZone === "America/New_York";
      } catch (e) {
        zones = false;
      }
    }

    return {
      intl: intl,
      intlTokens: intlTokens,
      zones: zones,
      relative: relative
    };
  };

  return Info;
}();

function dayDiff(earlier, later) {
  var utcDayStart = function utcDayStart(dt) {
    return dt.toUTC(0, {
      keepLocalTime: true
    }).startOf("day").valueOf();
  },
      ms = utcDayStart(later) - utcDayStart(earlier);

  return Math.floor(Duration.fromMillis(ms).as("days"));
}

function highOrderDiffs(cursor, later, units) {
  var differs = [["years", function (a, b) {
    return b.year - a.year;
  }], ["quarters", function (a, b) {
    return b.quarter - a.quarter;
  }], ["months", function (a, b) {
    return b.month - a.month + (b.year - a.year) * 12;
  }], ["weeks", function (a, b) {
    var days = dayDiff(a, b);
    return (days - days % 7) / 7;
  }], ["days", dayDiff]];
  var results = {};
  var lowestOrder, highWater;

  for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {
    var _differs$_i = _differs[_i],
        unit = _differs$_i[0],
        differ = _differs$_i[1];

    if (units.indexOf(unit) >= 0) {
      var _cursor$plus;

      lowestOrder = unit;
      var delta = differ(cursor, later);
      highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[unit] = delta, _cursor$plus));

      if (highWater > later) {
        var _cursor$plus2;

        cursor = cursor.plus((_cursor$plus2 = {}, _cursor$plus2[unit] = delta - 1, _cursor$plus2));
        delta -= 1;
      } else {
        cursor = highWater;
      }

      results[unit] = delta;
    }
  }

  return [cursor, results, highWater, lowestOrder];
}

function _diff (earlier, later, units, opts) {
  var _highOrderDiffs = highOrderDiffs(earlier, later, units),
      cursor = _highOrderDiffs[0],
      results = _highOrderDiffs[1],
      highWater = _highOrderDiffs[2],
      lowestOrder = _highOrderDiffs[3];

  var remainingMillis = later - cursor;
  var lowerOrderUnits = units.filter(function (u) {
    return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0;
  });

  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      var _cursor$plus3;

      highWater = cursor.plus((_cursor$plus3 = {}, _cursor$plus3[lowestOrder] = 1, _cursor$plus3));
    }

    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }

  var duration = Duration.fromObject(Object.assign(results, opts));

  if (lowerOrderUnits.length > 0) {
    var _Duration$fromMillis;

    return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}

var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [1632, 1641],
  arabext: [1776, 1785],
  bali: [6992, 7001],
  beng: [2534, 2543],
  deva: [2406, 2415],
  fullwide: [65296, 65303],
  gujr: [2790, 2799],
  khmr: [6112, 6121],
  knda: [3302, 3311],
  laoo: [3792, 3801],
  limb: [6470, 6479],
  mlym: [3430, 3439],
  mong: [6160, 6169],
  mymr: [4160, 4169],
  orya: [2918, 2927],
  tamldec: [3046, 3055],
  telu: [3174, 3183],
  thai: [3664, 3673],
  tibt: [3872, 3881]
}; // eslint-disable-next-line

var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  var value = parseInt(str, 10);

  if (isNaN(value)) {
    value = "";

    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);

      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (var key in numberingSystemsUTF16) {
          var _numberingSystemsUTF = numberingSystemsUTF16[key],
              min = _numberingSystemsUTF[0],
              max = _numberingSystemsUTF[1];

          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }

    return parseInt(value, 10);
  } else {
    return value;
  }
}
function digitRegex(_ref, append) {
  var numberingSystem = _ref.numberingSystem;

  if (append === void 0) {
    append = "";
  }

  return new RegExp("" + numberingSystems[numberingSystem || "latn"] + append);
}

var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

function intUnit(regex, post) {
  if (post === void 0) {
    post = function post(i) {
      return i;
    };
  }

  return {
    regex: regex,
    deser: function deser(_ref) {
      var s = _ref[0];
      return post(parseDigits(s));
    }
  };
}

var NBSP = String.fromCharCode(160);
var spaceOrNBSP = "( |" + NBSP + ")";
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

function fixListRegex(s) {
  // make dots optional and also make them literal
  // make space and non breakable space characters interchangeable
  return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}

function stripInsensitivities(s) {
  return s.replace(/\./g, "") // ignore dots that were made optional
  .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
  .toLowerCase();
}

function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: function deser(_ref2) {
        var s = _ref2[0];
        return strings.findIndex(function (i) {
          return stripInsensitivities(s) === stripInsensitivities(i);
        }) + startIndex;
      }
    };
  }
}

function offset(regex, groups) {
  return {
    regex: regex,
    deser: function deser(_ref3) {
      var h = _ref3[1],
          m = _ref3[2];
      return signedOffset(h, m);
    },
    groups: groups
  };
}

function simple(regex) {
  return {
    regex: regex,
    deser: function deser(_ref4) {
      var s = _ref4[0];
      return s;
    }
  };
}

function escapeToken(value) {
  // eslint-disable-next-line no-useless-escape
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}

function unitForToken(token, loc) {
  var one = digitRegex(loc),
      two = digitRegex(loc, "{2}"),
      three = digitRegex(loc, "{3}"),
      four = digitRegex(loc, "{4}"),
      six = digitRegex(loc, "{6}"),
      oneOrTwo = digitRegex(loc, "{1,2}"),
      oneToThree = digitRegex(loc, "{1,3}"),
      oneToSix = digitRegex(loc, "{1,6}"),
      oneToNine = digitRegex(loc, "{1,9}"),
      twoToFour = digitRegex(loc, "{2,4}"),
      fourToSix = digitRegex(loc, "{4,6}"),
      literal = function literal(t) {
    return {
      regex: RegExp(escapeToken(t.val)),
      deser: function deser(_ref5) {
        var s = _ref5[0];
        return s;
      },
      literal: true
    };
  },
      unitate = function unitate(t) {
    if (token.literal) {
      return literal(t);
    }

    switch (t.val) {
      // era
      case "G":
        return oneOf(loc.eras("short", false), 0);

      case "GG":
        return oneOf(loc.eras("long", false), 0);
      // years

      case "y":
        return intUnit(oneToSix);

      case "yy":
        return intUnit(twoToFour, untruncateYear);

      case "yyyy":
        return intUnit(four);

      case "yyyyy":
        return intUnit(fourToSix);

      case "yyyyyy":
        return intUnit(six);
      // months

      case "M":
        return intUnit(oneOrTwo);

      case "MM":
        return intUnit(two);

      case "MMM":
        return oneOf(loc.months("short", true, false), 1);

      case "MMMM":
        return oneOf(loc.months("long", true, false), 1);

      case "L":
        return intUnit(oneOrTwo);

      case "LL":
        return intUnit(two);

      case "LLL":
        return oneOf(loc.months("short", false, false), 1);

      case "LLLL":
        return oneOf(loc.months("long", false, false), 1);
      // dates

      case "d":
        return intUnit(oneOrTwo);

      case "dd":
        return intUnit(two);
      // ordinals

      case "o":
        return intUnit(oneToThree);

      case "ooo":
        return intUnit(three);
      // time

      case "HH":
        return intUnit(two);

      case "H":
        return intUnit(oneOrTwo);

      case "hh":
        return intUnit(two);

      case "h":
        return intUnit(oneOrTwo);

      case "mm":
        return intUnit(two);

      case "m":
        return intUnit(oneOrTwo);

      case "q":
        return intUnit(oneOrTwo);

      case "qq":
        return intUnit(two);

      case "s":
        return intUnit(oneOrTwo);

      case "ss":
        return intUnit(two);

      case "S":
        return intUnit(oneToThree);

      case "SSS":
        return intUnit(three);

      case "u":
        return simple(oneToNine);
      // meridiem

      case "a":
        return oneOf(loc.meridiems(), 0);
      // weekYear (k)

      case "kkkk":
        return intUnit(four);

      case "kk":
        return intUnit(twoToFour, untruncateYear);
      // weekNumber (W)

      case "W":
        return intUnit(oneOrTwo);

      case "WW":
        return intUnit(two);
      // weekdays

      case "E":
      case "c":
        return intUnit(one);

      case "EEE":
        return oneOf(loc.weekdays("short", false, false), 1);

      case "EEEE":
        return oneOf(loc.weekdays("long", false, false), 1);

      case "ccc":
        return oneOf(loc.weekdays("short", true, false), 1);

      case "cccc":
        return oneOf(loc.weekdays("long", true, false), 1);
      // offset/zone

      case "Z":
      case "ZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(?::(" + two.source + "))?"), 2);

      case "ZZZ":
        return offset(new RegExp("([+-]" + oneOrTwo.source + ")(" + two.source + ")?"), 2);
      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
      // because we don't have any way to figure out what they are

      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);

      default:
        return literal(t);
    }
  };

  var unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}

var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour: {
    numeric: "h",
    "2-digit": "hh"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  }
};

function tokenForPart(part, locale, formatOpts) {
  var type = part.type,
      value = part.value;

  if (type === "literal") {
    return {
      literal: true,
      val: value
    };
  }

  var style = formatOpts[type];
  var val = partTypeStyleToTokenVal[type];

  if (typeof val === "object") {
    val = val[style];
  }

  if (val) {
    return {
      literal: false,
      val: val
    };
  }

  return undefined;
}

function buildRegex(units) {
  var re = units.map(function (u) {
    return u.regex;
  }).reduce(function (f, r) {
    return f + "(" + r.source + ")";
  }, "");
  return ["^" + re + "$", units];
}

function match(input, regex, handlers) {
  var matches = input.match(regex);

  if (matches) {
    var all = {};
    var matchIndex = 1;

    for (var i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        var h = handlers[i],
            groups = h.groups ? h.groups + 1 : 1;

        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }

        matchIndex += groups;
      }
    }

    return [matches, all];
  } else {
    return [matches, {}];
  }
}

function dateTimeFromMatches(matches) {
  var toField = function toField(token) {
    switch (token) {
      case "S":
        return "millisecond";

      case "s":
        return "second";

      case "m":
        return "minute";

      case "h":
      case "H":
        return "hour";

      case "d":
        return "day";

      case "o":
        return "ordinal";

      case "L":
      case "M":
        return "month";

      case "y":
        return "year";

      case "E":
      case "c":
        return "weekday";

      case "W":
        return "weekNumber";

      case "k":
        return "weekYear";

      case "q":
        return "quarter";

      default:
        return null;
    }
  };

  var zone;

  if (!isUndefined(matches.Z)) {
    zone = new FixedOffsetZone(matches.Z);
  } else if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  } else {
    zone = null;
  }

  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }

  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }

  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }

  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }

  var vals = Object.keys(matches).reduce(function (r, k) {
    var f = toField(k);

    if (f) {
      r[f] = matches[k];
    }

    return r;
  }, {});
  return [vals, zone];
}

var dummyDateTimeCache = null;

function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }

  return dummyDateTimeCache;
}

function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }

  var formatOpts = Formatter.macroTokenToFormatOpts(token.val);

  if (!formatOpts) {
    return token;
  }

  var formatter = Formatter.create(locale, formatOpts);
  var parts = formatter.formatDateTimeParts(getDummyDateTime());
  var tokens = parts.map(function (p) {
    return tokenForPart(p, locale, formatOpts);
  });

  if (tokens.includes(undefined)) {
    return token;
  }

  return tokens;
}

function expandMacroTokens(tokens, locale) {
  var _Array$prototype;

  return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function (t) {
    return maybeExpandMacroToken(t, locale);
  }));
}
/**
 * @private
 */


function explainFromTokens(locale, input, format) {
  var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
      units = tokens.map(function (t) {
    return unitForToken(t, locale);
  }),
      disqualifyingUnit = units.find(function (t) {
    return t.invalidReason;
  });

  if (disqualifyingUnit) {
    return {
      input: input,
      tokens: tokens,
      invalidReason: disqualifyingUnit.invalidReason
    };
  } else {
    var _buildRegex = buildRegex(units),
        regexString = _buildRegex[0],
        handlers = _buildRegex[1],
        regex = RegExp(regexString, "i"),
        _match = match(input, regex, handlers),
        rawMatches = _match[0],
        matches = _match[1],
        _ref6 = matches ? dateTimeFromMatches(matches) : [null, null],
        result = _ref6[0],
        zone = _ref6[1];

    if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
      throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
    }

    return {
      input: input,
      tokens: tokens,
      regex: regex,
      rawMatches: rawMatches,
      matches: matches,
      result: result,
      zone: zone
    };
  }
}
function parseFromTokens(locale, input, format) {
  var _explainFromTokens = explainFromTokens(locale, input, format),
      result = _explainFromTokens.result,
      zone = _explainFromTokens.zone,
      invalidReason = _explainFromTokens.invalidReason;

  return [result, zone, invalidReason];
}

var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", "you specified " + value + " (of type " + typeof value + ") as a " + unit + ", which is invalid");
}

function dayOfWeek(year, month, day) {
  var js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
  return js === 0 ? 7 : js;
}

function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}

function uncomputeOrdinal(year, ordinal) {
  var table = isLeapYear(year) ? leapLadder : nonLeapLadder,
      month0 = table.findIndex(function (i) {
    return i < ordinal;
  }),
      day = ordinal - table[month0];
  return {
    month: month0 + 1,
    day: day
  };
}
/**
 * @private
 */


function gregorianToWeek(gregObj) {
  var year = gregObj.year,
      month = gregObj.month,
      day = gregObj.day,
      ordinal = computeOrdinal(year, month, day),
      weekday = dayOfWeek(year, month, day);
  var weekNumber = Math.floor((ordinal - weekday + 10) / 7),
      weekYear;

  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear);
  } else if (weekNumber > weeksInWeekYear(year)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }

  return Object.assign({
    weekYear: weekYear,
    weekNumber: weekNumber,
    weekday: weekday
  }, timeObject(gregObj));
}
function weekToGregorian(weekData) {
  var weekYear = weekData.weekYear,
      weekNumber = weekData.weekNumber,
      weekday = weekData.weekday,
      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
      yearInDays = daysInYear(weekYear);
  var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
      year;

  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }

  var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal.month,
      day = _uncomputeOrdinal.day;

  return Object.assign({
    year: year,
    month: month,
    day: day
  }, timeObject(weekData));
}
function gregorianToOrdinal(gregData) {
  var year = gregData.year,
      month = gregData.month,
      day = gregData.day,
      ordinal = computeOrdinal(year, month, day);
  return Object.assign({
    year: year,
    ordinal: ordinal
  }, timeObject(gregData));
}
function ordinalToGregorian(ordinalData) {
  var year = ordinalData.year,
      ordinal = ordinalData.ordinal,
      _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),
      month = _uncomputeOrdinal2.month,
      day = _uncomputeOrdinal2.day;

  return Object.assign({
    year: year,
    month: month,
    day: day
  }, timeObject(ordinalData));
}
function hasInvalidWeekData(obj) {
  var validYear = isInteger(obj.weekYear),
      validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
      validWeekday = integerBetween(obj.weekday, 1, 7);

  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.week);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
function hasInvalidOrdinalData(obj) {
  var validYear = isInteger(obj.year),
      validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
function hasInvalidGregorianData(obj) {
  var validYear = isInteger(obj.year),
      validMonth = integerBetween(obj.month, 1, 12),
      validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
function hasInvalidTimeData(obj) {
  var hour = obj.hour,
      minute = obj.minute,
      second = obj.second,
      millisecond = obj.millisecond;
  var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,
      validMinute = integerBetween(minute, 0, 59),
      validSecond = integerBetween(second, 0, 59),
      validMillisecond = integerBetween(millisecond, 0, 999);

  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}

var INVALID$2 = "Invalid DateTime";
var MAX_DATE = 8.64e15;

function unsupportedZone(zone) {
  return new Invalid("unsupported zone", "the zone \"" + zone.name + "\" is not supported");
} // we cache week data on the DT object and this intermediates the cache


function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }

  return dt.weekData;
} // clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties


function clone$1(inst, alts) {
  var current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime(Object.assign({}, current, alts, {
    old: current
  }));
} // find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)


function fixOffset(localTS, o, tz) {
  // Our UTC time is just a guess because our offset is just a guess
  var utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts

  var o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done

  if (o === o2) {
    return [utcGuess, o];
  } // If not, change the ts by the difference in the offset


  utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done

  var o3 = tz.offset(utcGuess);

  if (o2 === o3) {
    return [utcGuess, o2];
  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time


  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
} // convert an epoch timestamp into a calendar object with the given offset


function tsToObj(ts, offset) {
  ts += offset * 60 * 1000;
  var d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
} // convert a calendar object to a epoch timestamp


function objToTS(obj, offset, zone) {
  return fixOffset(objToLocalTS(obj), offset, zone);
} // create a new DT instance by adding a duration, adjusting for DSTs


function adjustTime(inst, dur) {
  var oPre = inst.o,
      year = inst.c.year + Math.trunc(dur.years),
      month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
      c = Object.assign({}, inst.c, {
    year: year,
    month: month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }),
      millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"),
      localTS = objToLocalTS(c);

  var _fixOffset = fixOffset(localTS, oPre, inst.zone),
      ts = _fixOffset[0],
      o = _fixOffset[1];

  if (millisToAdd !== 0) {
    ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same

    o = inst.zone.offset(ts);
  }

  return {
    ts: ts,
    o: o
  };
} // helper useful in turning the results of parsing into real dates
// by handling the zone options


function parseDataToDateTime(parsed, parsedZone, opts, format, text) {
  var setZone = opts.setZone,
      zone = opts.zone;

  if (parsed && Object.keys(parsed).length !== 0) {
    var interpretationZone = parsedZone || zone,
        inst = DateTime.fromObject(Object.assign(parsed, opts, {
      zone: interpretationZone,
      // setZone is a valid option in the calling methods, but not in fromObject
      setZone: undefined
    }));
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", "the input \"" + text + "\" can't be parsed as " + format));
  }
} // if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details


function toTechFormat(dt, format, allowZ) {
  if (allowZ === void 0) {
    allowZ = true;
  }

  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ: allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
} // technical time formats (e.g. the time part of ISO 8601), take some options
// and this commonizes their handling


function toTechTimeFormat(dt, _ref) {
  var _ref$suppressSeconds = _ref.suppressSeconds,
      suppressSeconds = _ref$suppressSeconds === void 0 ? false : _ref$suppressSeconds,
      _ref$suppressMillisec = _ref.suppressMilliseconds,
      suppressMilliseconds = _ref$suppressMillisec === void 0 ? false : _ref$suppressMillisec,
      includeOffset = _ref.includeOffset,
      _ref$includePrefix = _ref.includePrefix,
      includePrefix = _ref$includePrefix === void 0 ? false : _ref$includePrefix,
      _ref$includeZone = _ref.includeZone,
      includeZone = _ref$includeZone === void 0 ? false : _ref$includeZone,
      _ref$spaceZone = _ref.spaceZone,
      spaceZone = _ref$spaceZone === void 0 ? false : _ref$spaceZone,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? "extended" : _ref$format;
  var fmt = format === "basic" ? "HHmm" : "HH:mm";

  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {
    fmt += format === "basic" ? "ss" : ":ss";

    if (!suppressMilliseconds || dt.millisecond !== 0) {
      fmt += ".SSS";
    }
  }

  if ((includeZone || includeOffset) && spaceZone) {
    fmt += " ";
  }

  if (includeZone) {
    fmt += "z";
  } else if (includeOffset) {
    fmt += format === "basic" ? "ZZZ" : "ZZ";
  }

  var str = toTechFormat(dt, fmt);

  if (includePrefix) {
    str = "T" + str;
  }

  return str;
} // defaults for unspecified units in the supported calendars


var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
},
    defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
}; // Units in the supported calendars, sorted by bigness

var orderedUnits$1 = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
    orderedWeekUnits = ["weekYear", "weekNumber", "weekday", "hour", "minute", "second", "millisecond"],
    orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"]; // standardize case and plurality in units

function normalizeUnit(unit) {
  var normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
} // this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.


function quickDT(obj, zone) {
  // assume we have the higher-order units
  for (var _iterator = _createForOfIteratorHelperLoose(orderedUnits$1), _step; !(_step = _iterator()).done;) {
    var u = _step.value;

    if (isUndefined(obj[u])) {
      obj[u] = defaultUnitValues[u];
    }
  }

  var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);

  if (invalid) {
    return DateTime.invalid(invalid);
  }

  var tsNow = Settings.now(),
      offsetProvis = zone.offset(tsNow),
      _objToTS = objToTS(obj, offsetProvis, zone),
      ts = _objToTS[0],
      o = _objToTS[1];

  return new DateTime({
    ts: ts,
    zone: zone,
    o: o
  });
}

function diffRelative(start, end, opts) {
  var round = isUndefined(opts.round) ? true : opts.round,
      format = function format(c, unit) {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    var formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  },
      differ = function differ(unit) {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  };

  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }

  for (var _iterator2 = _createForOfIteratorHelperLoose(opts.units), _step2; !(_step2 = _iterator2()).done;) {
    var unit = _step2.value;
    var count = differ(unit);

    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }

  return format(0, opts.units[opts.units.length - 1]);
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},
 * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.
 * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */


var DateTime = /*#__PURE__*/function () {
  /**
   * @access private
   */
  function DateTime(config) {
    var zone = config.zone || Settings.defaultZone;
    var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    /**
     * @access private
     */

    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    var c = null,
        o = null;

    if (!invalid) {
      var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

      if (unchanged) {
        var _ref2 = [config.old.c, config.old.o];
        c = _ref2[0];
        o = _ref2[1];
      } else {
        var ot = zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }
    /**
     * @access private
     */


    this._zone = zone;
    /**
     * @access private
     */

    this.loc = config.loc || Locale.create();
    /**
     * @access private
     */

    this.invalid = invalid;
    /**
     * @access private
     */

    this.weekData = null;
    /**
     * @access private
     */

    this.c = c;
    /**
     * @access private
     */

    this.o = o;
    /**
     * @access private
     */

    this.isLuxonDateTime = true;
  } // CONSTRUCT

  /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */


  DateTime.now = function now() {
    return new DateTime({});
  }
  /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                            //~> now
   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00
   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */
  ;

  DateTime.local = function local(year, month, day, hour, minute, second, millisecond) {
    if (isUndefined(year)) {
      return new DateTime({});
    } else {
      return quickDT({
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        millisecond: millisecond
      }, Settings.defaultZone);
    }
  }
  /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.utc()                            //~> now
   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z
   * @return {DateTime}
   */
  ;

  DateTime.utc = function utc(year, month, day, hour, minute, second, millisecond) {
    if (isUndefined(year)) {
      return new DateTime({
        ts: Settings.now(),
        zone: FixedOffsetZone.utcInstance
      });
    } else {
      return quickDT({
        year: year,
        month: month,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        millisecond: millisecond
      }, FixedOffsetZone.utcInstance);
    }
  }
  /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */
  ;

  DateTime.fromJSDate = function fromJSDate(date, options) {
    if (options === void 0) {
      options = {};
    }

    var ts = isDate(date) ? date.valueOf() : NaN;

    if (Number.isNaN(ts)) {
      return DateTime.invalid("invalid input");
    }

    var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    return new DateTime({
      ts: ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromMillis = function fromMillis(milliseconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError("fromMillis requires a numerical input, but received a " + typeof milliseconds + " with value " + milliseconds);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
      return DateTime.invalid("Timestamp out of range");
    } else {
      return new DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromSeconds = function fromSeconds(seconds, options) {
    if (options === void 0) {
      options = {};
    }

    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new DateTime({
        ts: seconds * 1000,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @return {DateTime}
   */
  ;

  DateTime.fromObject = function fromObject(obj) {
    var zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);

    if (!zoneToUse.isValid) {
      return DateTime.invalid(unsupportedZone(zoneToUse));
    }

    var tsNow = Settings.now(),
        offsetProvis = zoneToUse.offset(tsNow),
        normalized = normalizeObject(obj, normalizeUnit, ["zone", "locale", "outputCalendar", "numberingSystem"]),
        containsOrdinal = !isUndefined(normalized.ordinal),
        containsGregorYear = !isUndefined(normalized.year),
        containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
        containsGregor = containsGregorYear || containsGregorMD,
        definiteWeekDef = normalized.weekYear || normalized.weekNumber,
        loc = Locale.fromObject(obj); // cases:
    // just a weekday -> this week's instance of that weekday, no worries
    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
    // (gregorian month or day) + ordinal -> error
    // otherwise just use weeks or ordinals or gregorian, depending on what's specified

    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }

    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }

    var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff

    var units,
        defaultValues,
        objNow = tsToObj(tsNow, offsetProvis);

    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits$1;
      defaultValues = defaultUnitValues;
    } // set default values for missing stuff


    var foundFirst = false;

    for (var _iterator3 = _createForOfIteratorHelperLoose(units), _step3; !(_step3 = _iterator3()).done;) {
      var u = _step3.value;
      var v = normalized[u];

      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    } // make sure the values we have are in range


    var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),
        invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

    if (invalid) {
      return DateTime.invalid(invalid);
    } // compute the actual time


    var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,
        _objToTS2 = objToTS(gregorian, offsetProvis, zoneToUse),
        tsFinal = _objToTS2[0],
        offsetFinal = _objToTS2[1],
        inst = new DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc: loc
    }); // gregorian data + weekday serves only to validate


    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of " + normalized.weekday + " and a date of " + inst.toISO());
    }

    return inst;
  }
  /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */
  ;

  DateTime.fromISO = function fromISO(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseISODate = parseISODate(text),
        vals = _parseISODate[0],
        parsedZone = _parseISODate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */
  ;

  DateTime.fromRFC2822 = function fromRFC2822(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseRFC2822Date = parseRFC2822Date(text),
        vals = _parseRFC2822Date[0],
        parsedZone = _parseRFC2822Date[1];

    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */
  ;

  DateTime.fromHTTP = function fromHTTP(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseHTTPDate = parseHTTPDate(text),
        vals = _parseHTTPDate[0],
        parsedZone = _parseHTTPDate[1];

    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */
  ;

  DateTime.fromFormat = function fromFormat(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }

    var _opts = opts,
        _opts$locale = _opts.locale,
        locale = _opts$locale === void 0 ? null : _opts$locale,
        _opts$numberingSystem = _opts.numberingSystem,
        numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    }),
        _parseFromTokens = parseFromTokens(localeToUse, text, fmt),
        vals = _parseFromTokens[0],
        parsedZone = _parseFromTokens[1],
        invalid = _parseFromTokens[2];

    if (invalid) {
      return DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, "format " + fmt, text);
    }
  }
  /**
   * @deprecated use fromFormat instead
   */
  ;

  DateTime.fromString = function fromString(text, fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return DateTime.fromFormat(text, fmt, opts);
  }
  /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */
  ;

  DateTime.fromSQL = function fromSQL(text, opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _parseSQL = parseSQL(text),
        vals = _parseSQL[0],
        parsedZone = _parseSQL[1];

    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */
  ;

  DateTime.invalid = function invalid(reason, explanation) {
    if (explanation === void 0) {
      explanation = null;
    }

    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }

    var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new DateTime({
        invalid: invalid
      });
    }
  }
  /**
   * Check if an object is a DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */
  ;

  DateTime.isDateTime = function isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  } // INFO

  /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */
  ;

  var _proto = DateTime.prototype;

  _proto.get = function get(unit) {
    return this[unit];
  }
  /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */
  ;

  /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */
  _proto.resolvedLocaleOpts = function resolvedLocaleOpts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),
        locale = _Formatter$create$res.locale,
        numberingSystem = _Formatter$create$res.numberingSystem,
        calendar = _Formatter$create$res.calendar;

    return {
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: calendar
    };
  } // TRANSFORM

  /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */
  ;

  _proto.toUTC = function toUTC(offset, opts) {
    if (offset === void 0) {
      offset = 0;
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.setZone(FixedOffsetZone.instance(offset), opts);
  }
  /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */
  ;

  _proto.toLocal = function toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */
  ;

  _proto.setZone = function setZone(zone, _temp) {
    var _ref3 = _temp === void 0 ? {} : _temp,
        _ref3$keepLocalTime = _ref3.keepLocalTime,
        keepLocalTime = _ref3$keepLocalTime === void 0 ? false : _ref3$keepLocalTime,
        _ref3$keepCalendarTim = _ref3.keepCalendarTime,
        keepCalendarTime = _ref3$keepCalendarTim === void 0 ? false : _ref3$keepCalendarTim;

    zone = normalizeZone(zone, Settings.defaultZone);

    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    } else {
      var newTS = this.ts;

      if (keepLocalTime || keepCalendarTime) {
        var offsetGuess = zone.offset(this.ts);
        var asObj = this.toObject();

        var _objToTS3 = objToTS(asObj, offsetGuess, zone);

        newTS = _objToTS3[0];
      }

      return clone$1(this, {
        ts: newTS,
        zone: zone
      });
    }
  }
  /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */
  ;

  _proto.reconfigure = function reconfigure(_temp2) {
    var _ref4 = _temp2 === void 0 ? {} : _temp2,
        locale = _ref4.locale,
        numberingSystem = _ref4.numberingSystem,
        outputCalendar = _ref4.outputCalendar;

    var loc = this.loc.clone({
      locale: locale,
      numberingSystem: numberingSystem,
      outputCalendar: outputCalendar
    });
    return clone$1(this, {
      loc: loc
    });
  }
  /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */
  ;

  _proto.setLocale = function setLocale(locale) {
    return this.reconfigure({
      locale: locale
    });
  }
  /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */
  ;

  _proto.set = function set(values) {
    if (!this.isValid) return this;
    var normalized = normalizeObject(values, normalizeUnit, []),
        settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday);
    var mixed;

    if (settingWeekStuff) {
      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));
    } else {
      mixed = Object.assign(this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,
      // use the last day of the right month

      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }

    var _objToTS4 = objToTS(mixed, this.o, this.zone),
        ts = _objToTS4[0],
        o = _objToTS4[1];

    return clone$1(this, {
      ts: ts,
      o: o
    });
  }
  /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */
  ;

  _proto.plus = function plus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration);
    return clone$1(this, adjustTime(this, dur));
  }
  /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
  */
  ;

  _proto.minus = function minus(duration) {
    if (!this.isValid) return this;
    var dur = friendlyDuration(duration).negate();
    return clone$1(this, adjustTime(this, dur));
  }
  /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */
  ;

  _proto.startOf = function startOf(unit) {
    if (!this.isValid) return this;
    var o = {},
        normalizedUnit = Duration.normalizeUnit(unit);

    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through

      case "quarters":
      case "months":
        o.day = 1;
      // falls through

      case "weeks":
      case "days":
        o.hour = 0;
      // falls through

      case "hours":
        o.minute = 0;
      // falls through

      case "minutes":
        o.second = 0;
      // falls through

      case "seconds":
        o.millisecond = 0;
        break;
      // no default, invalid units throw in normalizeUnit()
    }

    if (normalizedUnit === "weeks") {
      o.weekday = 1;
    }

    if (normalizedUnit === "quarters") {
      var q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }

    return this.set(o);
  }
  /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */
  ;

  _proto.endOf = function endOf(unit) {
    var _this$plus;

    return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit).minus(1) : this;
  } // OUTPUT

  /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */
  ;

  _proto.toFormat = function toFormat(fmt, opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID$2;
  }
  /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'
   * @return {string}
   */
  ;

  _proto.toLocaleString = function toLocaleString(opts) {
    if (opts === void 0) {
      opts = DATE_SHORT;
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this) : INVALID$2;
  }
  /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */
  ;

  _proto.toLocaleParts = function toLocaleParts(opts) {
    if (opts === void 0) {
      opts = {};
    }

    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */
  ;

  _proto.toISO = function toISO(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toISODate(opts) + "T" + this.toISOTime(opts);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */
  ;

  _proto.toISODate = function toISODate(_temp3) {
    var _ref5 = _temp3 === void 0 ? {} : _temp3,
        _ref5$format = _ref5.format,
        format = _ref5$format === void 0 ? "extended" : _ref5$format;

    var fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";

    if (this.year > 9999) {
      fmt = "+" + fmt;
    }

    return toTechFormat(this, fmt);
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */
  ;

  _proto.toISOWeekDate = function toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */
  ;

  _proto.toISOTime = function toISOTime(_temp4) {
    var _ref6 = _temp4 === void 0 ? {} : _temp4,
        _ref6$suppressMillise = _ref6.suppressMilliseconds,
        suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,
        _ref6$suppressSeconds = _ref6.suppressSeconds,
        suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,
        _ref6$includeOffset = _ref6.includeOffset,
        includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,
        _ref6$includePrefix = _ref6.includePrefix,
        includePrefix = _ref6$includePrefix === void 0 ? false : _ref6$includePrefix,
        _ref6$format = _ref6.format,
        format = _ref6$format === void 0 ? "extended" : _ref6$format;

    return toTechTimeFormat(this, {
      suppressSeconds: suppressSeconds,
      suppressMilliseconds: suppressMilliseconds,
      includeOffset: includeOffset,
      includePrefix: includePrefix,
      format: format
    });
  }
  /**
   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */
  ;

  _proto.toRFC2822 = function toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */
  ;

  _proto.toHTTP = function toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */
  ;

  _proto.toSQLDate = function toSQLDate() {
    return toTechFormat(this, "yyyy-MM-dd");
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQLTime = function toSQLTime(_temp5) {
    var _ref7 = _temp5 === void 0 ? {} : _temp5,
        _ref7$includeOffset = _ref7.includeOffset,
        includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,
        _ref7$includeZone = _ref7.includeZone,
        includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone;

    return toTechTimeFormat(this, {
      includeOffset: includeOffset,
      includeZone: includeZone,
      spaceZone: true
    });
  }
  /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */
  ;

  _proto.toSQL = function toSQL(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) {
      return null;
    }

    return this.toSQLDate() + " " + this.toSQLTime(opts);
  }
  /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */
  ;

  _proto.toString = function toString() {
    return this.isValid ? this.toISO() : INVALID$2;
  }
  /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}
   * @return {number}
   */
  ;

  _proto.valueOf = function valueOf() {
    return this.toMillis();
  }
  /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toMillis = function toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */
  ;

  _proto.toSeconds = function toSeconds() {
    return this.isValid ? this.ts / 1000 : NaN;
  }
  /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */
  ;

  _proto.toJSON = function toJSON() {
    return this.toISO();
  }
  /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toBSON = function toBSON() {
    return this.toJSDate();
  }
  /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */
  ;

  _proto.toObject = function toObject(opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid) return {};
    var base = Object.assign({}, this.c);

    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }

    return base;
  }
  /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */
  ;

  _proto.toJSDate = function toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  } // COMPARE

  /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */
  ;

  _proto.diff = function diff(otherDateTime, unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid(this.invalid || otherDateTime.invalid, "created by diffing an invalid DateTime");
    }

    var durOpts = Object.assign({
      locale: this.locale,
      numberingSystem: this.numberingSystem
    }, opts);

    var units = maybeArray(unit).map(Duration.normalizeUnit),
        otherIsLater = otherDateTime.valueOf() > this.valueOf(),
        earlier = otherIsLater ? this : otherDateTime,
        later = otherIsLater ? otherDateTime : this,
        diffed = _diff(earlier, later, units, durOpts);

    return otherIsLater ? diffed.negate() : diffed;
  }
  /**
   * Return the difference between this DateTime and right now.
   * See {@link diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */
  ;

  _proto.diffNow = function diffNow(unit, opts) {
    if (unit === void 0) {
      unit = "milliseconds";
    }

    if (opts === void 0) {
      opts = {};
    }

    return this.diff(DateTime.now(), unit, opts);
  }
  /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */
  ;

  _proto.until = function until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */
  ;

  _proto.hasSame = function hasSame(otherDateTime, unit) {
    if (!this.isValid) return false;
    var inputMs = otherDateTime.valueOf();
    var otherZoneDateTime = this.setZone(otherDateTime.zone, {
      keepLocalTime: true
    });
    return otherZoneDateTime.startOf(unit) <= inputMs && inputMs <= otherZoneDateTime.endOf(unit);
  }
  /**
   * Equality check
   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */
  ;

  _proto.equals = function equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */
  ;

  _proto.toRelative = function toRelative(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    var base = options.base || DateTime.fromObject({
      zone: this.zone
    }),
        padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    return diffRelative(base, this.plus(padding), Object.assign(options, {
      numeric: "always",
      units: ["years", "months", "days", "hours", "minutes", "seconds"]
    }));
  }
  /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */
  ;

  _proto.toRelativeCalendar = function toRelativeCalendar(options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.isValid) return null;
    return diffRelative(options.base || DateTime.fromObject({
      zone: this.zone
    }), this, Object.assign(options, {
      numeric: "auto",
      units: ["years", "months", "days"],
      calendary: true
    }));
  }
  /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */
  ;

  DateTime.min = function min() {
    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
      dateTimes[_key] = arguments[_key];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.min);
  }
  /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */
  ;

  DateTime.max = function max() {
    for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      dateTimes[_key2] = arguments[_key2];
    }

    if (!dateTimes.every(DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }

    return bestBy(dateTimes, function (i) {
      return i.valueOf();
    }, Math.max);
  } // MISC

  /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */
  ;

  DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$locale = _options.locale,
        locale = _options$locale === void 0 ? null : _options$locale,
        _options$numberingSys = _options.numberingSystem,
        numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,
        localeToUse = Locale.fromOpts({
      locale: locale,
      numberingSystem: numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  /**
   * @deprecated use fromFormatExplain instead
   */
  ;

  DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {
    if (options === void 0) {
      options = {};
    }

    return DateTime.fromFormatExplain(text, fmt, options);
  } // FORMAT PRESETS

  /**
   * {@link toLocaleString} format like 10/14/1983
   * @type {Object}
   */
  ;

  _createClass(DateTime, [{
    key: "isValid",
    get: function get() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidReason",
    get: function get() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */

  }, {
    key: "invalidExplanation",
    get: function get() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "locale",
    get: function get() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "numberingSystem",
    get: function get() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */

  }, {
    key: "outputCalendar",
    get: function get() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */

  }, {
    key: "zone",
    get: function get() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */

  }, {
    key: "zoneName",
    get: function get() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */

  }, {
    key: "year",
    get: function get() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */

  }, {
    key: "quarter",
    get: function get() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */

  }, {
    key: "month",
    get: function get() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */

  }, {
    key: "day",
    get: function get() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */

  }, {
    key: "hour",
    get: function get() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */

  }, {
    key: "minute",
    get: function get() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */

  }, {
    key: "second",
    get: function get() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */

  }, {
    key: "millisecond",
    get: function get() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekYear //=> 2015
     * @type {number}
     */

  }, {
    key: "weekYear",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */

  }, {
    key: "weekNumber",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */

  }, {
    key: "weekday",
    get: function get() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */

  }, {
    key: "ordinal",
    get: function get() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */

  }, {
    key: "monthShort",
    get: function get() {
      return this.isValid ? Info.months("short", {
        locale: this.locale
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */

  }, {
    key: "monthLong",
    get: function get() {
      return this.isValid ? Info.months("long", {
        locale: this.locale
      })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */

  }, {
    key: "weekdayShort",
    get: function get() {
      return this.isValid ? Info.weekdays("short", {
        locale: this.locale
      })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */

  }, {
    key: "weekdayLong",
    get: function get() {
      return this.isValid ? Info.weekdays("long", {
        locale: this.locale
      })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */

  }, {
    key: "offset",
    get: function get() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameShort",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */

  }, {
    key: "offsetNameLong",
    get: function get() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */

  }, {
    key: "isOffsetFixed",
    get: function get() {
      return this.isValid ? this.zone.universal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */

  }, {
    key: "isInDST",
    get: function get() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({
          month: 1
        }).offset || this.offset > this.set({
          month: 5
        }).offset;
      }
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */

  }, {
    key: "isInLeapYear",
    get: function get() {
      return isLeapYear(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */

  }, {
    key: "daysInMonth",
    get: function get() {
      return daysInMonth(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */

  }, {
    key: "daysInYear",
    get: function get() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */

  }, {
    key: "weeksInWeekYear",
    get: function get() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
  }], [{
    key: "DATE_SHORT",
    get: function get() {
      return DATE_SHORT;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED",
    get: function get() {
      return DATE_MED;
    }
    /**
     * {@link toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_MED_WITH_WEEKDAY",
    get: function get() {
      return DATE_MED_WITH_WEEKDAY;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_FULL",
    get: function get() {
      return DATE_FULL;
    }
    /**
     * {@link toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */

  }, {
    key: "DATE_HUGE",
    get: function get() {
      return DATE_HUGE;
    }
    /**
     * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_SIMPLE",
    get: function get() {
      return TIME_SIMPLE;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SECONDS",
    get: function get() {
      return TIME_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_WITH_SHORT_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "TIME_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_WITH_LONG_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_SIMPLE",
    get: function get() {
      return TIME_24_SIMPLE;
    }
    /**
     * {@link toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SECONDS",
    get: function get() {
      return TIME_24_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_SHORT_OFFSET",
    get: function get() {
      return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */

  }, {
    key: "TIME_24_WITH_LONG_OFFSET",
    get: function get() {
      return TIME_24_WITH_LONG_OFFSET;
    }
    /**
     * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT",
    get: function get() {
      return DATETIME_SHORT;
    }
    /**
     * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_SHORT_WITH_SECONDS",
    get: function get() {
      return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED",
    get: function get() {
      return DATETIME_MED;
    }
    /**
     * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_SECONDS",
    get: function get() {
      return DATETIME_MED_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_MED_WITH_WEEKDAY",
    get: function get() {
      return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL",
    get: function get() {
      return DATETIME_FULL;
    }
    /**
     * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_FULL_WITH_SECONDS",
    get: function get() {
      return DATETIME_FULL_WITH_SECONDS;
    }
    /**
     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE",
    get: function get() {
      return DATETIME_HUGE;
    }
    /**
     * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */

  }, {
    key: "DATETIME_HUGE_WITH_SECONDS",
    get: function get() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  }]);

  return DateTime;
}();
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError("Unknown datetime argument: " + dateTimeish + ", of type " + typeof dateTimeish);
  }
}

var VERSION = "1.26.0";

exports.DateTime = DateTime;
exports.Duration = Duration;
exports.FixedOffsetZone = FixedOffsetZone;
exports.IANAZone = IANAZone;
exports.Info = Info;
exports.Interval = Interval;
exports.InvalidZone = InvalidZone;
exports.LocalZone = LocalZone;
exports.Settings = Settings;
exports.VERSION = VERSION;
exports.Zone = Zone;
//# sourceMappingURL=luxon.js.map


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.propagation = exports.metrics = exports.trace = exports.context = void 0;
__exportStar(__webpack_require__(616), exports);
__exportStar(__webpack_require__(617), exports);
__exportStar(__webpack_require__(618), exports);
__exportStar(__webpack_require__(273), exports);
__exportStar(__webpack_require__(275), exports);
__exportStar(__webpack_require__(276), exports);
__exportStar(__webpack_require__(621), exports);
__exportStar(__webpack_require__(622), exports);
__exportStar(__webpack_require__(623), exports);
__exportStar(__webpack_require__(624), exports);
__exportStar(__webpack_require__(625), exports);
__exportStar(__webpack_require__(626), exports);
__exportStar(__webpack_require__(627), exports);
__exportStar(__webpack_require__(277), exports);
__exportStar(__webpack_require__(278), exports);
__exportStar(__webpack_require__(628), exports);
__exportStar(__webpack_require__(629), exports);
__exportStar(__webpack_require__(630), exports);
__exportStar(__webpack_require__(631), exports);
__exportStar(__webpack_require__(632), exports);
__exportStar(__webpack_require__(633), exports);
__exportStar(__webpack_require__(634), exports);
__exportStar(__webpack_require__(279), exports);
__exportStar(__webpack_require__(158), exports);
__exportStar(__webpack_require__(159), exports);
__exportStar(__webpack_require__(281), exports);
__exportStar(__webpack_require__(282), exports);
__exportStar(__webpack_require__(635), exports);
__exportStar(__webpack_require__(636), exports);
__exportStar(__webpack_require__(637), exports);
__exportStar(__webpack_require__(638), exports);
__exportStar(__webpack_require__(639), exports);
__exportStar(__webpack_require__(640), exports);
__exportStar(__webpack_require__(641), exports);
__exportStar(__webpack_require__(642), exports);
__exportStar(__webpack_require__(280), exports);
__exportStar(__webpack_require__(643), exports);
__exportStar(__webpack_require__(644), exports);
__exportStar(__webpack_require__(645), exports);
var spancontext_utils_1 = __webpack_require__(95);
Object.defineProperty(exports, "INVALID_SPANID", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPANID; } });
Object.defineProperty(exports, "INVALID_TRACEID", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_TRACEID; } });
Object.defineProperty(exports, "INVALID_SPAN_CONTEXT", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPAN_CONTEXT; } });
Object.defineProperty(exports, "isSpanContextValid", { enumerable: true, get: function () { return spancontext_utils_1.isSpanContextValid; } });
Object.defineProperty(exports, "isValidTraceId", { enumerable: true, get: function () { return spancontext_utils_1.isValidTraceId; } });
Object.defineProperty(exports, "isValidSpanId", { enumerable: true, get: function () { return spancontext_utils_1.isValidSpanId; } });
var context_base_1 = __webpack_require__(157);
Object.defineProperty(exports, "ROOT_CONTEXT", { enumerable: true, get: function () { return context_base_1.ROOT_CONTEXT; } });
Object.defineProperty(exports, "createContextKey", { enumerable: true, get: function () { return context_base_1.createContextKey; } });
var context_1 = __webpack_require__(646);
/** Entrypoint for context API */
exports.context = context_1.ContextAPI.getInstance();
var trace_1 = __webpack_require__(649);
/** Entrypoint for trace API */
exports.trace = trace_1.TraceAPI.getInstance();
var metrics_1 = __webpack_require__(650);
/** Entrypoint for metrics API */
exports.metrics = metrics_1.MetricsAPI.getInstance();
var propagation_1 = __webpack_require__(651);
/** Entrypoint for propagation API */
exports.propagation = propagation_1.PropagationAPI.getInstance();
exports.default = {
    trace: exports.trace,
    metrics: exports.metrics,
    context: exports.context,
    propagation: exports.propagation,
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
var context_1 = __webpack_require__(274);
Object.defineProperty(exports, "createContextKey", { enumerable: true, get: function () { return context_1.createContextKey; } });
Object.defineProperty(exports, "ROOT_CONTEXT", { enumerable: true, get: function () { return context_1.ROOT_CONTEXT; } });
__exportStar(__webpack_require__(619), exports);
__exportStar(__webpack_require__(620), exports);
//# sourceMappingURL=index.js.map

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOOP_TRACER = exports.NoopTracer = void 0;
var NoopSpan_1 = __webpack_require__(279);
var spancontext_utils_1 = __webpack_require__(95);
var context_1 = __webpack_require__(273);
/**
 * No-op implementations of {@link Tracer}.
 */
var NoopTracer = /** @class */ (function () {
    function NoopTracer() {
    }
    NoopTracer.prototype.getCurrentSpan = function () {
        return NoopSpan_1.NOOP_SPAN;
    };
    // startSpan starts a noop span.
    NoopTracer.prototype.startSpan = function (name, options, context) {
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) {
            return NoopSpan_1.NOOP_SPAN;
        }
        var parentFromContext = context && context_1.getParentSpanContext(context);
        if (isSpanContext(parentFromContext) &&
            spancontext_utils_1.isSpanContextValid(parentFromContext)) {
            return new NoopSpan_1.NoopSpan(parentFromContext);
        }
        else {
            return NoopSpan_1.NOOP_SPAN;
        }
    };
    NoopTracer.prototype.withSpan = function (span, fn) {
        return fn();
    };
    NoopTracer.prototype.bind = function (target, _span) {
        return target;
    };
    return NoopTracer;
}());
exports.NoopTracer = NoopTracer;
function isSpanContext(spanContext) {
    return (typeof spanContext === 'object' &&
        typeof spanContext['spanId'] === 'string' &&
        typeof spanContext['traceId'] === 'string' &&
        typeof spanContext['traceFlags'] === 'number');
}
exports.NOOP_TRACER = new NoopTracer();
//# sourceMappingURL=NoopTracer.js.map

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOOP_TRACER_PROVIDER = exports.NoopTracerProvider = void 0;
var NoopTracer_1 = __webpack_require__(158);
/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */
var NoopTracerProvider = /** @class */ (function () {
    function NoopTracerProvider() {
    }
    NoopTracerProvider.prototype.getTracer = function (_name, _version) {
        return NoopTracer_1.NOOP_TRACER;
    };
    return NoopTracerProvider;
}());
exports.NoopTracerProvider = NoopTracerProvider;
exports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();
//# sourceMappingURL=NoopTracerProvider.js.map

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ExplorerState;
(function (ExplorerState) {
    ExplorerState["Initialized"] = "Initialized";
    ExplorerState["NotInitialized"] = "NotInitialized";
})(ExplorerState = exports.ExplorerState || (exports.ExplorerState = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState["NotConnected"] = "NotConnected";
    ConnectionState["Connected"] = "Connected";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
class TreeViewItem extends vscode.TreeItem {
    constructor(label, options, collapsibleState, children) {
        super(label, collapsibleState || vscode.TreeItemCollapsibleState.None);
        this.options = options;
        const availableCommands = options.attributes || {};
        const formattedCommands = Object.entries(availableCommands)
            .filter(([k, v]) => v)
            .map(([k]) => k)
            .join('.');
        this.contextValue = formattedCommands
            ? `${options.type}_${formattedCommands}`
            : options.type;
        this.children = children;
    }
    withCommand(command) {
        this.command = command;
        return this;
    }
    withId(id) {
        this.id = id;
        return this;
    }
    withIconPath(iconPath) {
        this.iconPath = iconPath;
        return this;
    }
    withTooltip(tooltip) {
        this.tooltip = tooltip;
        return this;
    }
    withDescription(description) {
        this.description = description;
        return this;
    }
    withCodespaceId(id) {
        this.codespaceId = id;
        return this;
    }
    withFilepath(path) {
        this.path = path;
        return this;
    }
    withSessionId(id) {
        this.sessionId = id;
        return this;
    }
}
exports.TreeViewItem = TreeViewItem;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
exports.default = global.fetch.bind(global);

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(164);
var util = __webpack_require__(54);
var ArraySet = __webpack_require__(165).ArraySet;
var MappingList = __webpack_require__(298).MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(297);

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(54);
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;


/***/ }),
/* 166 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DebugConsoleLogger_1 = __webpack_require__(310);
exports.DebugConsoleLogger = DebugConsoleLogger_1.DebugConsoleLogger;
//# sourceMappingURL=index.js.map

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LogLevel_1 = __webpack_require__(57);
const TraceFormat_1 = __webpack_require__(58);
const TraceListener_1 = __webpack_require__(78);
/**
 * A trace listener using the `console`.
 */
class ConsoleTraceListener extends TraceListener_1.TraceListener {
    constructor(consoleReference = console) {
        super();
        this.consoleReference = consoleReference;
    }
    writeTo(line) {
        this.consoleReference.log(line);
    }
    writeEvent(source, logLevel, id, message, ...args) {
        const line = TraceFormat_1.TraceFormat.formatEvent(null, source, logLevel, id, message, ...args);
        switch (logLevel) {
            case LogLevel_1.LogLevel.Critical:
            case LogLevel_1.LogLevel.Error: {
                return this.consoleReference.error(line);
            }
            case LogLevel_1.LogLevel.Warning: {
                return this.consoleReference.warn(line);
            }
            case LogLevel_1.LogLevel.Debug: {
                return (this.consoleReference.debug)
                    ? this.consoleReference.debug(line)
                    : this.consoleReference.log(line);
            }
            default: {
                return this.consoleReference.log(line);
            }
        }
    }
    ;
}
exports.ConsoleTraceListener = ConsoleTraceListener;
;
//# sourceMappingURL=ConsoleTraceListener.js.map

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const js_sha256_1 = __webpack_require__(315);
class Privacy {
    static setKey(privacyKeyBase64) {
        Privacy.privacyKey = privacyKeyBase64;
    }
    static getShortHash(value, length = 8, unkeyed = false) {
        return this.getHash(value, unkeyed).substr(0, length);
    }
    static getHash(value, unkeyed = false) {
        if (!value) {
            return '<null>';
        }
        let hasher;
        if (unkeyed) {
            hasher = js_sha256_1.sha256.create();
        }
        else {
            if (!Privacy.privacyKey) {
                return '<redacted>';
            }
            hasher = js_sha256_1.sha256.hmac.create(Privacy.privacyKey);
        }
        return hasher
            .update(value)
            .hex();
    }
    /** Get sha256 hash of UTF8 encoded value. Undefined or null value is treated as empty string. */
    static getSha256Hash(value, maxLength) {
        const result = js_sha256_1.sha256.create().update(new TextEncoder().encode(value || '')).toString();
        return typeof maxLength === 'number' && maxLength > 0 && result.length > maxLength ? result.substr(0, maxLength) : result;
    }
}
exports.Privacy = Privacy;
;
//# sourceMappingURL=Privacy.js.map

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LogValueType_1 = __webpack_require__(101);
class LoggerSettings {
}
exports.LoggerSettings = LoggerSettings;
/**
 * If disable obfuscation is enabled/disabled.
 */
LoggerSettings.disableObfuscation = false;
LoggerSettings.obfuscateProperties = {
    email: LogValueType_1.LogValueType.Email,
    name: LogValueType_1.LogValueType.Text,
    token: LogValueType_1.LogValueType.Text,
    sessionToken: LogValueType_1.LogValueType.Text,
};
//# sourceMappingURL=LoggerSettings.js.map

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var errorToString_1 = __webpack_require__(317);
exports.errorToString = errorToString_1.errorToString;
//# sourceMappingURL=index.js.map

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = __webpack_require__(173);
var util = __webpack_require__(59);
var ArraySet = __webpack_require__(174).ArraySet;
var MappingList = __webpack_require__(321).MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = __webpack_require__(320);

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(59);
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(342);
var v4 = __webpack_require__(343);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 176 */
/***/ (function(module, exports) {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),
/* 177 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FaultType;
(function (FaultType) {
    FaultType[FaultType["Error"] = 0] = "Error";
    FaultType[FaultType["User"] = 1] = "User";
    FaultType[FaultType["Unknown"] = 2] = "Unknown";
    FaultType[FaultType["NonBlockingFault"] = 3] = "NonBlockingFault";
    FaultType[FaultType["UserCancelled"] = 4] = "UserCancelled";
    FaultType[FaultType["ByDesign"] = 5] = "ByDesign";
})(FaultType = exports.FaultType || (exports.FaultType = {}));
//# sourceMappingURL=FaultType.js.map

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__(4).Buffer
var Transform = __webpack_require__(35).Transform
var inherits = __webpack_require__(2)

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(81);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(166);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(42).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(181);
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(108).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__(62));
util.inherits = __webpack_require__(2);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(350);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(351);
var destroyImpl = __webpack_require__(182);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(36);

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(110).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(36);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(110).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15), __webpack_require__(5)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(42).EventEmitter;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(81);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(36);

/*<replacement>*/
var util = Object.create(__webpack_require__(62));
util.inherits = __webpack_require__(2);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(2)
var Hash = __webpack_require__(43)
var Buffer = __webpack_require__(4).Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2)
var Hash = __webpack_require__(43)
var Buffer = __webpack_require__(4).Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(2)
var Legacy = __webpack_require__(363)
var Base = __webpack_require__(31)
var Buffer = __webpack_require__(4).Buffer
var md5 = __webpack_require__(187)
var RIPEMD160 = __webpack_require__(111)

var sha = __webpack_require__(112)

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__(106)

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),
/* 188 */
/***/ (function(module) {

module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__(365)
exports.pbkdf2Sync = __webpack_require__(192)


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

function checkBuffer (buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string')
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password')
  checkBuffer(salt, 'Salt')

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(187)
var RIPEMD160 = __webpack_require__(111)
var sha = __webpack_require__(112)

var checkParameters = __webpack_require__(190)
var defaultEncoding = __webpack_require__(191)
var Buffer = __webpack_require__(4).Buffer
var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen)

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(19);
var inherits = __webpack_require__(2);

var utils = __webpack_require__(193);
var Cipher = __webpack_require__(113);

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(63)
var Buffer = __webpack_require__(4).Buffer
var incr32 = __webpack_require__(196)

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}


/***/ }),
/* 196 */
/***/ (function(module, exports) {

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32


/***/ }),
/* 197 */
/***/ (function(module) {

module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(82)
var Buffer = __webpack_require__(4).Buffer
var Transform = __webpack_require__(31)
var inherits = __webpack_require__(2)
var GHASH = __webpack_require__(378)
var xor = __webpack_require__(63)
var incr32 = __webpack_require__(196)

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(82)
var Buffer = __webpack_require__(4).Buffer
var Transform = __webpack_require__(31)
var inherits = __webpack_require__(2)

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(201)
var primes = __webpack_require__(383)

var DH = __webpack_require__(384)

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(34);
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(9);
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(203);
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}


/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(9);
var brorand = __webpack_require__(116);

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(84);
curve.short = __webpack_require__(388);
curve.mont = __webpack_require__(389);
curve.edwards = __webpack_require__(390);


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var common = __webpack_require__(64);
var shaCommon = __webpack_require__(206);
var assert = __webpack_require__(19);

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var common = __webpack_require__(64);
var assert = __webpack_require__(19);

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2);
var Reporter = __webpack_require__(66).Reporter;
var Buffer = __webpack_require__(0).Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(410);


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2);

var asn1 = __webpack_require__(65);
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2);
var Buffer = __webpack_require__(0).Buffer;

var asn1 = __webpack_require__(65);
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}


/***/ }),
/* 213 */
/***/ (function(module) {

module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var createHash = __webpack_require__(61)
var Buffer = __webpack_require__(4).Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}


/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var BN = __webpack_require__(9)
var Buffer = __webpack_require__(4).Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Result;
(function (Result) {
    Result[Result["Cancel"] = 0] = "Cancel";
    Result[Result["Success"] = 1] = "Success";
    Result[Result["Failure"] = 2] = "Failure";
    Result[Result["UserFailure"] = 3] = "UserFailure";
    Result[Result["IndeterminateFailure"] = 4] = "IndeterminateFailure";
    Result[Result["NonBlockingFailure"] = 5] = "NonBlockingFailure";
    Result[Result["ByDesignFailure"] = 6] = "ByDesignFailure";
})(Result = exports.Result || (exports.Result = {}));
//# sourceMappingURL=Result.js.map

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function setLogLocation(logFilePath) { }
exports.setLogLocation = setLogLocation;
function getLogLocation() {
    return undefined;
}
exports.getLogLocation = getLogLocation;
function createLogFileListener() {
    return Promise.resolve(undefined);
}
exports.createLogFileListener = createLogFileListener;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class for command decorators. Handles setting up decorator chaining (when multiple
 * decorators are applied to a command) and can optionally measuring timing of the decorator
 * invocation.
 */
class CommandDecoratorBase {
    /**
     * Initializes the command ecorator base.
     * @param enableProfiling `true` to enable measuring and tracing of the time taken
     * by the decorator (not including invocation of other decorators or the actual command).
     */
    constructor(enableProfiling = true) {
        this.enableProfiling = enableProfiling;
    }
    /**
     * Constructs the decorator function. The returned function can be applied to
     * a command class using the @ decorator syntax.
     */
    setup() {
        const decorator = this;
        const decoratorName = decorator.constructor.name.replace('CommandDecorator', '');
        if (!this.enableProfiling) {
            return function (original) {
                // Generate a new class that extends the original (decorated) command class and
                // overrides the invoke() method to call the decorator's decorate() method instead.
                // That method should then call back into the super (original) class's invoke().
                const decoratorClass = class extends original {
                    constructor(...args) {
                        super(...args);
                        if (decorator.decorate)
                            decorator.decorate(this);
                    }
                    invoke(options, context) {
                        const originalInvoke = super.invoke.bind(this);
                        return decorator.invoke(originalInvoke, options, context);
                    }
                };
                // Copy the name of the original class to the decorator-generated class.
                Object.defineProperty(decoratorClass, 'name', {
                    writable: false,
                    value: original.name,
                });
                return decoratorClass;
            };
        }
        else {
            return function (original) {
                // Equivalent to the above, with added time measurement and tracing.
                const decoratorClass = class extends original {
                    constructor(...args) {
                        super(...args);
                        if (decorator.decorate)
                            decorator.decorate(this);
                    }
                    invoke(options, context) {
                        const _super = Object.create(null, {
                            invoke: { get: () => super.invoke }
                        });
                        return __awaiter(this, void 0, void 0, function* () {
                            let preEnd;
                            let postStart;
                            context.trace.info(`Decorator starting: ${decoratorName}`);
                            const originalInvoke = _super.invoke.bind(this);
                            const innerInvoke = (innerOtions, innerContext) => __awaiter(this, void 0, void 0, function* () {
                                preEnd = Date.now();
                                try {
                                    return yield originalInvoke(innerOtions, innerContext);
                                }
                                finally {
                                    postStart = Date.now();
                                }
                            });
                            const preStart = Date.now();
                            try {
                                const outerResult = yield decorator.invoke(innerInvoke, options, context);
                                return outerResult;
                            }
                            finally {
                                const postEnd = Date.now();
                                const preTime = (preEnd || postEnd) - preStart;
                                const postTime = postEnd - (postStart || postEnd);
                                const totalTime = preTime + postTime;
                                context.trace.info(`Decorator finishing: ${decoratorName}. ` +
                                    `Duration: ${totalTime}ms (${preTime} + ${postTime})`);
                            }
                        });
                    }
                };
                Object.defineProperty(decoratorClass, 'name', {
                    writable: false,
                    value: original.name,
                });
                return decoratorClass;
            };
        }
    }
}
exports.CommandDecoratorBase = CommandDecoratorBase;
//# sourceMappingURL=CommandDecoratorBase.js.map

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper functions for working with VS Code Notifications/toasts.
 */
class NotificationUtilClass {
    static get Instance() {
        if (!NotificationUtilClass.singleton) {
            NotificationUtilClass.singleton = new NotificationUtilClass();
        }
        return NotificationUtilClass.singleton;
    }
    get notificationProgressLocation() {
        return __webpack_require__(1).ProgressLocation.Notification;
    }
    showInformationMessage(message, isVerbose, ...items) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!isVerbose) {
                return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showInformationMessage(message, ...items);
            }
        });
    }
    showErrorMessage(message, ...items) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showErrorMessage(message, ...items);
        });
    }
    showWarningMessage(message, options, ...items) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options)
                return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showWarningMessage(message, options, ...items);
            else
                return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showWarningMessage(message, ...items);
        });
    }
    showInputBox(options, token) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showInputBox(options, token);
        });
    }
    showQuickPick(items, options, token, initialValue, callbacks = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            // Adapt to the newer QuickPick API, which supports setting "active" (preselected) items.
            let adaptStrings = false;
            if (!Array.isArray(items)) {
                items = yield items;
            }
            else if (Array.isArray(items) && typeof items[0] === 'string') {
                adaptStrings = true;
                items = items.map((item) => ({ label: item }));
            }
            let result = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const quickPick = (yield Promise.resolve().then(() => __webpack_require__(1))).window.createQuickPick();
                quickPick.items = items;
                quickPick.activeItems = items.filter((item) => item.picked);
                quickPick.canSelectMany = (options === null || options === void 0 ? void 0 : options.canPickMany) || false;
                quickPick.placeholder = (options === null || options === void 0 ? void 0 : options.placeHolder) || '';
                quickPick.ignoreFocusOut = (options === null || options === void 0 ? void 0 : options.ignoreFocusOut) || false;
                quickPick.matchOnDetail = (options === null || options === void 0 ? void 0 : options.matchOnDetail) || false;
                quickPick.matchOnDescription = (options === null || options === void 0 ? void 0 : options.matchOnDescription) || false;
                quickPick.value = initialValue;
                if (callbacks.onDidChangeValue) {
                    quickPick.onDidChangeValue((value) => {
                        const overrides = callbacks.onDidChangeValue(value);
                        if (overrides.activeItems) {
                            quickPick.activeItems = overrides.activeItems;
                        }
                        if (overrides.selectedItems) {
                            quickPick.selectedItems = overrides.selectedItems;
                        }
                    });
                }
                quickPick.onDidAccept(() => __awaiter(this, void 0, void 0, function* () {
                    if (callbacks.onDidAccept) {
                        const shouldAccept = yield callbacks.onDidAccept(quickPick.selectedItems, quickPick.value);
                        if (shouldAccept === false) {
                            return;
                        }
                    }
                    quickPick.hide();
                    resolve(quickPick.canSelectMany ? quickPick.selectedItems : quickPick.selectedItems[0]);
                }));
                quickPick.onDidHide(() => {
                    if (callbacks.onDidHide) {
                        callbacks.onDidHide();
                    }
                    resolve(null);
                });
                quickPick.show();
            }));
            if (adaptStrings && result) {
                result = Array.isArray(result) ? result.map((item) => item.label) : result.label;
            }
            return result;
        });
    }
    withProgress(options, task, token) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: playing with the signatures here due to version difference
            return (yield Promise.resolve().then(() => __webpack_require__(1))).window.withProgress(options, task);
        });
    }
    showOpenDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showOpenDialog(options);
        });
    }
    createQuickPick(message, options, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionsAsPickItems = options.map((title) => ({
                label: title,
            }));
            return new Promise((accept, reject) => {
                const list = __webpack_require__(1).window.createQuickPick();
                list.placeholder = message;
                list.items = optionsAsPickItems;
                list.activeItems = list.items.filter((item) => {
                    return item.label === defaultValue;
                });
                list.onDidChangeValue((searchString) => {
                    list.items = searchString
                        ? [{ label: searchString }, ...optionsAsPickItems]
                        : optionsAsPickItems;
                });
                list.onDidAccept(() => {
                    list.hide();
                    accept(list.selectedItems[0].label);
                });
                list.show();
            });
        });
    }
    createQuickPickWithRefresh(loadingMessage, message, onUpdatedInput, acceptNonMatchingInput) {
        const quickPick = __webpack_require__(1).window.createQuickPick();
        const setItems = (items) => {
            quickPick.placeholder = message;
            quickPick.items = items;
            quickPick.busy = false;
        };
        const cancel = () => {
            quickPick.dispose();
        };
        return {
            setItems,
            cancel,
            valuePromise: new Promise((resolve) => {
                quickPick.placeholder = loadingMessage;
                quickPick.items = [];
                quickPick.ignoreFocusOut = true;
                quickPick.busy = true;
                let userInput = '';
                quickPick.onDidChangeValue((input) => {
                    userInput = input;
                    if (onUpdatedInput) {
                        quickPick.busy = true;
                        onUpdatedInput(input).then((updatedItems) => {
                            quickPick.items = updatedItems;
                            quickPick.busy = false;
                        });
                    }
                });
                quickPick.onDidAccept(() => __awaiter(this, void 0, void 0, function* () {
                    quickPick.enabled = false;
                    if (quickPick.selectedItems.length < 1) {
                        const submittedInput = userInput;
                        if (acceptNonMatchingInput &&
                            (yield acceptNonMatchingInput(submittedInput))) {
                            resolve(submittedInput);
                            quickPick.dispose();
                        }
                        else {
                            quickPick.enabled = true;
                            return;
                        }
                    }
                    else {
                        resolve(quickPick.selectedItems[0]);
                        quickPick.dispose();
                    }
                }));
                quickPick.show();
            }),
        };
    }
    showSaveDialog(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield Promise.resolve().then(() => __webpack_require__(1))).window.showSaveDialog(options);
        });
    }
}
exports.NotificationUtilClass = NotificationUtilClass;
// tslint:disable-next-line: variable-name
const NotificationUtil = NotificationUtilClass.Instance;
exports.NotificationUtil = NotificationUtil;
//# sourceMappingURL=NotificationUtil.js.map

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CommandError_1 = __webpack_require__(44);
const vso_telemetry_1 = __webpack_require__(11);
class ByDesignError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.ByDesignFailure });
    }
}
exports.ByDesignError = ByDesignError;
//# sourceMappingURL=ByDesignErrors.js.map

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CommandError_1 = __webpack_require__(44);
const vso_telemetry_1 = __webpack_require__(11);
class UserError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.UserFailure });
    }
}
exports.UserError = UserError;
//# sourceMappingURL=UserError.js.map

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CommandError_1 = __webpack_require__(44);
const vso_telemetry_1 = __webpack_require__(11);
class CancellationError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.Cancel });
    }
}
exports.CancellationError = CancellationError;
//# sourceMappingURL=CancellationError.js.map

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CommandError_1 = __webpack_require__(44);
const vso_telemetry_1 = __webpack_require__(11);
class NonBlockingError extends CommandError_1.CommandError {
    constructor(message, code) {
        super({ message, code, telemetryResult: vso_telemetry_1.TelemetryResult.NonBlockingFailure });
    }
}
exports.NonBlockingError = NonBlockingError;
//# sourceMappingURL=NonBlockingError.js.map

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(460);
var util = __webpack_require__(461);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(462);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
const dataScrapingManager_1 = __webpack_require__(124);
const VscodeActivityType_1 = __webpack_require__(240);
class VscodeActivityProvider extends vscs_utils_1.DisposableClass {
    constructor(trace) {
        super(trace.createChild('vscode-activity-provider'));
        // Workspace events
        this.addToDisposables(VscodeActivityProvider.vscode.workspace.onDidChangeTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.changeTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidOpenTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.openTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidCloseTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.closeTextDocument);
        }), VscodeActivityProvider.vscode.workspace.onDidSaveTextDocument((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.saveTextDocument);
        }), 
        // Debug events
        VscodeActivityProvider.vscode.debug.onDidStartDebugSession((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.startDebugSession);
        }), VscodeActivityProvider.vscode.debug.onDidTerminateDebugSession((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.terminateDebugSession);
        }), VscodeActivityProvider.vscode.debug.onDidChangeBreakpoints((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.changeBreakpoints);
        }), 
        // Task events
        VscodeActivityProvider.vscode.tasks.onDidStartTask((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.startTask);
        }), VscodeActivityProvider.vscode.tasks.onDidEndTask((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.endTask);
        }), VscodeActivityProvider.vscode.tasks.onDidStartTaskProcess((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.startTaskProcess);
        }), VscodeActivityProvider.vscode.tasks.onDidEndTaskProcess((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.endTaskProcess);
        }), 
        // Window events
        VscodeActivityProvider.vscode.window.onDidChangeActiveTextEditor((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.changeActiveTextEditor);
        }), VscodeActivityProvider.vscode.window.onDidOpenTerminal((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.openTerminal);
        }), VscodeActivityProvider.vscode.window.onDidCloseTerminal((e) => {
            this.onActivity(VscodeActivityType_1.VscodeActivityType.closeTerminal);
        }));
        // Terminal activity
        dataScrapingManager_1.dataScrapingManagerInstance
            .registerDataScraper('vscodeEventsRegistration', () => {
            /**
             * It is important that we don't just send self(`this`) as the
             * terminal because the whole monitor will be disposed when
             * the terminal data scraping worker is disposed.
             */
            return {
                init: this.onActivity.bind(this),
                processData: this.onActivity.bind(this),
                dispose() { },
            };
        })
            .then((disposable) => {
            this.addToDisposables(disposable);
        });
        // Notebook events (still in proposed API right now)
        // Cast to any to avoid compile errors until the minimum VS Code version
        // is updated to a version where the Notebooks events are guaranteed to exist
        const notebook = VscodeActivityProvider.vscode.notebook;
        if (notebook) {
            try {
                if (typeof notebook.onDidOpenNotebookDocument === 'function') {
                    this.addToDisposables(notebook.onDidOpenNotebookDocument(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.openNotebookDocument);
                    }));
                }
                if (typeof notebook.onDidCloseNotebookDocument === 'function') {
                    this.addToDisposables(notebook.onDidCloseNotebookDocument(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.closeNotebookDocument);
                    }));
                }
                if (typeof notebook.onDidSaveNotebookDocument === 'function') {
                    this.addToDisposables(notebook.onDidSaveNotebookDocument(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.saveNotebookDocument);
                    }));
                }
                if (typeof notebook.onDidChangeVisibleNotebookEditors === 'function') {
                    this.addToDisposables(notebook.onDidChangeVisibleNotebookEditors(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeVisibleNotebookEditors);
                    }));
                }
                if (typeof notebook.onDidChangeNotebookEditorSelection === 'function') {
                    this.addToDisposables(notebook.onDidChangeNotebookEditorSelection(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeNotebookEditorSelection);
                    }));
                }
                if (typeof notebook.onDidChangeNotebookCells === 'function') {
                    this.addToDisposables(notebook.onDidChangeNotebookCells(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeNotebookCells);
                    }));
                }
                if (typeof notebook.onDidChangeCellOutputs === 'function') {
                    this.addToDisposables(notebook.onDidChangeCellOutputs(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeCellOutputs);
                    }));
                }
                if (typeof notebook.onDidChangeActiveNotebookEditor === 'function') {
                    this.addToDisposables(notebook.onDidChangeActiveNotebookEditor(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeActiveNotebookEditor);
                    }));
                }
                if (typeof notebook.onDidChangeActiveNotebookKernel === 'function') {
                    this.addToDisposables(notebook.onDidChangeActiveNotebookKernel(() => {
                        this.onActivity(VscodeActivityType_1.VscodeActivityType.changeActiveNotebookKernel);
                    }));
                }
            }
            catch (err) {
                // Note: remove this later. Temporary allow debugging when proposed API is not possible.
                if (!(err instanceof Error && err.message.includes('Proposed API'))) {
                    throw err;
                }
            }
        }
        // languages events
        this.addToDisposables(VscodeActivityProvider.vscode.languages.registerHoverProvider('*', {
            provideHover: () => {
                this.onActivity(VscodeActivityType_1.VscodeActivityType.registerHoverProvider);
                return null;
            },
        }));
    }
    // Defer import of `vscode` package.
    static get vscode() {
        return __webpack_require__(1);
    }
}
exports.VscodeActivityProvider = VscodeActivityProvider;
//# sourceMappingURL=VscodeActivityProvider.js.map

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BaseError_1 = __webpack_require__(45);
/**
 * Error thrown when an assertion fails.
 */
class AssertionError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'AssertionError';
    }
}
exports.AssertionError = AssertionError;
;
//# sourceMappingURL=AssertionError.js.map

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = __webpack_require__(46);
const assert_1 = __webpack_require__(37);
const wait_1 = __webpack_require__(126);
/**
 * Function to throw either the `AggregateError`, or,
 * if the `isThrowLastError` is `true`, the last error
 * in the aggregate error list.
 */
const throwAggregateError = (error, isThrowLastError) => {
    if (isThrowLastError) {
        throw error.lastError;
    }
    throw error;
};
/**
 * Defaults.
 */
const WITH_RETRIES_DEFAULTS = {
    // 1 call + 2 retries = 3 calls total
    retries: 2,
    // no delay by default
    retryDelay: 0,
    // no-op `shouldStopRetries` callback
    shouldStopRetries: () => { return false; },
    // should throw the last error instead of `AggregateError`
    isAggregateError: true,
};
/**
 * Utility to run an asynchronous function with a number of retries.
 * Can be used as a polling helper if the `retryDelay` is specified.
 *
 * Throws `AggregateError` with all the thrown `errors` that we risen
 * during the retry attempts. The `last` property of the `AggregateError`
 * is the last throw error in the sequence.
 *
 * - Returns the return value of the last `fn` call. If the last `fn` call
 *   throws, the `AggregateError` is thrown.
 *
 * - Throw `CancellationError` inside the `fn` callback to cancel the retries.
 *
 * - If the `CancellationToken` is passed and cancellation is requested,
 *   the `AggregateError` is thrown, with the `CancellationError` error
 *   as the last in the list.
 *
 * - `shouldStopRetries`, optional callback meant for implementing an early bail-out
 *   from the retry loop. It receives an `error` from the last failed retry attempt
 *   and should return a `boolean` indicating if we should stop the retry loop.
 *   Helpful for the cases when the error thrown is known to be fatal, so doesn't
 *   make sense to continue the remaining retries.
 */
exports.withRetries = (fn, opts = {}, aggregateError = new errors_1.AggregateError()) => __awaiter(void 0, void 0, void 0, function* () {
    /**
     * Extend the options with defaults.
     */
    const options = Object.assign(Object.assign({}, WITH_RETRIES_DEFAULTS), opts);
    const { retries, retryDelay, shouldStopRetries, cancellationToken, isAggregateError, } = options;
    /**
     * Make sure a number of retries left. In theory should never
     * go in this case, unless wrong `retries` option was passed.
     *
     * Throwing the `AggregateError` with a single `AssertionError`
     * for consistency.
     */
    const assertionError = new errors_1.AssertionError('Retries should have at least zero retries.');
    /**
     * If `isAggregateError` option set, throw the error itself,
     * to be consistent with the logic inside the catch block.
     */
    assert_1.assert(retries > -1, (!isAggregateError)
        ? assertionError
        : aggregateError.cloneWithErrors(assertionError));
    try {
        /**
         * Check that the cancellation is not requested yet on the `CancellationToken`.
         */
        assert_1.assert(!(cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested), new errors_1.CancellationError('CancellationToken is cancelled.'));
        /**
         * Invoke the main procedure callback.
         */
        return yield fn(retries);
    }
    catch (e) {
        /**
         * If the invocation fails, add the error to the aggregate
         * error list.
         */
        aggregateError.addErrors(e);
        /**
         * Check if we should stop retrying premarturely.
         * Helpful in the cases hwen the error throw is indicative of a
         * fatal failure, hence does not make sence to retry anymore.
         *
         * The `shouldStopRetries` is awaited, to enable optional delays
         * in the callback, e.g. if the error is of known type, a delay
         * can be applied for that specific error kind.
         */
        const isStop = yield shouldStopRetries(e);
        if (isStop) {
            return throwAggregateError(aggregateError, !isAggregateError);
        }
        /**
         * If cancelled inside the callback, stop retrying.
         */
        if (e instanceof errors_1.CancellationError) {
            return throwAggregateError(aggregateError, !isAggregateError);
        }
        /**
         * Check that the cancellation is not requested yet on the `CancellationToken`.
         */
        const cancellationError = new errors_1.CancellationError('CancellationToken is cancelled after retry.');
        assert_1.assert(!(cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested), 
        /**
         * Throw either `AggregateError` with the `CancellationError` at the end,
         * or the `CancellationError` itself (if the `isAggregateError` is set).
         */
        (!isAggregateError)
            ? cancellationError
            : aggregateError.cloneWithErrors(cancellationError));
        /**
         * If retries left, call the same function recursively.
         */
        if (retries > 0) {
            /**
             * Wait for `retryDelay`ms before making another retry.
             */
            yield wait_1.wait(retryDelay);
            /**
             * Retry, decrementing the retries count.
             */
            return yield exports.withRetries(fn, Object.assign(Object.assign({}, options), { retries: retries - 1 }), aggregateError);
        }
        /**
         * No retries, throw the result error.
         * - by default, throw the  aggregate error that contains
         *   the list of all errors thrown during the retries.
         * - if `isAggregateError` set to `false`, throw the last
         *  error in the list.
         */
        return throwAggregateError(aggregateError, !isAggregateError);
    }
});
//# sourceMappingURL=withRetries.js.map

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BaseError_1 = __webpack_require__(45);
/**
 * The promise race error is thrown when all promises have thrown.
 * In this case the error will be derrived from the last thrown
 * error and `errorList` will contain entire error list.
 */
class PromiseRaceError extends BaseError_1.BaseError {
    constructor(errorList, error, errorCode) {
        super(error, errorCode);
        this.errorList = errorList;
        this.errorType = 'PromiseRaceError';
    }
}
exports.PromiseRaceError = PromiseRaceError;
;
//# sourceMappingURL=PromiseRaceError.js.map

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var assertInstance_1 = __webpack_require__(477);
exports.assertInstance = assertInstance_1.assertInstance;
var assertDefined_1 = __webpack_require__(89);
exports.assertDefined = assertDefined_1.assertDefined;
var assertNever_1 = __webpack_require__(478);
exports.assertNever = assertNever_1.assertNever;
var assert_1 = __webpack_require__(37);
exports.assert = assert_1.assert;
//# sourceMappingURL=index.js.map

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function createDisposable(callback, logger) {
    return {
        dispose: (reason) => {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`Disposing reason:${reason}`);
            return callback(reason);
        }
    };
}
exports.createDisposable = createDisposable;
function createDisposablesAll(logger, ...disposables) {
    return {
        dispose: (reason) => {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`createDisposablesAll->dispose reason:${reason}`);
            return Promise.all(disposables.map(d => d.dispose(reason)));
        }
    };
}
exports.createDisposablesAll = createDisposablesAll;
function createDisposablesSeries(logger, ...disposables) {
    return {
        dispose: (reason) => __awaiter(this, void 0, void 0, function* () {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`createDisposablesSeries->dispose reason:${reason}`);
            for (let d of disposables) {
                try {
                    yield d.dispose(reason);
                }
                catch (err) {
                    logger === null || logger === void 0 ? void 0 : logger.error(`Failed to dispose`, err);
                }
            }
        })
    };
}
exports.createDisposablesSeries = createDisposablesSeries;
//# sourceMappingURL=dispose.js.map

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const CancellationError_1 = __webpack_require__(125);
const errors_1 = __webpack_require__(46);
const getRejectionError = (timeout, error) => {
    if (error === undefined) {
        return new errors_1.TimeoutCancellationError(`Promise rejected after ${timeout}ms`);
    }
    if (typeof error === 'string') {
        return new errors_1.TimeoutCancellationError(error);
    }
    if (error instanceof Error) {
        return error;
    }
};
exports.timeoutPromise = (promise, timeout, error, promiseCancellationSource) => __awaiter(void 0, void 0, void 0, function* () {
    let timeoutReference;
    let ctsDisposable;
    const dispose = () => {
        ctsDisposable === null || ctsDisposable === void 0 ? void 0 : ctsDisposable.dispose();
        clearTimeout(timeoutReference);
    };
    const result = yield Promise.race([
        /**
         * Original promise.
         */
        // promise,
        promise.finally(() => {
            dispose();
        }),
        /**
         * Timeout promise.
         */
        new Promise((_, reject) => {
            ctsDisposable = promiseCancellationSource === null || promiseCancellationSource === void 0 ? void 0 : promiseCancellationSource.token.onCancellationRequested(() => {
                dispose();
                reject(new CancellationError_1.CancellationError());
            });
            timeoutReference = setTimeout(() => {
                dispose();
                reject(getRejectionError(timeout, error));
            }, timeout);
        }),
    ]);
    return result;
});
//# sourceMappingURL=timeoutPromise.js.map

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Wrap some code to create a disposable.
 */
exports.createDisposable = (dispose) => {
    return {
        dispose,
    };
};
//# sourceMappingURL=createDisposable.js.map

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate a hash from a string.
 */
exports.hashString = (str) => {
    return str
        .split('')
        .reduce((a, b) => {
        a = (((a << 5) - a) + b).charCodeAt(0);
        return a & a;
    }, 0)
        .toString();
};
//# sourceMappingURL=hashString.js.map

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// regex to target filesystem paths, like /Users/olegsolomka/repos/Cascade/vscode/codespaces
const PATH_REGEX = /([A-Za-z]:)?(\S*[\\\/])+\S*/gim;
// regex to target emails, like legomushroom@gmail.com
const EMAIL_REGEX = /[\S]+@[\S]+/gim;
// regex to target codespace name URLs, like https://legomushroom-codespaces-contrib-tunnel-tun-w9wpr963969x.github.dev/
const CODESPACE_NAME_REGEX = /(https?:\/\/)?([\w|-]+)\.github\.dev((\S*[\\\/])+\S*)?/gim; // (https?://)?(www.)?(codespace-name).github.dev/path/component/
// file system paths replaced with this label
exports.PATH_PII_LABEL = '[PATH]/';
// all emails replaced with this label
exports.EMAIL_PII_LABEL = '[EMAIL]';
// all codespace names replaced with this label
exports.CODESPACE_URL_PII_LABEL = '[CODESPACE_URL]';
/**
 * Function to replace all codespace names with [CODESPACE_URL] label.
 */
exports.obfusticateCodespaceNames = (str, replacementString = exports.CODESPACE_URL_PII_LABEL) => {
    return str.replace(CODESPACE_NAME_REGEX, replacementString);
};
/**
 * Function to replace all paths with [PATH] label.
 */
exports.obfusticatePaths = (str, replacementString = exports.PATH_PII_LABEL) => {
    return str.replace(PATH_REGEX, (match, drive, directory, offset, whole) => {
        if (/^\d{1,4}\/\d{1,2}\/\d{1,4}$/.test(match)) { // This is a date. No need to scrub.
            return match;
        }
        else {
            const driveAndDirectoryLength = (drive ? drive.length : 0) + directory.length;
            const fileName = match.substr(driveAndDirectoryLength);
            return replacementString + fileName;
        }
    });
};
/**
 *  Function to replace all emails with `[EMAIL]` label.
 */
exports.obfusticateEmailAddresses = (str, replacementString = exports.EMAIL_PII_LABEL) => {
    return str.replace(EMAIL_REGEX, replacementString);
};
/**
 *  Function to remove PII from a string.
 */
exports.cleanupPII = (str) => {
    if (!str) {
        return str;
    }
    return exports.obfusticateEmailAddresses(exports.obfusticatePaths(exports.obfusticateCodespaceNames(str)));
};
/**
 * Function to remove PII data from the object values.
 */
exports.cleanupObjectValuesPII = (obj) => {
    for (let [key, value] of Object.entries(obj)) {
        // cleanup strings
        if (typeof value === 'string') {
            obj[key] = exports.cleanupPII(value);
        }
    }
    return obj;
};
//# sourceMappingURL=cleanupPII.js.map

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const randombytes_1 = __importDefault(__webpack_require__(34));
/**
 * Safe random bytes utility, depends on crypto API which
 * should be polyfilled for NodeJS.
 */
exports.randomBytes = (length) => {
    return randombytes_1.default(length);
};
//# sourceMappingURL=randomBytes.js.map

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const cleanupPII_1 = __webpack_require__(237);
/**
 * Create a plain object that represents an error.
 * Can be used to send the error to telemetry or
 * log it to the console.
 */
// TODO legomushroom - test this
exports.errorToObject = (error, isInternal = true) => {
    const vscsError = error;
    const { errorCode = -1, errorType = 'GenericError', message = '<no message>', originalErrorType = '<no original type>', } = vscsError;
    const stack = (isInternal)
        ? vscsError.stack
        : cleanupPII_1.cleanupPII(vscsError.stack);
    return {
        errorMessage: message,
        originalErrorType,
        errorCode,
        errorType,
        stack,
    };
};
//# sourceMappingURL=errorToObject.js.map

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VscodeActivityType;
(function (VscodeActivityType) {
    VscodeActivityType[VscodeActivityType["changeTextDocument"] = 0] = "changeTextDocument";
    VscodeActivityType[VscodeActivityType["openTextDocument"] = 1] = "openTextDocument";
    VscodeActivityType[VscodeActivityType["closeTextDocument"] = 2] = "closeTextDocument";
    VscodeActivityType[VscodeActivityType["saveTextDocument"] = 3] = "saveTextDocument";
    VscodeActivityType[VscodeActivityType["startDebugSession"] = 4] = "startDebugSession";
    VscodeActivityType[VscodeActivityType["terminateDebugSession"] = 5] = "terminateDebugSession";
    VscodeActivityType[VscodeActivityType["changeBreakpoints"] = 6] = "changeBreakpoints";
    VscodeActivityType[VscodeActivityType["startTask"] = 7] = "startTask";
    VscodeActivityType[VscodeActivityType["endTask"] = 8] = "endTask";
    VscodeActivityType[VscodeActivityType["startTaskProcess"] = 9] = "startTaskProcess";
    VscodeActivityType[VscodeActivityType["endTaskProcess"] = 10] = "endTaskProcess";
    VscodeActivityType[VscodeActivityType["changeActiveTextEditor"] = 11] = "changeActiveTextEditor";
    VscodeActivityType[VscodeActivityType["openTerminal"] = 12] = "openTerminal";
    VscodeActivityType[VscodeActivityType["closeTerminal"] = 13] = "closeTerminal";
    VscodeActivityType[VscodeActivityType["openNotebookDocument"] = 14] = "openNotebookDocument";
    VscodeActivityType[VscodeActivityType["closeNotebookDocument"] = 15] = "closeNotebookDocument";
    VscodeActivityType[VscodeActivityType["saveNotebookDocument"] = 16] = "saveNotebookDocument";
    VscodeActivityType[VscodeActivityType["changeVisibleNotebookEditors"] = 17] = "changeVisibleNotebookEditors";
    VscodeActivityType[VscodeActivityType["changeNotebookEditorSelection"] = 18] = "changeNotebookEditorSelection";
    VscodeActivityType[VscodeActivityType["changeNotebookCells"] = 19] = "changeNotebookCells";
    VscodeActivityType[VscodeActivityType["changeCellOutputs"] = 20] = "changeCellOutputs";
    VscodeActivityType[VscodeActivityType["changeActiveNotebookEditor"] = 21] = "changeActiveNotebookEditor";
    VscodeActivityType[VscodeActivityType["changeActiveNotebookKernel"] = 22] = "changeActiveNotebookKernel";
    VscodeActivityType[VscodeActivityType["registerHoverProvider"] = 23] = "registerHoverProvider";
    VscodeActivityType[VscodeActivityType["initialActivitySignal"] = 24] = "initialActivitySignal";
    VscodeActivityType[VscodeActivityType["typeInTerminal"] = 25] = "typeInTerminal";
    VscodeActivityType[VscodeActivityType["clickedDialog"] = 26] = "clickedDialog";
})(VscodeActivityType = exports.VscodeActivityType || (exports.VscodeActivityType = {}));
//# sourceMappingURL=VscodeActivityType.js.map

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var VscodeSessionStatus;
(function (VscodeSessionStatus) {
    VscodeSessionStatus[VscodeSessionStatus["Active"] = 0] = "Active";
    VscodeSessionStatus[VscodeSessionStatus["Idle"] = 1] = "Idle";
})(VscodeSessionStatus = exports.VscodeSessionStatus || (exports.VscodeSessionStatus = {}));
//# sourceMappingURL=VscodeSessionStatus.js.map

/***/ }),
/* 242 */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"@vs/vs-ssh\",\"version\":\"3.4.17\",\"description\":\"SSH library for Visual Studio tools\",\"keywords\":[\"SSH\"],\"dependencies\":{\"buffer\":\"^5.2.1\",\"debug\":\"^4.1.1\",\"diffie-hellman\":\"^5.0.3\",\"vscode-jsonrpc\":\"^4.0.0\"},\"author\":\"Microsoft\",\"main\":\"./index.js\"}");

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeECDiffieHellman = exports.NodeDiffieHellman = void 0;
const crypto = __webpack_require__(10);
const buffer_1 = __webpack_require__(0);
const keyExchangeAlgorithm_1 = __webpack_require__(131);
const nodeHmac_1 = __webpack_require__(136);
const bigInt_1 = __webpack_require__(28);
class NodeDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, nodeHmac_1.NodeHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new NodeDiffieHellmanKex(this.keySizeInBits, nodeHmac_1.NodeHmac.getNodeHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.NodeDiffieHellman = NodeDiffieHellman;
class NodeDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        switch (bitLength) {
            case 1024:
                this.dh = crypto.getDiffieHellman('modp2');
                break;
            case 2048:
                this.dh = crypto.getDiffieHellman('modp14');
                break;
            case 4096:
                this.dh = crypto.getDiffieHellman('modp16');
                break;
            default:
                throw new Error('Invalid DH bit length.');
        }
    }
    startKeyExchange() {
        const exchangeValueKeys = this.dh.generateKeys();
        const exchangeValue = bigInt_1.BigInt.fromBytes(exchangeValueKeys, { unsigned: true }).toBytes();
        return Promise.resolve(exchangeValue);
    }
    decryptKeyExchange(exchangeValue) {
        const key = this.dh.computeSecret(exchangeValue);
        const sharedSecret = bigInt_1.BigInt.fromBytes(key, { unsigned: true }).toBytes();
        return Promise.resolve(sharedSecret);
    }
    async sign(data) {
        const hash = crypto.createHash(this.hashAlgorithmName);
        hash.update(data);
        return buffer_1.Buffer.from(hash.digest());
    }
    dispose() { }
}
class NodeECDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, nodeHmac_1.NodeHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new NodeECDiffieHellmanKex(this.keySizeInBits, nodeHmac_1.NodeHmac.getNodeHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.NodeECDiffieHellman = NodeECDiffieHellman;
class NodeECDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        switch (bitLength) {
            case 256:
                this.ecdh = crypto.createECDH('prime256v1');
                break;
            case 384:
                this.ecdh = crypto.createECDH('secp384r1');
                break;
            case 521:
                this.ecdh = crypto.createECDH('secp521r1');
                break;
            default:
                throw new Error('Invalid ECDH bit length.');
        }
    }
    startKeyExchange() {
        const exchangeValue = this.ecdh.generateKeys();
        return Promise.resolve(exchangeValue);
    }
    decryptKeyExchange(exchangeValue) {
        const sharedSecretBytes = this.ecdh.computeSecret(exchangeValue);
        const sharedSecret = bigInt_1.BigInt.fromBytes(sharedSecretBytes, { unsigned: true }).toBytes();
        return Promise.resolve(sharedSecret);
    }
    async sign(data) {
        const hash = crypto.createHash(this.hashAlgorithmName);
        hash.update(data);
        return buffer_1.Buffer.from(hash.digest());
    }
    dispose() { }
}
//# sourceMappingURL=nodeKeyExchange.js.map

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sec1KeyFormatter = exports.Pkcs1KeyFormatter = exports.parsePem = exports.formatPem = void 0;
const bigInt_1 = __webpack_require__(28);
const derData_1 = __webpack_require__(137);
const ecdsaCurves_1 = __webpack_require__(91);
function formatPem(keyBytes, name) {
    const key = `-----BEGIN ${name}-----\n` +
        keyBytes
            .toString('base64')
            .match(/.{1,64}/g)
            .join('\n') +
        '\n' +
        `-----END ${name}-----\n`;
    return key;
}
exports.formatPem = formatPem;
function parsePem(key) {
    const keyBase64 = key.replace(/-+[^-\n]+KEY-+/g, '').replace(/\s/g, '');
    const keyBytes = Buffer.from(keyBase64, 'base64');
    return keyBytes;
}
exports.parsePem = parsePem;
/**
 * Provides *minimal* PKCS#1 import/export support for Node.js keys.
 *
 * This code is redundant with some of the PKCS#1 import/export code in the separate
 * `ssh-keys` library; that is intentional, and necessary to support a consistent
 * interface for importing/exporting key parameters in the core `ssh` library.
 */
class Pkcs1KeyFormatter {
    static formatRsaPublic(rsa) {
        const writer = new derData_1.DerWriter(Buffer.alloc(1024));
        writer.writeInteger(rsa.modulus);
        writer.writeInteger(rsa.exponent);
        return writer.toBuffer();
    }
    static formatRsaPrivate(rsa) {
        if (!(rsa.d && rsa.p && rsa.q && rsa.dp && rsa.dq && rsa.qi)) {
            throw new Error('Missing private key parameters.');
        }
        const writer = new derData_1.DerWriter(Buffer.alloc(2048));
        writer.writeInteger(bigInt_1.BigInt.fromInt32(0));
        writer.writeInteger(rsa.modulus);
        writer.writeInteger(rsa.exponent);
        writer.writeInteger(rsa.d);
        writer.writeInteger(rsa.p);
        writer.writeInteger(rsa.q);
        writer.writeInteger(rsa.dp);
        writer.writeInteger(rsa.dq);
        writer.writeInteger(rsa.qi);
        return writer.toBuffer();
    }
    static parseRsaPublic(keyBytes) {
        const reader = new derData_1.DerReader(keyBytes);
        const modulus = reader.readInteger();
        const exponent = reader.readInteger();
        return { modulus, exponent };
    }
    static parseRsaPrivate(keyBytes) {
        const reader = new derData_1.DerReader(keyBytes);
        const version = reader.readInteger();
        const modulus = reader.readInteger();
        const exponent = reader.readInteger();
        const d = reader.readInteger();
        const p = reader.readInteger();
        const q = reader.readInteger();
        const dp = reader.readInteger();
        const dq = reader.readInteger();
        const qi = reader.readInteger();
        return { modulus, exponent, d, p, q, dp, dq, qi };
    }
}
exports.Pkcs1KeyFormatter = Pkcs1KeyFormatter;
/**
 * Provides *minimal* SEC1 import/export support for Node.js keys.
 *
 * This code is redundant with some of the SEC1 import/export code in the separate
 * `ssh-keys` library; that is intentional, and necessary to support a consistent
 * interface for importing/exporting key parameters in the core `ssh` library.
 */
class Sec1KeyFormatter {
    static formatECPublic(ec) {
        const curve = ecdsaCurves_1.curves.find((c) => c.oid === ec.curve.oid);
        const keySizeInBytes = Math.ceil(curve.keySize / 8);
        const writer = new derData_1.DerWriter(Buffer.alloc(512));
        const oidsWriter = new derData_1.DerWriter(Buffer.alloc(100));
        oidsWriter.writeObjectIdentifier(Sec1KeyFormatter.ecPublicKeyOid);
        oidsWriter.writeObjectIdentifier(ec.curve.oid);
        writer.writeSequence(oidsWriter);
        const x = ec.x.toBytes({ unsigned: true, length: keySizeInBytes });
        const y = ec.y.toBytes({ unsigned: true, length: keySizeInBytes });
        const publicKeyData = Buffer.alloc(1 + x.length + y.length);
        publicKeyData[0] = 4; // Indicates uncompressed curve format
        x.copy(publicKeyData, 1);
        y.copy(publicKeyData, 1 + x.length);
        writer.writeBitString(publicKeyData);
        return writer.toBuffer();
    }
    static formatECPrivate(ec) {
        const curve = ecdsaCurves_1.curves.find((c) => c.oid === ec.curve.oid);
        const keySizeInBytes = Math.ceil(curve.keySize / 8);
        const writer = new derData_1.DerWriter(Buffer.alloc(512));
        writer.writeInteger(bigInt_1.BigInt.fromInt32(1)); // version
        writer.writeOctetString(ec.d.toBytes({ unsigned: true, length: keySizeInBytes }));
        const curveWriter = new derData_1.DerWriter(Buffer.alloc(100));
        curveWriter.writeObjectIdentifier(ec.curve.oid);
        writer.writeTagged(0, curveWriter);
        const x = ec.x.toBytes({ unsigned: true, length: keySizeInBytes });
        const y = ec.y.toBytes({ unsigned: true, length: keySizeInBytes });
        const publicKeyData = Buffer.alloc(1 + x.length + y.length);
        publicKeyData[0] = 4; // Indicates uncompressed curve format
        x.copy(publicKeyData, 1);
        y.copy(publicKeyData, 1 + x.length);
        const keyWriter = new derData_1.DerWriter(Buffer.alloc(512));
        keyWriter.writeBitString(publicKeyData);
        writer.writeTagged(1, keyWriter);
        return writer.toBuffer();
    }
    static parseECPublic(keyBytes) {
        var _a;
        const reader = new derData_1.DerReader(keyBytes);
        const oidsReader = reader.readSequence();
        const keyTypeOid = oidsReader.readObjectIdentifier();
        if (keyTypeOid !== Sec1KeyFormatter.ecPublicKeyOid) {
            throw new Error(`Unexpected key type OID: ${keyTypeOid}`);
        }
        const curveOid = oidsReader.readObjectIdentifier();
        const curveName = (_a = ecdsaCurves_1.curves.find((c) => c.oid === curveOid)) === null || _a === void 0 ? void 0 : _a.name;
        const xy = reader.readBitString();
        if (xy.length % 2 !== 1) {
            throw new Error(`Unexpected key data length: ${xy.length}`);
        }
        const x = bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true });
        const ec = {
            curve: { name: curveName, oid: curveOid },
            x,
            y,
        };
        return ec;
    }
    static parseECPrivate(keyBytes) {
        var _a;
        const reader = new derData_1.DerReader(keyBytes);
        const version = reader.readInteger().toInt32();
        if (version !== 1) {
            throw new Error(`Unsupported SEC1 format version: ${version}`);
        }
        const d = bigInt_1.BigInt.fromBytes(reader.readOctetString(), { unsigned: true });
        const curveReader = reader.tryReadTagged(0);
        if (!curveReader) {
            throw new Error('SEC1 curve info not found.');
        }
        const curveOid = curveReader.readObjectIdentifier();
        const curveName = (_a = ecdsaCurves_1.curves.find((c) => c.oid === curveOid)) === null || _a === void 0 ? void 0 : _a.name;
        const publicKeyReader = reader.tryReadTagged(1);
        if (!publicKeyReader) {
            throw new Error('SEC1 public key data not found.');
        }
        const xy = publicKeyReader.readBitString();
        if (xy.length % 2 !== 1) {
            throw new Error(`Unexpected key data length: ${xy.length}`);
        }
        const x = bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true });
        const ec = {
            curve: { name: curveName, oid: curveOid },
            x,
            y,
            d,
        };
        return ec;
    }
}
exports.Sec1KeyFormatter = Sec1KeyFormatter;
Sec1KeyFormatter.ecPublicKeyOid = '1.2.840.10045.2.1';
//# sourceMappingURL=keyFormatters.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

var BigInteger = __webpack_require__(70);
var schemes = __webpack_require__(48);

module.exports = function (keyPair, options) {
    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);

    return {
        encrypt: function (buffer, usePrivate) {
            var m, c;
            if (usePrivate) {
                /* Type 1: zeros padding for private key encrypt */
                m = new BigInteger(pkcs1Scheme.encPad(buffer, {type: 1}));
                c = keyPair.$doPrivate(m);
            } else {
                m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));
                c = keyPair.$doPublic(m);
            }
            return c.toBuffer(keyPair.encryptedDataLength);
        },

        decrypt: function (buffer, usePublic) {
            var m, c = new BigInteger(buffer);

            if (usePublic) {
                m = keyPair.$doPublic(c);
                /* Type 1: zeros padding for private key decrypt */
                return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), {type: 1});
            } else {
                m = keyPair.$doPrivate(c);
                return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));
            }
        }
    };
};

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* eslint-disable node/no-deprecated-api */



var buffer = __webpack_require__(0)
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var KeyExchangeService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyExchangeService = void 0;
const trace_1 = __webpack_require__(24);
const buffer_1 = __webpack_require__(0);
const sshSession_1 = __webpack_require__(71);
const sshService_1 = __webpack_require__(94);
const bigInt_1 = __webpack_require__(28);
const kexMessages_1 = __webpack_require__(143);
const sshAlgorithms_1 = __webpack_require__(47);
const sshData_1 = __webpack_require__(16);
const errors_1 = __webpack_require__(25);
const transportMessages_1 = __webpack_require__(29);
const sshSessionAlgorithms_1 = __webpack_require__(538);
const vscode_jsonrpc_1 = __webpack_require__(6);
const serviceActivation_1 = __webpack_require__(49);
class ExchangeContext {
}
const serverExtensionInfoSignal = 'ext-info-s';
const clientExtensionInfoSignal = 'ext-info-c';
let KeyExchangeService = KeyExchangeService_1 = class KeyExchangeService extends sshService_1.SshService {
    constructor(session, isClientSession) {
        super(session);
        this.isClientSession = isClientSession;
        this.isInitialExchange = false;
        this.exchangeContext = null;
    }
    get exchanging() {
        return !!this.exchangeContext;
    }
    async startKeyExchange(isInitialExchange) {
        this.isInitialExchange = isInitialExchange;
        this.exchangeContext = new ExchangeContext();
        const kexInitMessage = this.createKeyExchangeInitMessage();
        let kexGuessMessage = null;
        if (this.isClientSession) {
            if (isInitialExchange && this.session.config.enableKeyExchangeGuess) {
                kexGuessMessage = await this.createKeyExchangeGuessMessage();
                kexInitMessage.firstKexPacketFollows = !!kexGuessMessage;
            }
            this.exchangeContext.clientKexInitPayload = kexInitMessage.toBuffer();
        }
        else {
            this.exchangeContext.serverKexInitPayload = kexInitMessage.toBuffer();
        }
        return [kexInitMessage, kexGuessMessage];
    }
    finishKeyExchange() {
        const newAlgorithms = this.exchangeContext.newAlgorithms;
        this.exchangeContext = null;
        return newAlgorithms;
    }
    abortKeyExchange() {
        this.exchangeContext = null;
    }
    createKeyExchangeInitMessage() {
        // Reference RFC 8308: Signaling of Extension Negotiation in Key Exchange.
        const extinfo = this.isClientSession ? clientExtensionInfoSignal : serverExtensionInfoSignal;
        const config = this.session.config;
        const message = new kexMessages_1.KeyExchangeInitMessage();
        message.keyExchangeAlgorithms = (0, sshAlgorithms_1.algorithmNames)(config.keyExchangeAlgorithms).concat(extinfo);
        message.serverHostKeyAlgorithms = this.getPublicKeyAlgorithms();
        message.encryptionAlgorithmsClientToServer = message.encryptionAlgorithmsServerToClient = (0, sshAlgorithms_1.algorithmNames)(config.encryptionAlgorithms);
        message.macAlgorithmsClientToServer = message.macAlgorithmsServerToClient = (0, sshAlgorithms_1.algorithmNames)(config.hmacAlgorithms);
        message.compressionAlgorithmsClientToServer = message.compressionAlgorithmsServerToClient = (0, sshAlgorithms_1.algorithmNames)(config.compressionAlgorithms);
        message.languagesClientToServer = [''];
        message.languagesServerToClient = [''];
        message.firstKexPacketFollows = false;
        message.reserved = 0;
        return message;
    }
    /**
     * Gets the list of public key algorithms that the current session can support.
     * For a server session the list is filtered based on the available private keys.
     */
    getPublicKeyAlgorithms() {
        var _a, _b;
        let publicKeyAlgorithms = [...this.session.config.publicKeyAlgorithms];
        if (publicKeyAlgorithms.length > 1 && !this.isClientSession) {
            const privateKeyAlgorithms = (_b = (_a = this.session.credentials) === null || _a === void 0 ? void 0 : _a.publicKeys) === null || _b === void 0 ? void 0 : _b.map((k) => k.keyAlgorithmName);
            if (privateKeyAlgorithms) {
                publicKeyAlgorithms = publicKeyAlgorithms.filter((a) => a && privateKeyAlgorithms.includes(a.keyAlgorithmName));
            }
        }
        const publicKeyAlgorithmNames = (0, sshAlgorithms_1.algorithmNames)(publicKeyAlgorithms);
        return publicKeyAlgorithmNames;
    }
    async createKeyExchangeGuessMessage() {
        if (!this.exchangeContext) {
            throw new Error('Key exchange was not started.');
        }
        // Select the first key exchange algorithm as the "guess". (They are in preferential order.)
        const kexAlgorithm = this.session.config.keyExchangeAlgorithms[0];
        if (!kexAlgorithm) {
            return null;
        }
        this.exchangeContext.keyExchange = kexAlgorithm.name;
        this.exchangeContext.exchange = kexAlgorithm.createKeyExchange();
        this.exchangeContext.exchangeValue = await this.exchangeContext.exchange.startKeyExchange();
        const guess = new kexMessages_1.KeyExchangeDhInitMessage();
        guess.e = this.exchangeContext.exchangeValue;
        return guess;
    }
    handleMessage(message, cancellation) {
        if (message instanceof kexMessages_1.KeyExchangeInitMessage) {
            return this.handleInitMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.KeyExchangeDhInitMessage) {
            return this.handleDhInitMessage(message, cancellation);
        }
        else if (message instanceof kexMessages_1.KeyExchangeDhReplyMessage) {
            return this.handleDhReplyMessage(message, cancellation);
        }
        else {
            throw new Error(`Message not implemented: ${message}`);
        }
    }
    async handleInitMessage(message, cancellation) {
        var _a, _b, _c, _d, _e;
        if (!this.exchangeContext) {
            throw new Error('Key exchange was not started.');
        }
        const config = this.session.config;
        this.exchangeContext.keyExchange = this.chooseAlgorithm('KeyExchange', (0, sshAlgorithms_1.algorithmNames)(config.keyExchangeAlgorithms), message.keyExchangeAlgorithms);
        if (this.exchangeContext.keyExchange === 'none') {
            (0, trace_1.trace)('Client and server negotiated no security. Cancelling key-exchange.');
            this.exchangeContext.newAlgorithms = new sshSessionAlgorithms_1.SshSessionAlgorithms();
            await this.session.handleNewKeysMessage(new kexMessages_1.NewKeysMessage(), cancellation);
            return;
        }
        this.exchangeContext.publicKey = this.chooseAlgorithm('PublicKey', this.getPublicKeyAlgorithms(), message.serverHostKeyAlgorithms);
        this.exchangeContext.clientEncryption = this.chooseAlgorithm('ClientEncryption', (0, sshAlgorithms_1.algorithmNames)(config.encryptionAlgorithms), message.encryptionAlgorithmsClientToServer);
        this.exchangeContext.serverEncryption = this.chooseAlgorithm('ServerEncryption', (0, sshAlgorithms_1.algorithmNames)(config.encryptionAlgorithms), message.encryptionAlgorithmsServerToClient);
        this.exchangeContext.clientHmac = this.chooseAlgorithm('ClientHmac', (0, sshAlgorithms_1.algorithmNames)(config.hmacAlgorithms), message.macAlgorithmsClientToServer);
        this.exchangeContext.serverHmac = this.chooseAlgorithm('ServerHmac', (0, sshAlgorithms_1.algorithmNames)(config.hmacAlgorithms), message.macAlgorithmsServerToClient);
        this.exchangeContext.clientCompression = this.chooseAlgorithm('ClientCompression', (0, sshAlgorithms_1.algorithmNames)(config.compressionAlgorithms), message.compressionAlgorithmsClientToServer);
        this.exchangeContext.serverCompression = this.chooseAlgorithm('ServerCompression', (0, sshAlgorithms_1.algorithmNames)(config.compressionAlgorithms), message.compressionAlgorithmsServerToClient);
        let extensionInfoSignal;
        if (this.isClientSession) {
            this.exchangeContext.serverKexInitPayload = message.toBuffer();
            // If the exchange value is already initialized then this side sent a guess.
            const alreadySentGuess = !!this.exchangeContext.exchangeValue;
            // Check if the negotiated algorithm is the one preferred by THIS side.
            // This means if there was a "guess" at kex initialization then it was correct.
            const negotiatedKexAlgorthmIsPreferred = this.exchangeContext.keyExchange === ((_a = config.keyExchangeAlgorithms[0]) === null || _a === void 0 ? void 0 : _a.name);
            // If a guess was not sent, or the guess was wrong, send the init message now.
            if (!alreadySentGuess || !negotiatedKexAlgorthmIsPreferred) {
                const kexAlgorithm = config.getKeyExchangeAlgorithm(this.exchangeContext.keyExchange);
                this.exchangeContext.exchange = kexAlgorithm.createKeyExchange();
                this.exchangeContext.exchangeValue = await this.exchangeContext.exchange.startKeyExchange();
                const reply = new kexMessages_1.KeyExchangeDhInitMessage();
                reply.e = this.exchangeContext.exchangeValue;
                await this.session.sendMessage(reply, cancellation);
            }
            extensionInfoSignal = serverExtensionInfoSignal;
        }
        else {
            if (message.firstKexPacketFollows) {
                // The remote side indicated it is sending a guess immediately following.
                // Check if the negotiated algorithm is the one preferred by the OTHER side.
                // If so, the following "guess" will be correct. Otherwise it must be ignored.
                const negotiatedKexAlgorthmIsPreferred = this.exchangeContext.keyExchange === ((_b = message.keyExchangeAlgorithms) === null || _b === void 0 ? void 0 : _b[0]);
                const guessResult = negotiatedKexAlgorthmIsPreferred ? 'correct' : 'incorrect';
                (0, trace_1.trace)(`Client's KeyExchange guess was ${guessResult}.`);
                this.exchangeContext.discardGuessedInit = !negotiatedKexAlgorthmIsPreferred;
                if (negotiatedKexAlgorthmIsPreferred &&
                    this.session.remoteVersion.isVsSsh &&
                    ((_c = this.session.remoteVersion.version) === null || _c === void 0 ? void 0 : _c.startsWith('2.'))) {
                    // VS-SSH v2 had a bug in the logic for determining whether the guess was correct.
                    // Use that alternate logic here to preserve compatibility.
                    const clientAndServerHaveSamePreference = ((_d = message.keyExchangeAlgorithms) === null || _d === void 0 ? void 0 : _d[0]) === ((_e = config.keyExchangeAlgorithms[0]) === null || _e === void 0 ? void 0 : _e.name);
                    if (!clientAndServerHaveSamePreference) {
                        (0, trace_1.trace)('Ignoring correct guess for compatibility with older client.');
                        this.exchangeContext.discardGuessedInit = true;
                    }
                }
            }
            this.exchangeContext.clientKexInitPayload = message.toBuffer();
            extensionInfoSignal = clientExtensionInfoSignal;
        }
        if (this.isInitialExchange && message.keyExchangeAlgorithms.includes(extensionInfoSignal)) {
            // The extension info message will be blocked in the queue
            // until immediately after the key-exchange is done.
            await this.session.sendExtensionInfo(cancellation);
        }
    }
    async handleDhInitMessage(message, cancellation) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (this.isClientSession) {
            return;
        }
        const serverSession = this.session;
        if (!this.exchangeContext ||
            !this.exchangeContext.keyExchange ||
            !this.exchangeContext.publicKey) {
            throw new errors_1.SshConnectionError('Key exchange not started.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        if (this.exchangeContext.discardGuessedInit) {
            // Algorithm negotiation determined that an incorrect guess would be received.
            this.exchangeContext.discardGuessedInit = false;
            return;
        }
        const kexAlg = this.session.config.getKeyExchangeAlgorithm(this.exchangeContext.keyExchange);
        if (!kexAlg) {
            throw new errors_1.SshConnectionError('Key exchange not supported for algorithm: ' + this.exchangeContext.keyExchange, transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        const publicKeyAlg = this.session.config.getPublicKeyAlgorithm(this.exchangeContext.publicKey);
        if (!publicKeyAlg) {
            throw new errors_1.SshConnectionError('Public key algorithm not supported: ' + this.exchangeContext.publicKey, transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        let privateKey = null;
        if ((_a = serverSession.credentials) === null || _a === void 0 ? void 0 : _a.publicKeys) {
            const publicKey = serverSession.credentials.publicKeys.find((k) => k.keyAlgorithmName === publicKeyAlg.keyAlgorithmName);
            privateKey = publicKey !== null && publicKey !== void 0 ? publicKey : null;
            if ((privateKey === null || privateKey === void 0 ? void 0 : privateKey.hasPrivateKey) === false) {
                if (!serverSession.credentials.privateKeyProvider) {
                    throw new Error('A private key provider is required.');
                }
                privateKey = await serverSession.credentials.privateKeyProvider(publicKey, cancellation !== null && cancellation !== void 0 ? cancellation : vscode_jsonrpc_1.CancellationToken.None);
            }
        }
        if (privateKey == null) {
            throw new errors_1.SshConnectionError('Private key not found for algorithm: ' + this.exchangeContext.publicKey, transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        const clientEncryption = this.session.config.getEncryptionAlgorithm(this.exchangeContext.clientEncryption);
        const serverEncryption = this.session.config.getEncryptionAlgorithm(this.exchangeContext.serverEncryption);
        const serverHmac = this.session.config.getHmacAlgorithm(this.exchangeContext.serverHmac);
        const clientHmac = this.session.config.getHmacAlgorithm(this.exchangeContext.clientHmac);
        const keyExchange = kexAlg.createKeyExchange();
        const clientExchangeValue = message.e || buffer_1.Buffer.alloc(0);
        const serverExchangeValue = await keyExchange.startKeyExchange();
        const sharedSecret = await keyExchange.decryptKeyExchange(clientExchangeValue);
        const hostKeyAndCerts = await privateKey.getPublicKeyBytes(publicKeyAlg.name);
        if (!hostKeyAndCerts) {
            throw new errors_1.SshConnectionError('Public key not set.', transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        const exchangeHash = await this.computeExchangeHash(keyExchange, hostKeyAndCerts, clientExchangeValue, serverExchangeValue, sharedSecret);
        if (!this.session.sessionId) {
            this.session.sessionId = exchangeHash;
        }
        const [clientCipherIV, serverCipherIV, clientCipherKey, serverCipherKey, clientHmacKey, serverHmacKey,] = await this.computeKeys(keyExchange, sharedSecret, exchangeHash, clientEncryption, serverEncryption, clientHmac, serverHmac);
        const cipher = (_b = (await (serverEncryption === null || serverEncryption === void 0 ? void 0 : serverEncryption.createCipher(true, serverCipherKey, serverCipherIV)))) !== null && _b !== void 0 ? _b : null;
        const decipher = (_c = (await (clientEncryption === null || clientEncryption === void 0 ? void 0 : clientEncryption.createCipher(false, clientCipherKey, clientCipherIV)))) !== null && _c !== void 0 ? _c : null;
        const signer = (_d = (await (serverHmac === null || serverHmac === void 0 ? void 0 : serverHmac.createSigner(serverHmacKey)))) !== null && _d !== void 0 ? _d : null;
        const verifier = (_e = (await (clientHmac === null || clientHmac === void 0 ? void 0 : clientHmac.createVerifier(clientHmacKey)))) !== null && _e !== void 0 ? _e : null;
        const algorithms = new sshSessionAlgorithms_1.SshSessionAlgorithms();
        algorithms.publicKeyAlgorithmName = this.exchangeContext.publicKey;
        algorithms.cipher = cipher;
        algorithms.decipher = decipher;
        algorithms.signer = signer;
        algorithms.verifier = verifier;
        algorithms.messageSigner = ((_f = cipher) === null || _f === void 0 ? void 0 : _f.authenticatedEncryption)
            ? cipher
            : signer;
        algorithms.messageVerifier = ((_g = decipher) === null || _g === void 0 ? void 0 : _g.authenticatedEncryption)
            ? decipher
            : verifier;
        algorithms.compressor = this.session.config.getCompressionAlgorithm(this.exchangeContext.serverCompression);
        algorithms.decompressor = this.session.config.getCompressionAlgorithm(this.exchangeContext.clientCompression);
        this.exchangeContext.newAlgorithms = algorithms;
        // Wipe the keys from memory after they are stored in native key objects.
        if (clientCipherIV)
            clientCipherIV.fill(0);
        if (clientCipherKey)
            clientCipherKey.fill(0);
        if (clientHmacKey)
            clientHmacKey.fill(0);
        if (serverCipherIV)
            serverCipherIV.fill(0);
        if (serverCipherKey)
            serverCipherKey.fill(0);
        if (serverHmacKey)
            serverHmacKey.fill(0);
        const exchangeSigner = publicKeyAlg.createSigner(privateKey);
        let signature = await exchangeSigner.sign(exchangeHash);
        signature = publicKeyAlg.createSignatureData(signature);
        const reply = new kexMessages_1.KeyExchangeDhReplyMessage();
        reply.hostKey = hostKeyAndCerts;
        reply.f = serverExchangeValue;
        reply.signature = signature;
        await this.session.sendMessage(reply, cancellation);
        await this.session.sendMessage(new kexMessages_1.NewKeysMessage(), cancellation);
    }
    async handleDhReplyMessage(message, cancellation) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (!this.isClientSession) {
            return;
        }
        if (!this.exchangeContext) {
            throw new errors_1.SshConnectionError('Key exchange was not started.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        const config = this.session.config;
        const keyExchange = this.exchangeContext.exchange;
        const publicKeyAlgorithmName = this.exchangeContext.publicKey;
        const publicKeyAlg = config.getPublicKeyAlgorithm(publicKeyAlgorithmName);
        const clientEncryption = config.getEncryptionAlgorithm(this.exchangeContext.clientEncryption);
        const serverEncryption = config.getEncryptionAlgorithm(this.exchangeContext.serverEncryption);
        const serverHmac = config.getHmacAlgorithm(this.exchangeContext.serverHmac);
        const clientHmac = config.getHmacAlgorithm(this.exchangeContext.clientHmac);
        const clientExchangeValue = this.exchangeContext.exchangeValue;
        const serverExchangeValue = message.f;
        if (!keyExchange || !clientExchangeValue) {
            throw new errors_1.SshConnectionError('Failed to initialize crypto after key exchange.', transportMessages_1.SshDisconnectReason.keyExchangeFailed);
        }
        // Load the server's public key bytes into a key-pair instance.
        this.hostKey = publicKeyAlg.createKeyPair();
        await this.hostKey.setPublicKeyBytes(message.hostKey);
        const sharedSecret = await keyExchange.decryptKeyExchange(serverExchangeValue);
        const hostKeyAndCerts = message.hostKey;
        const exchangeHash = await this.computeExchangeHash(keyExchange, hostKeyAndCerts, clientExchangeValue, serverExchangeValue, sharedSecret);
        const signature = publicKeyAlg.readSignatureData(message.signature);
        const exchangeVerifier = publicKeyAlg.createVerifier(this.hostKey);
        let verified;
        try {
            verified = await exchangeVerifier.verify(exchangeHash, signature);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            (0, trace_1.trace)(`Server public key verification error: ${(_a = e.message) !== null && _a !== void 0 ? _a : e}`);
            throw new errors_1.SshConnectionError('Server public key verification failed: ' + ((_b = e.message) !== null && _b !== void 0 ? _b : e), transportMessages_1.SshDisconnectReason.hostKeyNotVerifiable);
        }
        if (verified) {
            (0, trace_1.trace)('Server public key verification succeeded.');
        }
        else {
            (0, trace_1.trace)('Server public key verification failed.');
            throw new errors_1.SshConnectionError('Server public key verification failed.', transportMessages_1.SshDisconnectReason.hostKeyNotVerifiable);
        }
        if (this.session.sessionId == null) {
            this.session.sessionId = exchangeHash;
        }
        const [clientCipherIV, serverCipherIV, clientCipherKey, serverCipherKey, clientHmacKey, serverHmacKey,] = await this.computeKeys(keyExchange, sharedSecret, exchangeHash, clientEncryption, serverEncryption, clientHmac, serverHmac);
        const cipher = (_c = (await (clientEncryption === null || clientEncryption === void 0 ? void 0 : clientEncryption.createCipher(true, clientCipherKey, clientCipherIV)))) !== null && _c !== void 0 ? _c : null;
        const decipher = (_d = (await (serverEncryption === null || serverEncryption === void 0 ? void 0 : serverEncryption.createCipher(false, serverCipherKey, serverCipherIV)))) !== null && _d !== void 0 ? _d : null;
        const signer = (_e = (await (clientHmac === null || clientHmac === void 0 ? void 0 : clientHmac.createSigner(clientHmacKey)))) !== null && _e !== void 0 ? _e : null;
        const verifier = (_f = (await (serverHmac === null || serverHmac === void 0 ? void 0 : serverHmac.createVerifier(serverHmacKey)))) !== null && _f !== void 0 ? _f : null;
        const algorithms = new sshSessionAlgorithms_1.SshSessionAlgorithms();
        algorithms.publicKeyAlgorithmName = publicKeyAlgorithmName;
        algorithms.cipher = cipher;
        algorithms.decipher = decipher;
        algorithms.signer = signer;
        algorithms.verifier = verifier;
        algorithms.messageSigner = ((_g = cipher) === null || _g === void 0 ? void 0 : _g.authenticatedEncryption)
            ? cipher
            : signer;
        algorithms.messageVerifier = ((_h = decipher) === null || _h === void 0 ? void 0 : _h.authenticatedEncryption)
            ? decipher
            : verifier;
        algorithms.compressor = config.getCompressionAlgorithm(this.exchangeContext.clientCompression);
        algorithms.decompressor = config.getCompressionAlgorithm(this.exchangeContext.serverCompression);
        this.exchangeContext.newAlgorithms = algorithms;
        // Wipe the keys from memory after they are stored in native key objects.
        if (clientCipherIV)
            clientCipherIV.fill(0);
        if (clientCipherKey)
            clientCipherKey.fill(0);
        if (clientHmacKey)
            clientHmacKey.fill(0);
        if (serverCipherIV)
            serverCipherIV.fill(0);
        if (serverCipherKey)
            serverCipherKey.fill(0);
        if (serverHmacKey)
            serverHmacKey.fill(0);
        await this.session.sendMessage(new kexMessages_1.NewKeysMessage(), cancellation);
    }
    chooseAlgorithm(label, localAlgorithms, remoteAlgorithms) {
        var _a;
        // Ensure consistent results if the client and server list the same algorithms
        // in different order of preference.
        let serverAlgorithms;
        let clientAlgorithms;
        if (this.isClientSession) {
            serverAlgorithms = remoteAlgorithms || [];
            clientAlgorithms = localAlgorithms;
        }
        else {
            serverAlgorithms = localAlgorithms;
            clientAlgorithms = remoteAlgorithms || [];
        }
        const negotiationDetail = `${label} negotiation: ` +
            `Server (${serverAlgorithms.join(', ')}) ` +
            `Client (${clientAlgorithms.join(', ')})`;
        if (this.session.remoteVersion.isVsSsh &&
            ((_a = this.session.remoteVersion.version) === null || _a === void 0 ? void 0 : _a.startsWith('2.'))) {
            // Older versions of ths library got this backward. Swap for back-compatibility.
            const temp = serverAlgorithms;
            serverAlgorithms = clientAlgorithms;
            clientAlgorithms = temp;
        }
        for (let client of clientAlgorithms) {
            for (let server of serverAlgorithms) {
                if (server === client) {
                    const result = server;
                    (0, trace_1.trace)(`${negotiationDetail} => ${result}`);
                    return result;
                }
            }
        }
        throw new Error(`Failed ${negotiationDetail}`);
    }
    async computeExchangeHash(kex, hostKeyAndCerts, clientExchangeValue, serverExchangeValue, sharedSecret) {
        if (!this.session.remoteVersion) {
            throw new Error('Key exchange not completed.');
        }
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(2048));
        if (this.isClientSession) {
            writer.writeString(sshSession_1.SshSession.localVersion.toString(), 'ascii');
            writer.writeString(this.session.remoteVersion.toString(), 'ascii');
        }
        else {
            writer.writeString(this.session.remoteVersion.toString(), 'ascii');
            writer.writeString(sshSession_1.SshSession.localVersion.toString(), 'ascii');
        }
        writer.writeBinary(this.exchangeContext.clientKexInitPayload);
        writer.writeBinary(this.exchangeContext.serverKexInitPayload);
        writer.writeBinary(hostKeyAndCerts);
        // These values are formatted as bigints (with leading zeroes if the first bit is high)
        // even though they might not really be bigints, depending on the key-exchange algorithm.
        writer.writeBigInt(bigInt_1.BigInt.fromBytes(clientExchangeValue, { unsigned: true }));
        writer.writeBigInt(bigInt_1.BigInt.fromBytes(serverExchangeValue, { unsigned: true }));
        writer.writeBigInt(bigInt_1.BigInt.fromBytes(sharedSecret, { unsigned: true }));
        const hash = await kex.sign(writer.toBuffer());
        return hash;
    }
    async computeKeys(keyExchange, sharedSecret, exchangeHash, clientEncryption, serverEncryption, clientHmac, serverHmac) {
        var _a, _b;
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(4 /* mpint header */ +
            sharedSecret.length +
            exchangeHash.length +
            Math.max(1 /* letter */ + ((_b = (_a = this.session.sessionId) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0), keyExchange.digestLength)));
        writer.writeBinary(sharedSecret);
        writer.write(exchangeHash);
        const offset = writer.position;
        const clientCipherIV = clientEncryption &&
            (await this.computeKey(keyExchange, writer, offset, clientEncryption.blockLength, 'A'));
        const serverCipherIV = serverEncryption &&
            (await this.computeKey(keyExchange, writer, offset, serverEncryption.blockLength, 'B'));
        const clientCipherKey = clientEncryption &&
            (await this.computeKey(keyExchange, writer, offset, clientEncryption.keyLength, 'C'));
        const serverCipherKey = serverEncryption &&
            (await this.computeKey(keyExchange, writer, offset, serverEncryption.keyLength, 'D'));
        const clientHmacKey = clientHmac &&
            (await this.computeKey(keyExchange, writer, offset, clientHmac.keyLength, 'E'));
        const serverHmacKey = serverHmac &&
            (await this.computeKey(keyExchange, writer, offset, serverHmac.keyLength, 'F'));
        return [
            clientCipherIV,
            serverCipherIV,
            clientCipherKey,
            serverCipherKey,
            clientHmacKey,
            serverHmacKey,
        ];
    }
    async computeKey(keyExchange, writer, writerOffset, blockSize, letter) {
        const keyBuffer = buffer_1.Buffer.alloc(blockSize);
        let keyBufferIndex = 0;
        let currentHashLength = 0;
        let currentHash = null;
        if (!this.session.sessionId) {
            throw new Error('Session ID not set.');
        }
        while (keyBufferIndex < blockSize) {
            writer.position = writerOffset;
            if (!currentHash) {
                writer.writeByte(letter.charCodeAt(0));
                writer.write(this.session.sessionId);
            }
            else {
                writer.write(currentHash);
            }
            currentHash = await keyExchange.sign(writer.toBuffer());
            currentHashLength = Math.min(currentHash.length, blockSize - keyBufferIndex);
            currentHash.copy(keyBuffer, keyBufferIndex);
            keyBufferIndex += currentHashLength;
        }
        if (currentHash) {
            currentHash.fill(0);
        }
        return keyBuffer;
    }
};
KeyExchangeService.serviceName = 'ssh-keyexchange';
KeyExchangeService = KeyExchangeService_1 = __decorate([
    (0, serviceActivation_1.serviceActivation)({ serviceRequest: KeyExchangeService_1.serviceName })
], KeyExchangeService);
exports.KeyExchangeService = KeyExchangeService;
//# sourceMappingURL=keyExchangeService.js.map

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelMetrics = void 0;
/**
 * Collects cumulative measurements about a channel.
 */
class ChannelMetrics {
    /* @internal */
    constructor() {
        this.bytesSentSum = 0;
        this.bytesReceivedSum = 0;
    }
    /**
     * Gets the total cumulative number of bytes sent for the duration of the channel,
     * not including message framing, padding, and MAC bytes.
     */
    get bytesSent() {
        return this.bytesSentSum;
    }
    /**
     * Gets the total cumulative number of bytes received for the duration of the channel,
     * not including message framing, padding, and MAC bytes.
     */
    get bytesReceived() {
        return this.bytesReceivedSum;
    }
    /* @internal */
    addBytesSent(count) {
        this.bytesSentSum += count;
    }
    /* @internal */
    addBytesReceived(count) {
        this.bytesReceivedSum += count;
    }
    toString() {
        return `Bytes S/R: ${this.bytesSent} / ${this.bytesReceived}; `;
    }
}
exports.ChannelMetrics = ChannelMetrics;
//# sourceMappingURL=channelMetrics.js.map

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshChannelClosedEventArgs = void 0;
class SshChannelClosedEventArgs {
    constructor(exitStatusOrSignalOrError, errorMessage) {
        if (typeof exitStatusOrSignalOrError === 'number') {
            this.exitStatus = exitStatusOrSignalOrError;
        }
        else if (typeof exitStatusOrSignalOrError === 'string') {
            this.exitSignal = exitStatusOrSignalOrError;
            this.errorMessage = errorMessage;
        }
        else if (exitStatusOrSignalOrError instanceof Error) {
            this.error = exitStatusOrSignalOrError;
        }
    }
}
exports.SshChannelClosedEventArgs = SshChannelClosedEventArgs;
//# sourceMappingURL=sshChannelClosedEventArgs.js.map

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshVersionInfo = void 0;
const packageJson = __webpack_require__(242);
const packageName = packageJson.name.replace(/^@\w+\//, ''); // Strip scope from name.
const packageVersion = packageJson.version;
/**
 * Parses the SSH software name and version from the version string exchanged via the
 * initial packets sent between client and server.
 */
class SshVersionInfo {
    constructor(versionString, protocolVersion, name, version) {
        this.versionString = versionString;
        this.protocolVersion = protocolVersion;
        this.name = name;
        this.version = version;
    }
    /**
     * Attempts to parse an SSH version string into a version info object.
     */
    static tryParse(versionString) {
        if (!versionString) {
            throw new TypeError('Version string expected.');
        }
        if (!versionString.startsWith('SSH-')) {
            return null;
        }
        const firstDashIndex = 3;
        const secondDashIndex = versionString.indexOf('-', firstDashIndex + 1);
        if (secondDashIndex <= 0) {
            return null;
        }
        const protocolVersion = versionString.substring(firstDashIndex + 1, secondDashIndex);
        if (!/^\d+\.\d+$/.test(protocolVersion)) {
            return null;
        }
        let name;
        let version;
        const nameAndVersion = versionString.substring(secondDashIndex + 1);
        const spaceIndex = nameAndVersion.indexOf(' ');
        const lastUnderscoreBeforeSpace = nameAndVersion.lastIndexOf('_', spaceIndex >= 0 ? spaceIndex : nameAndVersion.length - 1);
        if (lastUnderscoreBeforeSpace >= 0) {
            name = nameAndVersion.substring(0, lastUnderscoreBeforeSpace).replace(/_/g, ' ');
            // Ignore any non-digit characters after the version.
            version = nameAndVersion.substring(lastUnderscoreBeforeSpace + 1);
            for (let i = 0; i < version.length; i++) {
                const c = version[i];
                if (!(c >= '0' && c <= '9') && c !== '.') {
                    version = version.substring(0, i);
                    break;
                }
            }
            if (!/^\d+(\.\d+)*$/.test(version)) {
                version = null;
            }
        }
        else {
            name = nameAndVersion;
            version = null;
        }
        return new SshVersionInfo(versionString, protocolVersion, name, version);
    }
    /**
     * Gets the version info for the current SSH library.
     */
    static getLocalVersion() {
        const protocolVersion = '2.0';
        const versionString = `SSH-${protocolVersion}-${packageName}_${packageVersion}`;
        return new SshVersionInfo(versionString, protocolVersion, packageName, packageVersion);
    }
    /** Returns the original SSH version string that was parsed. */
    toString() {
        return this.versionString;
    }
    /**
     * Gets a value indicating whether this version info represents some version of
     * this library.
     */
    get isVsSsh() {
        return this.isVsSshCS || this.isVsSshTS;
    }
    get isVsSshCS() {
        return this.name === 'Microsoft.VisualStudio.Ssh';
    }
    get isVsSshTS() {
        return this.name === 'vs-ssh';
    }
}
exports.SshVersionInfo = SshVersionInfo;
//# sourceMappingURL=sshVersionInfo.js.map

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshChannelOpeningEventArgs = void 0;
const connectionMessages_1 = __webpack_require__(38);
class SshChannelOpeningEventArgs {
    constructor(request, channel, isRemoteRequest) {
        this.request = request;
        this.channel = channel;
        this.isRemoteRequest = isRemoteRequest;
        this.failureReason = connectionMessages_1.SshChannelOpenFailureReason.none;
        this.failureDescription = null;
        if (!request)
            throw new TypeError('A channel open message is required.');
        if (!channel)
            throw new TypeError('A channel is required.');
    }
    toString() {
        return `${this.channel.toString()}${this.failureReason ? ' ' + connectionMessages_1.SshChannelOpenFailureReason[this.failureReason] : ''}`;
    }
}
exports.SshChannelOpeningEventArgs = SshChannelOpeningEventArgs;
//# sourceMappingURL=sshChannelOpeningEventArgs.js.map

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationSuccessMessage = exports.AuthenticationFailureMessage = exports.PasswordRequestMessage = exports.PublicKeyOKMessage = exports.PublicKeyRequestMessage = exports.AuthenticationRequestMessage = exports.AuthenticationMessage = void 0;
const sshMessage_1 = __webpack_require__(50);
class AuthenticationMessage extends sshMessage_1.SshMessage {
}
exports.AuthenticationMessage = AuthenticationMessage;
class AuthenticationRequestMessage extends AuthenticationMessage {
    get messageType() {
        return 50;
    }
    onRead(reader) {
        this.username = reader.readString('utf8');
        this.serviceName = reader.readString('ascii');
        this.methodName = reader.readString('ascii');
    }
    onWrite(writer) {
        writer.writeString(this.username || '', 'utf8');
        writer.writeString(this.serviceName || '', 'ascii');
        writer.writeString(this.validateField(this.methodName, 'method name'), 'ascii');
    }
}
exports.AuthenticationRequestMessage = AuthenticationRequestMessage;
class PublicKeyRequestMessage extends AuthenticationRequestMessage {
    constructor() {
        super();
        this.methodName = "publickey" /* publicKey */;
    }
    get hasSignature() {
        return this.signature && this.signature.length > 0 ? true : false;
    }
    onRead(reader) {
        super.onRead(reader);
        const hasSignature = reader.readBoolean();
        this.keyAlgorithmName = reader.readString('ascii');
        this.publicKey = reader.readBinary();
        if (hasSignature) {
            this.signature = reader.readBinary();
            this.payloadWithoutSignature = this.rawBytes.slice(0, this.rawBytes.length - this.signature.length - 4);
        }
        else {
            this.signature = undefined;
        }
    }
    onWrite(writer) {
        var _a, _b;
        super.onWrite(writer);
        if (!this.keyAlgorithmName)
            throw new Error('Key algorithm name not set.');
        if (this.methodName === "hostbased" /* hostBased */) {
            writer.writeString(this.keyAlgorithmName, 'ascii');
            writer.writeBinary(this.publicKey || Buffer.alloc(0));
            writer.writeString((_a = this.clientHostname) !== null && _a !== void 0 ? _a : '', 'ascii');
            writer.writeString((_b = this.clientUsername) !== null && _b !== void 0 ? _b : '', 'ascii');
            if (!this.hasSignature) {
                throw new Error('A signature is required for a host-based authentcation request.');
            }
            writer.writeBinary(this.signature);
        }
        else {
            writer.writeBoolean(this.hasSignature);
            writer.writeString(this.keyAlgorithmName, 'ascii');
            writer.writeBinary(this.publicKey || Buffer.alloc(0));
            if (this.hasSignature) {
                writer.writeBinary(this.signature);
            }
        }
    }
}
exports.PublicKeyRequestMessage = PublicKeyRequestMessage;
class PublicKeyOKMessage extends AuthenticationMessage {
    get messageType() {
        return 60;
    }
    onRead(reader) {
        this.keyAlgorithmName = reader.readString('ascii');
        this.publicKey = reader.readBinary();
    }
    onWrite(writer) {
        if (!this.keyAlgorithmName)
            throw new Error('Key algorithm name not set.');
        if (!this.publicKey)
            throw new Error('Public key not set.');
        writer.writeString(this.keyAlgorithmName, 'ascii');
        writer.writeBinary(this.publicKey);
    }
}
exports.PublicKeyOKMessage = PublicKeyOKMessage;
class PasswordRequestMessage extends AuthenticationRequestMessage {
    constructor() {
        super();
        this.methodName = "password" /* password */;
    }
    onRead(reader) {
        super.onRead(reader);
        reader.readBoolean();
        this.password = reader.readString('utf8');
    }
    onWrite(writer) {
        super.onWrite(writer);
        writer.writeBoolean(false);
        writer.writeString(this.password || '', 'utf8');
    }
}
exports.PasswordRequestMessage = PasswordRequestMessage;
class AuthenticationFailureMessage extends AuthenticationMessage {
    constructor() {
        super(...arguments);
        this.partialSuccess = false;
    }
    get messageType() {
        return 51;
    }
    onRead(reader) {
        this.methodNames = reader.readList('ascii');
        this.partialSuccess = reader.readBoolean();
    }
    onWrite(writer) {
        writer.writeList(this.methodNames || [], 'ascii');
        writer.writeBoolean(this.partialSuccess);
    }
}
exports.AuthenticationFailureMessage = AuthenticationFailureMessage;
class AuthenticationSuccessMessage extends AuthenticationMessage {
    get messageType() {
        return 52;
    }
    onRead(reader) { }
    onWrite(writer) { }
}
exports.AuthenticationSuccessMessage = AuthenticationSuccessMessage;
sshMessage_1.SshMessage.index.set(50, AuthenticationRequestMessage);
sshMessage_1.SshMessage.index.set(51, AuthenticationFailureMessage);
sshMessage_1.SshMessage.index.set(52, AuthenticationSuccessMessage);
//# sourceMappingURL=authenticationMessages.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionMetrics = void 0;
const vscode_jsonrpc_1 = __webpack_require__(6);
/**
 * Collects current and cumulative measurements about a session.
 */
class SessionMetrics {
    /* @internal */
    constructor() {
        this.startTime = 0;
        this.messagesSentCount = 0;
        this.messagesReceivedCount = 0;
        this.bytesSentSum = 0;
        this.bytesReceivedSum = 0;
        this.reconnectionsCount = 0;
        this.currentLatency = 0;
        this.minLatency = 0;
        this.maxLatency = 0;
        this.latencySum = 0;
        this.latencyCount = 0;
        this.messageSentEmitter = new vscode_jsonrpc_1.Emitter();
        this.onMessageSent = this.messageSentEmitter.event;
        this.messageReceivedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onMessageReceived = this.messageReceivedEmitter.event;
        this.latencyUpdatedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onLatencyUpdated = this.latencyUpdatedEmitter.event;
        this.sessionClosedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onSessionClosed = this.sessionClosedEmitter.event;
        if (typeof performance === 'object' && performance.now) {
            Object.defineProperty(this, 'time', { get: this.browserTime });
        }
        else if (typeof process === 'object' && process.hrtime) {
            Object.defineProperty(this, 'time', { get: this.nodejsTime });
        }
        this.startTime = this.time;
    }
    /**
     * Gets the current stopwatch value in milliseconds (possibly including fractional milliseconds),
     * used for measuring latency.
     */
    /* @internal */
    get time() {
        // The SessionMetrics constructor may replace this with either of the below
        // high-precision implementations, depending on availability of platform APIs.
        return Date.now() - this.startTime;
    }
    browserTime() {
        // Use the browser high-resolution time API.
        // Note the precision may be reduced for pricacy depending on browser and page policy.
        return performance.now() - this.startTime;
    }
    nodejsTime() {
        // Use Node.js high-resolution time API.
        const [s, ns] = process.hrtime();
        return s * 1000 + ns / 1000000 - this.startTime;
    }
    /**
     * Gets the total cumulative number of messages sent for the duration of the session,
     * including all channels and non-channel protocol messages.
     */
    get messagesSent() {
        return this.messagesSentCount;
    }
    /**
     * Gets the total cumulative number of messages received for the duration of the session,
     * including all channels and non-channel protocol messages.
     */
    get messagesReceived() {
        return this.messagesReceivedCount;
    }
    /**
     * Gets the total cumulative number of bytes sent for the duration of the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes.
     */
    get bytesSent() {
        return this.bytesSentSum;
    }
    /**
     * Gets the total cumulative number of bytes received for the duration of the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes.
     */
    get bytesReceived() {
        return this.bytesReceivedSum;
    }
    /**
     * Gets the number of times the session has reconnected.
     * </summary>
     * <remarks>
     * Reconnection requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionReconnect" /> protocol extension.
     */
    get reconnections() {
        return this.reconnectionsCount;
    }
    /**
     * Gets the average measured round-trip connection latency between client and server
     * over the duration of the session, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported, this Sum will be 0.
     */
    get latencyAverageMs() {
        return this.latencyCount === 0 ? 0 : this.latencySum / this.latencyCount;
    }
    /**
     * Gets the minimum measured round-trip connection latency between client and server
     * over the duration of the session, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported, this Sum will be 0.
     */
    get latencyMinMs() {
        return this.minLatency;
    }
    /**
     * Gets the maximum measured round-trip connection latency between client and server
     * over the duration of the session, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported, this Sum will be 0.
     */
    get latencyMaxMs() {
        return this.maxLatency;
    }
    /**
     * Gets the most recent measurement of round-trip connection latency between client and
     * server, in milliseconds.
     * </summary>
     * <remarks>
     * Latency measurement requires both sides to support the
     * <see cref="SshProtocolExtensionNames.SessionLatency" /> protocol extension.
     * If not supported or the session is not currently connected, this Sum will be 0.
     */
    get latencyCurrentMs() {
        return this.currentLatency;
    }
    /* @internal */
    addMessageSent(size) {
        this.messagesSentCount++;
        this.bytesSentSum += size;
        this.messageSentEmitter.fire({ time: this.time, size });
    }
    /* @internal */
    addMessageReceived(size) {
        this.messagesReceivedCount++;
        this.bytesReceivedSum += size;
        this.messageReceivedEmitter.fire({ time: this.time, size });
    }
    /* @internal */
    addReconnection() {
        this.reconnectionsCount++;
    }
    /* @internal */
    updateLatency(latencyMs) {
        if (latencyMs < 0) {
            throw new Error('Measured latency cannot be negative.');
        }
        this.currentLatency = latencyMs;
        if (latencyMs === 0) {
            // Disconnected.
            return;
        }
        if (this.minLatency === 0 || latencyMs < this.minLatency) {
            this.minLatency = latencyMs;
        }
        if (this.maxLatency === 0 || latencyMs > this.maxLatency) {
            this.maxLatency = latencyMs;
        }
        // Enable computing the average.
        this.latencySum += latencyMs;
        this.latencyCount++;
        this.latencyUpdatedEmitter.fire({ time: this.time, latency: latencyMs });
    }
    /* @internal */
    close() {
        this.currentLatency = 0;
        this.sessionClosedEmitter.fire();
    }
    toString() {
        let s = `Messages S/R: ${this.messagesSent} / ${this.messagesReceived}; ` +
            `Bytes S/R: ${this.bytesSent} / ${this.bytesReceived}; ` +
            `Reconnections: ${this.reconnections}; `;
        // Show extra precision for a low-latency connection.
        const precision = this.minLatency >= 10 ? 1 : this.minLatency >= 1 ? 10 : 100;
        if (this.maxLatency > 0) {
            const min = Math.round(this.minLatency * precision) / precision;
            const avg = Math.round((this.latencySum / this.latencyCount) * precision) / precision;
            const max = Math.round(this.maxLatency * precision) / precision;
            s += `Latency Min-Avg-Max: ${min} - ${avg} - ${max} ms; `;
        }
        if (this.currentLatency > 0) {
            const current = Math.round(this.currentLatency * precision) / precision;
            s += `Current Latency: ${current} ms; `;
        }
        return s;
    }
}
exports.SessionMetrics = SessionMetrics;
//# sourceMappingURL=sessionMetrics.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshSessionClosedEventArgs = void 0;
const transportMessages_1 = __webpack_require__(29);
class SshSessionClosedEventArgs {
    constructor(reason, message, error) {
        this.reason = reason;
        this.message = message;
        this.error = error;
        if (!message)
            throw new TypeError('A disconnect message is required.');
    }
    toString() {
        return `${transportMessages_1.SshDisconnectReason[this.reason]}: ${this.message}`;
    }
}
exports.SshSessionClosedEventArgs = SshSessionClosedEventArgs;
//# sourceMappingURL=sshSessionClosedEventArgs.js.map

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshStream = void 0;
const promiseCompletionSource_1 = __webpack_require__(39);
const stream_1 = __webpack_require__(35);
/**
 * Adapts an SshChannel as a Readable+Writable stream.
 */
class SshStream extends stream_1.Duplex {
    constructor(channel) {
        let readPaused = null;
        super({
            async write(chunk, encoding, cb) {
                let error;
                try {
                    let buffer;
                    if (typeof chunk === 'string') {
                        buffer = Buffer.from(chunk, encoding);
                    }
                    else if (chunk instanceof Buffer) {
                        buffer = chunk;
                    }
                    else {
                        throw new Error('Unsupported chunk type: ' + typeof chunk);
                    }
                    await channel.send(buffer);
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    error = e;
                }
                if (cb) {
                    cb(error);
                }
            },
            async writev(chunks, cb) {
                let error;
                try {
                    if (chunks.length === 1) {
                        return this.write(chunks[0].chunk, chunks[0].encoding, cb);
                    }
                    else {
                        function BufferReduce(accumulator, chunk) {
                            if (chunk.chunk instanceof Buffer) {
                                return accumulator + chunk.chunk.length;
                            }
                            else {
                                throw new Error('Unsupported chunk type: ' + typeof chunk.chunk);
                            }
                        }
                        const totalLength = chunks.reduce(BufferReduce, 0);
                        const singleBuffer = Buffer.alloc(totalLength);
                        let singleBufferIndex = 0;
                        for (let i = 0; i < chunks.length; i++) {
                            chunks[i].chunk.copy(singleBuffer, singleBufferIndex);
                            singleBufferIndex += chunks[i].chunk.length;
                        }
                        await channel.send(singleBuffer);
                    }
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    error = e;
                }
                if (cb) {
                    cb(error);
                }
            },
            async final(cb) {
                let error;
                try {
                    await channel.close();
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    error = e;
                }
                if (cb) {
                    cb(error);
                }
            },
            read() {
                if (readPaused) {
                    readPaused.resolve();
                    readPaused = null;
                }
            },
        });
        const self = this;
        channel.onDataReceived(async (data) => {
            const buffer = Buffer.alloc(data.length);
            data.copy(buffer);
            const result = self.push(buffer);
            // Our flow control isn't great. Once we hit the highWaterMark,
            // we stop adjusting the SSH window until our own reader has caught up,
            // and then *all* the data received and buffered in the interim suddenly
            // gets 'adjusted' so that we tend to be somewhat choppy about adjusting the window.
            // Improving this would require that we know when the data we push gets passed to
            // the Duplex reader, and I don't think there's a way to get that notification.
            // So I suspect we'd have to dump Duplex and implement the stream ourselves.
            if (!result) {
                if (!readPaused) {
                    readPaused = new promiseCompletionSource_1.PromiseCompletionSource();
                }
                await readPaused.promise;
            }
            // Notify the channel that the data has been consumed and more data may be sent.
            channel.adjustWindow(buffer.length);
        });
        channel.onClosed(() => {
            self.push(null);
        });
        this.channel = channel;
    }
    toString() {
        return `SshStream(Channel Type: ${this.channel.channelType}, Id: ${this.channel.channelId}, RemoteId: ${this.channel.remoteChannelId})`;
    }
}
exports.SshStream = SshStream;
//# sourceMappingURL=sshStream.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var settle = __webpack_require__(552);
var cookies = __webpack_require__(553);
var buildURL = __webpack_require__(257);
var buildFullPath = __webpack_require__(554);
var parseHeaders = __webpack_require__(557);
var isURLSameOrigin = __webpack_require__(558);
var createError = __webpack_require__(260);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(258);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class UserPrompt {
}
exports.UserPrompt = UserPrompt;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __importStar(__webpack_require__(6));
const RpcClientProxy_1 = __webpack_require__(153);
const vso_logging_1 = __webpack_require__(18);
const RpcUtils_1 = __webpack_require__(75);
/**
 * Defines error codes returned by the VSLS agent implemention of JSON-RPC,
 * which are a super-set of standard JSON-RPC error codes.
 */
var RpcErrorCodes;
(function (RpcErrorCodes) {
    RpcErrorCodes[RpcErrorCodes["ParseError"] = rpc.ErrorCodes.ParseError] = "ParseError";
    RpcErrorCodes[RpcErrorCodes["InvalidRequest"] = rpc.ErrorCodes.InvalidRequest] = "InvalidRequest";
    RpcErrorCodes[RpcErrorCodes["MethodNotFound"] = rpc.ErrorCodes.MethodNotFound] = "MethodNotFound";
    RpcErrorCodes[RpcErrorCodes["InvalidParams"] = rpc.ErrorCodes.InvalidParams] = "InvalidParams";
    RpcErrorCodes[RpcErrorCodes["InternalError"] = rpc.ErrorCodes.InternalError] = "InternalError";
    RpcErrorCodes[RpcErrorCodes["ServerNotInitialized"] = rpc.ErrorCodes.ServerNotInitialized] = "ServerNotInitialized";
    RpcErrorCodes[RpcErrorCodes["UnknownErrorCode"] = rpc.ErrorCodes.UnknownErrorCode] = "UnknownErrorCode";
    RpcErrorCodes[RpcErrorCodes["RequestCancelled"] = rpc.ErrorCodes.RequestCancelled] = "RequestCancelled";
    RpcErrorCodes[RpcErrorCodes["MessageWriteError"] = rpc.ErrorCodes.MessageWriteError] = "MessageWriteError";
    RpcErrorCodes[RpcErrorCodes["MessageReadError"] = rpc.ErrorCodes.MessageReadError] = "MessageReadError";
    // VSLS extended RPC error codes
    RpcErrorCodes[RpcErrorCodes["ServiceNotAvailable"] = -32099] = "ServiceNotAvailable";
    RpcErrorCodes[RpcErrorCodes["InvocationException"] = -32098] = "InvocationException";
    RpcErrorCodes[RpcErrorCodes["MessageTooLarge"] = -32097] = "MessageTooLarge";
})(RpcErrorCodes = exports.RpcErrorCodes || (exports.RpcErrorCodes = {}));
/**
 * Base class for RPC service proxies. Traces all messages
 * and emits events for incoming notifications.
 */
class RpcProxy {
    constructor(client, serviceName, logger) {
        this.client = client;
        this.serviceName = serviceName;
        this.logger = logger;
    }
    /**
     * Creates a proxy for an RPC service.
     *
     * @param serviceInfo Information about the service contract
     * @param client RPC client
     * @param logger logger to use
     */
    static create(serviceInfo, client, logger) {
        if (!(serviceInfo && serviceInfo.name)) {
            throw new Error('Missing RPC service name.');
        }
        const proxy = new RpcProxy(client, serviceInfo.name, logger);
        // Generate async methods for requests.
        for (const methodName of serviceInfo.methods) {
            const methodPropertyName = `${methodName}Async`;
            proxy[methodPropertyName] = function () {
                // Detect whether optional cancellation token was supplied, and if so strip from args.
                let args;
                let cancellationToken = arguments[arguments.length - 1];
                if (cancellationToken &&
                    typeof cancellationToken === 'object' &&
                    typeof cancellationToken.isCancellationRequested === 'boolean') {
                    args = Array.prototype.slice.call(arguments, 0, arguments.length - 1);
                }
                else {
                    args = Array.prototype.slice.call(arguments, 0, arguments.length);
                    cancellationToken = null;
                }
                // Detect whether optional progress was supplied, and if so strip from args.
                let progress = args[args.length - 1];
                if (progress &&
                    typeof progress === 'object' &&
                    typeof progress.report === 'function') {
                    args.splice(args.length - 1, 1);
                }
                else {
                    progress = null;
                }
                const serviceAndMethodName = proxy.serviceName + '.' + methodName;
                return proxy.client.sendRequest(this.logger, serviceAndMethodName, progress, cancellationToken, ...args);
            };
        }
        // Generate methods for method-style notifications.
        for (const methodName of serviceInfo.voidMethods || []) {
            proxy[methodName] = function () {
                const args = Array.prototype.slice.call(arguments, 0, arguments.length);
                const serviceAndMethodName = proxy.serviceName + '.' + methodName;
                proxy.client
                    .sendNotification(this.logger, serviceAndMethodName, args)
                    .then()
                    .catch();
            };
        }
        // Generate events for event-style notifications.
        for (const eventName of serviceInfo.events) {
            const emitter = new rpc.Emitter();
            const eventPropertyName = RpcUtils_1.getEventPropertyName(eventName);
            proxy[eventPropertyName] = emitter.event;
            const serviceAndEventName = proxy.serviceName + '.' + eventName;
            proxy.client
                .ensureConnectionAsync()
                .then((connection) => {
                connection.onNotification(serviceAndEventName, (...args) => {
                    const eventArgs = args[0];
                    // Event args may contain sensitive data, so only trace when obfuscation is disabled.
                    const argsString = vso_logging_1.LoggerSettings.disableObfuscation
                        ? JSON.stringify(eventArgs)
                        : '';
                    proxy.logger.log(vso_logging_1.LogLevel.Debug, `> ${serviceAndEventName}: ${argsString}`);
                    emitter.fire(eventArgs);
                });
            })
                .catch((e) => {
                // Failed to get the connection. There will already be errors traced elsewhere
                // about the connection failure, so there's no need to trace anything more here.
            });
        }
        return proxy;
    }
    static createWithConnection(serviceInfo, connection, logger) {
        return RpcProxy.create(serviceInfo, RpcClientProxy_1.RpcClientProxy.fromRpcConnection(connection, logger), logger);
    }
    static createWithPromise(serviceInfo, promise, logger) {
        return RpcProxy.create(serviceInfo, RpcClientProxy_1.RpcClientProxy.fromPromise(promise, logger), logger);
    }
    /**
     * Sends a notification (event) from this client to the service.
     *
     * (This is a static method because RPC contract interfaces do not define methods
     * for reverse notifications.)
     */
    static notifyAsync(proxy, eventName, args) {
        const rpcProxy = proxy;
        const serviceAndMethodName = rpcProxy.serviceName + '.' + eventName;
        return rpcProxy.client.sendNotification(rpcProxy.logger, serviceAndMethodName, args);
    }
}
exports.RpcProxy = RpcProxy;
//# sourceMappingURL=RpcProxy.js.map

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class RpcLoggerAdapter {
    constructor(trace) {
        this.trace = trace;
    }
    error(message) {
        this.trace.error(message);
    }
    warn(message) {
        this.trace.warning(message);
    }
    info(message) {
        this.trace.info(message);
    }
    log(message) {
        this.trace.verbose(message);
    }
}
exports.RpcLoggerAdapter = RpcLoggerAdapter;
//# sourceMappingURL=RpcLoggerAdapter.js.map

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const RpcError_1 = __webpack_require__(268);
/**
 * Error thrown from RPC requests when the connection to the agent was unexpectedly
 * closed before or during the request.
 */
class RpcConnectionClosedError extends RpcError_1.RpcError {
    constructor() {
        super('RPC connection closed.');
        this.code = RpcConnectionClosedError.code;
        Object.setPrototypeOf(this, RpcConnectionClosedError.prototype);
    }
}
exports.RpcConnectionClosedError = RpcConnectionClosedError;
/** One of the well-known Node.js error code strings. */
RpcConnectionClosedError.code = 'EPIPE';
/**
 * Error thrown from RPC connection is closed due to explicit client shut down.
 */
class RpcConnectionShutdownError extends RpcError_1.RpcError {
    constructor() {
        super('RPC connection closed due to client shut down.');
        this.code = RpcConnectionShutdownError.code;
        Object.setPrototypeOf(this, RpcConnectionShutdownError.prototype);
    }
}
exports.RpcConnectionShutdownError = RpcConnectionShutdownError;
/** One of the well-known Node.js error code strings. */
RpcConnectionShutdownError.code = 'ECONNRESET';
//# sourceMappingURL=RpcConnectionErrors.js.map

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base RPC error class.
 */
class RpcError extends Error {
    constructor(message) {
        super(message);
        this.code = RpcError.code;
    }
}
exports.RpcError = RpcError;
RpcError.code = 'RpcError';
//# sourceMappingURL=RpcError.js.map

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
/**
 * Return the 'raw' message parametes array from a previously filtered array
 * @param filteredRcpParams The filtered rpc params
 * @returns raw rpc parameters without any 'injected' parameter.
 */
function getRawRpcParameters(filteredRcpParams) {
    const rpcParams = [...filteredRcpParams];
    normalizeRpcParameters(rpcParams);
    return rpcParams;
}
exports.getRawRpcParameters = getRawRpcParameters;
function normalizeRpcParameters(rpcParams) {
    // Note: we need to remove the injected parameter 0 that is coming from RpcServiceHandler
    const requestId = rpcParams.splice(0, 1)[0];
    // Note: json-rpc lib will inject a Cancellation token also at the end. Next block
    // will attempt to remove it since we want a pure rpc message to flow.
    if (rpcParams.length > 0) {
        const cancellationTokenParam = rpcParams[rpcParams.length - 1];
        // Check if the param is a 'MutableToken'
        // cancellationTokenParam.constructor.name === 'MutableToken'
        // We cannot check the constructor name as it can be different due to minification at run-time
        if (cancellationTokenParam &&
            'isCancellationRequested' in cancellationTokenParam &&
            'onCancellationRequested' in cancellationTokenParam) {
            const token = rpcParams.splice(rpcParams.length - 1, 1)[0];
            return [requestId, token];
        }
    }
    return [requestId, null];
}
exports.normalizeRpcParameters = normalizeRpcParameters;
/**
 * send an rpc request to a message connection from an rpc service handler.
 */
function sendRpcRequest(messageConnection, method, filteredRcpParams, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const start = Date.now();
            const result = yield messageConnection.sendRequest(method, getRawRpcParameters(filteredRcpParams));
            const time = (Date.now() - start).toFixed(1);
            logger === null || logger === void 0 ? void 0 : logger.info(`remote rpc request method: "${method}" result: "${vso_logging_1.TraceFormat.stringify(result)}
            t:${time}`);
            return result;
        }
        catch (err) {
            logger === null || logger === void 0 ? void 0 : logger.error(`failed to handle request for method:${method}`, err);
            throw err;
        }
    });
}
exports.sendRpcRequest = sendRpcRequest;
//# sourceMappingURL=sendRpcRequest.js.map

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
// timeout to wait to check to check the health of a connection
const defaultCheckConnectionTimeout = 10 * vscs_utils_1.TIME_SECOND_MS;
// message to log and throw if timeout is reached
exports.failedtoCheckConnectionMessage = 'failed to check connection';
const checkConnectionWithTimeoutMessage = 'checkConnectionWithTimeout';
/**
 * Check a workspace client by invoking the checkConnection method with a timeout
 * @returns false if the connection check failed or timeout.
 */
exports.checkConnectionWithTimeout = (workspaceClient, logger, checkConnectionTimeout, cancellationTokenSource) => __awaiter(void 0, void 0, void 0, function* () {
    const start = Date.now();
    const totalTime = () => {
        return (Date.now() - start).toFixed(1);
    };
    try {
        logger === null || logger === void 0 ? void 0 : logger.verbose(`${checkConnectionWithTimeoutMessage} -> 'started'`);
        yield vscs_utils_1.timeoutPromise(workspaceClient.checkConnection(), checkConnectionTimeout !== null && checkConnectionTimeout !== void 0 ? checkConnectionTimeout : defaultCheckConnectionTimeout, undefined, cancellationTokenSource);
        logger === null || logger === void 0 ? void 0 : logger.verbose(`${checkConnectionWithTimeoutMessage} -> 'succeeded' t:${totalTime()}`);
        return true;
    }
    catch (err) {
        if (err instanceof vscs_utils_1.CancellationError) {
            logger === null || logger === void 0 ? void 0 : logger.verbose(`${checkConnectionWithTimeoutMessage} -> 'cancelled' t:${totalTime()}`);
            return true;
        }
        logger === null || logger === void 0 ? void 0 : logger.error(`${checkConnectionWithTimeoutMessage} -> 'failed' t:${totalTime()}`, err);
        return false;
    }
});
//# sourceMappingURL=checkConnectionWithTimeout.js.map

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
const checkConnectionWithTimeout_1 = __webpack_require__(270);
const vscode_jsonrpc_1 = __webpack_require__(6);
// timeout to wait on workspace metrics
const defaultTimeout = 5 * vscs_utils_1.TIME_SECOND_MS;
let session = 0;
/**
 * Check if a liveshare connection is healthy by checking the connection when
 * the metrics event is not received in a period of time.
 * @returns A disposable instance if we want to stop the health check.
 */
function checkWorkspaceClient(workspaceClient, logger, metricsTimeout, checkConnectionTimeout, isCheckConnectionEnabled) {
    metricsTimeout = metricsTimeout !== null && metricsTimeout !== void 0 ? metricsTimeout : defaultTimeout;
    logger = logger.createChild(`${++session}`);
    logger.info(`Start checking connection timeout:${metricsTimeout}`);
    let timeoutReference;
    const setTimeoutMetrics = () => {
        timeoutReference = setTimeout(onWorkspaceMetricsTimeout, metricsTimeout);
    };
    const clearTimeoutMetrics = () => {
        clearTimeout(timeoutReference);
    };
    let isChecking = false;
    const cts = new vscode_jsonrpc_1.CancellationTokenSource();
    const isDisposed = () => {
        return cts.token.isCancellationRequested;
    };
    const onWorkspaceMetricsTimeout = () => __awaiter(this, void 0, void 0, function* () {
        if (isDisposed()) {
            return;
        }
        isChecking = true;
        if ((!isCheckConnectionEnabled || isCheckConnectionEnabled()) &&
            !(yield checkConnectionWithTimeout_1.checkConnectionWithTimeout(workspaceClient, logger, checkConnectionTimeout, cts))) {
            logger.info(`Failed check -> isDisposed:${isDisposed()}`);
            onMetricsDisposable === null || onMetricsDisposable === void 0 ? void 0 : onMetricsDisposable.dispose();
            if (!isDisposed()) {
                workspaceClient.dispose(checkConnectionWithTimeout_1.failedtoCheckConnectionMessage);
            }
        }
        else {
            setTimeoutMetrics();
        }
        isChecking = false;
    });
    workspaceClient.rpcClient.onDispose(() => {
        clearTimeoutMetrics();
    });
    const onMetricsDisposable = workspaceClient.onWorkspaceMetricsUpdated((e) => {
        clearTimeoutMetrics();
        if (!isChecking) {
            setTimeoutMetrics();
        }
    });
    // kick first metrics timeout
    setTimeoutMetrics();
    return {
        dispose: () => {
            logger.info(`Stop checking connection`);
            cts.cancel();
            onMetricsDisposable === null || onMetricsDisposable === void 0 ? void 0 : onMetricsDisposable.dispose();
        },
    };
}
exports.checkWorkspaceClient = checkWorkspaceClient;
//# sourceMappingURL=checkWorkspaceClient.js.map

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const environmentInfo_1 = __webpack_require__(32);
const vscode_command_framework_1 = __webpack_require__(3);
const injectMessageParameters_1 = __webpack_require__(22);
const localizeServiceMessage_1 = __webpack_require__(599);
const localize = nls.loadMessageBundle();
/**
 * Throws a standard error message for the given http response object.
 * This function always throws.
 * Usage: `return throwResponseError(error);`
 *
 * @param options.nlsParameters Parameters to the NLS string, if the response body has a recognized number code
 * @param options.userMessage The user message to display if an NLS string is not found (no http response, no code, or unknown code)
 * @param options.showHttpStatus Whether to append the http status code to the user-facing message, ex: "(404)" or "(no response)" if response not received.
 */
function throwResponseError(error, options = {}) {
    const { response, request, message } = error;
    const { nlsParameters = [], showHttpStatus } = options;
    let userMessage = options.userMessage || localizeServiceMessage_1.getLocalizedServiceMessage(environmentInfo_1.EnvironmentMessageCodes.unknown);
    if (response) {
        const statusSuffix = showHttpStatus ? ` (${response.status})` : '';
        const responseUrl = response.request && response.request.res && response.request.res.responseUrl;
        const host = responseUrl ? new URL(responseUrl).host : 'unknown';
        if (response.data) {
            userMessage = getUserErrorMessage(response.data, nlsParameters) || userMessage;
        }
        throw new vscode_command_framework_1.CommandError({
            code: vscode_command_framework_1.CommandErrorCode.REMOTE_DEPENDENCY,
            message: `Axios response: message[${message}] host[${host}] status[${response.status}] data[${response.data}]`,
            userMessage: `${userMessage}${statusSuffix}`,
        });
    }
    else {
        throw new vscode_command_framework_1.CommandError({
            code: vscode_command_framework_1.CommandErrorCode.REMOTE_DEPENDENCY,
            message: `${request ? 'Axios received no response' : 'Axios failed to create request'}: message[${message}]`,
            userMessage,
        });
    }
}
exports.throwResponseError = throwResponseError;
function getUserErrorMessage(errorData, nlsParameters) {
    if (!errorData) {
        return undefined;
    }
    if (typeof errorData === 'number') {
        return getUserErrorMessageForSingleCode(errorData, nlsParameters);
    }
    if (Array.isArray(errorData)) {
        if (errorData.length === 0) {
            return undefined;
        }
        if (typeof errorData[0] !== 'number') {
            return undefined;
        }
        if (errorData.length === 1) {
            return getUserErrorMessageForSingleCode(errorData[0], nlsParameters);
        }
        else {
            return getUserErrorMessageForMultipleCodes(errorData, nlsParameters);
        }
    }
    return undefined;
}
function getUserErrorMessageForSingleCode(errorCode, nlsParameters) {
    try {
        let errorMessage = localizeServiceMessage_1.getLocalizedServiceMessage(errorCode);
        return injectMessageParameters_1.injectMessageParameters(errorMessage, ...nlsParameters);
    }
    catch (e) {
        vscode_command_framework_1.traceSource.error(e.message, e);
        return undefined;
    }
}
function getUserErrorMessageForMultipleCodes(errorCodes, nlsParameters) {
    try {
        const errMessage = errorCodes
            .map((c) => c)
            .map((k) => {
            let errorMsg = localizeServiceMessage_1.getLocalizedServiceMessage(k);
            errorMsg = injectMessageParameters_1.injectMessageParameters(errorMsg, ...nlsParameters);
            return errorMsg;
        })
            .join(' ');
        let userMessage = localize('error.environment.multipleErrors', 'Multiple errors reported. ({})');
        userMessage = injectMessageParameters_1.injectMessageParameters(userMessage, errMessage);
        return userMessage;
    }
    catch (e) {
        vscode_command_framework_1.traceSource.error(e.message, e);
        return undefined;
    }
}


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setBaggage = exports.getBaggage = exports.isInstrumentationSuppressed = exports.unsuppressInstrumentation = exports.suppressInstrumentation = exports.getParentSpanContext = exports.setExtractedSpanContext = exports.setActiveSpan = exports.getActiveSpan = void 0;
var context_base_1 = __webpack_require__(157);
var __1 = __webpack_require__(156);
/**
 * Active span key
 */
var ACTIVE_SPAN_KEY = context_base_1.createContextKey('OpenTelemetry Context Key ACTIVE_SPAN');
/**
 * Shared key for indicating if instrumentation should be suppressed beyond
 * this current scope.
 */
var SUPPRESS_INSTRUMENTATION_KEY = context_base_1.createContextKey('OpenTelemetry Context Key SUPPRESS_INSTRUMENTATION');
/**
 * Baggage key
 */
var BAGGAGE_KEY = context_base_1.createContextKey('OpenTelemetry Baggage Key');
/**
 * Return the active span if one exists
 *
 * @param context context to get span from
 */
function getActiveSpan(context) {
    return context.getValue(ACTIVE_SPAN_KEY) || undefined;
}
exports.getActiveSpan = getActiveSpan;
/**
 * Set the active span on a context
 *
 * @param context context to use as parent
 * @param span span to set active
 */
function setActiveSpan(context, span) {
    return context.setValue(ACTIVE_SPAN_KEY, span);
}
exports.setActiveSpan = setActiveSpan;
/**
 * Wrap extracted span context in a NoopSpan and set as active span in a new
 * context
 *
 * @param context context to set active span on
 * @param spanContext span context to be wrapped
 */
function setExtractedSpanContext(context, spanContext) {
    return setActiveSpan(context, new __1.NoopSpan(spanContext));
}
exports.setExtractedSpanContext = setExtractedSpanContext;
/**
 * Get the span context of the parent span if it exists,
 * or the extracted span context if there is no active
 * span.
 *
 * @param context context to get values from
 */
function getParentSpanContext(context) {
    var _a;
    return (_a = getActiveSpan(context)) === null || _a === void 0 ? void 0 : _a.context();
}
exports.getParentSpanContext = getParentSpanContext;
/**
 * Sets value on context to indicate that instrumentation should
 * be suppressed beyond this current scope.
 *
 * @param context context to set the suppress instrumentation value on.
 */
function suppressInstrumentation(context) {
    return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, true);
}
exports.suppressInstrumentation = suppressInstrumentation;
/**
 * Sets value on context to indicate that instrumentation should
 * no-longer be suppressed beyond this current scope.
 *
 * @param context context to set the suppress instrumentation value on.
 */
function unsuppressInstrumentation(context) {
    return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, false);
}
exports.unsuppressInstrumentation = unsuppressInstrumentation;
/**
 * Return current suppress instrumentation value for the given context,
 * if it exists.
 *
 * @param context context check for the suppress instrumentation value.
 */
function isInstrumentationSuppressed(context) {
    return Boolean(context.getValue(SUPPRESS_INSTRUMENTATION_KEY));
}
exports.isInstrumentationSuppressed = isInstrumentationSuppressed;
/**
 * @param {Context} Context that manage all context values
 * @returns {Baggage} Extracted baggage from the context
 */
function getBaggage(context) {
    return context.getValue(BAGGAGE_KEY) || undefined;
}
exports.getBaggage = getBaggage;
/**
 * @param {Context} Context that manage all context values
 * @param {Baggage} baggage that will be set in the actual context
 */
function setBaggage(context, baggage) {
    return context.setValue(BAGGAGE_KEY, baggage);
}
exports.setBaggage = setBaggage;
//# sourceMappingURL=context.js.map

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContextKey = exports.ROOT_CONTEXT = exports.BaseContext = void 0;
var BaseContext = /** @class */ (function () {
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */
    function BaseContext(parentContext) {
        this._currentContext = parentContext ? new Map(parentContext) : new Map();
    }
    /**
     * Get a value from the context.
     *
     * @param key key which identifies a context value
     */
    BaseContext.prototype.getValue = function (key) {
        return this._currentContext.get(key);
    };
    /**
     * Create a new context which inherits from this context and has
     * the given key set to the given value.
     *
     * @param key context key for which to set the value
     * @param value value to set for the given key
     */
    BaseContext.prototype.setValue = function (key, value) {
        var context = new BaseContext(this._currentContext);
        context._currentContext.set(key, value);
        return context;
    };
    /**
     * Return a new context which inherits from this context but does
     * not contain a value for the given key.
     *
     * @param key context key for which to clear a value
     */
    BaseContext.prototype.deleteValue = function (key) {
        var context = new BaseContext(this._currentContext);
        context._currentContext.delete(key);
        return context;
    };
    return BaseContext;
}());
exports.BaseContext = BaseContext;
/** The root context is used as the default parent context when there is no active context */
exports.ROOT_CONTEXT = new BaseContext();
/** Get a key to uniquely identify a context value */
function createContextKey(description) {
    return Symbol.for(description);
}
exports.createContextKey = createContextKey;
//# sourceMappingURL=context.js.map

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;
exports.defaultTextMapGetter = {
    get: function (carrier, key) {
        if (carrier == null) {
            return undefined;
        }
        return carrier[key];
    },
    keys: function (carrier) {
        if (carrier == null) {
            return [];
        }
        return Object.keys(carrier);
    },
};
exports.defaultTextMapSetter = {
    set: function (carrier, key, value) {
        if (carrier == null) {
            return;
        }
        carrier[key] = value;
    },
};
//# sourceMappingURL=TextMapPropagator.js.map

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOOP_TEXT_MAP_PROPAGATOR = exports.NoopTextMapPropagator = void 0;
/**
 * No-op implementations of {@link TextMapPropagator}.
 */
var NoopTextMapPropagator = /** @class */ (function () {
    function NoopTextMapPropagator() {
    }
    /** Noop inject function does nothing */
    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };
    /** Noop extract function does nothing and returns the input context */
    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {
        return context;
    };
    NoopTextMapPropagator.prototype.fields = function () {
        return [];
    };
    return NoopTextMapPropagator;
}());
exports.NoopTextMapPropagator = NoopTextMapPropagator;
exports.NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();
//# sourceMappingURL=NoopTextMapPropagator.js.map

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOOP_BATCH_OBSERVER = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_COUNTER = exports.NOOP_METER = exports.NoopBoundBaseObserver = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBatchObserver = exports.NoopBaseObserverMetric = exports.NoopValueRecorderMetric = exports.NoopCounterMetric = exports.NoopMetric = exports.NoopMeter = void 0;
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */
var NoopMeter = /** @class */ (function () {
    function NoopMeter() {
    }
    /**
     * Returns constant noop value recorder.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    NoopMeter.prototype.createValueRecorder = function (_name, _options) {
        return exports.NOOP_VALUE_RECORDER_METRIC;
    };
    /**
     * Returns a constant noop counter.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    NoopMeter.prototype.createCounter = function (_name, _options) {
        return exports.NOOP_COUNTER_METRIC;
    };
    /**
     * Returns a constant noop UpDownCounter.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {
        return exports.NOOP_COUNTER_METRIC;
    };
    /**
     * Returns constant noop value observer.
     * @param name the name of the metric.
     * @param [options] the metric options.
     * @param [callback] the value observer callback
     */
    NoopMeter.prototype.createValueObserver = function (_name, _options, _callback) {
        return exports.NOOP_VALUE_OBSERVER_METRIC;
    };
    /**
     * Returns constant noop sum observer.
     * @param name the name of the metric.
     * @param [options] the metric options.
     * @param [callback] the sum observer callback
     */
    NoopMeter.prototype.createSumObserver = function (_name, _options, _callback) {
        return exports.NOOP_SUM_OBSERVER_METRIC;
    };
    /**
     * Returns constant noop up down sum observer.
     * @param name the name of the metric.
     * @param [options] the metric options.
     * @param [callback] the up down sum observer callback
     */
    NoopMeter.prototype.createUpDownSumObserver = function (_name, _options, _callback) {
        return exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC;
    };
    /**
     * Returns constant noop batch observer.
     * @param name the name of the metric.
     * @param callback the batch observer callback
     */
    NoopMeter.prototype.createBatchObserver = function (_callback) {
        return exports.NOOP_BATCH_OBSERVER;
    };
    return NoopMeter;
}());
exports.NoopMeter = NoopMeter;
var NoopMetric = /** @class */ (function () {
    function NoopMetric(instrument) {
        this._instrument = instrument;
    }
    /**
     * Returns a Bound Instrument associated with specified Labels.
     * It is recommended to keep a reference to the Bound Instrument instead of
     * always calling this method for every operations.
     * @param labels key-values pairs that are associated with a specific metric
     *     that you want to record.
     */
    NoopMetric.prototype.bind = function (_labels) {
        return this._instrument;
    };
    /**
     * Removes the Binding from the metric, if it is present.
     * @param labels key-values pairs that are associated with a specific metric.
     */
    NoopMetric.prototype.unbind = function (_labels) {
        return;
    };
    /**
     * Clears all timeseries from the Metric.
     */
    NoopMetric.prototype.clear = function () {
        return;
    };
    return NoopMetric;
}());
exports.NoopMetric = NoopMetric;
var NoopCounterMetric = /** @class */ (function (_super) {
    __extends(NoopCounterMetric, _super);
    function NoopCounterMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopCounterMetric.prototype.add = function (value, labels) {
        this.bind(labels).add(value);
    };
    return NoopCounterMetric;
}(NoopMetric));
exports.NoopCounterMetric = NoopCounterMetric;
var NoopValueRecorderMetric = /** @class */ (function (_super) {
    __extends(NoopValueRecorderMetric, _super);
    function NoopValueRecorderMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopValueRecorderMetric.prototype.record = function (value, labels) {
        this.bind(labels).record(value);
    };
    return NoopValueRecorderMetric;
}(NoopMetric));
exports.NoopValueRecorderMetric = NoopValueRecorderMetric;
var NoopBaseObserverMetric = /** @class */ (function (_super) {
    __extends(NoopBaseObserverMetric, _super);
    function NoopBaseObserverMetric() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoopBaseObserverMetric.prototype.observation = function () {
        return {
            observer: this,
            value: 0,
        };
    };
    return NoopBaseObserverMetric;
}(NoopMetric));
exports.NoopBaseObserverMetric = NoopBaseObserverMetric;
var NoopBatchObserver = /** @class */ (function () {
    function NoopBatchObserver() {
    }
    return NoopBatchObserver;
}());
exports.NoopBatchObserver = NoopBatchObserver;
var NoopBoundCounter = /** @class */ (function () {
    function NoopBoundCounter() {
    }
    NoopBoundCounter.prototype.add = function (_value) {
        return;
    };
    return NoopBoundCounter;
}());
exports.NoopBoundCounter = NoopBoundCounter;
var NoopBoundValueRecorder = /** @class */ (function () {
    function NoopBoundValueRecorder() {
    }
    NoopBoundValueRecorder.prototype.record = function (_value, _baggage, _spanContext) {
        return;
    };
    return NoopBoundValueRecorder;
}());
exports.NoopBoundValueRecorder = NoopBoundValueRecorder;
var NoopBoundBaseObserver = /** @class */ (function () {
    function NoopBoundBaseObserver() {
    }
    NoopBoundBaseObserver.prototype.update = function (_value) { };
    return NoopBoundBaseObserver;
}());
exports.NoopBoundBaseObserver = NoopBoundBaseObserver;
exports.NOOP_METER = new NoopMeter();
exports.NOOP_BOUND_COUNTER = new NoopBoundCounter();
exports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);
exports.NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();
exports.NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(exports.NOOP_BOUND_VALUE_RECORDER);
exports.NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();
exports.NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_BATCH_OBSERVER = new NoopBatchObserver();
//# sourceMappingURL=NoopMeter.js.map

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOOP_METER_PROVIDER = exports.NoopMeterProvider = void 0;
var NoopMeter_1 = __webpack_require__(277);
/**
 * An implementation of the {@link MeterProvider} which returns an impotent Meter
 * for all calls to `getMeter`
 */
var NoopMeterProvider = /** @class */ (function () {
    function NoopMeterProvider() {
    }
    NoopMeterProvider.prototype.getMeter = function (_name, _version) {
        return NoopMeter_1.NOOP_METER;
    };
    return NoopMeterProvider;
}());
exports.NoopMeterProvider = NoopMeterProvider;
exports.NOOP_METER_PROVIDER = new NoopMeterProvider();
//# sourceMappingURL=NoopMeterProvider.js.map

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOOP_SPAN = exports.NoopSpan = void 0;
var spancontext_utils_1 = __webpack_require__(95);
/**
 * The NoopSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */
var NoopSpan = /** @class */ (function () {
    function NoopSpan(_spanContext) {
        if (_spanContext === void 0) { _spanContext = spancontext_utils_1.INVALID_SPAN_CONTEXT; }
        this._spanContext = _spanContext;
    }
    // Returns a SpanContext.
    NoopSpan.prototype.context = function () {
        return this._spanContext;
    };
    // By default does nothing
    NoopSpan.prototype.setAttribute = function (_key, _value) {
        return this;
    };
    // By default does nothing
    NoopSpan.prototype.setAttributes = function (_attributes) {
        return this;
    };
    // By default does nothing
    NoopSpan.prototype.addEvent = function (_name, _attributes) {
        return this;
    };
    // By default does nothing
    NoopSpan.prototype.setStatus = function (_status) {
        return this;
    };
    // By default does nothing
    NoopSpan.prototype.updateName = function (_name) {
        return this;
    };
    // By default does nothing
    NoopSpan.prototype.end = function (_endTime) { };
    // isRecording always returns false for noopSpan.
    NoopSpan.prototype.isRecording = function () {
        return false;
    };
    // By default does nothing
    NoopSpan.prototype.recordException = function (_exception, _time) { };
    return NoopSpan;
}());
exports.NoopSpan = NoopSpan;
exports.NOOP_SPAN = new NoopSpan();
//# sourceMappingURL=NoopSpan.js.map

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceFlags = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TraceFlags;
(function (TraceFlags) {
    /** Represents no flag set. */
    TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
    /** Bit to represent whether trace is sampled in trace flags. */
    TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));
//# sourceMappingURL=trace_flags.js.map

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyTracer = void 0;
var NoopTracer_1 = __webpack_require__(158);
/**
 * Proxy tracer provided by the proxy tracer provider
 */
var ProxyTracer = /** @class */ (function () {
    function ProxyTracer(_provider, name, version) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
    }
    ProxyTracer.prototype.getCurrentSpan = function () {
        return this._getTracer().getCurrentSpan();
    };
    ProxyTracer.prototype.startSpan = function (name, options) {
        return this._getTracer().startSpan(name, options);
    };
    ProxyTracer.prototype.withSpan = function (span, fn) {
        return this._getTracer().withSpan(span, fn);
    };
    ProxyTracer.prototype.bind = function (target, span) {
        return this._getTracer().bind(target, span);
    };
    /**
     * Try to get a tracer from the proxy tracer provider.
     * If the proxy tracer provider has no delegate, return a noop tracer.
     */
    ProxyTracer.prototype._getTracer = function () {
        if (this._delegate) {
            return this._delegate;
        }
        var tracer = this._provider.getDelegateTracer(this.name, this.version);
        if (!tracer) {
            return NoopTracer_1.NOOP_TRACER;
        }
        this._delegate = tracer;
        return this._delegate;
    };
    return ProxyTracer;
}());
exports.ProxyTracer = ProxyTracer;
//# sourceMappingURL=ProxyTracer.js.map

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyTracerProvider = void 0;
var ProxyTracer_1 = __webpack_require__(281);
var NoopTracerProvider_1 = __webpack_require__(159);
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */
var ProxyTracerProvider = /** @class */ (function () {
    function ProxyTracerProvider() {
    }
    /**
     * Get a {@link ProxyTracer}
     */
    ProxyTracerProvider.prototype.getTracer = function (name, version) {
        var _a;
        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version));
    };
    ProxyTracerProvider.prototype.getDelegate = function () {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;
    };
    /**
     * Set the delegate tracer provider
     */
    ProxyTracerProvider.prototype.setDelegate = function (delegate) {
        this._delegate = delegate;
    };
    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);
    };
    return ProxyTracerProvider;
}());
exports.ProxyTracerProvider = ProxyTracerProvider;
//# sourceMappingURL=ProxyTracerProvider.js.map

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const environmentInfo_1 = __webpack_require__(32);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const vscode_command_framework_1 = __webpack_require__(3);
const vscs_utils_1 = __webpack_require__(8);
/** Every how often the interval that polls individual items will run. */
const POLLING_INTERVAL_MS = 10000;
/** How long to wait between HTTP polling requests */
const POLL_RATE_MS = 1000;
class EnvironmentPolling {
    constructor() {
        this.pollItems = [];
        this.CODESPACE_STOP_POLLING_STATES = [
            environmentInfo_1.StateInfo.Deleted,
            environmentInfo_1.StateInfo.Failed,
            environmentInfo_1.StateInfo.Shutdown,
            environmentInfo_1.StateInfo.ShuttingDown,
            environmentInfo_1.StateInfo.Unavailable,
        ];
        EnvironmentPolling.singleton = this;
    }
    init(dependencies, logger = vscode_command_framework_1.traceSource.withName('EnvironmentPolling')) {
        this.dependencies = dependencies;
        this.logger = logger;
        this.dependencies.getApiProvider().onSignInChanged(() => {
            this.setPollItems([]);
        });
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(((codespaces) => {
            const provisioningCodespaces = codespaces
                .filter((x) => x.state === environmentInfo_1.StateInfo.Provisioning)
                .map((x) => x.environment_id);
            this.setPollItems(provisioningCodespaces);
        }).bind(this));
    }
    static get Instance() {
        return EnvironmentPolling.singleton
            ? EnvironmentPolling.singleton
            : new EnvironmentPolling();
    }
    /**
     * Used when creating a new codespace. This will poll the server and won't stop until the codespace is ready.
     *
     * @param codespace The codespace to poll
     * @returns ICodespaceDetails if created or undefined if deleted.
     * @throws CommandError if any network error
     */
    async pollUntilReady(codespace, callbackAfterTimeout, timeoutSeconds) {
        let callbackCalled = false;
        let callbackTime = 0;
        if (timeoutSeconds) {
            callbackTime = Date.now() + timeoutSeconds * 1000;
        }
        vscs_utils_1.assertDefined(this.dependencies, 'No `dependencies` found, please call `init` first.');
        while (true) {
            const details = await this.dependencies
                .getApiProvider()
                .environments
                .getCodespaceByName(codespace.name);
            vscs_utils_1.assertDefined(details, 'Codespace info not found.');
            if (this.isReady(details)) {
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(details);
                return details;
            }
            if (this.shouldStopPolling(details)) {
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(details);
                return;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
            if (!callbackCalled && callbackAfterTimeout && Date.now() >= callbackTime) {
                callbackCalled = true;
                callbackAfterTimeout();
            }
        }
    }
    /**
     * Used when resuming a codespace. This will poll the server and won't stop until the codespace is ready or rebuilding.
     *
     * @param codespaceId
     * @returns ICodespaceDetails if created or undefined if deleted.
     * @throws CommandError if any network error
     */
    async pollUntilRebuildingOrReady(codespaceId, callbackAfterTimeout, timeoutSeconds) {
        let codespace = undefined;
        let callbackCalled = false;
        let callbackTime = 0;
        if (timeoutSeconds) {
            callbackTime = Date.now() + timeoutSeconds * 1000;
        }
        while (!codespace) {
            vscs_utils_1.assertDefined(this.dependencies, 'No `dependencies` found.');
            const data = await this.dependencies.getApiProvider().environments.getCodespace(codespaceId);
            if (!data) {
                return data;
            }
            if (data.state === environmentInfo_1.StateInfo.Rebuilding) {
                return data;
            }
            if (this.isReady(data)) {
                return data;
            }
            if (this.shouldStopPolling(data)) {
                return undefined;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
            if (!callbackCalled && callbackAfterTimeout && Date.now() >= callbackTime) {
                callbackCalled = true;
                callbackAfterTimeout();
            }
        }
        return codespace;
    }
    /**
     * Used when shutting down a codespace. Polls for shutdown status.
     *
     * @param codespaceId
     * @returns ICodespaceDetails if shutdown or undefined if deleted
     * @throws CommandError if any network error
     */
    async pollUntilShutdown(codespaceId) {
        let codespace;
        vscs_utils_1.assertDefined(this.dependencies, 'No `dependencies` found, please call `init` first.');
        vscs_utils_1.assertDefined(this.logger, 'No `logger` found, please call `init` first.');
        while (!codespace) {
            const data = await this.dependencies.getApiProvider().environments.getCodespace(codespaceId);
            if (!data) {
                this.logger.info('Environment got deleted before completion');
                return data;
            }
            if (data.state !== environmentInfo_1.StateInfo.ShuttingDown) {
                return data;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
        }
        return codespace;
    }
    /**
     * Used for on the fly creation, polls for 10 minutes
     * until the request is picked up or timed out.
     *
     * @param environmentId
     * @returns EnvironmentDetailsInfo if sessionId is present or if it failed to create.
     *          Or undefined if it timed out
     * @throws CommandError if any network error
     */
    async pollUntilSessionId(codespace) {
        let codespaceInfo = undefined;
        let endPoll = Date.now() + 10 * vscs_utils_1.TIME_MINUTE_MS;
        vscs_utils_1.assertDefined(this.dependencies, 'No `dependencies` found, please call `init` first.');
        vscs_utils_1.assertDefined(this.logger, 'No `logger` found, please call `init` first.');
        if (!codespace) {
            return;
        }
        if (codespace.connection.sessionId) {
            return codespace;
        }
        while (Date.now() < endPoll) {
            codespace = await this.dependencies.getApiProvider().environments.getCodespace(codespace.environment_id);
            if (!codespace) {
                this.logger.info('Environment got deleted before completion');
                return codespace;
            }
            if (codespace.connection.sessionId ||
                codespace.state === environmentInfo_1.StateInfo.Failed) {
                return codespace;
            }
            await this.dependencies.util.delay(POLL_RATE_MS);
        }
        return codespaceInfo;
    }
    /*Method that handles the polling of single items*/
    async pollProvisioningItems() {
        const completedItems = [];
        vscs_utils_1.assertDefined(this.dependencies, 'No `dependencies` found, please call `init` first.');
        for (let item of this.pollItems) {
            const polledItem = await this.dependencies.getApiProvider().environments.getCodespace(item);
            if (polledItem) {
                if (polledItem.state === environmentInfo_1.StateInfo.Available ||
                    polledItem.state === environmentInfo_1.StateInfo.Failed) {
                    completedItems.push(item);
                }
            }
        }
        const newPollItems = this.pollItems.filter((x) => !completedItems.includes(x));
        this.setPollItems(newPollItems);
    }
    /*We set the items that need to be polled (it can be 0) and activate/deactivate the interval if needed*/
    setPollItems(items) {
        this.pollItems = items;
        if (this.pollItems.length > 0) {
            if (!this.pollingInterval) {
                this.pollingInterval = setInterval(() => this.pollProvisioningItems(), POLLING_INTERVAL_MS);
            }
        }
        else {
            if (this.pollingInterval)
                clearInterval(this.pollingInterval);
        }
    }
    isReady(data) {
        return data.state === environmentInfo_1.StateInfo.Available;
    }
    shouldStopPolling(data) {
        if (!data.environment_id) {
            return false;
        }
        return this.CODESPACE_STOP_POLLING_STATES.includes(data.state);
    }
}
exports.EnvironmentPolling = EnvironmentPolling;
const Instance = EnvironmentPolling.Instance;
exports.Instance = Instance;


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// When running in the browser we don't run activation tasks post reload.
class ActivationTasks {
    static get Instance() {
        if (!ActivationTasks.singleton) {
            return {};
        }
        return ActivationTasks.singleton;
    }
    static init(globalPath, dependencies) {
        ActivationTasks.singleton = new ActivationTasks();
    }
    putTask(task, details) {
    }
    runTasks() {
        return Promise.resolve();
    }
}
exports.ActivationTasks = ActivationTasks;
const Instance = ActivationTasks.Instance;
exports.Instance = Instance;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const performance_ponyfill_1 = __webpack_require__(286);
const vscode_jsonrpc_1 = __webpack_require__(6);
const vscs_utils_1 = __webpack_require__(8);
const WaterfallNode_1 = __webpack_require__(679);
const PerformanceBlocks_1 = __webpack_require__(680);
/**
 * Main performance measurement class. Meant do be used recusively,
 * e.g. every `createGroup` mathod call will return the instance of
 * the same class which is linked to the parent. This allows to create
 * callstack-like performance trees or waterfalls.
 */
class Performance {
    constructor(name, groupId, pathString = 'start') {
        this.name = name;
        this.groupId = groupId;
        this.pathString = pathString;
        this.groups = [];
        this.onAnyEventEmitter = new vscode_jsonrpc_1.Emitter();
        this.onAnyEvent = this.onAnyEventEmitter.event;
        /**
         * Create the child subgroup of the current group.
         * All the performance groups must have the reference to the top-level performance
         * class, since searching for any of the group/event ids should be possible from any
         * of the performance groups.
         */
        this.createGroup = (groupName, groupdId = Performance.groupCount++) => {
            const pathString = `${this.pathString}.${groupName}.${this.groupId}`;
            const newGroup = new Performance(groupName, groupdId, pathString);
            newGroup.setMainPerformance(this.main);
            newGroup.onAnyEvent((e) => {
                this.onAnyEventEmitter.fire(e);
            });
            this.groups.push(newGroup);
            return newGroup;
        };
        /**
         * Marks `start` or `end` point of a code block that need to be measured
         * in between. see `blocks.markBlock` method note for man example.
         */
        this.markBlock = (blockOptions) => {
            this.blocks.markBlock(blockOptions);
            return this;
        };
        /**
         * Marks `start` point of a code block that need to be measured
         * in between. see `blocks.markBlock` method note for man example.
         */
        this.markBlockStart = (blockOptions, ignoreExistingBlock = false) => {
            try {
                this.blocks.markBlockStart(blockOptions);
            }
            catch (e) {
                if (!ignoreExistingBlock) {
                    throw e;
                }
            }
            return this;
        };
        /**
         * Marks `end` point of a code block that need to be measured
         * in between. see `blocks.markBlock` method note for man example.
         */
        this.markBlockEnd = (blockOptions, ignoreExistingBlock = false) => {
            try {
                this.blocks.markBlockEnd(blockOptions);
            }
            catch (e) {
                if (!ignoreExistingBlock) {
                    throw e;
                }
            }
            return this;
        };
        /**
         * Convenience method for the `markBlock` method. Instead of calling
         * the `markBlock` twice, the `measure` can wrap the code block of interest
         * into an asynchronous function hence be called only once.
         */
        this.measure = (options, callback) => __awaiter(this, void 0, void 0, function* () {
            return yield this.blocks.measure(options, callback);
        });
        /**
         * Sync version of the `measure`.
         */
        this.measureSync = (options, callback) => {
            return this.blocks.measureSync(options, callback);
        };
        /**
         * Get waterfall of all the nested performance blocks, starting from the main
         * "start" root node that is initialized as singleton when app starts.
         */
        this.getWaterfall = () => {
            performance_ponyfill_1.performance.measure(this.pathString, this.pathString);
            const [measure] = performance_ponyfill_1.performance.getEntriesByName(this.pathString);
            const node = new WaterfallNode_1.WaterfallNode(this.groupId, this.name, this.pathString, measure, this.blocks.measures(), this.groups);
            return node;
        };
        /**
         * Get a measurement of a specific block by `id`.
         */
        this.getBlockMeasure = (id, waterfall) => {
            waterfall = waterfall !== null && waterfall !== void 0 ? waterfall : this.main.getWaterfall();
            if (waterfall.id === id) {
                return waterfall;
            }
            for (let group of waterfall.groups) {
                const result = this.getBlockMeasure(id, group);
                if (result) {
                    return result;
                }
            }
            return null;
        };
        this.getBlock = (id) => {
            return this.blocks.getBlock(id);
        };
        /**
         * Get block `startTime` by block `id` or `null` if block is not found.
         */
        this.getBlockStartTime = (id) => {
            const block = this.main.getBlockMeasure(id);
            ;
            if (!block) {
                return null;
            }
            const { measure } = block;
            return measure.startTime;
        };
        /**
         * Get block `endTime` by block `id` or `null` if block is not found.
         */
        this.getBlockEndTime = (id) => {
            const block = this.main.getBlockMeasure(id);
            ;
            if (!block) {
                return null;
            }
            const { measure } = block;
            return measure.startTime + measure.duration;
        };
        /**
         * Get block `durationTime` by block `id` or `null` if block is not found.
         */
        this.getBlockDurationTime = (id) => {
            const block = this.main.getBlockMeasure(id);
            ;
            if (!block) {
                return null;
            }
            const { measure } = block;
            return measure.duration;
        };
        this.blocks = new PerformanceBlocks_1.PerformanceBlocks(pathString);
        performance_ponyfill_1.performance.mark(pathString);
        // set self as "main" performance initialy
        this.mainPerformanceReference = this;
        this.blocks.onAnyEvent((e) => {
            this.onAnyEventEmitter.fire(e);
        });
    }
    setMainPerformance(performance) {
        this.mainPerformanceReference = performance;
    }
    get main() {
        if (!this.mainPerformanceReference) {
            throw new Error('No main performance found.');
        }
        return this.mainPerformanceReference;
    }
    /**
     * Subscribe to `start` or `end` events of a block by `id`.
     */
    onEvent(options, callback) {
        this.blocks.onEvent(options, (opts) => {
            const { id, type } = opts;
            if (type === 'start') {
                callback(opts);
                return this;
            }
            const node = this.getBlockMeasure(id);
            if (!node) {
                throw new Error(`Cannot find "${id}" block.`);
            }
            callback(opts, node);
        });
        return this;
    }
    /**
     * Subscribe to `start` or `end` events of a block by `id`.
     */
    onMeasure(options, callback) {
        this.blocks.onEvent(options, (opts) => {
            const { id, type } = opts;
            if (type === 'start') {
                callback(opts);
                return this;
            }
            const node = this.getBlockMeasure(id);
            if (!node) {
                throw new Error(`Cannot find "${id}" block.`);
            }
            callback(opts, node);
        });
        return this;
    }
}
exports.Performance = Performance;
Performance.groupCount = 0;
/**
 * Function to initialize the main performance singleton class, meant to be
 * called on the app startup.a
 */
exports.initializePerformanceInstance = (groupdId, PerformanceClass = Performance) => {
    const codespacePerformance = new PerformanceClass('start', groupdId);
    codespacePerformance.setMainPerformance(codespacePerformance);
    return codespacePerformance;
};
/**
 * Get or create an instance of Performance for the group ID (default is 'extension:start').
 * Throws an error if group ID is empty or undefined, or performance has already been initialized with a different group ID.
 *
 * @param groupId Group id, by default it is 'extension:start'
 * @returns Created or existing instance of Performance with the given group ID.
 */
exports.getOrCreatePerformance = vscs_utils_1.onlyOnce((groupId) => exports.initializePerformanceInstance(groupId), 'extension:start');
//# sourceMappingURL=Performance.js.map

/***/ }),
/* 286 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformanceObserver", function() { return PerformanceObserver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "performance", function() { return performance; });
const { PerformanceObserver, performance } = globalThis;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
var VSCodeTasClient_1 = __webpack_require__(689);
exports.getExperimentationService = VSCodeTasClient_1.getExperimentationService;
exports.getExperimentationServiceAsync = VSCodeTasClient_1.getExperimentationServiceAsync;
var VSCodeFilterProvider_1 = __webpack_require__(288);
exports.TargetPopulation = VSCodeFilterProvider_1.TargetPopulation;
//# sourceMappingURL=index.js.map

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
/**
 * Here is where we are going to define the filters we will set.
 */
class VSCodeFilterProvider {
    constructor(extensionName, extensionVersion, targetPopulation) {
        this.extensionName = extensionName;
        this.extensionVersion = extensionVersion;
        this.targetPopulation = targetPopulation;
    }
    /**
     * Returns a version string that can be parsed into a .NET Build object
     * by removing the tag suffix (for example -dev).
     *
     * @param version Version string to be trimmed.
     */
    static trimVersionSuffix(version) {
        const regex = /\-[a-zA-Z0-9]+$/;
        const result = version.split(regex);
        return result[0];
    }
    getFilterValue(filter) {
        switch (filter) {
            case Filters.ApplicationVersion:
                return VSCodeFilterProvider.trimVersionSuffix(vscode.version);
            case Filters.Build:
                return vscode.env.appName;
            case Filters.ClientId:
                return vscode.env.machineId;
            case Filters.ExtensionName:
                return this.extensionName;
            case Filters.ExtensionVersion:
                return VSCodeFilterProvider.trimVersionSuffix(this.extensionVersion);
            case Filters.Language:
                return vscode.env.language;
            case Filters.TargetPopulation:
                return this.targetPopulation;
            default:
                return '';
        }
    }
    getFilters() {
        let filters = new Map();
        let filterValues = Object.values(Filters);
        for (let value of filterValues) {
            filters.set(value, this.getFilterValue(value));
        }
        return filters;
    }
}
exports.VSCodeFilterProvider = VSCodeFilterProvider;
/*
Based upon the official VSCode currently existing filters in the
ExP backend for the VSCode cluster.
https://experimentation.visualstudio.com/Analysis%20and%20Experimentation/_git/AnE.ExP.TAS.TachyonHost.Configuration?path=%2FConfigurations%2Fvscode%2Fvscode.json&version=GBmaster
"X-MSEdge-Market": "detection.market",
"X-FD-Corpnet": "detection.corpnet",
"X-VSCode–AppVersion": "appversion",
"X-VSCode-Build": "build",
"X-MSEdge-ClientId": "clientid",
"X-VSCode-ExtensionName": "extensionname",
"X-VSCode-ExtensionVersion": "extensionversion",
"X-VSCode-TargetPopulation": "targetpopulation",
"X-VSCode-Language": "language"
*/
/**
 * All available filters, can be updated.
 */
var Filters;
(function (Filters) {
    /**
     * The market in which the extension is distributed.
     */
    Filters["Market"] = "X-MSEdge-Market";
    /**
     * The corporation network.
     */
    Filters["CorpNet"] = "X-FD-Corpnet";
    /**
     * Version of the application which uses experimentation service.
     */
    Filters["ApplicationVersion"] = "X-VSCode-AppVersion";
    /**
     * Insiders vs Stable.
     */
    Filters["Build"] = "X-VSCode-Build";
    /**
     * Client Id which is used as primary unit for the experimentation.
     */
    Filters["ClientId"] = "X-MSEdge-ClientId";
    /**
     * Extension header.
     */
    Filters["ExtensionName"] = "X-VSCode-ExtensionName";
    /**
     * The version of the extension.
     */
    Filters["ExtensionVersion"] = "X-VSCode-ExtensionVersion";
    /**
     * The language in use by VS Code
     */
    Filters["Language"] = "X-VSCode-Language";
    /**
     * The target population.
     * This is used to separate internal, early preview, GA, etc.
     */
    Filters["TargetPopulation"] = "X-VSCode-TargetPopulation";
})(Filters = exports.Filters || (exports.Filters = {}));
/**
 * Specifies the target population for the experimentation filter.
 */
var TargetPopulation;
(function (TargetPopulation) {
    TargetPopulation["Team"] = "team";
    TargetPopulation["Internal"] = "internal";
    TargetPopulation["Insiders"] = "insider";
    TargetPopulation["Public"] = "public";
})(TargetPopulation = exports.TargetPopulation || (exports.TargetPopulation = {}));
//# sourceMappingURL=VSCodeFilterProvider.js.map

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*globals self, window */


/*eslint-disable @mysticatea/prettier */
const { AbortController, AbortSignal } =
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window :
    /* otherwise */ undefined
/*eslint-enable @mysticatea/prettier */

module.exports = AbortController
module.exports.AbortSignal = AbortSignal
module.exports.default = AbortController


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

var register = __webpack_require__(604)
var addHook = __webpack_require__(605)
var removeHook = __webpack_require__(606)

// bind with array of arguments: https://stackoverflow.com/a/21792913
var bind = Function.bind
var bindable = bind.bind(bind)

function bindApi (hook, state, name) {
  var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state])
  hook.api = { remove: removeHookRef }
  hook.remove = removeHookRef

  ;['before', 'error', 'after', 'wrap'].forEach(function (kind) {
    var args = name ? [state, kind, name] : [state, kind]
    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args)
  })
}

function HookSingular () {
  var singularHookName = 'h'
  var singularHookState = {
    registry: {}
  }
  var singularHook = register.bind(null, singularHookState, singularHookName)
  bindApi(singularHook, singularHookState, singularHookName)
  return singularHook
}

function HookCollection () {
  var state = {
    registry: {}
  }

  var hook = register.bind(null, state)
  bindApi(hook, state)

  return hook
}

var collectionHookDeprecationMessageDisplayed = false
function Hook () {
  if (!collectionHookDeprecationMessageDisplayed) {
    console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4')
    collectionHookDeprecationMessageDisplayed = true
  }
  return HookCollection()
}

Hook.Singular = HookSingular.bind()
Hook.Collection = HookCollection.bind()

module.exports = Hook
// expose constructors as a named property for TypeScript
module.exports.Hook = Hook
module.exports.Singular = Hook.Singular
module.exports.Collection = Hook.Collection


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports.default = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

var wrappy = __webpack_require__(607)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// DO NOT REMOVE OR CHANGE THIS LINE - inject-module-alias in gulpfile.js replaces it by contents of moduleAliasInject.js in local debugging
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
const nls = __webpack_require__(7);
__webpack_require__(294);
const vscode_command_framework_1 = __webpack_require__(3);
const vso_telemetry_1 = __webpack_require__(11);
const Commands_1 = __webpack_require__(508);
const resolver_1 = __webpack_require__(667);
const telemetryLogging_1 = __webpack_require__(668);
const utils_1 = __webpack_require__(151);
const vso_logging_1 = __webpack_require__(18);
const vscs_utils_1 = __webpack_require__(8);
const OpenTelemetryProvider_1 = __webpack_require__(97);
const ActivationTasks_1 = __webpack_require__(284);
const configuration_1 = __webpack_require__(51);
const commandConstants_1 = __webpack_require__(160);
const dependencies_1 = __webpack_require__(14);
const commandContext_1 = __webpack_require__(41);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const protocolHandler_1 = __webpack_require__(669);
const telemetryString_1 = __webpack_require__(12);
const CloudEnvViews_1 = __webpack_require__(76);
const EnvironmentDetailsExplorer_1 = __webpack_require__(671);
const EnvironmentExplorer_1 = __webpack_require__(672);
const EnvironmentPolling_1 = __webpack_require__(283);
const commandEnablement_1 = __webpack_require__(674);
const EnvironmentPerformanceExplorer_1 = __webpack_require__(675);
const IConfigurationManager_1 = __webpack_require__(150);
const telemetryContext_1 = __webpack_require__(676);
const performance_1 = __webpack_require__(677);
const ExperimentationService_1 = __webpack_require__(687);
const ChaosMonkey_1 = __webpack_require__(702);
nls.config({
    locale: vscode.env.language,
    messageFormat: nls.MessageFormat.both,
    bundleFormat: nls.BundleFormat.standalone,
});
const localize = nls.loadMessageBundle();
let codespaceConnected = false;
const extensionName = 'GitHub.codespaces';
async function activate(context) {
    const extension = vscode.extensions.getExtension(extensionName);
    vscs_utils_1.assertDefined(extension, 'No reference to extension package.json found.');
    const { packageJSON } = extension;
    await vscode_command_framework_1.vslsCommands.initialize({
        extensionPackage: packageJSON,
        extensionContext: context,
        telemetry: {
            featureName: 'codespaces.',
            canSendSensistiveInformation: false,
        },
        logging: {
            logFileEnabled: true,
            outputChannelName: 'GitHub Codespaces',
            diagnosticsLogging: {
                enable: true,
                focus: false,
            },
            logMaxSize: 1024,
            obfuscateProperties: {
                'owner': vso_logging_1.LogValueType.Text,
                'owner_login': vso_logging_1.LogValueType.Text,
                'owner_display_name': vso_logging_1.LogValueType.Text,
                'userName': vso_logging_1.LogValueType.Text,
                'userEmail': vso_logging_1.LogValueType.Email,
                'billable_owner_login': vso_logging_1.LogValueType.Text,
                'billable_owner_display_name': vso_logging_1.LogValueType.Text,
                'repository_owner': vso_logging_1.LogValueType.Text,
                'relaySas': vso_logging_1.LogValueType.Text,
                'branch': vso_logging_1.LogValueType.Text,
                'repository_name': vso_logging_1.LogValueType.Text,
                'friendlyName': vso_logging_1.LogValueType.Text,
            }
        },
    });
    dependencies_1.dependencies.extensionsUtil.setExtensionContext(context);
    await ExperimentationService_1.initAsync(extensionName, packageJSON.version, context, dependencies_1.dependencies);
    const { configurationManager } = dependencies_1.dependencies;
    const { isRunningInWeb } = configurationManager;
    vscode_command_framework_1.traceSource.info(`isRunningInWeb: "${isRunningInWeb}"`);
    // Execute the portal command to measure the time it took to render the workbench.
    // Not currently implemented for serverless.
    if (isRunningInWeb && !utils_1.isRunningInWebWorker) {
        vscode.commands.executeCommand("_codespaces.timeToInteractive" /* codespacesTimeToInteractive */)
            .then(() => { }, (reason) => {
            vscode_command_framework_1.traceSource.warning('Web command time-to-interactive is not registered');
        });
    }
    const codespaceName = configuration_1.getInternalConfig('codespaceName');
    vscode_command_framework_1.traceSource.verbose('Initializing authentication');
    await dependencies_1.dependencies.getApiProvider().init();
    CodespaceDetailsProvider_1.CodespaceDetailsProvider.init(dependencies_1.dependencies);
    EnvironmentPolling_1.EnvironmentPolling.Instance.init(dependencies_1.dependencies);
    // initialize telemetry context
    await telemetryLogging_1.setupTelemetryLogging();
    telemetryContext_1.TelemetryContext.initialize(dependencies_1.dependencies, context, packageJSON);
    const resolver = resolver_1.registerResolver(context, packageJSON, getAllowedPortPrivacySettings(context));
    ActivationTasks_1.ActivationTasks.init(context.globalStoragePath, dependencies_1.dependencies);
    const isInternalUser = dependencies_1.dependencies.extensionsUtil.getIsInternalUser();
    vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryCommonPropertyNames.IS_INTERNAL, isInternalUser);
    await ChaosMonkey_1.initChaosMonkey(vscode_command_framework_1.traceSource, isInternalUser);
    // External users should not see the "isInternal" log line or other internal-only diagnostic info
    if (isInternalUser) {
        vscode_command_framework_1.traceSource.info(`Extension activating ${JSON.stringify({
            isInternal: isInternalUser,
            isRunningInWeb,
            codespace: codespaceName,
        })}`);
    }
    let environmentsTreeView;
    if (!(commandContext_1.getCommandContext("codespaces:connectionState" /* ConnectionState */) === commandConstants_1.ConnectionState.Connected)) {
        const environmentsExplorer = new EnvironmentExplorer_1.EnvironmentExplorer(dependencies_1.dependencies);
        environmentsTreeView = vscode.window.createTreeView(CloudEnvViews_1.View.Environments, {
            treeDataProvider: environmentsExplorer,
        });
    }
    CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(async () => {
        if (CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace() &&
            codespaceConnected === false) {
            await environmentsTreeView.dispose();
            const environmentsDetailsExplorer = new EnvironmentDetailsExplorer_1.EnvironmentDetailsExplorer();
            environmentsTreeView = vscode.window.createTreeView(CloudEnvViews_1.View.Environments, {
                treeDataProvider: environmentsDetailsExplorer,
            });
            codespaceConnected = true;
        }
        await updateAllowedPortPrivacySettings(context, await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList());
    });
    const perfExplorer = EnvironmentPerformanceExplorer_1.EnvironmentPerformanceExplorer.Instance;
    perfExplorer.setContext(context);
    const perfExplorerTreeView = vscode.window.createTreeView(CloudEnvViews_1.View.EnvironmentPerformance, {
        treeDataProvider: perfExplorer,
    });
    perfExplorer.setTreeView(perfExplorerTreeView);
    const performanceExplorerEnabled = configurationManager.getConfigValue(IConfigurationManager_1.ConfigurationKey.showPerformanceExplorer);
    // open performance treeview if user had it open before last extension deactivation
    await commandContext_1.setCommandContext("codespaces:performance-explorer-enabled" /* IsPerformanceExplorerEnabled */, performanceExplorerEnabled);
    // set listener for changes to the configuration for showing the performance window
    configurationManager.onDidChangeConfigValue(IConfigurationManager_1.ConfigurationKey.showPerformanceExplorer)(async (value) => {
        await commandContext_1.setCommandContext("codespaces:performance-explorer-enabled" /* IsPerformanceExplorerEnabled */, value);
    });
    // set listener for changes to the vscode context for showing the performance window
    commandContext_1.onCommandContextChanged(({ key }) => {
        if (key.startsWith("codespaces:performance-explorer-enabled" /* IsPerformanceExplorerEnabled */)) {
            const perfTreeItem = perfExplorer.getFirstTreeItem();
            // Open remote explorer if it isn't open
            if (!perfExplorerTreeView.visible) {
                perfExplorerTreeView.reveal(perfTreeItem, { select: false, focus: false });
            }
        }
    });
    await Commands_1.registerCommands(context);
    context.subscriptions.push(vscode.window.registerUriHandler(new protocolHandler_1.CodespacesProtocolHandler(dependencies_1.dependencies)));
    await commandContext_1.setCommandContext("codespaces:running-in-web" /* IsRunningInWeb */, isRunningInWeb);
    // If we are not running in the webworker, we are inside a codespace - so connect to it.
    if (isRunningInWeb && !utils_1.isRunningInWebWorker) {
        vscode_command_framework_1.traceSource.info(`Connecting to current codespace: ${codespaceName}`);
        vscode.commands.executeCommand("github.codespaces.connect" /* connect */, {
            name: codespaceName,
            initialConnectionToCurrentEnvironment: true,
            resolver,
        });
    }
    await commandEnablement_1.setupCommandEnablement(dependencies_1.dependencies);
    // Executing the long running tasks in the background
    ActivationTasks_1.ActivationTasks.Instance.runTasks().catch((e) => {
        vscode_command_framework_1.traceSource.error(e);
    });
    // What's New toast
    await showWhatsNewInfo(context);
    // Verbose logs for perf events
    const perfLogger = vscode_command_framework_1.traceSource.withName('perf');
    performance_1.performance.onAnyEvent((e) => {
        if (e.type === 'end') {
            perfLogger.verbose(`name:${e.name} duration:${e.measure.duration}`);
        }
    });
    /* Activation event */
    const telemetryEvent = new vso_telemetry_1.TelemetryEvent(telemetryString_1.TelemetryEventNames.EXTENSION_ACTIVATION);
    telemetryEvent.addProperty(telemetryString_1.TelemetryPropertyNames.PERFORMANCE_EXPLORER_ENABLED, performanceExplorerEnabled);
    OpenTelemetryProvider_1.OpenTelemetryProvider.init(context);
    telemetryEvent.send();
    // Adding the environmentsTreeView disposable to the extension's subscription array
    context.subscriptions.push(environmentsTreeView);
}
exports.activate = activate;
async function updateAllowedPortPrivacySettings(context, codespaces) {
    try {
        const mementoKey = 'allowed-port-privacy-settings';
        let allowedPortPrivacySettingsByCodespace = new Map();
        codespaces.forEach(codespace => {
            const runtimeConstraints = codespace.runtime_constraints;
            if (runtimeConstraints) {
                allowedPortPrivacySettingsByCodespace.set(codespace.name, runtimeConstraints.allowed_port_privacy_settings);
            }
        });
        if (allowedPortPrivacySettingsByCodespace.size > 0) {
            await context.globalState.update(mementoKey, JSON.stringify(Array.from(allowedPortPrivacySettingsByCodespace.entries())));
        }
    }
    catch (err) {
        vscode_command_framework_1.traceSource.error(`Error updating allowed port privacy policies: ${err}`);
    }
}
function getAllowedPortPrivacySettings(context) {
    try {
        const mementoKey = 'allowed-port-privacy-settings';
        const allowedPortPrivacySettingsByCodespace = context.globalState.get(mementoKey);
        if (!allowedPortPrivacySettingsByCodespace) {
            return undefined;
        }
        return new Map(JSON.parse(allowedPortPrivacySettingsByCodespace));
    }
    catch (err) {
        vscode_command_framework_1.traceSource.error(`Error getting allowed port privacy policies: ${err}`);
        return undefined;
    }
}
async function showWhatsNewInfo(context) {
    const mementoKey = 'whats-new-url';
    const previousUrl = context.globalState.get(mementoKey);
    const currentUrl = '';
    if (currentUrl && currentUrl !== previousUrl) {
        await context.globalState.update(mementoKey, currentUrl);
        let clicked = await vscode.window.showInformationMessage(localize('message.whatsNew.text', 'GitHub Codespaces updated!'), localize('message.whatsNew.action', 'More info'));
        const whatsNewTelemetryEvent = new vso_telemetry_1.TelemetryEvent(telemetryString_1.TelemetryEventNames.SHOW_WHATS_NEW_INFO);
        whatsNewTelemetryEvent.addProperty(telemetryString_1.TelemetryPropertyNames.MORE_INFO_CLICKED, clicked ? true : false);
        if (clicked) {
            const uri = vscode.Uri.parse(currentUrl);
            const opened = await vscode.env.openExternal(uri);
            whatsNewTelemetryEvent.addProperty(telemetryString_1.TelemetryPropertyNames.BROWSER_OPENED_SUCCESS, opened);
        }
        whatsNewTelemetryEvent.send();
    }
}
async function deactivate() {
    await vso_telemetry_1.Telemetry.dispose();
}
exports.deactivate = deactivate;


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(295).install();


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var SourceMapConsumer = __webpack_require__(296).SourceMapConsumer;
var path = __webpack_require__(30);

var fs;
try {
  fs = __webpack_require__(26);
  if (!fs.existsSync || !fs.readFileSync) {
    // fs doesn't have all methods we need
    fs = null;
  }
} catch (err) {
  /* nop */
}

var bufferFrom = __webpack_require__(303);

// Only install once if called multiple times
var errorFormatterInstalled = false;
var uncaughtShimInstalled = false;

// If true, the caches are reset before a stack trace formatting operation
var emptyCacheBetweenOperations = false;

// Supports {browser, node, auto}
var environment = "auto";

// Maps a file path to a string containing the file contents
var fileContentsCache = {};

// Maps a file path to a source map for that file
var sourceMapCache = {};

// Regex for detecting source maps
var reSourceMap = /^data:application\/json[^,]+base64,/;

// Priority list of retrieve handlers
var retrieveFileHandlers = [];
var retrieveMapHandlers = [];

function isInBrowser() {
  if (environment === "browser")
    return true;
  if (environment === "node")
    return false;
  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
}

function hasGlobalProcessEventEmitter() {
  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
}

function handlerExec(list) {
  return function(arg) {
    for (var i = 0; i < list.length; i++) {
      var ret = list[i](arg);
      if (ret) {
        return ret;
      }
    }
    return null;
  };
}

var retrieveFile = handlerExec(retrieveFileHandlers);

retrieveFileHandlers.push(function(path) {
  // Trim the path to make sure there is no extra whitespace.
  path = path.trim();
  if (/^file:/.test(path)) {
    // existsSync/readFileSync can't handle file protocol, but once stripped, it works
    path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
      return drive ?
        '' : // file:///C:/dir/file -> C:/dir/file
        '/'; // file:///root-dir/file -> /root-dir/file
    });
  }
  if (path in fileContentsCache) {
    return fileContentsCache[path];
  }

  var contents = '';
  try {
    if (!fs) {
      // Use SJAX if we are in the browser
      var xhr = new XMLHttpRequest();
      xhr.open('GET', path, /** async */ false);
      xhr.send(null);
      if (xhr.readyState === 4 && xhr.status === 200) {
        contents = xhr.responseText;
      }
    } else if (fs.existsSync(path)) {
      // Otherwise, use the filesystem
      contents = fs.readFileSync(path, 'utf8');
    }
  } catch (er) {
    /* ignore any errors */
  }

  return fileContentsCache[path] = contents;
});

// Support URLs relative to a directory, but be careful about a protocol prefix
// in case we are in the browser (i.e. directories may start with "http://" or "file:///")
function supportRelativeURL(file, url) {
  if (!file) return url;
  var dir = path.dirname(file);
  var match = /^\w+:\/\/[^\/]*/.exec(dir);
  var protocol = match ? match[0] : '';
  var startPath = dir.slice(protocol.length);
  if (protocol && /^\/\w\:/.test(startPath)) {
    // handle file:///C:/ paths
    protocol += '/';
    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, '/');
  }
  return protocol + path.resolve(dir.slice(protocol.length), url);
}

function retrieveSourceMapURL(source) {
  var fileData;

  if (isInBrowser()) {
     try {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', source, false);
       xhr.send(null);
       fileData = xhr.readyState === 4 ? xhr.responseText : null;

       // Support providing a sourceMappingURL via the SourceMap header
       var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
                             xhr.getResponseHeader("X-SourceMap");
       if (sourceMapHeader) {
         return sourceMapHeader;
       }
     } catch (e) {
     }
  }

  // Get the URL of the source map
  fileData = retrieveFile(source);
  var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
  // Keep executing the search to find the *last* sourceMappingURL to avoid
  // picking up sourceMappingURLs from comments, strings, etc.
  var lastMatch, match;
  while (match = re.exec(fileData)) lastMatch = match;
  if (!lastMatch) return null;
  return lastMatch[1];
};

// Can be overridden by the retrieveSourceMap option to install. Takes a
// generated source filename; returns a {map, optional url} object, or null if
// there is no source map.  The map field may be either a string or the parsed
// JSON object (ie, it must be a valid argument to the SourceMapConsumer
// constructor).
var retrieveSourceMap = handlerExec(retrieveMapHandlers);
retrieveMapHandlers.push(function(source) {
  var sourceMappingURL = retrieveSourceMapURL(source);
  if (!sourceMappingURL) return null;

  // Read the contents of the source map
  var sourceMapData;
  if (reSourceMap.test(sourceMappingURL)) {
    // Support source map URL as a data url
    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
    sourceMapData = bufferFrom(rawData, "base64").toString();
    sourceMappingURL = source;
  } else {
    // Support source map URLs relative to the source URL
    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
    sourceMapData = retrieveFile(sourceMappingURL);
  }

  if (!sourceMapData) {
    return null;
  }

  return {
    url: sourceMappingURL,
    map: sourceMapData
  };
});

function mapSourcePosition(position) {
  var sourceMap = sourceMapCache[position.source];
  if (!sourceMap) {
    // Call the (overrideable) retrieveSourceMap function to get the source map.
    var urlAndMap = retrieveSourceMap(position.source);
    if (urlAndMap) {
      sourceMap = sourceMapCache[position.source] = {
        url: urlAndMap.url,
        map: new SourceMapConsumer(urlAndMap.map)
      };

      // Load all sources stored inline with the source map into the file cache
      // to pretend like they are already loaded. They may not exist on disk.
      if (sourceMap.map.sourcesContent) {
        sourceMap.map.sources.forEach(function(source, i) {
          var contents = sourceMap.map.sourcesContent[i];
          if (contents) {
            var url = supportRelativeURL(sourceMap.url, source);
            fileContentsCache[url] = contents;
          }
        });
      }
    } else {
      sourceMap = sourceMapCache[position.source] = {
        url: null,
        map: null
      };
    }
  }

  // Resolve the source URL relative to the URL of the source map
  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {
    var originalPosition = sourceMap.map.originalPositionFor(position);

    // Only return the original position if a matching line was found. If no
    // matching line is found then we return position instead, which will cause
    // the stack trace to print the path and line for the compiled file. It is
    // better to give a precise location in the compiled file than a vague
    // location in the original file.
    if (originalPosition.source !== null) {
      originalPosition.source = supportRelativeURL(
        sourceMap.url, originalPosition.source);
      return originalPosition;
    }
  }

  return position;
}

// Parses code generated by FormatEvalOrigin(), a function inside V8:
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js
function mapEvalOrigin(origin) {
  // Most eval() calls are in this format
  var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
  if (match) {
    var position = mapSourcePosition({
      source: match[2],
      line: +match[3],
      column: match[4] - 1
    });
    return 'eval at ' + match[1] + ' (' + position.source + ':' +
      position.line + ':' + (position.column + 1) + ')';
  }

  // Parse nested eval() calls using recursion
  match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
  if (match) {
    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
  }

  // Make sure we still return useful information if we didn't find anything
  return origin;
}

// This is copied almost verbatim from the V8 source code at
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
// implementation of wrapCallSite() used to just forward to the actual source
// code of CallSite.prototype.toString but unfortunately a new release of V8
// did something to the prototype chain and broke the shim. The only fix I
// could find was copy/paste.
function CallSiteToString() {
  var fileName;
  var fileLocation = "";
  if (this.isNative()) {
    fileLocation = "native";
  } else {
    fileName = this.getScriptNameOrSourceURL();
    if (!fileName && this.isEval()) {
      fileLocation = this.getEvalOrigin();
      fileLocation += ", ";  // Expecting source position to follow.
    }

    if (fileName) {
      fileLocation += fileName;
    } else {
      // Source code does not originate from a file and is not native, but we
      // can still get the source position inside the source string, e.g. in
      // an eval string.
      fileLocation += "<anonymous>";
    }
    var lineNumber = this.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ":" + lineNumber;
      var columnNumber = this.getColumnNumber();
      if (columnNumber) {
        fileLocation += ":" + columnNumber;
      }
    }
  }

  var line = "";
  var functionName = this.getFunctionName();
  var addSuffix = true;
  var isConstructor = this.isConstructor();
  var isMethodCall = !(this.isToplevel() || isConstructor);
  if (isMethodCall) {
    var typeName = this.getTypeName();
    // Fixes shim to be backward compatable with Node v0 to v4
    if (typeName === "[object Object]") {
      typeName = "null";
    }
    var methodName = this.getMethodName();
    if (functionName) {
      if (typeName && functionName.indexOf(typeName) != 0) {
        line += typeName + ".";
      }
      line += functionName;
      if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
        line += " [as " + methodName + "]";
      }
    } else {
      line += typeName + "." + (methodName || "<anonymous>");
    }
  } else if (isConstructor) {
    line += "new " + (functionName || "<anonymous>");
  } else if (functionName) {
    line += functionName;
  } else {
    line += fileLocation;
    addSuffix = false;
  }
  if (addSuffix) {
    line += " (" + fileLocation + ")";
  }
  return line;
}

function cloneCallSite(frame) {
  var object = {};
  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
  });
  object.toString = CallSiteToString;
  return object;
}

function wrapCallSite(frame, state) {
  // provides interface backward compatibility
  if (state === undefined) {
    state = { nextPosition: null, curPosition: null }
  }
  if(frame.isNative()) {
    state.curPosition = null;
    return frame;
  }

  // Most call sites will return the source file from getFileName(), but code
  // passed to eval() ending in "//# sourceURL=..." will return the source file
  // from getScriptNameOrSourceURL() instead
  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
  if (source) {
    var line = frame.getLineNumber();
    var column = frame.getColumnNumber() - 1;

    // Fix position in Node where some (internal) code is prepended.
    // See https://github.com/evanw/node-source-map-support/issues/36
    // Header removed in node at ^10.16 || >=11.11.0
    // v11 is not an LTS candidate, we can just test the one version with it.
    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
    var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
    var headerLength = noHeader.test(process.version) ? 0 : 62;
    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
      column -= headerLength;
    }

    var position = mapSourcePosition({
      source: source,
      line: line,
      column: column
    });
    state.curPosition = position;
    frame = cloneCallSite(frame);
    var originalFunctionName = frame.getFunctionName;
    frame.getFunctionName = function() {
      if (state.nextPosition == null) {
        return originalFunctionName();
      }
      return state.nextPosition.name || originalFunctionName();
    };
    frame.getFileName = function() { return position.source; };
    frame.getLineNumber = function() { return position.line; };
    frame.getColumnNumber = function() { return position.column + 1; };
    frame.getScriptNameOrSourceURL = function() { return position.source; };
    return frame;
  }

  // Code called using eval() needs special handling
  var origin = frame.isEval() && frame.getEvalOrigin();
  if (origin) {
    origin = mapEvalOrigin(origin);
    frame = cloneCallSite(frame);
    frame.getEvalOrigin = function() { return origin; };
    return frame;
  }

  // If we get here then we were unable to change the source position
  return frame;
}

// This function is part of the V8 stack trace API, for more info see:
// https://v8.dev/docs/stack-trace-api
function prepareStackTrace(error, stack) {
  if (emptyCacheBetweenOperations) {
    fileContentsCache = {};
    sourceMapCache = {};
  }

  var name = error.name || 'Error';
  var message = error.message || '';
  var errorString = name + ": " + message;

  var state = { nextPosition: null, curPosition: null };
  var processedStack = [];
  for (var i = stack.length - 1; i >= 0; i--) {
    processedStack.push('\n    at ' + wrapCallSite(stack[i], state));
    state.nextPosition = state.curPosition;
  }
  state.curPosition = state.nextPosition = null;
  return errorString + processedStack.reverse().join('');
}

// Generate position and snippet of original source with pointer
function getErrorSource(error) {
  var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
  if (match) {
    var source = match[1];
    var line = +match[2];
    var column = +match[3];

    // Support the inline sourceContents inside the source map
    var contents = fileContentsCache[source];

    // Support files on disk
    if (!contents && fs && fs.existsSync(source)) {
      try {
        contents = fs.readFileSync(source, 'utf8');
      } catch (er) {
        contents = '';
      }
    }

    // Format the line from the original source code like node does
    if (contents) {
      var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
      if (code) {
        return source + ':' + line + '\n' + code + '\n' +
          new Array(column).join(' ') + '^';
      }
    }
  }
  return null;
}

function printErrorAndExit (error) {
  var source = getErrorSource(error);

  // Ensure error is printed synchronously and not truncated
  if (process.stderr._handle && process.stderr._handle.setBlocking) {
    process.stderr._handle.setBlocking(true);
  }

  if (source) {
    console.error();
    console.error(source);
  }

  console.error(error.stack);
  process.exit(1);
}

function shimEmitUncaughtException () {
  var origEmit = process.emit;

  process.emit = function (type) {
    if (type === 'uncaughtException') {
      var hasStack = (arguments[1] && arguments[1].stack);
      var hasListeners = (this.listeners(type).length > 0);

      if (hasStack && !hasListeners) {
        return printErrorAndExit(arguments[1]);
      }
    }

    return origEmit.apply(this, arguments);
  };
}

var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);

exports.wrapCallSite = wrapCallSite;
exports.getErrorSource = getErrorSource;
exports.mapSourcePosition = mapSourcePosition;
exports.retrieveSourceMap = retrieveSourceMap;

exports.install = function(options) {
  options = options || {};

  if (options.environment) {
    environment = options.environment;
    if (["node", "browser", "auto"].indexOf(environment) === -1) {
      throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
    }
  }

  // Allow sources to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveFile) {
    if (options.overrideRetrieveFile) {
      retrieveFileHandlers.length = 0;
    }

    retrieveFileHandlers.unshift(options.retrieveFile);
  }

  // Allow source maps to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveSourceMap) {
    if (options.overrideRetrieveSourceMap) {
      retrieveMapHandlers.length = 0;
    }

    retrieveMapHandlers.unshift(options.retrieveSourceMap);
  }

  // Support runtime transpilers that include inline source maps
  if (options.hookRequire && !isInBrowser()) {
    var Module;
    try {
      Module = __webpack_require__(26);
    } catch (err) {
      // NOP: Loading in catch block to convert webpack error to warning.
    }
    var $compile = Module.prototype._compile;

    if (!$compile.__sourceMapSupport) {
      Module.prototype._compile = function(content, filename) {
        fileContentsCache[filename] = content;
        sourceMapCache[filename] = undefined;
        return $compile.call(this, content, filename);
      };

      Module.prototype._compile.__sourceMapSupport = true;
    }
  }

  // Configure options
  if (!emptyCacheBetweenOperations) {
    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
      options.emptyCacheBetweenOperations : false;
  }

  // Install the error reformatter
  if (!errorFormatterInstalled) {
    errorFormatterInstalled = true;
    Error.prepareStackTrace = prepareStackTrace;
  }

  if (!uncaughtShimInstalled) {
    var installHandler = 'handleUncaughtExceptions' in options ?
      options.handleUncaughtExceptions : true;

    // Provide the option to not install the uncaught exception handler. This is
    // to support other uncaught exception handlers (in test frameworks, for
    // example). If this handler is not installed and there are no other uncaught
    // exception handlers, uncaught exceptions will be caught by node's built-in
    // exception handler and the process will still be terminated. However, the
    // generated JavaScript code will be shown above the stack trace instead of
    // the original source code.
    if (installHandler && hasGlobalProcessEventEmitter()) {
      uncaughtShimInstalled = true;
      shimEmitUncaughtException();
    }
  }
};

exports.resetRetrieveHandlers = function() {
  retrieveFileHandlers.length = 0;
  retrieveMapHandlers.length = 0;

  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);

  retrieveSourceMap = handlerExec(retrieveMapHandlers);
  retrieveFile = handlerExec(retrieveFileHandlers);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = __webpack_require__(163).SourceMapGenerator;
exports.SourceMapConsumer = __webpack_require__(299).SourceMapConsumer;
exports.SourceNode = __webpack_require__(302).SourceNode;


/***/ }),
/* 297 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(54);

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(54);
var binarySearch = __webpack_require__(300);
var ArraySet = __webpack_require__(165).ArraySet;
var base64VLQ = __webpack_require__(164);
var quickSort = __webpack_require__(301).quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ }),
/* 300 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),
/* 301 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = __webpack_require__(163).SourceMapGenerator;
var util = __webpack_require__(54);

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var toString = Object.prototype.toString

var isModern = (
  typeof Buffer.alloc === 'function' &&
  typeof Buffer.allocUnsafe === 'function' &&
  typeof Buffer.from === 'function'
)

function isArrayBuffer (input) {
  return toString.call(input).slice(8, -1) === 'ArrayBuffer'
}

function fromArrayBuffer (obj, byteOffset, length) {
  byteOffset >>>= 0

  var maxLength = obj.byteLength - byteOffset

  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds")
  }

  if (length === undefined) {
    length = maxLength
  } else {
    length >>>= 0

    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds")
    }
  }

  return isModern
    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  return isModern
    ? Buffer.from(string, encoding)
    : new Buffer(string, encoding)
}

function bufferFrom (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return isModern
    ? Buffer.from(value)
    : new Buffer(value)
}

module.exports = bufferFrom

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 305 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = __webpack_require__(77);
const path = __webpack_require__(98);
const ExtentionContext_1 = __webpack_require__(55);
const CommandRegistryProvider_1 = __webpack_require__(307);
const loggingUtil_1 = __webpack_require__(426);
const abTester_1 = __webpack_require__(427);
const isFirstInitialization_1 = __webpack_require__(428);
const getPackageJSON_1 = __webpack_require__(430);
const throwIfNotInitialized_1 = __webpack_require__(99);
const fileUtils_1 = __webpack_require__(431);
const vso_telemetry_1 = __webpack_require__(11);
const telemetryReporterFactory_1 = __webpack_require__(432);
const logFile_1 = __webpack_require__(218);
class VSLSCommandsAPI {
    constructor(options) {
        // save extension context for further imports
        ExtentionContext_1.setExtensionContext(options.extensionContext);
        if (options.telemetry) {
            vso_telemetry_1.Telemetry.init(telemetryReporterFactory_1.telemetryReporterFactory.create(options.extensionPackage), options.telemetry.featureName || 'vscode-vsls-command.', options.telemetry.canSendSensistiveInformation, options.telemetry.faultSendCallbackParam);
        }
    }
    initLogging(extensionPackage, loggingOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            // initialize tracing
            if (loggingOptions.logFileEnabled) {
                logFile_1.setLogLocation(loggingOptions.logFilePath ||
                    path.join(os.tmpdir(), `${extensionPackage.name}_logs`));
            }
            this.loggingUtil = new loggingUtil_1.LoggingUtil(extensionPackage.displayName, loggingOptions);
            yield this.loggingUtil.initLogging();
        });
    }
    // tslint:disable-next-line: variable-name
    registerCommand(commandText, CommandClass, commandOptions = {}) {
        CommandRegistryProvider_1.commandRegistry.register(commandText, CommandClass, commandOptions);
        return this;
    }
    get clientLogsLocation() {
        return logFile_1.getLogLocation();
    }
    getLastClientLogs(quantity) {
        return __awaiter(this, void 0, void 0, function* () {
            if (logFile_1.getLogLocation() != null) {
                const folderPath = logFile_1.getLogLocation();
                return yield fileUtils_1.getLastFiles(folderPath, quantity);
            }
            return [];
        });
    }
    getLogs(logLevel) {
        return this.loggingUtil.getLogs(logLevel);
    }
    setDiagnosticLogging(enableDiagnosticsLogging, focus) {
        this.loggingUtil.setDiagnosticLogging(enableDiagnosticsLogging, focus);
    }
}
let vslsCommandsAPIInternal;
exports.vslsCommands = {
    isFirstActivation: isFirstInitialization_1.isFirstActivation,
    isExtensionBeingUpdated: isFirstInitialization_1.isExtensionBeingUpdated,
    get API() {
        return throwIfNotInitialized_1.throwNotInitialized(vslsCommandsAPIInternal);
    },
    get abTester() {
        return throwIfNotInitialized_1.throwNotInitialized(exports.abTester);
    },
    get packageJSON() {
        return getPackageJSON_1.getPackageJSON();
    },
    initialize(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (vslsCommandsAPIInternal) {
                return vslsCommandsAPIInternal;
            }
            vslsCommandsAPIInternal = new VSLSCommandsAPI(options);
            // async initialize now.
            if (options.logging) {
                yield vslsCommandsAPIInternal.initLogging(options.extensionPackage, options.logging);
            }
            exports.abTester = new abTester_1.ABTester(options.extensionContext.globalState, (yield isFirstInitialization_1.isFirstActivation(options.extensionPackage)) &&
                !(yield isFirstInitialization_1.isExtensionBeingUpdated()));
        });
    },
};
//# sourceMappingURL=api.js.map

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const traceSource_1 = __webpack_require__(56);
const CommandContextBuilder_1 = __webpack_require__(340);
const telemetryStrings_1 = __webpack_require__(79);
const vso_telemetry_1 = __webpack_require__(11);
/**
 * Provider that ensures we register and execute commands safely
 * within VS Code.
 */
class CommandRegistryProvider {
    constructor() {
        this.disposables = {};
        this.trace = traceSource_1.traceSource.withName('CommandRegistry');
    }
    // tslint:disable-next-line: variable-name
    register(commandText, CommandClass, commandOptions = {}) {
        const commandInstance = new CommandClass();
        // Defer import of 'vscode' package.
        const registerCommand = __webpack_require__(1).commands
            .registerCommand;
        this.disposables[commandText] = registerCommand(commandText, (options = {}) => __awaiter(this, void 0, void 0, function* () {
            try {
                const context = CommandContextBuilder_1.CommandContextBuilder.build(commandInstance, commandText);
                const invocationOptions = Object.assign(Object.assign({}, commandOptions), options);
                return yield commandInstance.invoke(invocationOptions, context);
            }
            catch (error) {
                if (error && !error.hasRecorded) {
                    const errorMessage = `Unhandled exception (command): ${error.message}`;
                    this.trace.error(errorMessage);
                    vso_telemetry_1.Telemetry.sendFault(telemetryStrings_1.TelemetryEventNames.UNHANDLED_COMMAND_ERROR_FAULT, vso_telemetry_1.FaultType.Error, errorMessage, error);
                }
            }
        }));
    }
    dispose(commandString) {
        const disposable = this.disposables[commandString];
        if (disposable && disposable.dispose) {
            disposable.dispose();
        }
    }
    disposeAll() {
        for (const key in this.disposables) {
            if (key) {
                this.dispose(key);
            }
        }
    }
}
exports.CommandRegistryProvider = CommandRegistryProvider;
exports.commandRegistry = new CommandRegistryProvider();
//# sourceMappingURL=CommandRegistryProvider.js.map

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BrowserConsoleTraceLogger_1 = __webpack_require__(309);
exports.BrowserConsoleTraceListener = BrowserConsoleTraceLogger_1.BrowserConsoleTraceListener;
var ConsoleTraceListener_1 = __webpack_require__(168);
exports.ConsoleTraceListener = ConsoleTraceListener_1.ConsoleTraceListener;
var OutputTraceListener_1 = __webpack_require__(327);
exports.OutputTraceListener = OutputTraceListener_1.OutputTraceListener;
var MemoryTraceListener_1 = __webpack_require__(328);
exports.MemoryTraceListener = MemoryTraceListener_1.MemoryTraceListener;
//# sourceMappingURL=index.js.map

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LogLevel_1 = __webpack_require__(57);
const loggers_1 = __webpack_require__(167);
const ConsoleTraceListener_1 = __webpack_require__(168);
/**
 * A trace listener using the `console`.
 */
class BrowserConsoleTraceListener extends ConsoleTraceListener_1.ConsoleTraceListener {
    constructor(consoleReference = new loggers_1.DebugConsoleLogger()) {
        super(consoleReference);
    }
    writeEvent(source, logLevel, id, message, ...args) {
        switch (logLevel) {
            case LogLevel_1.LogLevel.Critical:
            case LogLevel_1.LogLevel.Error: {
                return this.consoleReference.error(source, message, ...args);
            }
            case LogLevel_1.LogLevel.Warning: {
                return this.consoleReference.warn(source, message, ...args);
            }
            case LogLevel_1.LogLevel.Debug: {
                return (this.consoleReference.debug)
                    ? this.consoleReference.debug(source, message, ...args)
                    : this.consoleReference.info(source, message, ...args);
            }
            default: {
                return this.consoleReference.info(source, message, ...args);
            }
        }
    }
    ;
}
exports.BrowserConsoleTraceListener = BrowserConsoleTraceListener;
;
//# sourceMappingURL=BrowserConsoleTraceLogger.js.map

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __webpack_require__(311);
/**
 * Console logger on top of debug package.
 */
class DebugConsoleLogger {
    constructor(console = globalThis.console) {
        this.console = console;
        this.tracesCache = {};
        /**
         * Method to create an `debug` trace isntance with the specified trace level.
         * Caches the create traces for reuse to reduce GC churn.
         */
        this.createTrace = (source, type, consoleFunction) => {
            const traceKey = `${source}:${type}`;
            const cachedTrace = this.tracesCache[traceKey];
            if (cachedTrace) {
                return cachedTrace;
            }
            const trace = debug_1.default(traceKey);
            trace.log = consoleFunction;
            this.tracesCache[traceKey] = trace;
            return trace;
        };
        this.log = (source, message, ...args) => {
            return this.info(source, message, ...args);
        };
        this.info = (source, message, ...args) => {
            this.createTrace(source, 'info', this.console.info)(message, ...args);
        };
        this.debug = (source, message, ...args) => {
            const method = (this.console.debug)
                ? this.console.debug
                : this.console.log;
            this.createTrace(source, 'trace', method)(message, ...args);
        };
        this.warn = (source, message, ...args) => {
            this.createTrace(source, 'warn', this.console.warn)(source, message, ...args);
        };
        this.error = (source, message, ...args) => {
            this.createTrace(source, 'error', this.console.error)(source, message, ...args);
        };
    }
}
exports.DebugConsoleLogger = DebugConsoleLogger;
DebugConsoleLogger.enable = (path) => {
    debug_1.default.enable(path);
};
//# sourceMappingURL=DebugConsoleLogger.js.map

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(312)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(313);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),
/* 313 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

(function(global) {
  'use strict';

  var dateFormat = (function() {
      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|"[^"]*"|'[^']*'/g;
      var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
      var timezoneClip = /[^-+\dA-Z]/g;
  
      // Regexes and supporting functions are cached through closure
      return function (date, mask, utc, gmt) {
  
        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
        if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
          mask = date;
          date = undefined;
        }
  
        date = date || new Date;
  
        if(!(date instanceof Date)) {
          date = new Date(date);
        }
  
        if (isNaN(date)) {
          throw TypeError('Invalid date');
        }
  
        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);
  
        // Allow setting the utc/gmt argument via the mask
        var maskSlice = mask.slice(0, 4);
        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
          mask = mask.slice(4);
          utc = true;
          if (maskSlice === 'GMT:') {
            gmt = true;
          }
        }
  
        var _ = utc ? 'getUTC' : 'get';
        var d = date[_ + 'Date']();
        var D = date[_ + 'Day']();
        var m = date[_ + 'Month']();
        var y = date[_ + 'FullYear']();
        var H = date[_ + 'Hours']();
        var M = date[_ + 'Minutes']();
        var s = date[_ + 'Seconds']();
        var L = date[_ + 'Milliseconds']();
        var o = utc ? 0 : date.getTimezoneOffset();
        var W = getWeek(date);
        var N = getDayOfWeek(date);
        var flags = {
          d:    d,
          dd:   pad(d),
          ddd:  dateFormat.i18n.dayNames[D],
          dddd: dateFormat.i18n.dayNames[D + 7],
          m:    m + 1,
          mm:   pad(m + 1),
          mmm:  dateFormat.i18n.monthNames[m],
          mmmm: dateFormat.i18n.monthNames[m + 12],
          yy:   String(y).slice(2),
          yyyy: y,
          h:    H % 12 || 12,
          hh:   pad(H % 12 || 12),
          H:    H,
          HH:   pad(H),
          M:    M,
          MM:   pad(M),
          s:    s,
          ss:   pad(s),
          l:    pad(L, 3),
          L:    pad(Math.round(L / 10)),
          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],
          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],
          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],
          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],
          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
          W:    W,
          N:    N
        };
  
        return mask.replace(token, function (match) {
          if (match in flags) {
            return flags[match];
          }
          return match.slice(1, match.length - 1);
        });
      };
    })();

  dateFormat.masks = {
    'default':               'ddd mmm dd yyyy HH:MM:ss',
    'shortDate':             'm/d/yy',
    'mediumDate':            'mmm d, yyyy',
    'longDate':              'mmmm d, yyyy',
    'fullDate':              'dddd, mmmm d, yyyy',
    'shortTime':             'h:MM TT',
    'mediumTime':            'h:MM:ss TT',
    'longTime':              'h:MM:ss TT Z',
    'isoDate':               'yyyy-mm-dd',
    'isoTime':               'HH:MM:ss',
    'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
    'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
  };

  // Internationalization strings
  dateFormat.i18n = {
    dayNames: [
      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
    ],
    monthNames: [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
    ],
    timeNames: [
      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'
    ]
  };

function pad(val, len) {
  val = String(val);
  len = len || 2;
  while (val.length < len) {
    val = '0' + val;
  }
  return val;
}

/**
 * Get the ISO 8601 week number
 * Based on comments from
 * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
 *
 * @param  {Object} `date`
 * @return {Number}
 */
function getWeek(date) {
  // Remove time components of date
  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  // Change date to Thursday same week
  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

  // Take January 4th as it is always in week 1 (see ISO 8601)
  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);

  // Change date to Thursday same week
  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

  // Check if daylight-saving-time-switch occurred and correct for it
  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  targetThursday.setHours(targetThursday.getHours() - ds);

  // Number of weeks between target Thursday and first Thursday
  var weekDiff = (targetThursday - firstThursday) / (86400000*7);
  return 1 + Math.floor(weekDiff);
}

/**
 * Get ISO-8601 numeric representation of the day of the week
 * 1 (for Monday) through 7 (for Sunday)
 * 
 * @param  {Object} `date`
 * @return {Number}
 */
function getDayOfWeek(date) {
  var dow = date.getDay();
  if(dow === 0) {
    dow = 7;
  }
  return dow;
}

/**
 * kind-of shortcut
 * @param  {*} val
 * @return {String}
 */
function kindOf(val) {
  if (val === null) {
    return 'null';
  }

  if (val === undefined) {
    return 'undefined';
  }

  if (typeof val !== 'object') {
    return typeof val;
  }

  if (Array.isArray(val)) {
    return 'array';
  }

  return {}.toString.call(val)
    .slice(8, -1).toLowerCase();
};



  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return dateFormat;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var ERROR = 'input is invalid type';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA256_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(316);
  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  var blocks = [];

  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (outputType, is224) {
    return function (message) {
      return new Sha256(is224, true).update(message)[outputType]();
    };
  };

  var createMethod = function (is224) {
    var method = createOutputMethod('hex', is224);
    if (NODE_JS) {
      method = nodeWrap(method, is224);
    }
    method.create = function () {
      return new Sha256(is224);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type, is224);
    }
    return method;
  };

  var nodeWrap = function (method, is224) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var algorithm = is224 ? 'sha224' : 'sha256';
    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
      } else {
        if (message === null || message === undefined) {
          throw new Error(ERROR);
        } else if (message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
      }
      if (Array.isArray(message) || ArrayBuffer.isView(message) ||
        message.constructor === Buffer) {
        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
      } else {
        return method(message);
      }
    };
    return nodeMethod;
  };

  var createHmacOutputMethod = function (outputType, is224) {
    return function (key, message) {
      return new HmacSha256(key, is224, true).update(message)[outputType]();
    };
  };

  var createHmacMethod = function (is224) {
    var method = createHmacOutputMethod('hex', is224);
    method.create = function (key) {
      return new HmacSha256(key, is224);
    };
    method.update = function (key, message) {
      return method.create(key).update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createHmacOutputMethod(type, is224);
    }
    return method;
  };

  function Sha256(is224, sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    if (is224) {
      this.h0 = 0xc1059ed8;
      this.h1 = 0x367cd507;
      this.h2 = 0x3070dd17;
      this.h3 = 0xf70e5939;
      this.h4 = 0xffc00b31;
      this.h5 = 0x68581511;
      this.h6 = 0x64f98fa7;
      this.h7 = 0xbefa4fa4;
    } else { // 256
      this.h0 = 0x6a09e667;
      this.h1 = 0xbb67ae85;
      this.h2 = 0x3c6ef372;
      this.h3 = 0xa54ff53a;
      this.h4 = 0x510e527f;
      this.h5 = 0x9b05688c;
      this.h6 = 0x1f83d9ab;
      this.h7 = 0x5be0cd19;
    }

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
    this.is224 = is224;
  }

  Sha256.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
      notString = true;
    }
    var code, index = 0, i, length = message.length, blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }
    return this;
  };

  Sha256.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha256.prototype.hash = function () {
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

    for (j = 16; j < 64; ++j) {
      // rightrotate
      t1 = blocks[j - 15];
      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
      t1 = blocks[j - 2];
      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
    }

    bc = b & c;
    for (j = 0; j < 64; j += 4) {
      if (this.first) {
        if (this.is224) {
          ab = 300032;
          t1 = blocks[0] - 1413257819;
          h = t1 - 150054599 << 0;
          d = t1 + 24177077 << 0;
        } else {
          ab = 704751109;
          t1 = blocks[0] - 210244248;
          h = t1 - 1521486534 << 0;
          d = t1 + 143694565 << 0;
        }
        this.first = false;
      } else {
        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
        ab = a & b;
        maj = ab ^ (a & c) ^ bc;
        ch = (e & f) ^ (~e & g);
        t1 = h + s1 + ch + K[j] + blocks[j];
        t2 = s0 + maj;
        h = d + t1 << 0;
        d = t1 + t2 << 0;
      }
      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
      da = d & a;
      maj = da ^ (d & b) ^ ab;
      ch = (h & e) ^ (~h & f);
      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
      t2 = s0 + maj;
      g = c + t1 << 0;
      c = t1 + t2 << 0;
      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
      cd = c & d;
      maj = cd ^ (c & a) ^ da;
      ch = (g & h) ^ (~g & e);
      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
      t2 = s0 + maj;
      f = b + t1 << 0;
      b = t1 + t2 << 0;
      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
      bc = b & c;
      maj = bc ^ (b & d) ^ cd;
      ch = (f & g) ^ (~f & h);
      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
      t2 = s0 + maj;
      e = a + t1 << 0;
      a = t1 + t2 << 0;
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
    this.h5 = this.h5 + f << 0;
    this.h6 = this.h6 + g << 0;
    this.h7 = this.h7 + h << 0;
  };

  Sha256.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
    if (!this.is224) {
      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
    }
    return hex;
  };

  Sha256.prototype.toString = Sha256.prototype.hex;

  Sha256.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var arr = [
      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
    ];
    if (!this.is224) {
      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
    }
    return arr;
  };

  Sha256.prototype.array = Sha256.prototype.digest;

  Sha256.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    dataView.setUint32(20, this.h5);
    dataView.setUint32(24, this.h6);
    if (!this.is224) {
      dataView.setUint32(28, this.h7);
    }
    return buffer;
  };

  function HmacSha256(key, is224, sharedMemory) {
    var i, type = typeof key;
    if (type === 'string') {
      var bytes = [], length = key.length, index = 0, code;
      for (i = 0; i < length; ++i) {
        code = key.charCodeAt(i);
        if (code < 0x80) {
          bytes[index++] = code;
        } else if (code < 0x800) {
          bytes[index++] = (0xc0 | (code >> 6));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes[index++] = (0xe0 | (code >> 12));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
          bytes[index++] = (0xf0 | (code >> 18));
          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        }
      }
      key = bytes;
    } else {
      if (type === 'object') {
        if (key === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
          key = new Uint8Array(key);
        } else if (!Array.isArray(key)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
    }

    if (key.length > 64) {
      key = (new Sha256(is224, true)).update(key).array();
    }

    var oKeyPad = [], iKeyPad = [];
    for (i = 0; i < 64; ++i) {
      var b = key[i] || 0;
      oKeyPad[i] = 0x5c ^ b;
      iKeyPad[i] = 0x36 ^ b;
    }

    Sha256.call(this, is224, sharedMemory);

    this.update(iKeyPad);
    this.oKeyPad = oKeyPad;
    this.inner = true;
    this.sharedMemory = sharedMemory;
  }
  HmacSha256.prototype = new Sha256();

  HmacSha256.prototype.finalize = function () {
    Sha256.prototype.finalize.call(this);
    if (this.inner) {
      this.inner = false;
      var innerHash = this.array();
      Sha256.call(this, this.is224, this.sharedMemory);
      this.update(this.oKeyPad);
      this.update(innerHash);
      Sha256.prototype.finalize.call(this);
    }
  };

  var exports = createMethod();
  exports.sha256 = exports;
  exports.sha224 = createMethod(true);
  exports.sha256.hmac = createHmacMethod();
  exports.sha224.hmac = createHmacMethod(true);

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha256 = exports.sha256;
    root.sha224 = exports.sha224;
    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5), __webpack_require__(15)))

/***/ }),
/* 316 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const source_map_support_1 = __webpack_require__(318);
/**
 * Converts an error object to a string, including stack trace with source map transformations.
 */
function errorToString(e) {
    if (!e) {
        return null;
    }
    let s = e.message || 'Unknown error';
    const code = e.code;
    if (code) {
        s += ' code:' + code;
    }
    // Try to use source map information to map the stack frames back to original sources.
    let stack = null;
    if (e.vslsStack) {
        try {
            stack = e.vslsStack.map((frame) => '  at ' + source_map_support_1.wrapCallSite(frame)).join('\n');
        }
        catch (e) { }
    }
    if (!stack) {
        stack = e.stack || null;
    }
    if (stack) {
        s += '\n' + stack;
    }
    return s;
}
exports.errorToString = errorToString;
;
//# sourceMappingURL=errorToString.js.map

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var SourceMapConsumer = __webpack_require__(319).SourceMapConsumer;
var path = __webpack_require__(30);

var fs;
try {
  fs = __webpack_require__(26);
  if (!fs.existsSync || !fs.readFileSync) {
    // fs doesn't have all methods we need
    fs = null;
  }
} catch (err) {
  /* nop */
}

var bufferFrom = __webpack_require__(326);

// Only install once if called multiple times
var errorFormatterInstalled = false;
var uncaughtShimInstalled = false;

// If true, the caches are reset before a stack trace formatting operation
var emptyCacheBetweenOperations = false;

// Supports {browser, node, auto}
var environment = "auto";

// Maps a file path to a string containing the file contents
var fileContentsCache = {};

// Maps a file path to a source map for that file
var sourceMapCache = {};

// Regex for detecting source maps
var reSourceMap = /^data:application\/json[^,]+base64,/;

// Priority list of retrieve handlers
var retrieveFileHandlers = [];
var retrieveMapHandlers = [];

function isInBrowser() {
  if (environment === "browser")
    return true;
  if (environment === "node")
    return false;
  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
}

function hasGlobalProcessEventEmitter() {
  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
}

function handlerExec(list) {
  return function(arg) {
    for (var i = 0; i < list.length; i++) {
      var ret = list[i](arg);
      if (ret) {
        return ret;
      }
    }
    return null;
  };
}

var retrieveFile = handlerExec(retrieveFileHandlers);

retrieveFileHandlers.push(function(path) {
  // Trim the path to make sure there is no extra whitespace.
  path = path.trim();
  if (/^file:/.test(path)) {
    // existsSync/readFileSync can't handle file protocol, but once stripped, it works
    path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
      return drive ?
        '' : // file:///C:/dir/file -> C:/dir/file
        '/'; // file:///root-dir/file -> /root-dir/file
    });
  }
  if (path in fileContentsCache) {
    return fileContentsCache[path];
  }

  var contents = '';
  try {
    if (!fs) {
      // Use SJAX if we are in the browser
      var xhr = new XMLHttpRequest();
      xhr.open('GET', path, /** async */ false);
      xhr.send(null);
      if (xhr.readyState === 4 && xhr.status === 200) {
        contents = xhr.responseText;
      }
    } else if (fs.existsSync(path)) {
      // Otherwise, use the filesystem
      contents = fs.readFileSync(path, 'utf8');
    }
  } catch (er) {
    /* ignore any errors */
  }

  return fileContentsCache[path] = contents;
});

// Support URLs relative to a directory, but be careful about a protocol prefix
// in case we are in the browser (i.e. directories may start with "http://" or "file:///")
function supportRelativeURL(file, url) {
  if (!file) return url;
  var dir = path.dirname(file);
  var match = /^\w+:\/\/[^\/]*/.exec(dir);
  var protocol = match ? match[0] : '';
  var startPath = dir.slice(protocol.length);
  if (protocol && /^\/\w\:/.test(startPath)) {
    // handle file:///C:/ paths
    protocol += '/';
    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, '/');
  }
  return protocol + path.resolve(dir.slice(protocol.length), url);
}

function retrieveSourceMapURL(source) {
  var fileData;

  if (isInBrowser()) {
     try {
       var xhr = new XMLHttpRequest();
       xhr.open('GET', source, false);
       xhr.send(null);
       fileData = xhr.readyState === 4 ? xhr.responseText : null;

       // Support providing a sourceMappingURL via the SourceMap header
       var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
                             xhr.getResponseHeader("X-SourceMap");
       if (sourceMapHeader) {
         return sourceMapHeader;
       }
     } catch (e) {
     }
  }

  // Get the URL of the source map
  fileData = retrieveFile(source);
  var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
  // Keep executing the search to find the *last* sourceMappingURL to avoid
  // picking up sourceMappingURLs from comments, strings, etc.
  var lastMatch, match;
  while (match = re.exec(fileData)) lastMatch = match;
  if (!lastMatch) return null;
  return lastMatch[1];
};

// Can be overridden by the retrieveSourceMap option to install. Takes a
// generated source filename; returns a {map, optional url} object, or null if
// there is no source map.  The map field may be either a string or the parsed
// JSON object (ie, it must be a valid argument to the SourceMapConsumer
// constructor).
var retrieveSourceMap = handlerExec(retrieveMapHandlers);
retrieveMapHandlers.push(function(source) {
  var sourceMappingURL = retrieveSourceMapURL(source);
  if (!sourceMappingURL) return null;

  // Read the contents of the source map
  var sourceMapData;
  if (reSourceMap.test(sourceMappingURL)) {
    // Support source map URL as a data url
    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
    sourceMapData = bufferFrom(rawData, "base64").toString();
    sourceMappingURL = source;
  } else {
    // Support source map URLs relative to the source URL
    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
    sourceMapData = retrieveFile(sourceMappingURL);
  }

  if (!sourceMapData) {
    return null;
  }

  return {
    url: sourceMappingURL,
    map: sourceMapData
  };
});

function mapSourcePosition(position) {
  var sourceMap = sourceMapCache[position.source];
  if (!sourceMap) {
    // Call the (overrideable) retrieveSourceMap function to get the source map.
    var urlAndMap = retrieveSourceMap(position.source);
    if (urlAndMap) {
      sourceMap = sourceMapCache[position.source] = {
        url: urlAndMap.url,
        map: new SourceMapConsumer(urlAndMap.map)
      };

      // Load all sources stored inline with the source map into the file cache
      // to pretend like they are already loaded. They may not exist on disk.
      if (sourceMap.map.sourcesContent) {
        sourceMap.map.sources.forEach(function(source, i) {
          var contents = sourceMap.map.sourcesContent[i];
          if (contents) {
            var url = supportRelativeURL(sourceMap.url, source);
            fileContentsCache[url] = contents;
          }
        });
      }
    } else {
      sourceMap = sourceMapCache[position.source] = {
        url: null,
        map: null
      };
    }
  }

  // Resolve the source URL relative to the URL of the source map
  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {
    var originalPosition = sourceMap.map.originalPositionFor(position);

    // Only return the original position if a matching line was found. If no
    // matching line is found then we return position instead, which will cause
    // the stack trace to print the path and line for the compiled file. It is
    // better to give a precise location in the compiled file than a vague
    // location in the original file.
    if (originalPosition.source !== null) {
      originalPosition.source = supportRelativeURL(
        sourceMap.url, originalPosition.source);
      return originalPosition;
    }
  }

  return position;
}

// Parses code generated by FormatEvalOrigin(), a function inside V8:
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js
function mapEvalOrigin(origin) {
  // Most eval() calls are in this format
  var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
  if (match) {
    var position = mapSourcePosition({
      source: match[2],
      line: +match[3],
      column: match[4] - 1
    });
    return 'eval at ' + match[1] + ' (' + position.source + ':' +
      position.line + ':' + (position.column + 1) + ')';
  }

  // Parse nested eval() calls using recursion
  match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
  if (match) {
    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
  }

  // Make sure we still return useful information if we didn't find anything
  return origin;
}

// This is copied almost verbatim from the V8 source code at
// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
// implementation of wrapCallSite() used to just forward to the actual source
// code of CallSite.prototype.toString but unfortunately a new release of V8
// did something to the prototype chain and broke the shim. The only fix I
// could find was copy/paste.
function CallSiteToString() {
  var fileName;
  var fileLocation = "";
  if (this.isNative()) {
    fileLocation = "native";
  } else {
    fileName = this.getScriptNameOrSourceURL();
    if (!fileName && this.isEval()) {
      fileLocation = this.getEvalOrigin();
      fileLocation += ", ";  // Expecting source position to follow.
    }

    if (fileName) {
      fileLocation += fileName;
    } else {
      // Source code does not originate from a file and is not native, but we
      // can still get the source position inside the source string, e.g. in
      // an eval string.
      fileLocation += "<anonymous>";
    }
    var lineNumber = this.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ":" + lineNumber;
      var columnNumber = this.getColumnNumber();
      if (columnNumber) {
        fileLocation += ":" + columnNumber;
      }
    }
  }

  var line = "";
  var functionName = this.getFunctionName();
  var addSuffix = true;
  var isConstructor = this.isConstructor();
  var isMethodCall = !(this.isToplevel() || isConstructor);
  if (isMethodCall) {
    var typeName = this.getTypeName();
    // Fixes shim to be backward compatable with Node v0 to v4
    if (typeName === "[object Object]") {
      typeName = "null";
    }
    var methodName = this.getMethodName();
    if (functionName) {
      if (typeName && functionName.indexOf(typeName) != 0) {
        line += typeName + ".";
      }
      line += functionName;
      if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
        line += " [as " + methodName + "]";
      }
    } else {
      line += typeName + "." + (methodName || "<anonymous>");
    }
  } else if (isConstructor) {
    line += "new " + (functionName || "<anonymous>");
  } else if (functionName) {
    line += functionName;
  } else {
    line += fileLocation;
    addSuffix = false;
  }
  if (addSuffix) {
    line += " (" + fileLocation + ")";
  }
  return line;
}

function cloneCallSite(frame) {
  var object = {};
  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
  });
  object.toString = CallSiteToString;
  return object;
}

function wrapCallSite(frame, state) {
  // provides interface backward compatibility
  if (state === undefined) {
    state = { nextPosition: null, curPosition: null }
  }
  if(frame.isNative()) {
    state.curPosition = null;
    return frame;
  }

  // Most call sites will return the source file from getFileName(), but code
  // passed to eval() ending in "//# sourceURL=..." will return the source file
  // from getScriptNameOrSourceURL() instead
  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
  if (source) {
    var line = frame.getLineNumber();
    var column = frame.getColumnNumber() - 1;

    // Fix position in Node where some (internal) code is prepended.
    // See https://github.com/evanw/node-source-map-support/issues/36
    // Header removed in node at ^10.16 || >=11.11.0
    // v11 is not an LTS candidate, we can just test the one version with it.
    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
    var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
    var headerLength = noHeader.test(process.version) ? 0 : 62;
    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
      column -= headerLength;
    }

    var position = mapSourcePosition({
      source: source,
      line: line,
      column: column
    });
    state.curPosition = position;
    frame = cloneCallSite(frame);
    var originalFunctionName = frame.getFunctionName;
    frame.getFunctionName = function() {
      if (state.nextPosition == null) {
        return originalFunctionName();
      }
      return state.nextPosition.name || originalFunctionName();
    };
    frame.getFileName = function() { return position.source; };
    frame.getLineNumber = function() { return position.line; };
    frame.getColumnNumber = function() { return position.column + 1; };
    frame.getScriptNameOrSourceURL = function() { return position.source; };
    return frame;
  }

  // Code called using eval() needs special handling
  var origin = frame.isEval() && frame.getEvalOrigin();
  if (origin) {
    origin = mapEvalOrigin(origin);
    frame = cloneCallSite(frame);
    frame.getEvalOrigin = function() { return origin; };
    return frame;
  }

  // If we get here then we were unable to change the source position
  return frame;
}

// This function is part of the V8 stack trace API, for more info see:
// https://v8.dev/docs/stack-trace-api
function prepareStackTrace(error, stack) {
  if (emptyCacheBetweenOperations) {
    fileContentsCache = {};
    sourceMapCache = {};
  }

  var name = error.name || 'Error';
  var message = error.message || '';
  var errorString = name + ": " + message;

  var state = { nextPosition: null, curPosition: null };
  var processedStack = [];
  for (var i = stack.length - 1; i >= 0; i--) {
    processedStack.push('\n    at ' + wrapCallSite(stack[i], state));
    state.nextPosition = state.curPosition;
  }
  state.curPosition = state.nextPosition = null;
  return errorString + processedStack.reverse().join('');
}

// Generate position and snippet of original source with pointer
function getErrorSource(error) {
  var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
  if (match) {
    var source = match[1];
    var line = +match[2];
    var column = +match[3];

    // Support the inline sourceContents inside the source map
    var contents = fileContentsCache[source];

    // Support files on disk
    if (!contents && fs && fs.existsSync(source)) {
      try {
        contents = fs.readFileSync(source, 'utf8');
      } catch (er) {
        contents = '';
      }
    }

    // Format the line from the original source code like node does
    if (contents) {
      var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
      if (code) {
        return source + ':' + line + '\n' + code + '\n' +
          new Array(column).join(' ') + '^';
      }
    }
  }
  return null;
}

function printErrorAndExit (error) {
  var source = getErrorSource(error);

  // Ensure error is printed synchronously and not truncated
  if (process.stderr._handle && process.stderr._handle.setBlocking) {
    process.stderr._handle.setBlocking(true);
  }

  if (source) {
    console.error();
    console.error(source);
  }

  console.error(error.stack);
  process.exit(1);
}

function shimEmitUncaughtException () {
  var origEmit = process.emit;

  process.emit = function (type) {
    if (type === 'uncaughtException') {
      var hasStack = (arguments[1] && arguments[1].stack);
      var hasListeners = (this.listeners(type).length > 0);

      if (hasStack && !hasListeners) {
        return printErrorAndExit(arguments[1]);
      }
    }

    return origEmit.apply(this, arguments);
  };
}

var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);

exports.wrapCallSite = wrapCallSite;
exports.getErrorSource = getErrorSource;
exports.mapSourcePosition = mapSourcePosition;
exports.retrieveSourceMap = retrieveSourceMap;

exports.install = function(options) {
  options = options || {};

  if (options.environment) {
    environment = options.environment;
    if (["node", "browser", "auto"].indexOf(environment) === -1) {
      throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
    }
  }

  // Allow sources to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveFile) {
    if (options.overrideRetrieveFile) {
      retrieveFileHandlers.length = 0;
    }

    retrieveFileHandlers.unshift(options.retrieveFile);
  }

  // Allow source maps to be found by methods other than reading the files
  // directly from disk.
  if (options.retrieveSourceMap) {
    if (options.overrideRetrieveSourceMap) {
      retrieveMapHandlers.length = 0;
    }

    retrieveMapHandlers.unshift(options.retrieveSourceMap);
  }

  // Support runtime transpilers that include inline source maps
  if (options.hookRequire && !isInBrowser()) {
    var Module;
    try {
      Module = __webpack_require__(26);
    } catch (err) {
      // NOP: Loading in catch block to convert webpack error to warning.
    }
    var $compile = Module.prototype._compile;

    if (!$compile.__sourceMapSupport) {
      Module.prototype._compile = function(content, filename) {
        fileContentsCache[filename] = content;
        sourceMapCache[filename] = undefined;
        return $compile.call(this, content, filename);
      };

      Module.prototype._compile.__sourceMapSupport = true;
    }
  }

  // Configure options
  if (!emptyCacheBetweenOperations) {
    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
      options.emptyCacheBetweenOperations : false;
  }

  // Install the error reformatter
  if (!errorFormatterInstalled) {
    errorFormatterInstalled = true;
    Error.prepareStackTrace = prepareStackTrace;
  }

  if (!uncaughtShimInstalled) {
    var installHandler = 'handleUncaughtExceptions' in options ?
      options.handleUncaughtExceptions : true;

    // Provide the option to not install the uncaught exception handler. This is
    // to support other uncaught exception handlers (in test frameworks, for
    // example). If this handler is not installed and there are no other uncaught
    // exception handlers, uncaught exceptions will be caught by node's built-in
    // exception handler and the process will still be terminated. However, the
    // generated JavaScript code will be shown above the stack trace instead of
    // the original source code.
    if (installHandler && hasGlobalProcessEventEmitter()) {
      uncaughtShimInstalled = true;
      shimEmitUncaughtException();
    }
  }
};

exports.resetRetrieveHandlers = function() {
  retrieveFileHandlers.length = 0;
  retrieveMapHandlers.length = 0;

  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);

  retrieveSourceMap = handlerExec(retrieveMapHandlers);
  retrieveFile = handlerExec(retrieveFileHandlers);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = __webpack_require__(172).SourceMapGenerator;
exports.SourceMapConsumer = __webpack_require__(322).SourceMapConsumer;
exports.SourceNode = __webpack_require__(325).SourceNode;


/***/ }),
/* 320 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(59);

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = __webpack_require__(59);
var binarySearch = __webpack_require__(323);
var ArraySet = __webpack_require__(174).ArraySet;
var base64VLQ = __webpack_require__(173);
var quickSort = __webpack_require__(324).quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ }),
/* 323 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};


/***/ }),
/* 324 */
/***/ (function(module, exports) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = __webpack_require__(172).SourceMapGenerator;
var util = __webpack_require__(59);

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var toString = Object.prototype.toString

var isModern = (
  typeof Buffer.alloc === 'function' &&
  typeof Buffer.allocUnsafe === 'function' &&
  typeof Buffer.from === 'function'
)

function isArrayBuffer (input) {
  return toString.call(input).slice(8, -1) === 'ArrayBuffer'
}

function fromArrayBuffer (obj, byteOffset, length) {
  byteOffset >>>= 0

  var maxLength = obj.byteLength - byteOffset

  if (maxLength < 0) {
    throw new RangeError("'offset' is out of bounds")
  }

  if (length === undefined) {
    length = maxLength
  } else {
    length >>>= 0

    if (length > maxLength) {
      throw new RangeError("'length' is out of bounds")
    }
  }

  return isModern
    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  return isModern
    ? Buffer.from(string, encoding)
    : new Buffer(string, encoding)
}

function bufferFrom (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return isModern
    ? Buffer.from(value)
    : new Buffer(value)
}

module.exports = bufferFrom

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const TraceFormat_1 = __webpack_require__(58);
const TraceListener_1 = __webpack_require__(78);
class OutputTraceListener extends TraceListener_1.TraceListener {
    constructor(outputChannelName, includeTimestamp) {
        super();
        this.includeTimestamp = includeTimestamp;
        this.channel = null;
        this.channelName = outputChannelName;
    }
    writeTo(line) {
        if (this.channel != null) {
            this.channel.appendLine(line);
        }
    }
    writeEvent(source, logLevel, id, message, ...args) {
        const line = TraceFormat_1.TraceFormat.formatEvent(this.includeTimestamp ? new Date() : null, source, logLevel, id, message, ...args);
        this.writeTo(line);
    }
    addOutputChannel(focus) {
        if (this.channel != null) {
            return;
        }
        // Defer import of 'vscode' package.
        const vscodeModule = __webpack_require__(1);
        this.channel = vscodeModule.window.createOutputChannel(this.channelName);
        if (focus) {
            // Keep OutputChannel in focus
            this.channel.show(true);
        }
    }
    removeOutputChannel() {
        if (this.channel == null) {
            return;
        }
        this.channel.clear();
        this.channel.dispose();
        this.channel = null;
    }
}
exports.OutputTraceListener = OutputTraceListener;
;
//# sourceMappingURL=OutputTraceListener.js.map

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const TraceFormat_1 = __webpack_require__(58);
const TraceListener_1 = __webpack_require__(78);
/**
 * A memory trace listener.
 */
class MemoryTraceListener extends TraceListener_1.TraceListener {
    constructor(maxLogSize) {
        super();
        this.allLogs = [];
        this.logsByLevel = new Map();
        this.maxLogSize = maxLogSize || 128;
    }
    getLogs(logLevel) {
        if (logLevel) {
            const logs = this.logsByLevel.get(logLevel);
            return logs ? logs.map(i => i) : [];
        }
        return this.allLogs.map(i => i);
    }
    writeTo(line) {
        this.addLine(line);
    }
    addLine(line, logLevel) {
        this.allLogs.push(line);
        if (this.allLogs.length > this.maxLogSize) {
            this.allLogs.splice(0, 1);
        }
        if (logLevel) {
            const logEntries = this.logsByLevel.get(logLevel);
            if (!logEntries) {
                this.logsByLevel.set(logLevel, [line]);
            }
            else {
                logEntries.push(line);
                if (logEntries.length > this.maxLogSize) {
                    logEntries.splice(0, 1);
                }
            }
        }
    }
    writeEvent(source, logLevel, id, message, ...args) {
        const line = TraceFormat_1.TraceFormat.formatEvent(new Date(), source, logLevel, id, message, ...args);
        this.addLine(line, logLevel);
    }
    ;
}
exports.MemoryTraceListener = MemoryTraceListener;
;
//# sourceMappingURL=MemoryTraceListener.js.map

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TraceLoggerMock_1 = __webpack_require__(330);
exports.ConsoleLoggerMock = TraceLoggerMock_1.ConsoleLoggerMock;
//# sourceMappingURL=index.js.map

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_OPTIONS = {
    info: () => { },
    log: () => { },
    debug: () => { },
    warn: () => { },
    error: () => { },
};
class ConsoleLoggerMock {
    constructor(options = {}) {
        this.log = (...args) => {
            throw new Error('The `log` method is not implemented');
        };
        this.info = (...args) => {
            throw new Error('The `info` method is not implemented');
        };
        this.debug = (...args) => {
            throw new Error('The `debug` method is not implemented');
        };
        this.warn = (...args) => {
            throw new Error('The `warn` method is not implemented');
        };
        this.error = (...args) => {
            throw new Error('The `error` method is not implemented');
        };
        this.optionsWithDefaults = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
        this.log = this.optionsWithDefaults.log;
        this.info = this.optionsWithDefaults.info;
        this.warn = this.optionsWithDefaults.warn;
        this.debug = this.optionsWithDefaults.debug;
        this.error = this.optionsWithDefaults.error;
    }
}
exports.ConsoleLoggerMock = ConsoleLoggerMock;
;
//# sourceMappingURL=TraceLoggerMock.js.map

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const minimatch = __webpack_require__(332);
const interfaces_1 = __webpack_require__(100);
class GlobPatternTraceFilter {
    constructor(globToVerbosity) {
        this.globToVerbosity = globToVerbosity;
        this.traceSourceVerbosityCache = new Map();
    }
    getTraceVerbosity(source) {
        let traceVerbosity = this.traceSourceVerbosityCache.get(source);
        // If we don't have a cached verbosity for this source, find the verbosity and cache it
        if (typeof traceVerbosity === 'undefined') {
            traceVerbosity = 0;
            if (this.globToVerbosity) {
                for (let traceGlob in this.globToVerbosity) {
                    if (minimatch(source, traceGlob)) {
                        traceVerbosity =
                            interfaces_1.LogLevel[this.globToVerbosity[traceGlob]];
                    }
                }
            }
            this.traceSourceVerbosityCache.set(source, traceVerbosity);
        }
        return traceVerbosity;
    }
    shouldTrace(source, logLevel, id) {
        return this.getTraceVerbosity(source) <= logLevel;
    }
}
exports.GlobPatternTraceFilter = GlobPatternTraceFilter;
if (typeof Error.prepareStackTrace === 'function') {
    // Save the stack frames as a property on all errors before preparing the stack trace string.
    const originalPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function prepareVslsStack(e, s) {
        e.vslsStack = s;
        return originalPrepareStackTrace(e, s);
    };
}
;
//# sourceMappingURL=GlobalPatternTraceFilter.js.map

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = { sep: '/' }
try {
  path = __webpack_require__(30)
} catch (er) {}

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __webpack_require__(333)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  a = a || {}
  b = b || {}
  var t = {}
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return minimatch

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig.minimatch(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return Minimatch
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  // "" only matches ""
  if (pattern.trim() === '') return p === ''

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}
  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  // don't do it more than once.
  if (this._made) return

  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = console.error

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  if (typeof pattern === 'undefined') {
    throw new TypeError('undefined pattern')
  }

  if (options.nobrace ||
    !pattern.match(/\{.*\}/)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  if (pattern.length > 1024 * 64) {
    throw new TypeError('pattern is too long')
  }

  var options = this.options

  // shortcuts
  if (!options.noglobstar && pattern === '**') return GLOBSTAR
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      case '/':
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        if (inClass) {
          // split where the last [ was, make sure we don't have
          // an invalid re. if so, re-walk the contents of the
          // would-be class to re-translate any characters that
          // were passed through as-is
          // TODO: It would probably be faster to determine this
          // without a try/catch and a new RegExp, but it's tricky
          // to do safely.  For now, this is safe and works.
          var cs = pattern.substring(classStart + 1, i)
          try {
            RegExp('[' + cs + ']')
          } catch (er) {
            // not a valid class!
            var sp = this.parse(cs, SUBPARSE)
            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
            hasMagic = hasMagic || sp[1]
            inClass = false
            continue
          }
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '.':
    case '[':
    case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = match
function match (f, partial) {
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      if (options.nocase) {
        hit = f.toLowerCase() === p.toLowerCase()
      } else {
        hit = f === p
      }
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
    return emptyFileEnd
  }

  // should be unreachable.
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

var concatMap = __webpack_require__(334);
var balanced = __webpack_require__(335);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),
/* 334 */
/***/ (function(module, exports) {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class VerbosityTraceFilter {
    constructor(verbosity) {
        this.verbosity = verbosity;
    }
    shouldTrace(source, logLevel, id) {
        return this.verbosity === undefined || this.verbosity <= logLevel;
    }
}
exports.VerbosityTraceFilter = VerbosityTraceFilter;
//# sourceMappingURL=VerbosityTraceFilter.js.map

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(42);
const interfaces_1 = __webpack_require__(100);
/**
 * Source for tracing events that associates a name with every event.
 */
class TraceSource extends events_1.EventEmitter {
    constructor(name) {
        super();
        this.name = name;
    }
    /**
     * Creates a new TraceSource with listeners copied from the existing TraceSource.
     */
    withName(name) {
        const newTraceSource = new TraceSource(name);
        this.eventNames().forEach((eventName) => {
            this.listeners(eventName).forEach((listener) => {
                newTraceSource.on(eventName, listener);
            });
        });
        return newTraceSource;
    }
    /**
     * Same as `withName` but the child trace inherits the parent name
     * as the prefix of the it's name, e.g. `parent-name:name`.
     * Useful to define additional context when same component frequently
     * used in many places.
     * Another user-case is to define a package-wide main trace and use
     * the method to create loggers that are child of the main one.
     */
    createChild(name) {
        return this.withName(`${this.name}:${name}`);
    }
    addTraceListener(listener) {
        this.on(TraceSource.eventEventName, listener.traceEvent.bind(listener));
        this.on(TraceSource.lineEventName, listener.writeLine.bind(listener));
        if (listener.flushEvents) {
            this.on(TraceSource.flushEventName, listener.flushEvents.bind(listener));
        }
    }
    flushEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.listeners(TraceSource.flushEventName).map(f => Promise.resolve(f())));
        });
    }
    writeLine(line) {
        this.emit(TraceSource.lineEventName, this.name, line);
    }
    log(logLevel, message, ...args) {
        this.traceEvent(logLevel, 0, message, ...args);
        return this;
    }
    traceEvent(logLevel, id, message, ...args) {
        this.emit(TraceSource.eventEventName, this.name, logLevel, id, message, ...args);
    }
    errorEvent(id, message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Error, id, message, ...args);
    }
    warningEvent(id, message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Warning, id, message, ...args);
    }
    infoEvent(id, message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Info, id, message, ...args);
    }
    error(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Error, 0, message, ...args);
        return this;
    }
    warning(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Warning, 0, message, ...args);
        return this;
    }
    info(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Info, 0, message, ...args);
        return this;
    }
    verbose(message, ...args) {
        this.traceEvent(interfaces_1.LogLevel.Debug, 0, message, ...args);
        return this;
    }
}
exports.TraceSource = TraceSource;
TraceSource.lineEventName = 'line';
TraceSource.eventEventName = 'event';
TraceSource.flushEventName = 'flush';
//# sourceMappingURL=TraceSource.js.map

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class TraceFilters {
    constructor(filters = []) {
        this.filters = filters;
    }
    shouldTrace(source, logLevel, id) {
        return this.filters.every(t => t.shouldTrace(source, logLevel, id));
    }
}
exports.TraceFilters = TraceFilters;
//# sourceMappingURL=TraceFilters.js.map

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const LogLevel_1 = __webpack_require__(57);
/**
 * Base implementation of the ILogger interface.
 */
class LoggerBase {
    constructor(name) {
        this.name = name;
    }
    error(message, ...args) {
        this.log(LogLevel_1.LogLevel.Error, message, ...args);
        return this;
    }
    warning(message, ...args) {
        this.log(LogLevel_1.LogLevel.Warning, message, ...args);
        return this;
    }
    info(message, ...args) {
        this.log(LogLevel_1.LogLevel.Info, message, ...args);
        return this;
    }
    verbose(message, ...args) {
        this.log(LogLevel_1.LogLevel.Debug, message, ...args);
        return this;
    }
    createChild(name) {
        return this.withName(this.name + ':' + name);
    }
}
exports.LoggerBase = LoggerBase;
/**
 * A logger implementation that use a callback to log the values.
 */
class Logger extends LoggerBase {
    constructor(name, logCallback) {
        super(name);
        this.logCallback = logCallback;
    }
    log(logLevel, message, ...args) {
        this.logCallback(logLevel, message, ...args);
        return this;
    }
    withName(name) {
        return new Logger(name, this.logCallback);
    }
}
exports.Logger = Logger;
;
//# sourceMappingURL=Logger.js.map

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const traceSource_1 = __webpack_require__(56);
class CommandContextBuilderClass {
    constructor() { }
    build(command, commandText) {
        return {
            trace: traceSource_1.traceSource.withName(this.buildTrace(command)),
            commandText,
            commandName: '',
        };
    }
    buildTrace(command) {
        let name = '';
        if (command && command.constructor && command.constructor.name) {
            name = command.constructor.name;
            name = name.replace('CommandDecorator', '');
        }
        return `Command:${name}`;
    }
}
exports.CommandContextBuilderClass = CommandContextBuilderClass;
// tslint:disable-next-line: variable-name
exports.CommandContextBuilder = new CommandContextBuilderClass();
//# sourceMappingURL=CommandContextBuilder.js.map

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = __webpack_require__(175);
const vso_logging_1 = __webpack_require__(18);
const FaultType_1 = __webpack_require__(178);
const TelemetryStrings_1 = __webpack_require__(102);
const vscode_jsonrpc_1 = __webpack_require__(6);
const Result_1 = __webpack_require__(217);
let sequence = 0;
function setSequence() {
    sequence += 1;
    return sequence;
}
class TelemetryClass {
    constructor() {
        this.telemetryEvents = {};
        this.filters = [];
        this.canSendSensitiveFlag = false;
    }
    get reporter() {
        return this.telemetryReporter;
    }
    get canSendSensitiveInformation() {
        return this.canSendSensitiveFlag;
    }
    init(reporter, featureName, canSendSensitiveInformation, faultSendCallbackParam) {
        this.telemetryReporter = reporter;
        this.canSendSensitiveFlag = canSendSensitiveInformation;
        TelemetryStrings_1.TelemetryPropertyNames.FEATURE_NAME = featureName || '';
        if (faultSendCallbackParam) {
            faultSendCallback = faultSendCallbackParam;
        }
        this.contextProperties = {};
        this.addContextProperty(TelemetryStrings_1.TelemetryPropertyNames.SESSION_ID, uuid());
    }
    addFilter(filter) {
        this.filters.push(filter);
    }
    removeFilter(filter) {
        const idx = this.filters.indexOf(filter);
        if (idx >= 0) {
            this.filters.splice(idx, 1);
        }
    }
    addContextProperties(props, isPII = false) {
        for (const [key, value] of Object.entries(props)) {
            this.addContextProperty(key, value, isPII);
        }
        return this;
    }
    addContextProperty(property, value, isPII = false) {
        // no need to set `undefined` values
        if (value === undefined) {
            return this;
        }
        const valueString = String(value);
        if (isPII && !this.canSendSensitiveInformation) {
            this.contextProperties[property] = vso_logging_1.Privacy.getShortHash(valueString);
        }
        else {
            this.contextProperties[property] = valueString;
        }
        return this;
    }
    removeContextProperty(property) {
        delete this.contextProperties[property];
    }
    getContextProperty(property) {
        return this.contextProperties[property];
    }
    addContextPropertiesToObject(properties) {
        return Object.assign({}, this.contextProperties, properties);
    }
    filterAndSendTelemetryEvent(eventName, callback, properties, measures) {
        if (!this.reporter) {
            // init not called
            return;
        }
        const augmentedMeasures = Object.assign({}, measures);
        const augmentedProperties = this.addContextPropertiesToObject(properties);
        for (const filter of this.filters) {
            if (!filter.shouldSend(eventName, augmentedProperties, augmentedMeasures)) {
                return;
            }
        }
        augmentedMeasures[TelemetryStrings_1.TelemetryPropertyNames.SEQUENCE_NUMBER] = setSequence();
        callback(augmentedProperties, augmentedMeasures);
    }
    sendTelemetryEvent(eventName, properties, measures) {
        const cb = (augmentedProperties, augmentedMeasures) => this.reporter.sendTelemetryEvent(eventName, augmentedProperties, augmentedMeasures);
        this.filterAndSendTelemetryEvent(eventName, cb, properties, measures);
    }
    sendTelemetryErrorEvent(eventName, properties, measures, errorProps) {
        const cb = (augmentedProperties, augmentedMeasures) => this.reporter.sendTelemetryErrorEvent(eventName, augmentedProperties, augmentedMeasures, errorProps);
        this.filterAndSendTelemetryEvent(eventName, cb, properties, measures);
    }
    sendFault(eventName, type, details, exception, correlatedEvent) {
        (new Fault(eventName, type, details, exception, correlatedEvent)).send();
    }
    startTimedEvent(eventName, correlate = false) {
        const timedEvent = new TimedEvent(eventName, correlate);
        // save the event to telemetry events queue
        this.telemetryEvents[timedEvent.id] = timedEvent;
        return timedEvent;
    }
    setCorrelationEvent(correlationEvent) {
        this.correlationEvent = correlationEvent;
    }
    removeCorrelationEvent(correlationEvent) {
        if (this.correlationEvent === correlationEvent) {
            this.correlationEvent = undefined;
        }
    }
    correlate(telemetryEvent) {
        if (this.correlationEvent) {
            telemetryEvent.correlateWith(this.correlationEvent);
        }
    }
    endAllPendingEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let eventId of Object.keys(this.telemetryEvents)) {
                const event = this.telemetryEvents[eventId];
                yield event.endIfNotSent();
                delete this.telemetryEvents[eventId];
            }
        });
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reporter.dispose();
        });
    }
}
exports.TelemetryClass = TelemetryClass;
// tslint:disable-next-line: variable-name
const Telemetry = new TelemetryClass();
exports.Telemetry = Telemetry;
let faultSendCallback;
class TelemetryEvent {
    constructor(eventName, correlate = false) {
        this.isSent = false;
        this.id = uuid();
        this.eventName = eventName;
        this.properties = {};
        this.measures = {};
        this.correlationId = uuid();
        if (correlate) {
            Telemetry.correlate(this);
        }
    }
    static create(property, data) {
        const correlate = data ? !!data.correlate : false;
        const telemetryEvent = new TelemetryEvent(property, correlate);
        if (data.properties) {
            Object.keys(data.properties)
                .forEach(key => telemetryEvent.addProperty(TelemetryStrings_1.TelemetryPropertyNames.FEATURE_NAME + key, data.properties[key]));
        }
        if (data.measures) {
            Object.keys(data.measures)
                .forEach(key => telemetryEvent.addMeasure(TelemetryStrings_1.TelemetryPropertyNames.FEATURE_NAME + key, data.measures[key]));
        }
        return telemetryEvent;
    }
    addProperty(property, value, isPII = false, unkeyed = false) {
        // no need to set `undefined` values
        if (value === undefined) {
            return this;
        }
        const valueString = String(value);
        if (isPII && !Telemetry.canSendSensitiveInformation) {
            this.properties[property] = vso_logging_1.Privacy.getHash(valueString, unkeyed);
        }
        else {
            this.properties[property] = valueString;
        }
        return this;
    }
    addProperties(props, isPII = true) {
        for (let [key, value] of Object.entries(props)) {
            this.addProperty(key, value, isPII);
        }
        return this;
    }
    addPropertyIfNotExists(property, value, isPII = false, unkeyed = false) {
        if (!this.propertyExists(property)) {
            this.addProperty(property, value, isPII, unkeyed);
        }
        return this;
    }
    propertyExists(property) {
        return property in this.properties;
    }
    addMeasure(measure, value) {
        this.measures[measure] = value;
    }
    addMeasureIfNotExists(measure, value) {
        if (this.measures[measure] === undefined) {
            this.addMeasure(measure, value);
        }
    }
    getCorrelationId() {
        return this.correlationId;
    }
    correlateWith(otherEvent) {
        this.correlationId = otherEvent.getCorrelationId();
        return this;
    }
    correlateWithId(correlationId) {
        this.correlationId = correlationId;
        return this;
    }
    addCommonProperties() {
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_ID, this.id);
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.CORRELATION_ID, this.correlationId);
    }
    send() {
        this.addCommonProperties();
        Telemetry.sendTelemetryEvent(this.eventName, this.properties, this.measures);
        this.isSent = true;
    }
    sendAsError(errorProps) {
        this.addCommonProperties();
        Telemetry.sendTelemetryErrorEvent(this.eventName, this.properties, this.measures, errorProps);
        this.isSent = true;
    }
}
exports.TelemetryEvent = TelemetryEvent;
class Fault extends TelemetryEvent {
    constructor(eventName, type, details, exception, correlatedEvent) {
        super(eventName);
        this.exception = exception;
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.FAULT_TYPE, FaultType_1.FaultType[type]);
        if (details) {
            this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_MESSAGE, cleanSensitiveInformation(details));
        }
        let exceptionStack = '';
        if (exception && exception instanceof vscode_jsonrpc_1.ResponseError) {
            if (exception.code && typeof exception.code === 'number') {
                this.addMeasure(TelemetryStrings_1.TelemetryPropertyNames.EVENT_EXCEPTION_CODE, exception.code);
            }
            if (exception.data && typeof exception.data === 'string') {
                // RPC response errors have the remote stack trace in the data property.
                exceptionStack += cleanSensitiveInformation(exception.data) +
                    '\n   --- End of remote exception stack trace ---\n';
            }
        }
        if (exception && exception.stack && typeof exception.stack === 'string') {
            exceptionStack += cleanSensitiveInformation(vso_logging_1.errorToString(exception));
        }
        if (!exceptionStack) {
            exceptionStack = 'No Stack';
        }
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_EXCEPTION_STACK, exceptionStack);
        if (correlatedEvent) {
            this.correlateWith(correlatedEvent);
        }
    }
    send() {
        const _super = Object.create(null, {
            sendAsError: { get: () => super.sendAsError }
        });
        return __awaiter(this, void 0, void 0, function* () {
            let errorProps = [];
            if (faultSendCallback) {
                errorProps = yield faultSendCallback(this);
            }
            return _super.sendAsError.call(this, [...errorProps, TelemetryStrings_1.TelemetryPropertyNames.EVENT_MESSAGE, TelemetryStrings_1.TelemetryPropertyNames.EVENT_EXCEPTION_STACK]);
        });
    }
}
exports.Fault = Fault;
class TimedEvent extends TelemetryEvent {
    constructor(eventName, correlate = false, sendStartEvent = false) {
        super(eventName, correlate);
        this.startTime = (new Date()).getTime();
        this.lastMarkTime = this.startTime;
        TimedEvent.scopeStack.push(this);
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_CREATION_TIME, new Date().toISOString());
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_TYPE, TelemetryStrings_1.TelemetryPropertyValues.END);
        if (sendStartEvent) {
            const startEvent = new TelemetryEvent(eventName);
            startEvent.correlateWith(this);
            startEvent.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_TYPE, TelemetryStrings_1.TelemetryPropertyValues.START);
            startEvent.send();
        }
    }
    markTime(markName, fromStart = false) {
        let currentTime = (new Date()).getTime();
        let duration = fromStart ? (currentTime - this.startTime) : (currentTime - this.lastMarkTime);
        this.lastMarkTime = currentTime;
        this.addMeasure(markName, duration);
        return duration;
    }
    end(result, message, sendNow = true) {
        this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_RESULT, Result_1.Result[result]);
        if (message) {
            this.addProperty(TelemetryStrings_1.TelemetryPropertyNames.EVENT_MESSAGE, cleanSensitiveInformation(message));
        }
        const duration = this.markTime(TelemetryStrings_1.TelemetryPropertyNames.EVENT_DURATION, true);
        Telemetry.removeCorrelationEvent(this);
        if (sendNow) {
            this.send();
        }
        for (let i = TimedEvent.scopeStack.length - 1; i >= 0; i--) {
            if (TimedEvent.scopeStack[i] === this) {
                TimedEvent.scopeStack.splice(i, 1);
            }
        }
        return duration;
    }
    endIfNotSent() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isSent) {
                return;
            }
            yield this.end(Result_1.Result.Cancel, 'Completing pending telemetry events.');
        });
    }
}
exports.TimedEvent = TimedEvent;
TimedEvent.scopeStack = [];
function removeEmailAddresses(str) {
    return str.replace(/[\S]+@[\S]+/gi, '[EMAIL]');
}
function cleanSensitiveInformation(str) {
    return str ? removeEmailAddresses(removePath(str, '[PATH]/')) : str;
}
exports.cleanSensitiveInformation = cleanSensitiveInformation;
function removePath(filePath, replacementString = '') {
    return filePath.replace(/([A-Za-z]:)?(\S*[\\\/])+\S*/gi, (match, drive, directory, offset, whole) => {
        if (/^\d{1,4}\/\d{1,2}\/\d{1,4}$/.test(match)) { // This is a date. No need to scrub.
            return match;
        }
        else {
            const driveAndDirectoryLength = (drive ? drive.length : 0) + directory.length;
            const fileName = match.substr(driveAndDirectoryLength);
            return replacementString + fileName;
        }
    });
}
exports.propagateOffsetMarkTime = (markName, markEvent) => {
    for (let i = 0; i < TimedEvent.scopeStack.length; i++) {
        const targetEvent = TimedEvent.scopeStack[i];
        if (targetEvent !== markEvent) {
            targetEvent.markTime(markName);
        }
    }
};
//# sourceMappingURL=Telemetry.js.map

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(176);
var bytesToUuid = __webpack_require__(177);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(176);
var bytesToUuid = __webpack_require__(177);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15), __webpack_require__(5)))

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
const is = __webpack_require__(60);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    ErrorCodes.serverErrorStart = -32099;
    ErrorCodes.serverErrorEnd = -32000;
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    // Defined by the protocol.
    ErrorCodes.RequestCancelled = -32800;
    // Defined by VSCode library.
    ErrorCodes.MessageWriteError = 1;
    ErrorCodes.MessageReadError = 2;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        return {
            code: this.code,
            message: this.message,
            data: this.data,
        };
    }
}
exports.ResponseError = ResponseError;
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageType {
    constructor(_method, _numberOfParams) {
        this._method = _method;
        this._numberOfParams = _numberOfParams;
    }
    get method() {
        return this._method;
    }
    get numberOfParams() {
        return this._numberOfParams;
    }
}
exports.AbstractMessageType = AbstractMessageType;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageType {
    constructor(method) {
        super(method, 0);
        this._ = undefined;
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageType {
    constructor(method) {
        super(method, 2);
        this._ = undefined;
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageType {
    constructor(method) {
        super(method, 3);
        this._ = undefined;
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageType {
    constructor(method) {
        super(method, 4);
        this._ = undefined;
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageType {
    constructor(method) {
        super(method, 5);
        this._ = undefined;
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageType {
    constructor(method) {
        super(method, 6);
        this._ = undefined;
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageType {
    constructor(method) {
        super(method, 7);
        this._ = undefined;
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageType {
    constructor(method) {
        super(method, 8);
        this._ = undefined;
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageType {
    constructor(method) {
        super(method, 9);
        this._ = undefined;
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageType {
    constructor(method) {
        super(method, 0);
        this._ = undefined;
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageType {
    constructor(method) {
        super(method, 1);
        this._ = undefined;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageType {
    constructor(method) {
        super(method, 2);
        this._ = undefined;
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageType {
    constructor(method) {
        super(method, 3);
        this._ = undefined;
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageType {
    constructor(method) {
        super(method, 4);
        this._ = undefined;
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageType {
    constructor(method) {
        super(method, 5);
        this._ = undefined;
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageType {
    constructor(method) {
        super(method, 6);
        this._ = undefined;
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageType {
    constructor(method) {
        super(method, 7);
        this._ = undefined;
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageType {
    constructor(method) {
        super(method, 8);
        this._ = undefined;
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageType {
    constructor(method) {
        super(method, 9);
        this._ = undefined;
    }
}
exports.NotificationType9 = NotificationType9;
/**
 * Tests if the given message is a request message
 */
function isRequestMessage(message) {
    let candidate = message;
    return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
}
exports.isRequestMessage = isRequestMessage;
/**
 * Tests if the given message is a notification message
 */
function isNotificationMessage(message) {
    let candidate = message;
    return candidate && is.string(candidate.method) && message.id === void 0;
}
exports.isNotificationMessage = isNotificationMessage;
/**
 * Tests if the given message is a response message
 */
function isResponseMessage(message) {
    let candidate = message;
    return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
}
exports.isResponseMessage = isResponseMessage;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(80);
const Is = __webpack_require__(60);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        let candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    let handle = setTimeout(callback.bind(context), 0);
    return { dispose() { clearTimeout(handle); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this._emitter = undefined;
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        this.cancel();
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.Last = 2;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
    }
    delete(key) {
        const item = this._map.get(key);
        if (!item) {
            return false;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return true;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            current = current.next;
        }
    }
    forEachReverse(callbackfn, thisArg) {
        let current = this._tail;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            current = current.previous;
        }
    }
    values() {
        let result = [];
        let current = this._head;
        while (current) {
            result.push(current.value);
            current = current.next;
        }
        return result;
    }
    keys() {
        let result = [];
        let current = this._head;
        while (current) {
            result.push(current.key);
            current = current.next;
        }
        return result;
    }
    /* JSON RPC run on es5 which has no Symbol.iterator
    public keys(): IterableIterator<K> {
        let current = this._head;
        let iterator: IterableIterator<K> = {
            [Symbol.iterator]() {
                return iterator;
            },
            next():IteratorResult<K> {
                if (current) {
                    let result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                } else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }

    public values(): IterableIterator<V> {
        let current = this._head;
        let iterator: IterableIterator<V> = {
            [Symbol.iterator]() {
                return iterator;
            },
            next():IteratorResult<V> {
                if (current) {
                    let result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                } else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    */
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            this._head = item.next;
        }
        else if (item === this._tail) {
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
        }
    }
}
exports.LinkedMap = LinkedMap;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __webpack_require__(30);
const os_1 = __webpack_require__(77);
const crypto_1 = __webpack_require__(10);
const net_1 = __webpack_require__(26);
const messageReader_1 = __webpack_require__(104);
const messageWriter_1 = __webpack_require__(105);
function generateRandomPipeName() {
    const randomSuffix = crypto_1.randomBytes(21).toString('hex');
    if (process.platform === 'win32') {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
    }
    else {
        // Mac/Unix: use socket file
        return path_1.join(os_1.tmpdir(), `vscode-${randomSuffix}.sock`);
    }
}
exports.generateRandomPipeName = generateRandomPipeName;
function createClientPipeTransport(pipeName, encoding = 'utf-8') {
    let connectResolve;
    let connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = net_1.createServer((socket) => {
            server.close();
            connectResolve([
                new messageReader_1.SocketMessageReader(socket, encoding),
                new messageWriter_1.SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(pipeName, () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientPipeTransport = createClientPipeTransport;
function createServerPipeTransport(pipeName, encoding = 'utf-8') {
    const socket = net_1.createConnection(pipeName);
    return [
        new messageReader_1.SocketMessageReader(socket, encoding),
        new messageWriter_1.SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerPipeTransport = createServerPipeTransport;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 349 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),
/* 350 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(108).Buffer;
var util = __webpack_require__(352);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 352 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(183);

/*<replacement>*/
var util = Object.create(__webpack_require__(62));
util.inherits = __webpack_require__(2);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(109);


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(36);


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(107).Transform


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(107).PassThrough


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(2)
var Hash = __webpack_require__(43)
var Buffer = __webpack_require__(4).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(2)
var Hash = __webpack_require__(43)
var Buffer = __webpack_require__(4).Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(2)
var Sha256 = __webpack_require__(184)
var Hash = __webpack_require__(43)
var Buffer = __webpack_require__(4).Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2)
var SHA512 = __webpack_require__(185)
var Hash = __webpack_require__(43)
var Buffer = __webpack_require__(4).Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__(2)
var Buffer = __webpack_require__(4).Buffer

var Base = __webpack_require__(31)

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(188)


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__(190)
var defaultEncoding = __webpack_require__(191)
var sync = __webpack_require__(192)
var Buffer = __webpack_require__(4).Buffer

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}

function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out)
    })
  }, function (e) {
    process.nextTick(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
  }

  checkParameters(password, salt, iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15), __webpack_require__(5)))

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__(367)
var aes = __webpack_require__(114)
var aesModes = __webpack_require__(115)
var desModes = __webpack_require__(380)
var ebtk = __webpack_require__(83)

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__(31)
var des = __webpack_require__(368)
var inherits = __webpack_require__(2)
var Buffer = __webpack_require__(4).Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(193);
exports.Cipher = __webpack_require__(113);
exports.DES = __webpack_require__(194);
exports.CBC = __webpack_require__(369);
exports.EDE = __webpack_require__(370);


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(19);
var inherits = __webpack_require__(2);

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(19);
var inherits = __webpack_require__(2);

var Cipher = __webpack_require__(113);
var DES = __webpack_require__(194);

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__(115)
var AuthCipher = __webpack_require__(198)
var Buffer = __webpack_require__(4).Buffer
var StreamCipher = __webpack_require__(199)
var Transform = __webpack_require__(31)
var aes = __webpack_require__(82)
var ebtk = __webpack_require__(83)
var inherits = __webpack_require__(2)

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher


/***/ }),
/* 372 */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(63)

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer
var xor = __webpack_require__(63)

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(63)

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(4).Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__(198)
var Buffer = __webpack_require__(4).Buffer
var MODES = __webpack_require__(115)
var StreamCipher = __webpack_require__(199)
var Transform = __webpack_require__(31)
var aes = __webpack_require__(82)
var ebtk = __webpack_require__(83)
var inherits = __webpack_require__(2)

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv


/***/ }),
/* 380 */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}


/***/ }),
/* 381 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 382 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 383 */
/***/ (function(module) {

module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(9);
var MillerRabin = __webpack_require__(203);
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(201);
var randomBytes = __webpack_require__(34);
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(61)
var stream = __webpack_require__(35)
var inherits = __webpack_require__(2)
var sign = __webpack_require__(386)
var verify = __webpack_require__(418)

var algorithms = __webpack_require__(188)
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(186)
var crt = __webpack_require__(117)
var EC = __webpack_require__(118).ec
var BN = __webpack_require__(9)
var parseKeys = __webpack_require__(85)
var curves = __webpack_require__(213)

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 387 */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(20);
var BN = __webpack_require__(9);
var inherits = __webpack_require__(2);
var Base = __webpack_require__(84);

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var inherits = __webpack_require__(2);
var Base = __webpack_require__(84);

var utils = __webpack_require__(20);

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(20);
var BN = __webpack_require__(9);
var inherits = __webpack_require__(2);
var Base = __webpack_require__(84);

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(392);
exports.sha224 = __webpack_require__(393);
exports.sha256 = __webpack_require__(207);
exports.sha384 = __webpack_require__(394);
exports.sha512 = __webpack_require__(208);


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var common = __webpack_require__(64);
var shaCommon = __webpack_require__(206);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var SHA256 = __webpack_require__(207);

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};



/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);

var SHA512 = __webpack_require__(208);

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var common = __webpack_require__(64);

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(27);
var assert = __webpack_require__(19);

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};


/***/ }),
/* 397 */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var HmacDRBG = __webpack_require__(399);
var utils = __webpack_require__(20);
var curves = __webpack_require__(119);
var rand = __webpack_require__(116);
var assert = utils.assert;

var KeyPair = __webpack_require__(400);
var Signature = __webpack_require__(401);

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(120);
var utils = __webpack_require__(204);
var assert = __webpack_require__(19);

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var utils = __webpack_require__(20);
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);

var utils = __webpack_require__(20);
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(120);
var curves = __webpack_require__(119);
var utils = __webpack_require__(20);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(403);
var Signature = __webpack_require__(404);

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(20);
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(9);
var utils = __webpack_require__(20);
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(65)

exports.certificate = __webpack_require__(415)

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(65);
var inherits = __webpack_require__(2);

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(407).runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};


/***/ }),
/* 407 */
/***/ (function(module, exports) {

var indexOf = function (xs, item) {
    if (xs.indexOf) return xs.indexOf(item);
    else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
    }
    return -1;
};
var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    if (context) {
        forEach(Object_keys(ctx), function (key) {
            context[key] = ctx[key];
        });
    }

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.isContext = function (context) {
    return context instanceof Context;
};

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2);

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

var Reporter = __webpack_require__(66).Reporter;
var EncoderBuffer = __webpack_require__(66).EncoderBuffer;
var DecoderBuffer = __webpack_require__(66).DecoderBuffer;
var assert = __webpack_require__(19);

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(210);

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;

decoders.der = __webpack_require__(211);
decoders.pem = __webpack_require__(412);


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2);
var Buffer = __webpack_require__(0).Buffer;

var DERDecoder = __webpack_require__(211);

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;

encoders.der = __webpack_require__(212);
encoders.pem = __webpack_require__(414);


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(2);

var DEREncoder = __webpack_require__(212);

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(65)

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate


/***/ }),
/* 416 */
/***/ (function(module) {

module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = __webpack_require__(83)
var ciphers = __webpack_require__(114)
var Buffer = __webpack_require__(4).Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(9)
var EC = __webpack_require__(118).ec
var parseKeys = __webpack_require__(85)
var curves = __webpack_require__(213)

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(118)
var BN = __webpack_require__(9)

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(421)
exports.privateDecrypt = __webpack_require__(422)

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(85)
var randomBytes = __webpack_require__(34)
var createHash = __webpack_require__(61)
var mgf = __webpack_require__(214)
var xor = __webpack_require__(215)
var BN = __webpack_require__(9)
var withPublic = __webpack_require__(216)
var crt = __webpack_require__(117)
var Buffer = __webpack_require__(4).Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

var parseKeys = __webpack_require__(85)
var mgf = __webpack_require__(214)
var xor = __webpack_require__(215)
var BN = __webpack_require__(9)
var crt = __webpack_require__(117)
var createHash = __webpack_require__(61)
var withPublic = __webpack_require__(216)
var Buffer = __webpack_require__(4).Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = __webpack_require__(4)
var randombytes = __webpack_require__(34)
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15), __webpack_require__(5)))

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = __webpack_require__(26);
const messageReader_1 = __webpack_require__(104);
const messageWriter_1 = __webpack_require__(105);
function createClientSocketTransport(port, encoding = 'utf-8') {
    let connectResolve;
    let connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = net_1.createServer((socket) => {
            server.close();
            connectResolve([
                new messageReader_1.SocketMessageReader(socket, encoding),
                new messageWriter_1.SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(port, '127.0.0.1', () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientSocketTransport = createClientSocketTransport;
function createServerSocketTransport(port, encoding = 'utf-8') {
    const socket = net_1.createConnection(port, '127.0.0.1');
    return [
        new messageReader_1.SocketMessageReader(socket, encoding),
        new messageWriter_1.SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerSocketTransport = createServerSocketTransport;


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const TelemetryStrings_1 = __webpack_require__(102);
// This filter ensures that only one telemetry event with the given
// event name and set of properties is ever sent. This is useful in
// situations where the same event can be sent many times; e.g. exceptions.
class SendOnceFilter {
    constructor(eventName, distinctProperties = []) {
        this.eventName = eventName;
        this.distinctProperties = distinctProperties;
        this.sentEventsProperties = [];
    }
    shouldSend(eventName, properties, measures) {
        if (eventName === this.eventName) {
            for (const sentProperties of this.sentEventsProperties) {
                if (this.propertySubsetsEqual(properties, sentProperties)) {
                    return false;
                }
            }
            this.sentEventsProperties.push(this.createPropertySubset(properties));
        }
        return true;
    }
    reset() {
        this.sentEventsProperties = [];
    }
    createPropertySubset(properties) {
        const propertySubset = {};
        for (const p of this.distinctProperties) {
            propertySubset[p] = properties[p];
        }
        return propertySubset;
    }
    propertySubsetsEqual(properties1, properties2) {
        for (const p of this.distinctProperties) {
            if (properties1[p] !== properties2[p]) {
                return false;
            }
        }
        return true;
    }
}
exports.SendOnceFilter = SendOnceFilter;
class SamplingFilter {
    constructor(samplingConfig) {
        this.samplingConfig = samplingConfig;
    }
    shouldSend(eventName, properties, measures) {
        if (!eventName) {
            return true;
        }
        // Check if sampling is enabled for this event
        const sampleRate = this.samplingConfig[eventName];
        if (typeof sampleRate === 'number' && !isNaN(sampleRate)) {
            if (sampleRate === 0 || Math.random() * sampleRate > 1) {
                // The event is disabled (sampleRate is 0) or sampled out
                return false;
            }
            // Include into the sample - add sample rate measure
            measures[TelemetryStrings_1.TelemetryPropertyNames.SAMPLE_RATE] = sampleRate;
        }
        return true;
    }
}
exports.SamplingFilter = SamplingFilter;
//# sourceMappingURL=TelemetryFilters.js.map

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
const traceSource_1 = __webpack_require__(56);
const logFile_1 = __webpack_require__(218);
class LoggingUtil {
    constructor(displayName, loggingOptions = {}) {
        this.displayName = displayName;
        this.loggingOptions = loggingOptions;
        const outputChannelName = this.loggingOptions.outputChannelName || this.displayName;
        this.outputTraceListener = new vso_logging_1.OutputTraceListener(outputChannelName, this.loggingOptions.outputChannelTimestamp);
        this.memoryTraceListener = new vso_logging_1.MemoryTraceListener(loggingOptions.logMaxSize);
    }
    getLogs(logLevel) {
        return this.memoryTraceListener.getLogs(logLevel);
    }
    initLogging() {
        return __awaiter(this, void 0, void 0, function* () {
            traceSource_1.traceSource.addTraceListener(this.memoryTraceListener);
            traceSource_1.traceSource.addTraceListener(this.outputTraceListener);
            if (this.loggingOptions.diagnosticsLogging) {
                this.setDiagnosticLogging(this.loggingOptions.diagnosticsLogging.enable, this.loggingOptions.diagnosticsLogging.focus);
            }
            if (this.loggingOptions.logFileEnabled) {
                this.logFileTraceListener = yield logFile_1.createLogFileListener();
                if (this.logFileTraceListener) {
                    traceSource_1.traceSource.addTraceListener(this.logFileTraceListener);
                }
            }
            this.setLoggingFilters(this.loggingOptions.logLevel, this.loggingOptions.filters, this.loggingOptions.traceFilter);
            if (this.loggingOptions.obfuscateProperties) {
                // copy obfuscation properties
                Object.entries(this.loggingOptions.obfuscateProperties).forEach((kvp) => {
                    vso_logging_1.LoggerSettings.obfuscateProperties[kvp[0]] = kvp[1];
                });
            }
        });
    }
    setLoggingFilters(logLevel, filters = {}, traceFilter) {
        const traceFilters = new vso_logging_1.TraceFilters([
            new vso_logging_1.VerbosityTraceFilter(logLevel ? vso_logging_1.LogLevel[logLevel] : undefined),
            new vso_logging_1.GlobPatternTraceFilter(filters),
        ]);
        if (traceFilter) {
            traceFilters.filters.push(traceFilter);
        }
        this.outputTraceListener.filter = traceFilters;
        if (this.logFileTraceListener) {
            this.logFileTraceListener.filter = traceFilters;
        }
    }
    setDiagnosticLogging(enableDiagnosticsLogging = true, focus = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (enableDiagnosticsLogging) {
                this.outputTraceListener.addOutputChannel(focus);
            }
            else {
                this.outputTraceListener.removeOutputChannel();
            }
        });
    }
}
exports.LoggingUtil = LoggingUtil;
//# sourceMappingURL=loggingUtil.js.map

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_telemetry_1 = __webpack_require__(11);
const telemetryStrings_1 = __webpack_require__(79);
const abTestDefaults = {
    shouldAllowConcurrentExperiments: false,
};
const AB_TESTS_SETTING_KEY = 'vscode-vsls-commands-ab-tests';
class ABTester {
    constructor(storage, isFirstInitialization) {
        this.settingsStorage = storage;
        this.isFirstInitialization = isFirstInitialization;
    }
    /**
     * Method to initialize the singleton.
     */
    initialize(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.options = options;
            const { settingsStorage, abTests, isFirstInitialization } = options;
            // update settings storage  object if was passed
            this.settingsStorage = settingsStorage || this.settingsStorage;
            this.isFirstInitialization =
                isFirstInitialization != null ? isFirstInitialization : this.isFirstInitialization;
            // make sure there is the AB test config record on construction
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            if (!currentConfig) {
                const initConfig = {
                    currentTests: {},
                    evaluatedTests: {},
                };
                yield this.settingsStorage.update(AB_TESTS_SETTING_KEY, initConfig);
            }
            for (let i = 0; i < abTests.length; i++) {
                // add defaults
                abTests[i] = Object.assign(Object.assign({}, abTestDefaults), abTests[i]);
            }
            yield this.initializeTests();
            yield this.addTelemetry();
        });
    }
    addTelemetry() {
        return __awaiter(this, void 0, void 0, function* () {
            // Adds AB test related properties to every telemetry event
            const abExperiment = yield this.isPartOfAnyExperiment();
            vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.CURRENT_AB_EXPERIMENT, abExperiment);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.COUNT_OF_CONCURRENT_AB_EXPERIMENTS, yield this.getCountOfCurrentExperiments());
            vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.CURRENT_AB_EXPERIMENT_GROUP, yield this.isPartOfExperiment(abExperiment));
        });
    }
    initializeTests() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let abTest of this.options.abTests) {
                if ((yield this.isPartOfAnyExperiment()) && !abTest.shouldAllowConcurrentExperiments) {
                    continue;
                }
                yield this.initializeTest(abTest);
            }
        });
    }
    cleanUpOldTest(abTest) {
        const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
        // if remote setting for the test is not set,
        // and we have the test record, delete it
        if (currentConfig.evaluatedTests[abTest.name]) {
            delete currentConfig.evaluatedTests[abTest.name];
        }
        if (currentConfig.currentTests[abTest.name]) {
            delete currentConfig.currentTests[abTest.name];
        }
        this.settingsStorage.update(AB_TESTS_SETTING_KEY, currentConfig);
    }
    initializeTest(abTest) {
        return __awaiter(this, void 0, void 0, function* () {
            const { enabledTests } = this.options;
            const remoteEnableTestSetting = enabledTests[abTest.name];
            if (!remoteEnableTestSetting) {
                this.cleanUpOldTest(abTest);
            }
            // if the test should be run
            if (abTest.shouldStartOnFirstRunOnly && !this.isFirstInitialization) {
                return;
            }
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const isPartOfAnyExperiment = !(yield this.isPartOfAnyExperiment());
            const isEvaluatedAlready = !currentConfig.evaluatedTests[abTest.name];
            if (isPartOfAnyExperiment && isEvaluatedAlready && remoteEnableTestSetting) {
                const currentGroup = this.initializeGroupForTest(abTest, currentConfig);
                // if selected for any of the experimental groups
                if (currentGroup) {
                    currentConfig.currentTests[abTest.name] = { currentGroup };
                }
                this.settingsStorage.update(AB_TESTS_SETTING_KEY, currentConfig);
            }
        });
    }
    initializeGroupForTest(abTest, currentConfig) {
        const randomNumber = Math.random();
        let currentLowerBound = 0;
        for (let group of abTest.groups) {
            let currentUpperBound = currentLowerBound + group.probability;
            if (randomNumber > currentLowerBound && randomNumber <= currentUpperBound) {
                return;
            }
            currentLowerBound = currentUpperBound;
        }
        currentConfig.evaluatedTests[abTest.name] = true;
    }
    /**
     * Method to check if the current client if part of a particular experiment.
     */
    isPartOfExperiment(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!name) {
                return null;
            }
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const experimentRecord = currentConfig.currentTests[name];
            return experimentRecord ? experimentRecord.currentGroup : null;
        });
    }
    /**
     * Method to check if the current client is part of any experiment.
     */
    isPartOfAnyExperiment() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const currentTests = Object.keys(currentConfig.currentTests);
            return currentTests[0] || null;
        });
    }
    /**
     * Method to get how many concurrent experiemnts the client is a part of.
     */
    getCountOfCurrentExperiments() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentConfig = this.settingsStorage.get(AB_TESTS_SETTING_KEY);
            const currentTests = Object.keys(currentConfig.currentTests);
            return currentTests.length;
        });
    }
}
exports.ABTester = ABTester;
//# sourceMappingURL=abTester.js.map

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __webpack_require__(98);
const fileAccess_1 = __webpack_require__(67);
const loadJSON_1 = __webpack_require__(121);
const telemetryStrings_1 = __webpack_require__(79);
const ExtentionContext_1 = __webpack_require__(55);
const throwIfNotInitialized_1 = __webpack_require__(99);
const vso_telemetry_1 = __webpack_require__(11);
/**
 * Function to check if the folder is LiveShare extension directory.
 * @param pathComponents
 *      - @source - the path to the folder.
 *      - @name - folder name.
 * @returns Whether the folder is the LiveShare extension directory.
 */
const isCurrentExtensionDirectory = (extensionRoot, pathComponents) => {
    const { source, name } = pathComponents;
    const folderPath = path.join(source, name);
    const packageInfo = loadJSON_1.loadJSON(path.resolve(extensionRoot, './package.json'));
    const isDirectory = fileAccess_1.fileAccess.lstatSync(folderPath).isDirectory();
    if (isDirectory) {
        return new RegExp(`^${packageInfo.publisher}\\.${packageInfo.name}-[0-9]`).test(name);
    }
    return false;
};
/**
 * Function to get all liveshare directory names form the VSCode extensions directory.
 * @param source Path to the extensions directory.
 */
const getCurrentExtensionDirectories = () => __awaiter(void 0, void 0, void 0, function* () {
    throwIfNotInitialized_1.throwNotInitialized(ExtentionContext_1.extensionContext);
    const source = ExtentionContext_1.extensionContext.extensionPath;
    return (yield fileAccess_1.fileAccess.readdirAsync(source))
        .map((name) => {
        return { source, name };
    })
        .filter(isCurrentExtensionDirectory.bind(null, source));
});
/**
 * Function to check whether the current extension is the only LiveShare extension in the VSCode extensions folder.
 * @returns Whether the current extension is the only LiveShare extension in the VSCode extensions folder.
 */
exports.isExtensionBeingUpdated = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const directories = yield getCurrentExtensionDirectories();
        return directories.length > 1;
    }
    catch (e) {
        return false;
    }
});
exports.isFirstActivation = (packageJSON) => __awaiter(void 0, void 0, void 0, function* () {
    throwIfNotInitialized_1.throwNotInitialized(ExtentionContext_1.extensionContext);
    const { globalState } = ExtentionContext_1.extensionContext;
    const EXT_FIRST_ACTIVATION_VERSION_KEY = `${packageJSON.name}-first-activation-flag`;
    let wasActivatedBefore = false;
    if (!globalState.get(EXT_FIRST_ACTIVATION_VERSION_KEY)) {
        yield globalState.update(EXT_FIRST_ACTIVATION_VERSION_KEY, packageJSON.version);
        wasActivatedBefore = true;
    }
    vso_telemetry_1.Telemetry.addContextProperty(telemetryStrings_1.TelemetryPropertyNames.IS_FIRST_ACTIVATION, wasActivatedBefore);
    return wasActivatedBefore;
});
//# sourceMappingURL=isFirstInitialization.js.map

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const singleComment = Symbol('singleComment');
const multiComment = Symbol('multiComment');
const stripWithoutWhitespace = () => '';
const stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\S/g, ' ');

const isEscaped = (jsonString, quotePosition) => {
	let index = quotePosition - 1;
	let backslashCount = 0;

	while (jsonString[index] === '\\') {
		index -= 1;
		backslashCount += 1;
	}

	return Boolean(backslashCount % 2);
};

module.exports = (jsonString, options = {}) => {
	const strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;

	let insideString = false;
	let insideComment = false;
	let offset = 0;
	let result = '';

	for (let i = 0; i < jsonString.length; i++) {
		const currentCharacter = jsonString[i];
		const nextCharacter = jsonString[i + 1];

		if (!insideComment && currentCharacter === '"') {
			const escaped = isEscaped(jsonString, i);
			if (!escaped) {
				insideString = !insideString;
			}
		}

		if (insideString) {
			continue;
		}

		if (!insideComment && currentCharacter + nextCharacter === '//') {
			result += jsonString.slice(offset, i);
			offset = i;
			insideComment = singleComment;
			i++;
		} else if (insideComment === singleComment && currentCharacter + nextCharacter === '\r\n') {
			i++;
			insideComment = false;
			result += strip(jsonString, offset, i);
			offset = i;
			continue;
		} else if (insideComment === singleComment && currentCharacter === '\n') {
			insideComment = false;
			result += strip(jsonString, offset, i);
			offset = i;
		} else if (!insideComment && currentCharacter + nextCharacter === '/*') {
			result += jsonString.slice(offset, i);
			offset = i;
			insideComment = multiComment;
			i++;
			continue;
		} else if (insideComment === multiComment && currentCharacter + nextCharacter === '*/') {
			i++;
			insideComment = false;
			result += strip(jsonString, offset, i + 1);
			offset = i + 1;
			continue;
		}
	}

	return result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));
};


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const path = __webpack_require__(98);
const loadJSON_1 = __webpack_require__(121);
const ExtentionContext_1 = __webpack_require__(55);
let packageJSON;
exports.getPackageJSON = () => {
    if (packageJSON) {
        return packageJSON;
    }
    const packageJSONPath = path.join(ExtentionContext_1.extensionContext.extensionPath, './package.json');
    packageJSON = loadJSON_1.loadJSON(packageJSONPath);
    return packageJSON;
};
//# sourceMappingURL=getPackageJSON.js.map

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getLastFiles(dirPath, maxFiles) {
    throw new Error('not implemented');
}
exports.getLastFiles = getLastFiles;


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const sharedTelemetryFactory_1 = __webpack_require__(433);
exports.telemetryReporterFactory = sharedTelemetryFactory_1.sharedTelemetryFactory;


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.sharedTelemetryFactory = {
    create: (extensionPackage) => {
        // Defer import of `vscode-extension-telemetry` package.
        const telemetryReporterClass = __webpack_require__(434)
            .default;
        const props = extensionPackage;
        const { name, version, aiKey } = props;
        if (!aiKey) {
            throw new Error('The `aiKey` property needs to be set in the `package.json`.');
        }
        const telemetryReporter = new telemetryReporterClass(name, version, aiKey);
        return {
            sendTelemetryEvent: (eventName, properties, measurements) => {
                telemetryReporter.sendTelemetryEvent(eventName, properties, measurements);
            },
            sendTelemetryErrorEvent: (eventName, properties, measurements, errorProps) => {
                telemetryReporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
            },
            dispose: () => telemetryReporter.dispose(),
        };
    },
};


/***/ }),
/* 434 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Ko; });
/* harmony import */ var vscode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var vscode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode__WEBPACK_IMPORTED_MODULE_0__);
var Jo=Object.defineProperty;var ea=Object.getOwnPropertySymbols;var Xo=Object.prototype.hasOwnProperty,Yo=Object.prototype.propertyIsEnumerable;var ta=(e,t,r)=>t in e?Jo(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Ke=(e,t)=>{for(var r in t||(t={}))Xo.call(t,r)&&ta(e,r,t[r]);if(ea)for(var r of ea(t))Yo.call(t,r)&&ta(e,r,t[r]);return e};var ra={Unknown:0,NonRetryableStatus:1,InvalidEvent:2,SizeLimitExceeded:3,KillSwitch:4,QueueFull:5};var tt="function",Le="object",De="undefined",me="prototype",yr="hasOwnProperty";var rt=Object,Yt=rt[me],$t=rt.assign,Vr=rt.create,qr=rt.defineProperty,Rt=Yt[yr];function We(){return typeof globalThis!==De&&globalThis?globalThis:typeof self!==De&&self?self:typeof window!==De&&window?window:typeof global!==De&&global?global:null}function Zt(e){throw new TypeError(e)}function Mt(e){var t=Vr;if(t)return t(e);if(e==null)return{};var r=typeof e;r!==Le&&r!==tt&&Zt("Object prototype may only be an Object:"+e);function n(){}return n[me]=e,new n}var Cc=(We()||{}).Symbol,Ic=(We()||{}).Reflect;var Zo=function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Yt[yr].call(t,i)&&(e[i]=t[i])}return e},ut=$t||Zo,An=function(e,t){return An=rt.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var i in n)n[yr](i)&&(r[i]=n[i])},An(e,t)};function O(e,t){typeof t!==tt&&t!==null&&Zt("Class extends value "+String(t)+" is not a constructor or null"),An(e,t);function r(){this.constructor=e}e[me]=t===null?Mt(t):(r[me]=t[me],new r)}var Gr="constructor",mt="prototype",Kr="function",Wr="_dynInstFuncs",Nn="_isDynProxy",Qt="_dynClass",Qo="_dynCls$",Fn="_dynInstChk",Sr=Fn,na="_dfOpts",ia="_unknown_",es="__proto__",Rn="useBaseInst",aa="setInstFuncs",Jr=Object,Cr=Jr.getPrototypeOf,oa=0;function It(e,t){return e&&Jr[mt].hasOwnProperty.call(e,t)}function sa(e){return e&&(e===Jr[mt]||e===Array[mt])}function Mn(e){return sa(e)||e===Function[mt]}function kt(e){if(e){if(Cr)return Cr(e);var t=e[es]||e[mt]||(e[Gr]?e[Gr][mt]:null);if(t)return t}return null}function Xr(e,t){var r=[],n=Jr.getOwnPropertyNames;if(n)r=n(e);else for(var i in e)typeof i=="string"&&It(e,i)&&r.push(i);if(r&&r.length>0)for(var a=0;a<r.length;a++)t(r[a])}function kn(e,t,r){return t!==Gr&&typeof e[t]===Kr&&(r||It(e,t))}function Yr(e){throw new TypeError("DynamicProto: "+e)}function ts(e){var t={};return Xr(e,function(r){!t[r]&&kn(e,r,!1)&&(t[r]=e[r])}),t}function Ln(e,t){for(var r=e.length-1;r>=0;r--)if(e[r]===t)return!0;return!1}function rs(e,t,r,n){function i(o,u,f){var l=u[f];if(l[Nn]&&n){var m=o[Wr]||{};m[Sr]!==!1&&(l=(m[u[Qt]]||{})[f]||l)}return function(){return l.apply(o,arguments)}}var a={};Xr(r,function(o){a[o]=i(t,r,o)});for(var s=kt(e),c=[];s&&!Mn(s)&&!Ln(c,s);)Xr(s,function(o){!a[o]&&kn(s,o,!Cr)&&(a[o]=i(t,s,o))}),c.push(s),s=kt(s);return a}function ns(e,t,r,n){var i=null;if(e&&It(r,Qt)){var a=e[Wr]||{};if(i=(a[r[Qt]]||{})[t],i||Yr("Missing ["+t+"] "+Kr),!i[Fn]&&a[Sr]!==!1){for(var s=!It(e,t),c=kt(e),o=[];s&&c&&!Mn(c)&&!Ln(o,c);){var u=c[t];if(u){s=u===n;break}o.push(c),c=kt(c)}try{s&&(e[t]=i),i[Fn]=1}catch(f){a[Sr]=!1}}}return i}function is(e,t,r){var n=t[e];return n===r&&(n=kt(t)[e]),typeof n!==Kr&&Yr("["+e+"] is not a "+Kr),n}function as(e,t,r,n,i){function a(o,u){var f=function(){var l=ns(this,u,o,f)||is(u,o,f);return l.apply(this,arguments)};return f[Nn]=1,f}if(!sa(e)){var s=r[Wr]=r[Wr]||{},c=s[t]=s[t]||{};s[Sr]!==!1&&(s[Sr]=!!i),Xr(r,function(o){kn(r,o,!1)&&r[o]!==n[o]&&(c[o]=r[o],delete r[o],(!It(e,o)||e[o]&&!e[o][Nn])&&(e[o]=a(e,o)))})}}function os(e,t){if(Cr)for(var r=[],n=kt(t);n&&!Mn(n)&&!Ln(r,n);){if(n===e)return!0;r.push(n),n=kt(n)}return!1}function Un(e,t){return It(e,mt)?e.name||t||ia:((e||{})[Gr]||{}).name||t||ia}function _n(e,t,r,n){It(e,mt)||Yr("theClass is an invalid class definition.");var i=e[mt];os(i,t)||Yr("["+Un(e)+"] is not in class hierarchy of ["+Un(t)+"]");var a=null;It(i,Qt)?a=i[Qt]:(a=Qo+Un(e,"_")+"$"+oa,oa++,i[Qt]=a);var s=_n[na],c=!!s[Rn];c&&n&&n[Rn]!==void 0&&(c=!!n[Rn]);var o=ts(t),u=rs(i,t,o,c);r(t,u);var f=!!Cr&&!!s[aa];f&&n&&(f=!!n[aa]),as(i,a,t,o,f!==!1)}var ss={setInstFuncs:!0,useBaseInst:!0};_n[na]=ss;var K=_n;var y;(function(e){e[e.CRITICAL=1]="CRITICAL",e[e.WARNING=2]="WARNING"})(y||(y={}));var h={BrowserDoesNotSupportLocalStorage:0,BrowserCannotReadLocalStorage:1,BrowserCannotReadSessionStorage:2,BrowserCannotWriteLocalStorage:3,BrowserCannotWriteSessionStorage:4,BrowserFailedRemovalFromLocalStorage:5,BrowserFailedRemovalFromSessionStorage:6,CannotSendEmptyTelemetry:7,ClientPerformanceMathError:8,ErrorParsingAISessionCookie:9,ErrorPVCalc:10,ExceptionWhileLoggingError:11,FailedAddingTelemetryToBuffer:12,FailedMonitorAjaxAbort:13,FailedMonitorAjaxDur:14,FailedMonitorAjaxOpen:15,FailedMonitorAjaxRSC:16,FailedMonitorAjaxSend:17,FailedMonitorAjaxGetCorrelationHeader:18,FailedToAddHandlerForOnBeforeUnload:19,FailedToSendQueuedTelemetry:20,FailedToReportDataLoss:21,FlushFailed:22,MessageLimitPerPVExceeded:23,MissingRequiredFieldSpecification:24,NavigationTimingNotSupported:25,OnError:26,SessionRenewalDateIsZero:27,SenderNotInitialized:28,StartTrackEventFailed:29,StopTrackEventFailed:30,StartTrackFailed:31,StopTrackFailed:32,TelemetrySampledAndNotSent:33,TrackEventFailed:34,TrackExceptionFailed:35,TrackMetricFailed:36,TrackPVFailed:37,TrackPVFailedCalc:38,TrackTraceFailed:39,TransmissionFailed:40,FailedToSetStorageBuffer:41,FailedToRestoreStorageBuffer:42,InvalidBackendResponse:43,FailedToFixDepricatedValues:44,InvalidDurationValue:45,TelemetryEnvelopeInvalid:46,CreateEnvelopeError:47,CannotSerializeObject:48,CannotSerializeObjectNonSerializable:49,CircularReferenceDetected:50,ClearAuthContextFailed:51,ExceptionTruncated:52,IllegalCharsInName:53,ItemNotInArray:54,MaxAjaxPerPVExceeded:55,MessageTruncated:56,NameTooLong:57,SampleRateOutOfRange:58,SetAuthContextFailed:59,SetAuthContextFailedAccountName:60,StringValueTooLong:61,StartCalledMoreThanOnce:62,StopCalledWithoutStart:63,TelemetryInitializerFailed:64,TrackArgumentsNotSpecified:65,UrlTooLong:66,SessionStorageBufferFull:67,CannotAccessCookie:68,IdTooLong:69,InvalidEvent:70,FailedMonitorAjaxSetRequestHeader:71,SendBrowserInfoOnUserInit:72,PluginException:73,NotificationException:74,SnippetScriptLoadFailure:99,InvalidInstrumentationKey:100,CannotParseAiBlobValue:101,InvalidContentBlob:102,TrackPageActionEventFailed:103};var ca="on",ua="attachEvent",fa="addEventListener",la="detachEvent",pa="removeEventListener",da=qr,Wc=rt.freeze,Jc=rt.seal;function On(e){return Yt.toString.call(e)}function ce(e){return e===void 0||typeof e===De}function S(e){return e===null||ce(e)}function Hn(e){return!S(e)}function Ir(e,t){return e&&Rt.call(e,t)}function nt(e){return typeof e===Le}function j(e){return typeof e===tt}function Lt(e,t,r,n){n===void 0&&(n=!1);var i=!1;if(!S(e))try{S(e[fa])?S(e[ua])||(e[ua](ca+t,r),i=!0):(e[fa](t,r,n),i=!0)}catch(a){}return i}function $r(e,t,r,n){if(n===void 0&&(n=!1),!S(e))try{S(e[pa])?S(e[la])||e[la](ca+t,r):e[pa](t,r,n)}catch(i){}}function jn(e){var t=e,r=/([^\w\d_$])/g;return r.test(e)&&(t=e.replace(r,"_")),t}function $(e,t){if(e)for(var r in e)Rt.call(e,r)&&t.call(e,r,e[r])}function zn(e,t){if(e&&t){var r=t.length,n=e.length;if(e===t)return!0;if(n>=r){for(var i=n-1,a=r-1;a>=0;a--){if(e[i]!=t[a])return!1;i--}return!0}}return!1}function ge(e,t){return e&&t?e.indexOf(t)!==-1:!1}function Zr(e){return On(e)==="[object Date]"}function Ae(e){return On(e)==="[object Array]"}function er(e){return On(e)==="[object Error]"}function U(e){return typeof e=="string"}function tr(e){return typeof e=="number"}function Ne(e){if(Zr(e)){var t=function(r){var n=String(r);return n.length===1&&(n="0"+n),n};return e.getUTCFullYear()+"-"+t(e.getUTCMonth()+1)+"-"+t(e.getUTCDate())+"T"+t(e.getUTCHours())+":"+t(e.getUTCMinutes())+":"+t(e.getUTCSeconds())+"."+String((e.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+"Z"}}function M(e,t,r){for(var n=e.length,i=0;i<n&&!(i in e&&t.call(r||e,e[i],i,e)===-1);i++);}function Ut(e,t,r){for(var n=e.length,i=r||0,a=Math.max(i>=0?i:n-Math.abs(i),0);a<n;a++)if(a in e&&e[a]===t)return a;return-1}function _t(e,t,r){for(var n=e.length,i=r||e,a=new Array(n),s=0;s<n;s++)s in e&&(a[s]=t.call(i,e[s],e));return a}function Qr(e,t,r){var n=e.length,i=0,a;if(arguments.length>=3)a=arguments[2];else{for(;i<n&&!(i in e);)i++;a=e[i++]}for(;i<n;)i in e&&(a=t(a,e[i],i,e)),i++;return a}function oe(e){return typeof e!="string"?e:e.replace(/^\s+|\s+$/g,"")}var cs=!{toString:null}.propertyIsEnumerable("toString"),Bn=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"];function Je(e){var t=typeof e;t!==tt&&(t!==Le||e===null)&&Zt("objKeys called on non-object");var r=[];for(var n in e)e&&Rt.call(e,n)&&r.push(n);if(cs)for(var i=Bn.length,a=0;a<i;a++)e&&Rt.call(e,Bn[a])&&r.push(Bn[a]);return r}function Tt(e,t,r,n){if(da)try{var i={enumerable:!0,configurable:!0};return r&&(i.get=r),n&&(i.set=n),da(e,t,i),!0}catch(a){}return!1}function ve(){var e=Date;return e.now?e.now():new e().getTime()}function G(e){return er(e)?e.name:""}function q(e,t,r,n,i){var a=r;return e&&(a=e[t],a!==r&&(!i||i(a))&&(!n||n(r))&&(a=r,e[t]=a)),a}function ue(e,t,r){var n;return e?(n=e[t],!n&&S(n)&&(n=ce(r)?{}:r,e[t]=n)):n=ce(r)?{}:r,n}function en(e){return!e}function rr(e){return!!e}function Pe(e){throw new Error(e)}function Vn(e,t,r){if(e&&t&&e!==t&&nt(e)&&nt(t)){var n=function(a){if(U(a)){var s=t[a];j(s)?(!r||r(a,!0,t,e))&&(e[a]=function(c){return function(){var o=arguments;return t[c].apply(t,o)}}(a)):(!r||r(a,!1,t,e))&&(Ir(e,a)&&delete e[a],Tt(e,a,function(){return t[a]},function(c){t[a]=c})||(e[a]=s))}};for(var i in t)n(i)}return e}function qn(e){return function(){function t(){var r=this;e&&$(e,function(n,i){r[n]=i})}return t}()}function tn(e){return e&&(e=rt($t?$t({},e):e)),e}"use strict";var ma="window",us="document",fs="navigator",ls="history",ps="location",ds="console",ms="performance",ga="JSON",gs="crypto",vs="msCrypto",hs="ReactNative",Gn="msie",Kn="trident/",Wn=null,Jn=null,xs=!1;function Ce(e){var t=We();return t&&t[e]?t[e]:e===ma&&Ot()?window:null}function Ot(){return Boolean(typeof window===Le&&window)}function ft(){return Ot()?window:Ce(ma)}function rn(){return Boolean(typeof document===Le&&document)}function Ie(){return rn()?document:Ce(us)}function va(){return Boolean(typeof navigator===Le&&navigator)}function Ee(){return va()?navigator:Ce(fs)}function ha(){return Boolean(typeof history===Le&&history)}function Xn(){return ha()?history:Ce(ls)}function _e(e){if(e&&xs){var t=Ce("__mockLocation");if(t)return t}return typeof location===Le&&location?location:Ce(ps)}function Yn(){return typeof console!==De?console:Ce(ds)}function Oe(){return Ce(ms)}function it(){return Boolean(typeof JSON===Le&&JSON||Ce(ga)!==null)}function he(){return it()?JSON||Ce(ga):null}function $n(){return Ce(gs)}function Zn(){return Ce(vs)}function Qn(){var e=Ee();return e&&e.product?e.product===hs:!1}function Ht(){var e=Ee();if(e&&(e.userAgent!==Jn||Wn===null)){Jn=e.userAgent;var t=(Jn||"").toLowerCase();Wn=ge(t,Gn)||ge(t,Kn)}return Wn}function nr(e){if(e===void 0&&(e=null),!e){var t=Ee()||{};e=t?(t.userAgent||"").toLowerCase():""}var r=(e||"").toLowerCase();if(ge(r,Gn))return parseInt(r.split(Gn)[1]);if(ge(r,Kn)){var n=parseInt(r.split(Kn)[1]);if(n)return n+4}return null}function _(e){var t=Object[me].toString.call(e),r="";return t==="[object Error]"?r="{ stack: '"+e.stack+"', message: '"+e.message+"', name: '"+e.name+"'":it()&&(r=he().stringify(e)),t+r}"use strict";var ys="AI (Internal): ",Ss="AI: ",Cs="AITR_";function xa(e){return e?'"'+e.replace(/\"/g,"")+'"':""}var gt=function(){function e(t,r,n,i){n===void 0&&(n=!1);var a=this;a.messageId=t,a.message=(n?Ss:ys)+t;var s="";it()&&(s=he().stringify(i));var c=(r?" message:"+xa(r):"")+(i?" props:"+xa(s):"");a.message+=c}return e.dataType="MessageData",e}();function vt(e,t){return(e||{}).logger||new nn(t)}var nn=function(){function e(t){this.identifier="DiagnosticLogger",this.queue=[];var r=0,n={};K(e,this,function(i){S(t)&&(t={}),i.consoleLoggingLevel=function(){return a("loggingLevelConsole",0)},i.telemetryLoggingLevel=function(){return a("loggingLevelTelemetry",1)},i.maxInternalMessageLimit=function(){return a("maxMessageLimit",25)},i.enableDebugExceptions=function(){return a("enableDebugExceptions",!1)},i.throwInternal=function(c,o,u,f,l){l===void 0&&(l=!1);var m=new gt(o,u,l,f);if(i.enableDebugExceptions())throw m;if(!ce(m.message)){var C=i.consoleLoggingLevel();if(l){var T=+m.messageId;!n[T]&&C>=y.WARNING&&(i.warnToConsole(m.message),n[T]=!0)}else C>=y.WARNING&&i.warnToConsole(m.message);i.logInternalMessage(c,m)}},i.warnToConsole=function(c){var o=Yn();if(o){var u="log";o.warn&&(u="warn"),j(o[u])&&o[u](c)}},i.resetInternalMessageCount=function(){r=0,n={}},i.logInternalMessage=function(c,o){if(!s()){var u=!0,f=Cs+o.messageId;if(n[f]?u=!1:n[f]=!0,u&&(c<=i.telemetryLoggingLevel()&&(i.queue.push(o),r++),r===i.maxInternalMessageLimit())){var l="Internal events throttle limit per PageView reached for this app.",m=new gt(h.MessageLimitPerPVExceeded,l,!1);i.queue.push(m),i.warnToConsole(l)}}};function a(c,o){var u=t[c];return S(u)?o:u}function s(){return r>=i.maxInternalMessageLimit()}})}return e}();var ir="ctx",Tr=function(){function e(t,r,n){var i=this,a=!1;if(i.start=ve(),i.name=t,i.isAsync=n,i.isChildEvt=function(){return!1},j(r)){var s;a=Tt(i,"payload",function(){return!s&&j(r)&&(s=r(),r=null),s})}i.getCtx=function(c){return c?c===e.ParentContextKey||c===e.ChildrenContextKey?i[c]:(i[ir]||{})[c]:null},i.setCtx=function(c,o){if(c)if(c===e.ParentContextKey)i[c]||(i.isChildEvt=function(){return!0}),i[c]=o;else if(c===e.ChildrenContextKey)i[c]=o;else{var u=i[ir]=i[ir]||{};u[c]=o}},i.complete=function(){var c=0,o=i.getCtx(e.ChildrenContextKey);if(Ae(o))for(var u=0;u<o.length;u++){var f=o[u];f&&(c+=f.time)}i.time=ve()-i.start,i.exTime=i.time-c,i.complete=function(){},!a&&j(r)&&(i.payload=r())}}return e.ParentContextKey="parent",e.ChildrenContextKey="childEvts",e}();var ei=function(){function e(t){this.ctx={},K(e,this,function(r){r.create=function(n,i,a){return new Tr(n,i,a)},r.fire=function(n){n&&(n.complete(),t&&t.perfEvent(n))},r.setCtx=function(n,i){if(n){var a=r[ir]=r[ir]||{};a[n]=i}},r.getCtx=function(n){return(r[ir]||{})[n]}})}return e}();var ti="CoreUtils.doPerf";function lt(e,t,r,n,i){if(e){var a=e;if(j(a.getPerfMgr)&&(a=a.getPerfMgr()),a){var s=void 0,c=a.getCtx(ti);try{if(s=a.create(t(),n,i),s){if(c&&s.setCtx&&(s.setCtx(Tr.ParentContextKey,c),c.getCtx&&c.setCtx)){var o=c.getCtx(Tr.ChildrenContextKey);o||(o=[],c.setCtx(Tr.ChildrenContextKey,o)),o.push(s)}return a.setCtx(ti,s),r(s)}}catch(u){s&&s.setCtx&&s.setCtx("exception",u)}finally{s&&a.fire(s),a.setCtx(ti,c)}}}return r()}"use strict";var ya=function(){function e(t,r){var n=this,i=null,a=j(t.processTelemetry),s=j(t.setNextPlugin);n._hasRun=!1,n.getPlugin=function(){return t},n.getNext=function(){return i},n.setNext=function(c){i=c},n.processTelemetry=function(c,o){o||(o=r);var u=t?t.identifier:"TelemetryPluginChain";lt(o?o.core():null,function(){return u+":processTelemetry"},function(){if(t&&a){n._hasRun=!0;try{o.setNext(i),s&&t.setNextPlugin(i),i&&(i._hasRun=!1),t.processTelemetry(c,o)}catch(l){var f=i&&i._hasRun;(!i||!f)&&o.diagLog().throwInternal(y.CRITICAL,h.PluginException,"Plugin ["+t.identifier+"] failed during processTelemetry - "+l),i&&!f&&i.processTelemetry(c,o)}}else i&&(n._hasRun=!0,i.processTelemetry(c,o))},function(){return{item:c}},!c.sync)}}return e}();"use strict";function ri(e,t){var r=[];if(e&&e.length>0)for(var n=null,i=0;i<e.length;i++){var a=e[i];if(a&&j(a.processTelemetry)){var s=new ya(a,t);r.push(s),n&&n.setNext(s),n=s}}return r.length>0?r[0]:null}function Is(e,t,r){var n=[],i=!r;if(e)for(;e;){var a=e.getPlugin();(i||a===r)&&(i=!0,n.push(a)),e=e.getNext()}return i||n.push(r),ri(n,t)}function Ts(e,t,r){var n=e,i=!1;return r&&e&&(n=[],M(e,function(a){(i||a===r)&&(i=!0,n.push(a))})),r&&!i&&(n||(n=[]),n.push(r)),ri(n,t)}var ht=function(){function e(t,r,n,i){var a=this,s=null;i!==null&&(t&&j(t.getPlugin)?s=Is(t,a,i||t.getPlugin()):i?s=Ts(t,a,i):ce(i)&&(s=ri(t,a))),a.core=function(){return n},a.diagLog=function(){return vt(n,r)},a.getCfg=function(){return r},a.getExtCfg=function(c,o){o===void 0&&(o={});var u;if(r){var f=r.extensionConfig;f&&c&&(u=f[c])}return u||o},a.getConfig=function(c,o,u){u===void 0&&(u=!1);var f,l=a.getExtCfg(c,null);return l&&!S(l[o])?f=l[o]:r&&!S(r[o])&&(f=r[o]),S(f)?u:f},a.hasNext=function(){return s!=null},a.getNext=function(){return s},a.setNext=function(c){s=c},a.processNext=function(c){var o=s;o&&(s=o.getNext(),o.processTelemetry(c,a))},a.createNew=function(c,o){return c===void 0&&(c=null),new e(c||s,r,n,o)}}return e}();var Sa="iKey",an="extensionConfig";"use strict";var on="getPlugin",at=function(){function e(){var t=this,r=!1,n=null,i=null;t.core=null,t.diagLog=function(a){return t._getTelCtx(a).diagLog()},t.isInitialized=function(){return r},t.setInitialized=function(a){r=a},t.setNextPlugin=function(a){i=a},t.processNext=function(a,s){s?s.processNext(a):i&&j(i.processTelemetry)&&i.processTelemetry(a,null)},t._getTelCtx=function(a){a===void 0&&(a=null);var s=a;if(!s){var c=n||new ht(null,{},t.core);i&&i[on]?s=c.createNew(null,i[on]):s=c.createNew(null,i)}return s},t._baseTelInit=function(a,s,c,o){a&&q(a,an,[],null,S),!o&&s&&(o=s.getProcessTelContext().getNext());var u=i;i&&i[on]&&(u=i[on]()),t.core=s,n=new ht(o,a,s,u),r=!0}}return e.prototype.initialize=function(t,r,n,i){this._baseTelInit(t,r,n,i)},e}();"use strict";var ni="processTelemetry",Ca="priority",Ia="setNextPlugin",Ta="isInitialized";function Er(e,t){for(var r=[],n=null,i=e.getNext();i;){var a=i.getPlugin();a&&(n&&j(n[Ia])&&j(a[ni])&&n[Ia](a),(!j(a[Ta])||!a[Ta]())&&r.push(a),n=a,i=i.getNext())}M(r,function(s){s.initialize(e.getCfg(),e.core(),t,e.getNext())})}function ii(e){return e.sort(function(t,r){var n=0,i=j(r[ni]);return j(t[ni])?n=i?t[Ca]-r[Ca]:1:i&&(n=-1),n})}"use strict";var ai=500,Es="Channel has invalid priority",Ea=function(e){O(t,e);function t(){var r=e.call(this)||this;r.identifier="ChannelControllerPlugin",r.priority=ai;var n;K(t,r,function(c,o){c.setNextPlugin=function(u){},c.processTelemetry=function(u,f){n&&M(n,function(l){if(l.length>0){var m=r._getTelCtx(f).createNew(l);m.processNext(u)}})},c.getChannelControls=function(){return n},c.initialize=function(u,f,l){c.isInitialized()||(o.initialize(u,f,l),s((u||{}).channels,l),M(n,function(m){return Er(new ht(m,u,f),l)}))}});function i(c){M(c,function(o){o.priority<ai&&Pe(Es+o.identifier)})}function a(c){c&&c.length>0&&(c=c.sort(function(o,u){return o.priority-u.priority}),i(c),n.push(c))}function s(c,o){if(n=[],c&&M(c,function(f){return a(f)}),o){var u=[];M(o,function(f){f.priority>ai&&u.push(f)}),a(u)}}return r}return t._staticInit=function(){var r=t.prototype;Tt(r,"ChannelControls",r.getChannelControls),Tt(r,"channelQueue",r.getChannelControls)}(),t}(at);var wa="toGMTString",Pa="toUTCString",oi="cookie",si="expires",ci="enabled",ba="isCookieUseDisabled",Da="disableCookiesUsage",Et="_ckMgr",ot="",sn=null,ui=null,Aa=null,wr=Ie(),Na={},cn={};function ws(e,t){var r=zt[Et]||cn[Et];return r||(r=zt[Et]=zt(e,t),cn[Et]=r),r}function un(e){return e?e.isEnabled():!0}function Ps(e){var t=e.cookieCfg=e.cookieCfg||{};if(q(t,"domain",e.cookieDomain,Hn,S),q(t,"path",e.cookiePath||"/",null,S),S(t[ci])){var r=void 0;ce(e[ba])||(r=!e[ba]),ce(e[Da])||(r=!e[Da]),t[ci]=r}return t}function jt(e,t){var r;if(e)r=e.getCookieMgr();else if(t){var n=t.cookieCfg;n[Et]?r=n[Et]:r=zt(t)}return r||(r=ws(t,(e||{}).logger)),r}function zt(e,t){var r=Ps(e||cn),n=r.path||"/",i=r.domain,a=r[ci]!==!1,s={isEnabled:function(){var c=a&&fi(t),o=cn[Et];return c&&o&&s!==o&&(c=un(o)),c},setEnabled:function(c){a=c!==!1},set:function(c,o,u,f,l){if(un(s)){var m={},C=oe(o||ot),T=C.indexOf(";");if(T!==-1&&(C=oe(o.substring(0,T)),m=Fa(o.substring(T+1))),q(m,"domain",f||i,rr,ce),!S(u)){var P=Ht();if(ce(m[si])){var p=ve(),v=p+u*1e3;if(v>0){var x=new Date;x.setTime(v),q(m,si,Ra(x,P?wa:Pa)||Ra(x,P?wa:Pa)||ot,rr)}}P||q(m,"max-age",ot+u,null,ce)}var E=_e();E&&E.protocol==="https:"&&(q(m,"secure",null,null,ce),ui===null&&(ui=!li((Ee()||{}).userAgent)),ui&&q(m,"SameSite","None",null,ce)),q(m,"path",l||n,null,ce);var k=r.setCookie||ka;k(c,Ma(C,m))}},get:function(c){var o=ot;return un(s)&&(o=(r.getCookie||bs)(c)),o},del:function(c,o){un(s)&&s.purge(c,o)},purge:function(c,o){if(fi(t)){var u=(l={},l.path=o||"/",l[si]="Thu, 01 Jan 1970 00:00:01 GMT",l);Ht()||(u["max-age"]="0");var f=r.delCookie||ka;f(c,Ma(ot,u))}var l}};return s[Et]=s,s}function fi(e){if(sn===null){sn=!1;try{var t=wr||{};sn=t[oi]!==void 0}catch(r){e&&e.throwInternal(y.WARNING,h.CannotAccessCookie,"Cannot access document.cookie - "+G(r),{exception:_(r)})}}return sn}function Fa(e){var t={};if(e&&e.length){var r=oe(e).split(";");M(r,function(n){if(n=oe(n||ot),n){var i=n.indexOf("=");i===-1?t[n]=null:t[oe(n.substring(0,i))]=oe(n.substring(i+1))}})}return t}function Ra(e,t){return j(e[t])?e[t]():null}function Ma(e,t){var r=e||ot;return $(t,function(n,i){r+="; "+n+(S(i)?ot:"="+i)}),r}function bs(e){var t=ot;if(wr){var r=wr[oi]||ot;Aa!==r&&(Na=Fa(r),Aa=r),t=oe(Na[e]||ot)}return t}function ka(e,t){wr&&(wr[oi]=e+"="+t)}function li(e){return U(e)?!!(ge(e,"CPU iPhone OS 12")||ge(e,"iPad; CPU OS 12")||ge(e,"Macintosh; Intel Mac OS X 10_14")&&ge(e,"Version/")&&ge(e,"Safari")||ge(e,"Macintosh; Intel Mac OS X 10_14")&&zn(e,"AppleWebKit/605.1.15 (KHTML, like Gecko)")||ge(e,"Chrome/5")||ge(e,"Chrome/6")||ge(e,"UnrealEngine")&&!ge(e,"Chrome")||ge(e,"UCBrowser/12")||ge(e,"UCBrowser/11")):!1}"use strict";var Ds="Extensions must provide callback to initialize",La="_notificationManager",Ua=function(){function e(){var t=!1,r,n,i,a,s;K(e,this,function(c){c._extensions=new Array,n=new Ea,c.logger=Mt({throwInternal:function(o,u,f,l,m){m===void 0&&(m=!1)},warnToConsole:function(o){},resetInternalMessageCount:function(){}}),r=[],c.isInitialized=function(){return t},c.initialize=function(o,u,f,l){c.isInitialized()&&Pe("Core should not be initialized more than once"),(!o||S(o.instrumentationKey))&&Pe("Please provide instrumentation key"),i=l,c[La]=l,c.config=o||{},o.extensions=S(o.extensions)?[]:o.extensions;var m=ue(o,an);m.NotificationManager=l,f&&(c.logger=f);var C=[];C.push.apply(C,u.concat(o.extensions)),C=ii(C);var T=[],P=[],p={};M(C,function(v){(S(v)||S(v.initialize))&&Pe(Ds);var x=v.priority,E=v.identifier;v&&x&&(S(p[x])?p[x]=E:f.warnToConsole("Two extensions have same priority #"+x+" - "+p[x]+", "+E)),!x||x<n.priority?T.push(v):P.push(v)}),C.push(n),T.push(n),C=ii(C),c._extensions=C,Er(new ht([n],o,c),C),Er(new ht(T,o,c),C),c._extensions=T,c.getTransmissionControls().length===0&&Pe("No channels available"),t=!0,c.releaseQueue()},c.getTransmissionControls=function(){return n.getChannelControls()},c.track=function(o){q(o,Sa,c.config.instrumentationKey,null,en),q(o,"time",Ne(new Date),null,en),q(o,"ver","4.0",null,S),c.isInitialized()?c.getProcessTelContext().processNext(o):r.push(o)},c.getProcessTelContext=function(){var o=c._extensions,u=o;return(!o||o.length===0)&&(u=[n]),new ht(u,c.config,c)},c.getNotifyMgr=function(){return i||(i=Mt({addNotificationListener:function(o){},removeNotificationListener:function(o){},eventsSent:function(o){},eventsDiscarded:function(o,u){},eventsSendRequest:function(o,u){}}),c[La]=i),i},c.getCookieMgr=function(){return s||(s=zt(c.config,c.logger)),s},c.setCookieMgr=function(o){s=o},c.getPerfMgr=function(){return a||c.config&&c.config.enablePerfMgr&&(a=new ei(c.getNotifyMgr())),a},c.setPerfMgr=function(o){a=o},c.eventCnt=function(){return r.length},c.releaseQueue=function(){r.length>0&&(M(r,function(o){c.getProcessTelContext().processNext(o)}),r=[])}})}return e}();var _a=function(){function e(t){this.listeners=[];var r=!!(t||{}).perfEvtsSendAll;K(e,this,function(n){n.addNotificationListener=function(i){n.listeners.push(i)},n.removeNotificationListener=function(i){for(var a=Ut(n.listeners,i);a>-1;)n.listeners.splice(a,1),a=Ut(n.listeners,i)},n.eventsSent=function(i){M(n.listeners,function(a){a&&a.eventsSent&&setTimeout(function(){return a.eventsSent(i)},0)})},n.eventsDiscarded=function(i,a){M(n.listeners,function(s){s&&s.eventsDiscarded&&setTimeout(function(){return s.eventsDiscarded(i,a)},0)})},n.eventsSendRequest=function(i,a){M(n.listeners,function(s){if(s&&s.eventsSendRequest)if(a)setTimeout(function(){return s.eventsSendRequest(i,a)},0);else try{s.eventsSendRequest(i,a)}catch(c){}})},n.perfEvent=function(i){i&&(r||!i.isChildEvt())&&M(n.listeners,function(a){if(a&&a.perfEvent)if(i.isAsync)setTimeout(function(){return a.perfEvent(i)},0);else try{a.perfEvent(i)}catch(s){}})}})}return e}();var pi=function(e){O(t,e);function t(){var r=e.call(this)||this;return K(t,r,function(n,i){n.initialize=function(c,o,u,f){i.initialize(c,o,u||new nn(c),f||new _a(c))},n.track=function(c){lt(n.getPerfMgr(),function(){return"AppInsightsCore:track"},function(){c===null&&(s(c),Pe("Invalid telemetry item")),a(c),i.track(c)},function(){return{item:c}},!c.sync)},n.addNotificationListener=function(c){var o=n.getNotifyMgr();o&&o.addNotificationListener(c)},n.removeNotificationListener=function(c){var o=n.getNotifyMgr();o&&o.removeNotificationListener(c)},n.pollInternalLogs=function(c){var o=n.config.diagnosticLogInterval;return(!o||!(o>0))&&(o=1e4),setInterval(function(){var u=n.logger?n.logger.queue:[];M(u,function(f){var l={name:c||"InternalMessageId: "+f.messageId,iKey:n.config.instrumentationKey,time:Ne(new Date),baseType:gt.dataType,baseData:{message:f.message}};n.track(l)}),u.length=0},o)};function a(c){if(S(c.name))throw s(c),Error("telemetry name required")}function s(c){var o=n.getNotifyMgr();o&&o.eventsDiscarded([c],ra.InvalidEvent)}}),r}return t}(Ua);var Oa=4294967296,Bt=4294967295,Ha=!1,Pr=123456789,br=987654321;function As(e){e<0&&(e>>>=0),Pr=123456789+e&Bt,br=987654321-e&Bt,Ha=!0}function Ns(){try{var e=ve()&2147483647;As((Math.random()*Oa^e)+e)}catch(t){}}function ar(e){var t,r=$n()||Zn();return r&&r.getRandomValues?t=r.getRandomValues(new Uint32Array(1))[0]&Bt:Ht()?(Ha||Ns(),t=ja()&Bt):t=Math.floor(Oa*Math.random()|0),e||(t>>>=0),t}function ja(e){br=36969*(br&65535)+(br>>16)&Bt,Pr=18e3*(Pr&65535)+(Pr>>16)&Bt;var t=(br<<16)+(Pr&65535)>>>0&Bt|0;return e||(t>>>=0),t}"use strict";function wt(e,t){var r=!1,n=ft();n&&(r=Lt(n,e,t),r=Lt(n.body,e,t)||r);var i=Ie();return i&&(r=Pt.Attach(i,e,t)||r),r}function or(e){e===void 0&&(e=22);for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=ar()>>>0,n=0,i="";i.length<e;)n++,i+=t.charAt(r&63),r>>>=6,n===5&&(r=(ar()<<2&4294967295|r&3)>>>0,n=0);return i}function Ue(){for(var e=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],t="",r,n=0;n<4;n++)r=ar(),t+=e[r&15]+e[r>>4&15]+e[r>>8&15]+e[r>>12&15]+e[r>>16&15]+e[r>>20&15]+e[r>>24&15]+e[r>>28&15];var i=e[8+(ar()&3)|0];return t.substr(0,8)+t.substr(9,4)+"4"+t.substr(13,3)+i+t.substr(16,3)+t.substr(19,12)}var Pt={Attach:Lt,AttachEvent:Lt,Detach:$r,DetachEvent:$r};var za="_aiHooks",Ba=["req","rsp","hkErr","fnErr"],Ms="__proto__",ks="constructor";function di(e,t){if(e)for(var r=0;r<e.length&&!t(e[r],r);r++);}function mi(e,t,r,n,i){i>=0&&i<=2&&di(e,function(a,s){var c=a.cbks,o=c[Ba[i]];if(o){t.ctx=function(){var l=n[s]=n[s]||{};return l};try{o.apply(t.inst,r)}catch(l){var u=t.err;try{var f=c[Ba[2]];f&&(t.err=l,f.apply(t.inst,r))}catch(m){}finally{t.err=u}}}})}function Ls(e){return function(){var t=this,r=arguments,n=e.h,i={name:e.n,inst:t,ctx:null,set:o},a=[],s=c([i],r);function c(f,l){return di(l,function(m){f.push(m)}),f}function o(f,l){r=c([],r),r[f]=l,s=c([i],r)}mi(n,i,s,a,0);var u=e.f;try{i.rslt=u.apply(t,r)}catch(f){throw i.err=f,mi(n,i,s,a,3),f}return mi(n,i,s,a,1),i.rslt}}var Va=Object.getPrototypeOf;function Us(e){if(e){if(Va)return Va(e);var t=e[Ms]||e[me]||e[ks];if(t)return t}return null}function qa(e,t,r){var n=null;return e&&(Ir(e,t)?n=e:r&&(n=qa(Us(e),t,!1))),n}function gi(e,t,r){return e?Dr(e[me],t,r,!1):null}function Dr(e,t,r,n){if(n===void 0&&(n=!0),e&&t&&r){var i=qa(e,t,n);if(i){var a=i[t];if(typeof a===tt){var s=a[za];if(!s){s={i:0,n:t,f:a,h:[]};var c=Ls(s);c[za]=s,i[t]=c}var o={id:s.i,cbks:r,rm:function(){var u=this.id;di(s.h,function(f,l){if(f.id===u)return s.h.splice(l,1),1})}};return s.i++,s.h.push(o),o}}}return null}var Z={requestContextHeader:"Request-Context",requestContextTargetKey:"appId",requestContextAppIdFormat:"appId=cid-v1:",requestIdHeader:"Request-Id",traceParentHeader:"traceparent",traceStateHeader:"tracestate",sdkContextHeader:"Sdk-Context",sdkContextHeaderAppIdRequest:"appId",requestContextHeaderLowerCase:"request-context"};function vi(e,t,r){var n=t.length,i=Ga(e,t);if(i.length!==n){for(var a=0,s=i;r[s]!==void 0;)a++,s=i.substring(0,150-3)+Ka(a);i=s}return i}function Ga(e,t){var r;return t&&(t=oe(t.toString()),t.length>150&&(r=t.substring(0,150),e.throwInternal(y.WARNING,h.NameTooLong,"name is too long.  It has been truncated to "+150+" characters.",{name:t},!0))),r||t}function te(e,t,r){r===void 0&&(r=1024);var n;return t&&(r=r||1024,t=oe(t),t.toString().length>r&&(n=t.toString().substring(0,r),e.throwInternal(y.WARNING,h.StringValueTooLong,"string value is too long. It has been truncated to "+r+" characters.",{value:t},!0))),n||t}function xt(e,t){return yi(e,t,2048,h.UrlTooLong)}function Ar(e,t){var r;return t&&t.length>32768&&(r=t.substring(0,32768),e.throwInternal(y.WARNING,h.MessageTruncated,"message is too long, it has been truncated to "+32768+" characters.",{message:t},!0)),r||t}function hi(e,t){var r;if(t){var n=""+t;n.length>32768&&(r=n.substring(0,32768),e.throwInternal(y.WARNING,h.ExceptionTruncated,"exception is too long, it has been truncated to "+32768+" characters.",{exception:t},!0))}return r||t}function Fe(e,t){if(t){var r={};$(t,function(n,i){if(nt(i)&&it())try{i=he().stringify(i)}catch(a){e.throwInternal(y.WARNING,h.CannotSerializeObjectNonSerializable,"custom property is not valid",{exception:a},!0)}i=te(e,i,8192),n=vi(e,n,r),r[n]=i}),t=r}return t}function Re(e,t){if(t){var r={};$(t,function(n,i){n=vi(e,n,r),r[n]=i}),t=r}return t}function xi(e,t){return t&&yi(e,t,128,h.IdTooLong).toString()}function yi(e,t,r,n){var i;return t&&(t=oe(t),t.length>r&&(i=t.substring(0,r),e.throwInternal(y.WARNING,n,"input is too long, it has been truncated to "+r+" characters.",{data:t},!0))),i||t}function Ka(e){var t="00"+e;return t.substr(t.length-3)}function Vt(e){var t=null;if(j(Event))t=new Event(e);else{var r=Ie();r&&r.createEvent&&(t=r.createEvent("Event"),t.initEvent(e,!0,!0))}return t}function Xe(e,t){return t===void 0&&(t=!1),e==null?t:e.toString().toLowerCase()==="true"}function He(e){(isNaN(e)||e<0)&&(e=0),e=Math.round(e);var t=""+e%1e3,r=""+Math.floor(e/1e3)%60,n=""+Math.floor(e/(1e3*60))%60,i=""+Math.floor(e/(1e3*60*60))%24,a=Math.floor(e/(1e3*60*60*24));return t=t.length===1?"00"+t:t.length===2?"0"+t:t,r=r.length<2?"0"+r:r,n=n.length<2?"0"+n:n,i=i.length<2?"0"+i:i,(a>0?a+".":"")+i+":"+n+":"+r+"."+t}function fn(){var e=Ee();return"sendBeacon"in e&&e.sendBeacon}function Si(e,t){var r=null;return M(e,function(n){if(n.identifier===t)return r=n,-1}),r}function Ci(e,t,r,n,i){return!i&&U(e)&&(e==="Script error."||e==="Script error")}var yt="Microsoft_ApplicationInsights_BypassAjaxInstrumentation",sr="sampleRate",cr="ProcessLegacy",Nr="http.method",ln="https://dc.services.visualstudio.com",fe="not_specified";var bt;(function(e){e[e.LocalStorage=0]="LocalStorage",e[e.SessionStorage=1]="SessionStorage"})(bt||(bt={}));var Ye;(function(e){e[e.AI=0]="AI",e[e.AI_AND_W3C=1]="AI_AND_W3C",e[e.W3C=2]="W3C"})(Ye||(Ye={}));var qt=void 0,Gt=void 0;function Ii(){return dn()?pn(bt.LocalStorage):null}function pn(e){try{if(S(We()))return null;var t=new Date,r=Ce(e===bt.LocalStorage?"localStorage":"sessionStorage");r.setItem(t.toString(),t.toString());var n=r.getItem(t.toString())!==t.toString();if(r.removeItem(t.toString()),!n)return r}catch(i){}return null}function Ti(){return Kt()?pn(bt.SessionStorage):null}function Ei(){qt=!1,Gt=!1}function dn(){return qt===void 0&&(qt=!!pn(bt.LocalStorage)),qt}function wi(e,t){var r=Ii();if(r!==null)try{return r.getItem(t)}catch(n){qt=!1,e.throwInternal(y.WARNING,h.BrowserCannotReadLocalStorage,"Browser failed read of local storage. "+G(n),{exception:_(n)})}return null}function Pi(e,t,r){var n=Ii();if(n!==null)try{return n.setItem(t,r),!0}catch(i){qt=!1,e.throwInternal(y.WARNING,h.BrowserCannotWriteLocalStorage,"Browser failed write to local storage. "+G(i),{exception:_(i)})}return!1}function bi(e,t){var r=Ii();if(r!==null)try{return r.removeItem(t),!0}catch(n){qt=!1,e.throwInternal(y.WARNING,h.BrowserFailedRemovalFromLocalStorage,"Browser failed removal of local storage item. "+G(n),{exception:_(n)})}return!1}function Kt(){return Gt===void 0&&(Gt=!!pn(bt.SessionStorage)),Gt}function ur(e,t){var r=Ti();if(r!==null)try{return r.getItem(t)}catch(n){Gt=!1,e.throwInternal(y.WARNING,h.BrowserCannotReadSessionStorage,"Browser failed read of session storage. "+G(n),{exception:_(n)})}return null}function fr(e,t,r){var n=Ti();if(n!==null)try{return n.setItem(t,r),!0}catch(i){Gt=!1,e.throwInternal(y.WARNING,h.BrowserCannotWriteSessionStorage,"Browser failed write to session storage. "+G(i),{exception:_(i)})}return!1}function Di(e,t){var r=Ti();if(r!==null)try{return r.removeItem(t),!0}catch(n){Gt=!1,e.throwInternal(y.WARNING,h.BrowserFailedRemovalFromSessionStorage,"Browser failed removal of session storage item. "+G(n),{exception:_(n)})}return!1}var Wa=Ie()||{},Ja=0,Bs=[null,null,null,null,null];function Fr(e){var t=Ja,r=Bs,n=r[t];return Wa.createElement?r[t]||(n=r[t]=Wa.createElement("a")):n={host:Ai(e,!0)},n.href=e,t++,t>=r.length&&(t=0),Ja=t,n}function mn(e){var t,r=Fr(e);return r&&(t=r.href),t}function gn(e,t){return e?e.toUpperCase()+" "+t:t}function Ai(e,t){var r=vn(e,t)||"";if(r){var n=r.match(/(www[0-9]?\.)?(.[^/:]+)(\:[\d]+)?/i);if(n!=null&&n.length>3&&U(n[2])&&n[2].length>0)return n[2]+(n[3]||"")}return r}function vn(e,t){var r=null;if(e){var n=e.match(/(\w*):\/\/(.[^/:]+)(\:[\d]+)?/i);if(n!=null&&n.length>2&&U(n[2])&&n[2].length>0&&(r=n[2]||"",t&&n.length>2)){var i=(n[1]||"").toLowerCase(),a=n[3]||"";(i==="http"&&a===":80"||i==="https"&&a===":443")&&(a=""),r+=a}}return r}var qs=["https://dc.services.visualstudio.com/v2/track","https://breeze.aimon.applicationinsights.io/v2/track","https://dc-int.services.visualstudio.com/v2/track"];function Rr(e){return qs.indexOf(e.toLowerCase())!==-1}var St={correlationIdPrefix:"cid-v1:",canIncludeCorrelationHeader:function(e,t,r){if(!t||e&&e.disableCorrelationHeaders)return!1;if(e&&e.correlationHeaderExcludePatterns){for(var n=0;n<e.correlationHeaderExcludePatterns.length;n++)if(e.correlationHeaderExcludePatterns[n].test(t))return!1}var i=Fr(t).host.toLowerCase();if(i&&(i.indexOf(":443")!==-1||i.indexOf(":80")!==-1)&&(i=(vn(t,!0)||"").toLowerCase()),(!e||!e.enableCorsCorrelation)&&i&&i!==r)return!1;var a=e&&e.correlationHeaderDomains;if(a){var s;if(M(a,function(u){var f=new RegExp(u.toLowerCase().replace(/\\/g,"\\\\").replace(/\./g,"\\.").replace(/\*/g,".*"));s=s||f.test(i)}),!s)return!1}var c=e&&e.correlationHeaderExcludedDomains;if(!c||c.length===0)return!0;for(var n=0;n<c.length;n++){var o=new RegExp(c[n].toLowerCase().replace(/\\/g,"\\\\").replace(/\./g,"\\.").replace(/\*/g,".*"));if(o.test(i))return!1}return i&&i.length>0},getCorrelationContext:function(e){if(e){var t=St.getCorrelationContextValue(e,Z.requestContextTargetKey);if(t&&t!==St.correlationIdPrefix)return t}},getCorrelationContextValue:function(e,t){if(e)for(var r=e.split(","),n=0;n<r.length;++n){var i=r[n].split("=");if(i.length===2&&i[0]===t)return i[1]}}};function Xa(e,t,r,n){var i,a=n,s=n;if(t&&t.length>0){var c=Fr(t);if(i=c.host,!a)if(c.pathname!=null){var o=c.pathname.length===0?"/":c.pathname;o.charAt(0)!=="/"&&(o="/"+o),s=c.pathname,a=te(e,r?r+" "+o:o)}else a=te(e,t)}else i=n,a=n;return{target:i,name:a,data:s}}function lr(){var e=Oe();if(e&&e.now&&e.timing){var t=e.now()+e.timing.navigationStart;if(t>0)return t}return ve()}function xe(e,t){var r=null;return e!==0&&t!==0&&!S(e)&&!S(t)&&(r=t-e),r}var Gs=";",Ks="=";function Ni(e){if(!e)return{};var t=e.split(Gs),r=Qr(t,function(i,a){var s=a.split(Ks);if(s.length===2){var c=s[0].toLowerCase(),o=s[1];i[c]=o}return i},{});if(Je(r).length>0){if(r.endpointsuffix){var n=r.location?r.location+".":"";r.ingestionendpoint=r.ingestionendpoint||"https://"+n+"dc."+r.endpointsuffix}r.ingestionendpoint=r.ingestionendpoint||ln}return r}var Fi=function(){function e(){}return e}();var Ri=function(e){O(t,e);function t(){return e.call(this)||this}return t}(Fi);var Ya=function(){function e(){this.ver=1,this.sampleRate=100,this.tags={}}return e}();var hn=function(e){O(t,e);function t(r,n,i){var a=e.call(this)||this;return a.name=te(r,i)||fe,a.data=n,a.time=Ne(new Date),a.aiDataContract={time:1,iKey:1,name:1,sampleRate:function(){return a.sampleRate===100?4:1},tags:1,data:1},a}return t}(Ya);var xn=function(){function e(){this.ver=2,this.properties={},this.measurements={}}return e}();var je=function(e){O(t,e);function t(r,n,i,a){var s=e.call(this)||this;return s.aiDataContract={ver:1,name:1,properties:0,measurements:0},s.name=te(r,n)||fe,s.properties=Fe(r,i),s.measurements=Re(r,a),s}return t.envelopeType="Microsoft.ApplicationInsights.{0}.Event",t.dataType="EventData",t}(xn);var $a=function(){function e(){}return e}();var Za=function(){function e(){this.ver=2,this.exceptions=[],this.properties={},this.measurements={}}return e}();var Qa=function(){function e(){this.hasFullStack=!0,this.parsedStack=[]}return e}();var Ws="<no_method>",pr="error",$e="stack",Mi="stackDetails",eo="errorSrc",ki="message",to="description";function Li(e,t){var r=e;return r&&!U(r)&&(JSON&&JSON.stringify?(r=JSON.stringify(e),t&&(!r||r==="{}")&&(j(e.toString)?r=e.toString():r=""+e)):r=""+e+" - (Missing JSON.stringify)"),r||""}function ro(e,t){var r=e;return e&&(r=e[ki]||e[to]||"",r&&!U(r)&&(r=Li(r,!0)),e.filename&&(r=r+" @"+(e.filename||"")+":"+(e.lineno||"?")+":"+(e.colno||"?"))),t&&t!=="String"&&t!=="Object"&&t!=="Error"&&(r||"").indexOf(t)===-1&&(r=t+": "+r),r||""}function Js(e){return nt(e)?"hasFullStack"in e&&"typeName"in e:!1}function Xs(e){return nt(e)?"ver"in e&&"exceptions"in e&&"properties"in e:!1}function no(e){return e&&e.src&&U(e.src)&&e.obj&&Ae(e.obj)}function dr(e){var t=e||"";U(t)||(U(t[$e])?t=t[$e]:t=""+t);var r=t.split(`
`);return{src:t,obj:r}}function Ys(e){for(var t=[],r=e.split(`
`),n=0;n<r.length;n++){var i=r[n];r[n+1]&&(i+="@"+r[n+1],n++),t.push(i)}return{src:e,obj:t}}function io(e){var t=null;if(e)try{if(e[$e])t=dr(e[$e]);else if(e[pr]&&e[pr][$e])t=dr(e[pr][$e]);else if(e.exception&&e.exception[$e])t=dr(e.exception[$e]);else if(no(e))t=e;else if(no(e[Mi]))t=e[Mi];else if(window.opera&&e[ki])t=Ys(e.message);else if(U(e))t=dr(e);else{var r=e[ki]||e[to]||"";U(e[eo])&&(r&&(r+=`
`),r+=" from "+e[eo]),r&&(t=dr(r))}}catch(n){t=dr(n)}return t||{src:"",obj:null}}function $s(e){var t="";return e&&(e.obj?M(e.obj,function(r){t+=r+`
`}):t=e.src||""),t}function Zs(e){var t,r=e.obj;if(r&&r.length>0){t=[];var n=0,i=0;M(r,function(T){var P=T.toString();if(_i.regex.test(P)){var p=new _i(P,n++);i+=p.sizeInBytes,t.push(p)}});var a=32*1024;if(i>a)for(var s=0,c=t.length-1,o=0,u=s,f=c;s<c;){var l=t[s].sizeInBytes,m=t[c].sizeInBytes;if(o+=l+m,o>a){var C=f-u+1;t.splice(u,C);break}u=s,f=c,s++,c--}}return t}function yn(e){var t="";if(e&&(t=e.typeName||e.name||"",!t))try{var r=/function (.{1,200})\(/,n=r.exec(e.constructor.toString());t=n&&n.length>1?n[1]:""}catch(i){}return t}function Ui(e){if(e)try{if(!U(e)){var t=yn(e),r=Li(e,!1);return(!r||r==="{}")&&(e[pr]&&(e=e[pr],t=yn(e)),r=Li(e,!0)),r.indexOf(t)!==0&&t!=="String"?t+":"+r:r}}catch(n){}return""+(e||"")}var we=function(e){O(t,e);function t(r,n,i,a,s,c){var o=e.call(this)||this;return o.aiDataContract={ver:1,exceptions:1,severityLevel:0,properties:0,measurements:0},Xs(n)?(o.exceptions=n.exceptions,o.properties=n.properties,o.measurements=n.measurements,n.severityLevel&&(o.severityLevel=n.severityLevel),n.id&&(o.id=n.id),n.problemGroup&&(o.problemGroup=n.problemGroup),o.ver=2,S(n.isManual)||(o.isManual=n.isManual)):(i||(i={}),o.exceptions=[new ao(r,n,i)],o.properties=Fe(r,i),o.measurements=Re(r,a),s&&(o.severityLevel=s),c&&(o.id=c)),o}return t.CreateAutoException=function(r,n,i,a,s,c,o,u){var f=yn(s||c||r);return{message:ro(r,f),url:n,lineNumber:i,columnNumber:a,error:Ui(s||c||r),evt:Ui(c||r),typeName:f,stackDetails:io(o||s||c),errorSrc:u}},t.CreateFromInterface=function(r,n,i,a){var s=n.exceptions&&_t(n.exceptions,function(o){return ao.CreateFromInterface(r,o)}),c=new t(r,ut({},n,{exceptions:s}),i,a);return c},t.prototype.toInterface=function(){var r=this,n=r.exceptions,i=r.properties,a=r.measurements,s=r.severityLevel,c=r.ver,o=r.problemGroup,u=r.id,f=r.isManual,l=n instanceof Array&&_t(n,function(m){return m.toInterface()})||void 0;return{ver:"4.0",exceptions:l,severityLevel:s,properties:i,measurements:a,problemGroup:o,id:u,isManual:f}},t.CreateSimpleException=function(r,n,i,a,s,c){return{exceptions:[{hasFullStack:!0,message:r,stack:s,typeName:n}]}},t.envelopeType="Microsoft.ApplicationInsights.{0}.Exception",t.dataType="ExceptionData",t.formatError=Ui,t}(Za);var ao=function(e){O(t,e);function t(r,n,i){var a=e.call(this)||this;if(a.aiDataContract={id:0,outerId:0,typeName:1,message:1,hasFullStack:0,stack:0,parsedStack:2},Js(n))a.typeName=n.typeName,a.message=n.message,a[$e]=n[$e],a.parsedStack=n.parsedStack,a.hasFullStack=n.hasFullStack;else{var s=n,c=s&&s.evt;er(s)||(s=s[pr]||c||s),a.typeName=te(r,yn(s))||fe,a.message=Ar(r,ro(n||s,a.typeName))||fe;var o=n[Mi]||io(n);a.parsedStack=Zs(o),a[$e]=hi(r,$s(o)),a.hasFullStack=Ae(a.parsedStack)&&a.parsedStack.length>0,i&&(i.typeName=i.typeName||a.typeName)}return a}return t.prototype.toInterface=function(){var r=this.parsedStack instanceof Array&&_t(this.parsedStack,function(i){return i.toInterface()}),n={id:this.id,outerId:this.outerId,typeName:this.typeName,message:this.message,hasFullStack:this.hasFullStack,stack:this[$e],parsedStack:r||void 0};return n},t.CreateFromInterface=function(r,n){var i=n.parsedStack instanceof Array&&_t(n.parsedStack,function(s){return _i.CreateFromInterface(s)})||n.parsedStack,a=new t(r,ut({},n,{parsedStack:i}));return a},t}(Qa);var _i=function(e){O(t,e);function t(r,n){var i=e.call(this)||this;if(i.sizeInBytes=0,i.aiDataContract={level:1,method:1,assembly:0,fileName:0,line:0},typeof r=="string"){var a=r;i.level=n,i.method=Ws,i.assembly=oe(a),i.fileName="",i.line=0;var s=a.match(t.regex);s&&s.length>=5&&(i.method=oe(s[2])||i.method,i.fileName=oe(s[4]),i.line=parseInt(s[5])||0)}else i.level=r.level,i.method=r.method,i.assembly=r.assembly,i.fileName=r.fileName,i.line=r.line,i.sizeInBytes=0;return i.sizeInBytes+=i.method.length,i.sizeInBytes+=i.fileName.length,i.sizeInBytes+=i.assembly.length,i.sizeInBytes+=t.baseSize,i.sizeInBytes+=i.level.toString().length,i.sizeInBytes+=i.line.toString().length,i}return t.CreateFromInterface=function(r){return new t(r,null)},t.prototype.toInterface=function(){return{level:this.level,method:this.method,assembly:this.assembly,fileName:this.fileName,line:this.line}},t.regex=/^([\s]+at)?[\s]{0,50}([^\@\()]+?)[\s]{0,50}(\@|\()([^\(\n]+):([0-9]+):([0-9]+)(\)?)$/,t.baseSize=58,t}($a);var oo=function(){function e(){this.ver=2,this.metrics=[],this.properties={},this.measurements={}}return e}();var Sn;(function(e){e[e.Measurement=0]="Measurement",e[e.Aggregation=1]="Aggregation"})(Sn||(Sn={}));var so=function(){function e(){this.kind=Sn.Measurement}return e}();var co=function(e){O(t,e);function t(){var r=e!==null&&e.apply(this,arguments)||this;return r.aiDataContract={name:1,kind:0,value:1,count:0,min:0,max:0,stdDev:0},r}return t}(so);var ze=function(e){O(t,e);function t(r,n,i,a,s,c,o,u){var f=e.call(this)||this;f.aiDataContract={ver:1,metrics:1,properties:0};var l=new co;return l.count=a>0?a:void 0,l.max=isNaN(c)||c===null?void 0:c,l.min=isNaN(s)||s===null?void 0:s,l.name=te(r,n)||fe,l.value=i,f.metrics=[l],f.properties=Fe(r,o),f.measurements=Re(r,u),f}return t.envelopeType="Microsoft.ApplicationInsights.{0}.Metric",t.dataType="MetricData",t}(oo);var Mr=function(e){O(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return t}(xn);var Me=function(e){O(t,e);function t(r,n,i,a,s,c,o){var u=e.call(this)||this;return u.aiDataContract={ver:1,name:0,url:0,duration:0,properties:0,measurements:0,id:0},u.id=xi(r,o),u.url=xt(r,i),u.name=te(r,n)||fe,isNaN(a)||(u.duration=He(a)),u.properties=Fe(r,s),u.measurements=Re(r,c),u}return t.envelopeType="Microsoft.ApplicationInsights.{0}.Pageview",t.dataType="PageviewData",t}(Mr);var uo=function(){function e(){this.ver=2,this.success=!0,this.properties={},this.measurements={}}return e}();var Be=function(e){O(t,e);function t(r,n,i,a,s,c,o,u,f,l,m,C){f===void 0&&(f="Ajax");var T=e.call(this)||this;T.aiDataContract={id:1,ver:1,name:0,resultCode:0,duration:0,success:0,data:0,target:0,type:0,properties:0,measurements:0,kind:0,value:0,count:0,min:0,max:0,stdDev:0,dependencyKind:0,dependencySource:0,commandName:0,dependencyTypeName:0},T.id=n,T.duration=He(s),T.success=c,T.resultCode=o+"",T.type=te(r,f);var P=Xa(r,i,u,a);return T.data=xt(r,a)||P.data,T.target=te(r,P.target),l&&(T.target=T.target+" | "+l),T.name=te(r,P.name),T.properties=Fe(r,m),T.measurements=Re(r,C),T}return t.envelopeType="Microsoft.ApplicationInsights.{0}.RemoteDependency",t.dataType="RemoteDependencyData",t}(uo);var fo=function(){function e(){this.ver=2,this.properties={},this.measurements={}}return e}();var st=function(e){O(t,e);function t(r,n,i,a,s){var c=e.call(this)||this;return c.aiDataContract={ver:1,message:1,severityLevel:0,properties:0},n=n||fe,c.message=Ar(r,n),c.properties=Fe(r,a),c.measurements=Re(r,s),i&&(c.severityLevel=i),c}return t.envelopeType="Microsoft.ApplicationInsights.{0}.Message",t.dataType="MessageData",t}(fo);var lo=function(e){O(t,e);function t(){var r=e.call(this)||this;return r.ver=2,r.properties={},r.measurements={},r}return t}(Mr);var ct=function(e){O(t,e);function t(r,n,i,a,s,c,o){var u=e.call(this)||this;return u.aiDataContract={ver:1,name:0,url:0,duration:0,perfTotal:0,networkConnect:0,sentRequest:0,receivedResponse:0,domProcessing:0,properties:0,measurements:0},u.url=xt(r,i),u.name=te(r,n)||fe,u.properties=Fe(r,s),u.measurements=Re(r,c),o&&(u.domProcessing=o.domProcessing,u.duration=o.duration,u.networkConnect=o.networkConnect,u.perfTotal=o.perfTotal,u.receivedResponse=o.receivedResponse,u.sentRequest=o.sentRequest),u}return t.envelopeType="Microsoft.ApplicationInsights.{0}.PageviewPerformance",t.dataType="PageviewPerformanceData",t}(lo);var pt=function(e){O(t,e);function t(r,n){var i=e.call(this)||this;return i.aiDataContract={baseType:1,baseData:1},i.baseType=r,i.baseData=n,i}return t}(Ri);var mr;(function(e){e[e.Verbose=0]="Verbose",e[e.Information=1]="Information",e[e.Warning=2]="Warning",e[e.Error=3]="Error",e[e.Critical=4]="Critical"})(mr||(mr={}));function Dt(e){var t="ai."+e+".";return function(r){return t+r}}var kr=Dt("application"),ye=Dt("device"),Cn=Dt("location"),gr=Dt("operation"),Oi=Dt("session"),At=Dt("user"),Wt=Dt("cloud"),Lr=Dt("internal"),vr=function(e){O(t,e);function t(){return e.call(this)||this}return t}(qn({applicationVersion:kr("ver"),applicationBuild:kr("build"),applicationTypeId:kr("typeId"),applicationId:kr("applicationId"),applicationLayer:kr("layer"),deviceId:ye("id"),deviceIp:ye("ip"),deviceLanguage:ye("language"),deviceLocale:ye("locale"),deviceModel:ye("model"),deviceFriendlyName:ye("friendlyName"),deviceNetwork:ye("network"),deviceNetworkName:ye("networkName"),deviceOEMName:ye("oemName"),deviceOS:ye("os"),deviceOSVersion:ye("osVersion"),deviceRoleInstance:ye("roleInstance"),deviceRoleName:ye("roleName"),deviceScreenResolution:ye("screenResolution"),deviceType:ye("type"),deviceMachineName:ye("machineName"),deviceVMName:ye("vmName"),deviceBrowser:ye("browser"),deviceBrowserVersion:ye("browserVersion"),locationIp:Cn("ip"),locationCountry:Cn("country"),locationProvince:Cn("province"),locationCity:Cn("city"),operationId:gr("id"),operationName:gr("name"),operationParentId:gr("parentId"),operationRootId:gr("rootId"),operationSyntheticSource:gr("syntheticSource"),operationCorrelationVector:gr("correlationVector"),sessionId:Oi("id"),sessionIsFirst:Oi("isFirst"),sessionIsNew:Oi("isNew"),userAccountAcquisitionDate:At("accountAcquisitionDate"),userAccountId:At("accountId"),userAgent:At("userAgent"),userId:At("id"),userStoreRegion:At("storeRegion"),userAuthUserId:At("authUserId"),userAnonymousUserAcquisitionDate:At("anonUserAcquisitionDate"),userAuthenticatedUserAcquisitionDate:At("authUserAcquisitionDate"),cloudName:Wt("name"),cloudRole:Wt("role"),cloudRoleVer:Wt("roleVer"),cloudRoleInstance:Wt("roleInstance"),cloudEnvironment:Wt("environment"),cloudLocation:Wt("location"),cloudDeploymentUnit:Wt("deploymentUnit"),internalNodeName:Lr("nodeName"),internalSdkVersion:Lr("sdkVersion"),internalAgentVersion:Lr("agentVersion"),internalSnippet:Lr("snippet"),internalSdkSrc:Lr("sdkSrc")}));var Ze=function(){function e(){}return e.create=function(t,r,n,i,a,s){if(n=te(i,n)||fe,S(t)||S(r)||S(n))throw Error("Input doesn't contain all required fields");var c={name:n,time:Ne(new Date),iKey:"",ext:s||{},tags:[],data:{},baseType:r,baseData:t};return S(a)||$(a,function(o,u){c.data[o]=u}),c},e}();var be={UserExt:"user",DeviceExt:"device",TraceExt:"trace",WebExt:"web",AppExt:"app",OSExt:"os",SessionExt:"ses",SDKExt:"sdk"},Q=new vr;var Nt="AppInsightsPropertiesPlugin",Ur="AppInsightsChannelPlugin",Hi="ApplicationInsightsAnalytics";var po=function(){function e(t,r,n,i){K(e,this,function(a){var s=null,c=[],o=!1,u;n&&(u=n.logger);function f(){n&&M(n.getTransmissionControls(),function(m){M(m,function(C){return C.flush(!0)})})}function l(m){c.push(m),s||(s=setInterval(function(){var C=c.slice(0),T=!1;c=[],M(C,function(P){P()?T=!0:c.push(P)}),c.length===0&&(clearInterval(s),s=null),T&&f()},100))}a.trackPageView=function(m,C){var T=m.name;if(S(T)||typeof T!="string"){var P=Ie();T=m.name=P&&P.title||""}var p=m.uri;if(S(p)||typeof p!="string"){var v=_e();p=m.uri=v&&v.href||""}if(!i.isPerformanceTimingSupported()){t.sendPageViewInternal(m,C),f(),u.throwInternal(y.WARNING,h.NavigationTimingNotSupported,"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");return}var x=!1,E,k=i.getPerformanceTiming().navigationStart;k>0&&(E=xe(k,+new Date),i.shouldCollectDuration(E)||(E=void 0));var N;!S(C)&&!S(C.duration)&&(N=C.duration),(r||!isNaN(N))&&(isNaN(N)&&(C||(C={}),C.duration=E),t.sendPageViewInternal(m,C),f(),x=!0);var J=6e4;C||(C={}),l(function(){var pe=!1;try{if(i.isPerformanceTimingDataReady()){pe=!0;var W={name:T,uri:p};i.populatePageViewPerformanceEvent(W),!W.isValid&&!x?(C.duration=E,t.sendPageViewInternal(m,C)):(x||(C.duration=W.durationMs,t.sendPageViewInternal(m,C)),o||(t.sendPageViewPerformanceInternal(W,C),o=!0))}else k>0&&xe(k,+new Date)>J&&(pe=!0,x||(C.duration=J,t.sendPageViewInternal(m,C)))}catch(se){u.throwInternal(y.CRITICAL,h.TrackPVFailedCalc,"trackPageView failed on page load calculation: "+G(se),{exception:_(se)})}return pe})}})}return e}();var mo=function(){function e(t,r){this.prevPageVisitDataKeyName="prevPageVisitData",this.pageVisitTimeTrackingHandler=r,this._logger=t}return e.prototype.trackPreviousPageVisit=function(t,r){try{var n=this.restartPageVisitTimer(t,r);n&&this.pageVisitTimeTrackingHandler(n.pageName,n.pageUrl,n.pageVisitTime)}catch(i){this._logger.warnToConsole("Auto track page visit time failed, metric will not be collected: "+_(i))}},e.prototype.restartPageVisitTimer=function(t,r){try{var n=this.stopPageVisitTimer();return this.startPageVisitTimer(t,r),n}catch(i){return this._logger.warnToConsole("Call to restart failed: "+_(i)),null}},e.prototype.startPageVisitTimer=function(t,r){try{if(Kt()){ur(this._logger,this.prevPageVisitDataKeyName)!=null&&Pe("Cannot call startPageVisit consecutively without first calling stopPageVisit");var n=new ic(t,r),i=he().stringify(n);fr(this._logger,this.prevPageVisitDataKeyName,i)}}catch(a){this._logger.warnToConsole("Call to start failed: "+_(a))}},e.prototype.stopPageVisitTimer=function(){try{if(Kt()){var t=ve(),r=ur(this._logger,this.prevPageVisitDataKeyName);if(r&&it()){var n=he().parse(r);return n.pageVisitTime=t-n.pageVisitStartTime,Di(this._logger,this.prevPageVisitDataKeyName),n}else return null}return null}catch(i){return this._logger.warnToConsole("Stop page visit timer failed: "+_(i)),null}},e}();var ic=function(){function e(t,r){this.pageVisitStartTime=ve(),this.pageName=t,this.pageUrl=r}return e}();var go=function(){function e(t){this.MAX_DURATION_ALLOWED=36e5,t&&(this._logger=t.logger)}return e.prototype.populatePageViewPerformanceEvent=function(t){t.isValid=!1;var r=this.getPerformanceNavigationTiming(),n=this.getPerformanceTiming(),i=0,a=0,s=0,c=0,o=0;(r||n)&&(r?(i=r.duration,a=r.startTime===0?r.connectEnd:xe(r.startTime,r.connectEnd),s=xe(r.requestStart,r.responseStart),c=xe(r.responseStart,r.responseEnd),o=xe(r.responseEnd,r.loadEventEnd)):(i=xe(n.navigationStart,n.loadEventEnd),a=xe(n.navigationStart,n.connectEnd),s=xe(n.requestStart,n.responseStart),c=xe(n.responseStart,n.responseEnd),o=xe(n.responseEnd,n.loadEventEnd)),i===0?this._logger.throwInternal(y.WARNING,h.ErrorPVCalc,"error calculating page view performance.",{total:i,network:a,request:s,response:c,dom:o}):this.shouldCollectDuration(i,a,s,c,o)?i<Math.floor(a)+Math.floor(s)+Math.floor(c)+Math.floor(o)?this._logger.throwInternal(y.WARNING,h.ClientPerformanceMathError,"client performance math error.",{total:i,network:a,request:s,response:c,dom:o}):(t.durationMs=i,t.perfTotal=t.duration=He(i),t.networkConnect=He(a),t.sentRequest=He(s),t.receivedResponse=He(c),t.domProcessing=He(o),t.isValid=!0):this._logger.throwInternal(y.WARNING,h.InvalidDurationValue,"Invalid page load duration value. Browser perf data won't be sent.",{total:i,network:a,request:s,response:c,dom:o}))},e.prototype.getPerformanceTiming=function(){return this.isPerformanceTimingSupported()?Oe().timing:null},e.prototype.getPerformanceNavigationTiming=function(){return this.isPerformanceNavigationTimingSupported()?Oe().getEntriesByType("navigation")[0]:null},e.prototype.isPerformanceNavigationTimingSupported=function(){var t=Oe();return t&&t.getEntriesByType&&t.getEntriesByType("navigation").length>0},e.prototype.isPerformanceTimingSupported=function(){var t=Oe();return t&&t.timing},e.prototype.isPerformanceTimingDataReady=function(){var t=Oe(),r=t?t.timing:0;return r&&r.domainLookupStart>0&&r.navigationStart>0&&r.responseStart>0&&r.requestStart>0&&r.loadEventEnd>0&&r.responseEnd>0&&r.connectEnd>0&&r.domLoading>0},e.prototype.shouldCollectDuration=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=Ee()||{},i=["googlebot","adsbot-google","apis-google","mediapartners-google"],a=n.userAgent,s=!1;if(a)for(var c=0;c<i.length;c++)s=s||a.toLowerCase().indexOf(i[c])!==-1;if(s)return!1;for(var c=0;c<t.length;c++)if(t[c]<0||t[c]>=this.MAX_DURATION_ALLOWED)return!1;return!0},e}();var vo="duration",ji="event";function _r(e,t){e&&e.dispatchEvent&&t&&e.dispatchEvent(t)}var zi=function(e){O(t,e);function t(){var r=e.call(this)||this;r.identifier=Hi,r.priority=180,r.autoRoutePVDelay=500;var n,i,a,s=0,c,o;return K(t,r,function(u,f){var l=_e(!0);c=l&&l.href||"",u.getCookieMgr=function(){return jt(u.core)},u.processTelemetry=function(p,v){lt(u.core,function(){return u.identifier+":processTelemetry"},function(){var x=!1,E=u._telemetryInitializers.length;v=u._getTelCtx(v);for(var k=0;k<E;++k){var N=u._telemetryInitializers[k];if(N)try{if(N.apply(null,[p])===!1){x=!0;break}}catch(J){v.diagLog().throwInternal(y.CRITICAL,h.TelemetryInitializerFailed,"One of telemetry initializers failed, telemetry item will not be sent: "+G(J),{exception:_(J)},!0)}}x||u.processNext(p,v)},function(){return{item:p}},!p.sync)},u.trackEvent=function(p,v){try{var x=Ze.create(p,je.dataType,je.envelopeType,u.diagLog(),v);u.core.track(x)}catch(E){u.diagLog().throwInternal(y.WARNING,h.TrackTraceFailed,"trackTrace failed, trace will not be collected: "+G(E),{exception:_(E)})}},u.startTrackEvent=function(p){try{n.start(p)}catch(v){u.diagLog().throwInternal(y.CRITICAL,h.StartTrackEventFailed,"startTrackEvent failed, event will not be collected: "+G(v),{exception:_(v)})}},u.stopTrackEvent=function(p,v,x){try{n.stop(p,void 0,v)}catch(E){u.diagLog().throwInternal(y.CRITICAL,h.StopTrackEventFailed,"stopTrackEvent failed, event will not be collected: "+G(E),{exception:_(E)})}},u.trackTrace=function(p,v){try{var x=Ze.create(p,st.dataType,st.envelopeType,u.diagLog(),v);u.core.track(x)}catch(E){u.diagLog().throwInternal(y.WARNING,h.TrackTraceFailed,"trackTrace failed, trace will not be collected: "+G(E),{exception:_(E)})}},u.trackMetric=function(p,v){try{var x=Ze.create(p,ze.dataType,ze.envelopeType,u.diagLog(),v);u.core.track(x)}catch(E){u.diagLog().throwInternal(y.CRITICAL,h.TrackMetricFailed,"trackMetric failed, metric will not be collected: "+G(E),{exception:_(E)})}},u.trackPageView=function(p,v){try{var x=p||{};u._pageViewManager.trackPageView(x,ut({},x.properties,x.measurements,v)),u.config.autoTrackPageVisitTime&&u._pageVisitTimeManager.trackPreviousPageVisit(x.name,x.uri)}catch(E){u.diagLog().throwInternal(y.CRITICAL,h.TrackPVFailed,"trackPageView failed, page view will not be collected: "+G(E),{exception:_(E)})}},u.sendPageViewInternal=function(p,v,x){var E=Ie();E&&(p.refUri=p.refUri===void 0?E.referrer:p.refUri);var k=Ze.create(p,Me.dataType,Me.envelopeType,u.diagLog(),v,x);u.core.track(k),s=0},u.sendPageViewPerformanceInternal=function(p,v,x){var E=Ze.create(p,ct.dataType,ct.envelopeType,u.diagLog(),v,x);u.core.track(E)},u.trackPageViewPerformance=function(p,v){try{u._pageViewPerformanceManager.populatePageViewPerformanceEvent(p),u.sendPageViewPerformanceInternal(p,v)}catch(x){u.diagLog().throwInternal(y.CRITICAL,h.TrackPVFailed,"trackPageViewPerformance failed, page view will not be collected: "+G(x),{exception:_(x)})}},u.startTrackPage=function(p){try{if(typeof p!="string"){var v=Ie();p=v&&v.title||""}i.start(p)}catch(x){u.diagLog().throwInternal(y.CRITICAL,h.StartTrackFailed,"startTrackPage failed, page view may not be collected: "+G(x),{exception:_(x)})}},u.stopTrackPage=function(p,v,x,E){try{if(typeof p!="string"){var k=Ie();p=k&&k.title||""}if(typeof v!="string"){var N=_e();v=N&&N.href||""}i.stop(p,v,x,E),u.config.autoTrackPageVisitTime&&u._pageVisitTimeManager.trackPreviousPageVisit(p,v)}catch(J){u.diagLog().throwInternal(y.CRITICAL,h.StopTrackFailed,"stopTrackPage failed, page view will not be collected: "+G(J),{exception:_(J)})}},u.sendExceptionInternal=function(p,v,x){var E=p.exception||p.error||new Error(fe),k=new we(u.diagLog(),E,p.properties||v,p.measurements,p.severityLevel,p.id).toInterface(),N=Ze.create(k,we.dataType,we.envelopeType,u.diagLog(),v,x);u.core.track(N)},u.trackException=function(p,v){try{u.sendExceptionInternal(p,v)}catch(x){u.diagLog().throwInternal(y.CRITICAL,h.TrackExceptionFailed,"trackException failed, exception will not be collected: "+G(x),{exception:_(x)})}},u._onerror=function(p){var v=p&&p.error,x=p&&p.evt;try{if(!x){var E=ft();E&&(x=E[ji])}var k=p&&p.url||(Ie()||{}).URL,N=p.errorSrc||"window.onerror@"+k+":"+(p.lineNumber||0)+":"+(p.columnNumber||0),J={errorSrc:N,url:k,lineNumber:p.lineNumber||0,columnNumber:p.columnNumber||0,message:p.message};Ci(p.message,p.url,p.lineNumber,p.columnNumber,p.error)?P(we.CreateAutoException("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.",k,p.lineNumber||0,p.columnNumber||0,v,x,null,N),J):(p.errorSrc||(p.errorSrc=N),u.trackException({exception:p,severityLevel:mr.Error},J))}catch(W){var pe=v?v.name+", "+v.message:"null";u.diagLog().throwInternal(y.CRITICAL,h.ExceptionWhileLoggingError,"_onError threw exception while logging error, error will not be collected: "+G(W),{exception:_(W),errorString:pe})}},u.addTelemetryInitializer=function(p){u._telemetryInitializers.push(p)},u.initialize=function(p,v,x,E){if(!u.isInitialized()){if(S(v))throw Error("Error initializing");f.initialize(p,v,x,E),u.setInitialized(!1);var k=u._getTelCtx(),N=u.identifier;u.config=k.getExtCfg(N);var J=t.getDefaultConfig(p);J!==void 0&&$(J,function(b,H){u.config[b]=k.getConfig(N,b,H),u.config[b]===void 0&&(u.config[b]=H)}),u.config.isStorageUseDisabled&&Ei();var pe={instrumentationKey:function(){return p.instrumentationKey},accountId:function(){return u.config.accountId||p.accountId},sessionRenewalMs:function(){return u.config.sessionRenewalMs||p.sessionRenewalMs},sessionExpirationMs:function(){return u.config.sessionExpirationMs||p.sessionExpirationMs},sampleRate:function(){return u.config.samplingPercentage||p.samplingPercentage},sdkExtension:function(){return u.config.sdkExtension||p.sdkExtension},isBrowserLinkTrackingEnabled:function(){return u.config.isBrowserLinkTrackingEnabled||p.isBrowserLinkTrackingEnabled},appId:function(){return u.config.appId||p.appId}};u._pageViewPerformanceManager=new go(u.core),u._pageViewManager=new po(r,u.config.overridePageViewDuration,u.core,u._pageViewPerformanceManager),u._pageVisitTimeManager=new mo(u.diagLog(),function(b,H,L){return m(b,H,L)}),u._telemetryInitializers=u._telemetryInitializers||[],C(pe),n=new ho(u.diagLog(),"trackEvent"),n.action=function(b,H,L,V){V||(V={}),V[vo]=L.toString(),u.trackEvent({name:b,properties:V})},i=new ho(u.diagLog(),"trackPageView"),i.action=function(b,H,L,V,X){S(V)&&(V={}),V[vo]=L.toString();var ee={name:b,uri:H,properties:V,measurements:X};u.sendPageViewInternal(ee,V)};var W=ft(),se=Xn(),Se=_e(!0),Qe=r;if(u.config.disableExceptionTracking===!1&&!u.config.autoExceptionInstrumented&&W){var Ge="onerror",et=W[Ge];W.onerror=function(b,H,L,V,X){var ee=W[ji],Ct=et&&et(b,H,L,V,X);return Ct!==!0&&Qe._onerror(we.CreateAutoException(b,H,L,V,X,ee)),Ct},u.config.autoExceptionInstrumented=!0}if(u.config.disableExceptionTracking===!1&&u.config.enableUnhandledPromiseRejectionTracking===!0&&!u.config.autoUnhandledPromiseInstrumented&&W){var d="onunhandledrejection",I=W[d];W[d]=function(b){var H=W[ji],L=I&&I.call(W,b);return L!==!0&&Qe._onerror(we.CreateAutoException(b.reason.toString(),Se?Se.href:"",0,0,b,H)),L},u.config.autoUnhandledPromiseInstrumented=!0}if(u.config.enableAutoRouteTracking===!0&&se&&j(se.pushState)&&j(se.replaceState)&&W&&typeof Event!="undefined"){var D=r;M(x,function(b){b.identifier===Nt&&(a=b)}),se.pushState=function(b){return function(){var L=b.apply(this,arguments);return _r(W,Vt(D.config.namePrefix+"pushState")),_r(W,Vt(D.config.namePrefix+"locationchange")),L}}(se.pushState),se.replaceState=function(b){return function(){var L=b.apply(this,arguments);return _r(W,Vt(D.config.namePrefix+"replaceState")),_r(W,Vt(D.config.namePrefix+"locationchange")),L}}(se.replaceState),W.addEventListener&&(W.addEventListener(D.config.namePrefix+"popstate",function(){_r(W,Vt(D.config.namePrefix+"locationchange"))}),W.addEventListener(D.config.namePrefix+"locationchange",function(){if(a&&a.context&&a.context.telemetryTrace){a.context.telemetryTrace.traceID=Ue();var b="_unknown_";Se&&Se.pathname&&(b=Se.pathname+(Se.hash||"")),a.context.telemetryTrace.name=b}o&&(c=o),o=Se&&Se.href||"",setTimeout(function(H){D.trackPageView({refUri:H,properties:{duration:0}})}.bind(r,c),D.autoRoutePVDelay)}))}u.setInitialized(!0)}};function m(p,v,x){var E={PageName:p,PageUrl:v};u.trackMetric({name:"PageVisitTime",average:x,max:x,min:x,sampleCount:1},E)}function C(p){if(!p.isBrowserLinkTrackingEnabled()){var v=["/browserLinkSignalR/","/__browserLink/"],x=function(E){if(E.baseType===Be.dataType){var k=E.baseData;if(k){for(var N=0;N<v.length;N++)if(k.target&&k.target.indexOf(v[N])>=0)return!1}}return!0};T(x)}}function T(p){u._telemetryInitializers.push(p)}function P(p,v){var x=Ze.create(p,we.dataType,we.envelopeType,u.diagLog(),v);u.core.track(x)}}),r}return t.getDefaultConfig=function(r){return r||(r={}),r.sessionRenewalMs=30*60*1e3,r.sessionExpirationMs=24*60*60*1e3,r.disableExceptionTracking=Xe(r.disableExceptionTracking),r.autoTrackPageVisitTime=Xe(r.autoTrackPageVisitTime),r.overridePageViewDuration=Xe(r.overridePageViewDuration),r.enableUnhandledPromiseRejectionTracking=Xe(r.enableUnhandledPromiseRejectionTracking),(isNaN(r.samplingPercentage)||r.samplingPercentage<=0||r.samplingPercentage>=100)&&(r.samplingPercentage=100),r.isStorageUseDisabled=Xe(r.isStorageUseDisabled),r.isBrowserLinkTrackingEnabled=Xe(r.isBrowserLinkTrackingEnabled),r.enableAutoRouteTracking=Xe(r.enableAutoRouteTracking),r.namePrefix=r.namePrefix||"",r.enableDebug=Xe(r.enableDebug),r.disableFlushOnBeforeUnload=Xe(r.disableFlushOnBeforeUnload),r.disableFlushOnUnload=Xe(r.disableFlushOnUnload,r.disableFlushOnBeforeUnload),r},t.Version="2.6.4",t}(at);var ho=function(){function e(t,r){var n=this,i={};n.start=function(a){typeof i[a]!="undefined"&&t.throwInternal(y.WARNING,h.StartCalledMoreThanOnce,"start was called more than once for this event without calling stop.",{name:a,key:a},!0),i[a]=+new Date},n.stop=function(a,s,c,o){var u=i[a];if(isNaN(u))t.throwInternal(y.WARNING,h.StopCalledWithoutStart,"stop was called without a corresponding start.",{name:a,key:a},!0);else{var f=+new Date,l=xe(u,f);n.action(a,s,l,c,o)}delete i[a],i[a]=void 0}}return e}();var xo=function(){function e(t){var r=[];K(e,this,function(n){n.enqueue=function(i){r.push(i)},n.count=function(){return r.length},n.clear=function(){r.length=0},n.getItems=function(){return r.slice(0)},n.batchPayloads=function(i){if(i&&i.length>0){var a=t.emitLineDelimitedJson()?i.join(`
`):"["+i.join(",")+"]";return a}return null},n.markAsSent=function(i){n.clear()},n.clearSent=function(i){}})}return e}();var yo=function(){function e(t,r){var n=!1,i;K(e,this,function(a){var s=u(e.BUFFER_KEY),c=u(e.SENT_BUFFER_KEY);i=s.concat(c),i.length>e.MAX_BUFFER_SIZE&&(i.length=e.MAX_BUFFER_SIZE),f(e.SENT_BUFFER_KEY,[]),f(e.BUFFER_KEY,i),a.enqueue=function(l){if(i.length>=e.MAX_BUFFER_SIZE){n||(t.throwInternal(y.WARNING,h.SessionStorageBufferFull,"Maximum buffer size reached: "+i.length,!0),n=!0);return}i.push(l),f(e.BUFFER_KEY,i)},a.count=function(){return i.length},a.clear=function(){i=[],f(e.BUFFER_KEY,[]),f(e.SENT_BUFFER_KEY,[]),n=!1},a.getItems=function(){return i.slice(0)},a.batchPayloads=function(l){if(l&&l.length>0){var m=r.emitLineDelimitedJson()?l.join(`
`):"["+l.join(",")+"]";return m}return null},a.markAsSent=function(l){i=o(l,i),f(e.BUFFER_KEY,i);var m=u(e.SENT_BUFFER_KEY);m instanceof Array&&l instanceof Array&&(m=m.concat(l),m.length>e.MAX_BUFFER_SIZE&&(t.throwInternal(y.CRITICAL,h.SessionStorageBufferFull,"Sent buffer reached its maximum size: "+m.length,!0),m.length=e.MAX_BUFFER_SIZE),f(e.SENT_BUFFER_KEY,m))},a.clearSent=function(l){var m=u(e.SENT_BUFFER_KEY);m=o(l,m),f(e.SENT_BUFFER_KEY,m)};function o(l,m){var C=[];return M(m,function(T){!j(T)&&Ut(l,T)===-1&&C.push(T)}),C}function u(l){var m=l;try{m=r.namePrefix&&r.namePrefix()?r.namePrefix()+"_"+m:m;var C=ur(t,m);if(C){var T=he().parse(C);if(U(T)&&(T=he().parse(T)),T&&Ae(T))return T}}catch(P){t.throwInternal(y.CRITICAL,h.FailedToRestoreStorageBuffer," storage key: "+m+", "+G(P),{exception:_(P)})}return[]}function f(l,m){var C=l;try{C=r.namePrefix&&r.namePrefix()?r.namePrefix()+"_"+C:C;var T=JSON.stringify(m);fr(t,C,T)}catch(P){fr(t,C,JSON.stringify([])),t.throwInternal(y.WARNING,h.FailedToSetStorageBuffer," storage key: "+C+", "+G(P)+". Buffer cleared",{exception:_(P)})}}})}return e.BUFFER_KEY="AI_buffer",e.SENT_BUFFER_KEY="AI_sentBuffer",e.MAX_BUFFER_SIZE=2e3,e}();var Bi="baseType",re="baseData",Te="properties",So="true";function le(e,t,r){return q(e,t,r,rr)}var ae=function(){function e(){}return e.extractPropsAndMeasurements=function(t,r,n){S(t)||$(t,function(i,a){tr(a)?n[i]=a:U(a)?r[i]=a:it()&&(r[i]=he().stringify(a))})},e.createEnvelope=function(t,r,n,i){var a=new hn(t,i,r);le(a,"sampleRate",n[sr]),(n[re]||{}).startTime&&(a.time=Ne(n[re].startTime)),a.iKey=n.iKey;var s=n.iKey.replace(/-/g,"");return a.name=a.name.replace("{0}",s),e.extractPartAExtensions(n,a),n.tags=n.tags||[],tn(a)},e.extractPartAExtensions=function(t,r){var n=r.tags=r.tags||{},i=t.ext=t.ext||{},a=t.tags=t.tags||[],s=i.user;s&&(le(n,Q.userAuthUserId,s.authId),le(n,Q.userId,s.id||s.localId));var c=i.app;c&&le(n,Q.sessionId,c.sesId);var o=i.device;o&&(le(n,Q.deviceId,o.id||o.localId),le(n,Q.deviceType,o.deviceClass),le(n,Q.deviceIp,o.ip),le(n,Q.deviceModel,o.model),le(n,Q.deviceType,o.deviceType));var u=t.ext.web;if(u){le(n,Q.deviceLanguage,u.browserLang),le(n,Q.deviceBrowserVersion,u.browserVer),le(n,Q.deviceBrowser,u.browser);var f=r.data=r.data||{},l=f[re]=f[re]||{},m=l[Te]=l[Te]||{};le(m,"domain",u.domain),le(m,"isManual",u.isManual?So:null),le(m,"screenRes",u.screenRes),le(m,"userConsent",u.userConsent?So:null)}var C=i.os;C&&le(n,Q.deviceOS,C.name);var T=i.trace;T&&(le(n,Q.operationParentId,T.parentID),le(n,Q.operationName,T.name),le(n,Q.operationId,T.traceID));for(var P={},p=a.length-1;p>=0;p--){var v=a[p];$(v,function(E,k){P[E]=k}),a.splice(p,1)}$(a,function(E,k){P[E]=k});var x=ut({},n,P);x[Q.internalSdkVersion]||(x[Q.internalSdkVersion]="javascript:"+e.Version),r.tags=tn(x)},e.prototype.Init=function(t,r){this._logger=t,S(r[re])&&this._logger.throwInternal(y.CRITICAL,h.TelemetryEnvelopeInvalid,"telemetryItem.baseData cannot be null.")},e.Version="2.6.4",e}();var Co=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i=n[re].measurements||{},a=n[re][Te]||{};ae.extractPropsAndMeasurements(n.data,a,i);var s=n[re];if(S(s))return r.warnToConsole("Invalid input for dependency data"),null;var c=s[Te]&&s[Te][Nr]?s[Te][Nr]:"GET",o=new Be(r,s.id,s.target,s.name,s.duration,s.success,s.responseCode,c,s.type,s.correlationContext,a,i),u=new pt(Be.dataType,o);return ae.createEnvelope(r,Be.envelopeType,n,u)},t.DependencyEnvelopeCreator=new t,t}(ae);var Vi=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i={},a={};n[Bi]!==je.dataType&&(i.baseTypeSource=n[Bi]),n[Bi]===je.dataType?(i=n[re][Te]||{},a=n[re].measurements||{}):n[re]&&ae.extractPropsAndMeasurements(n[re],i,a),ae.extractPropsAndMeasurements(n.data,i,a);var s=n[re].name,c=new je(r,s,i,a),o=new pt(je.dataType,c);return ae.createEnvelope(r,je.envelopeType,n,o)},t.EventEnvelopeCreator=new t,t}(ae);var Io=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i=n[re].measurements||{},a=n[re][Te]||{};ae.extractPropsAndMeasurements(n.data,a,i);var s=n[re],c=we.CreateFromInterface(r,s,a,i),o=new pt(we.dataType,c);return ae.createEnvelope(r,we.envelopeType,n,o)},t.ExceptionEnvelopeCreator=new t,t}(ae);var To=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i=n[re],a=i[Te]||{},s=i.measurements||{};ae.extractPropsAndMeasurements(n.data,a,s);var c=new ze(r,i.name,i.average,i.sampleCount,i.min,i.max,a,s),o=new pt(ze.dataType,c);return ae.createEnvelope(r,ze.envelopeType,n,o)},t.MetricEnvelopeCreator=new t,t}(ae);var Eo=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i="duration",a,s=n[re];!S(s)&&!S(s[Te])&&!S(s[Te][i])?(a=s[Te][i],delete s[Te][i]):!S(n.data)&&!S(n.data[i])&&(a=n.data[i],delete n.data[i]);var c=n[re],o;((n.ext||{}).trace||{}).traceID&&(o=n.ext.trace.traceID);var u=c.id||o,f=c.name,l=c.uri,m=c[Te]||{},C=c.measurements||{};if(S(c.refUri)||(m.refUri=c.refUri),S(c.pageType)||(m.pageType=c.pageType),S(c.isLoggedIn)||(m.isLoggedIn=c.isLoggedIn.toString()),!S(c[Te])){var T=c[Te];$(T,function(v,x){m[v]=x})}ae.extractPropsAndMeasurements(n.data,m,C);var P=new Me(r,f,l,a,m,C,u),p=new pt(Me.dataType,P);return ae.createEnvelope(r,Me.envelopeType,n,p)},t.PageViewEnvelopeCreator=new t,t}(ae);var wo=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i=n[re],a=i.name,s=i.uri||i.url,c=i[Te]||{},o=i.measurements||{};ae.extractPropsAndMeasurements(n.data,c,o);var u=new ct(r,a,s,void 0,c,o,i),f=new pt(ct.dataType,u);return ae.createEnvelope(r,ct.envelopeType,n,f)},t.PageViewPerformanceEnvelopeCreator=new t,t}(ae);var Po=function(e){O(t,e);function t(){return e!==null&&e.apply(this,arguments)||this}return t.prototype.Create=function(r,n){e.prototype.Init.call(this,r,n);var i=n[re].message,a=n[re].severityLevel,s=n[re][Te]||{},c=n[re].measurements||{};ae.extractPropsAndMeasurements(n.data,s,c);var o=new st(r,i,a,s,c),u=new pt(st.dataType,o);return ae.createEnvelope(r,st.envelopeType,n,u)},t.TraceEnvelopeCreator=new t,t}(ae);var bo=function(){function e(t){K(e,this,function(r){r.serialize=function(s){var c=n(s,"root");try{return he().stringify(c)}catch(o){t.throwInternal(y.CRITICAL,h.CannotSerializeObject,o&&j(o.toString)?o.toString():"Error serializing object",null,!0)}};function n(s,c){var o="__aiCircularRefCheck",u={};if(!s)return t.throwInternal(y.CRITICAL,h.CannotSerializeObject,"cannot serialize object because it is null or undefined",{name:c},!0),u;if(s[o])return t.throwInternal(y.WARNING,h.CircularReferenceDetected,"Circular reference detected while serializing object",{name:c},!0),u;if(!s.aiDataContract){if(c==="measurements")u=a(s,"number",c);else if(c==="properties")u=a(s,"string",c);else if(c==="tags")u=a(s,"string",c);else if(Ae(s))u=i(s,c);else{t.throwInternal(y.WARNING,h.CannotSerializeObjectNonSerializable,"Attempting to serialize an object which does not implement ISerializable",{name:c},!0);try{he().stringify(s),u=s}catch(f){t.throwInternal(y.CRITICAL,h.CannotSerializeObject,f&&j(f.toString)?f.toString():"Error serializing object",null,!0)}}return u}return s[o]=!0,$(s.aiDataContract,function(f,l){var m=j(l)?l()&1:l&1,C=j(l)?l()&4:l&4,T=l&2,P=s[f]!==void 0,p=nt(s[f])&&s[f]!==null;if(m&&!P&&!T)t.throwInternal(y.CRITICAL,h.MissingRequiredFieldSpecification,"Missing required field specification. The field is required but not present on source",{field:f,name:c});else if(!C){var v=void 0;p?T?v=i(s[f],f):v=n(s[f],f):v=s[f],v!==void 0&&(u[f]=v)}}),delete s[o],u}function i(s,c){var o;if(s)if(!Ae(s))t.throwInternal(y.CRITICAL,h.ItemNotInArray,`This field was specified as an array in the contract but the item is not an array.\r
`,{name:c},!0);else{o=[];for(var u=0;u<s.length;u++){var f=s[u],l=n(f,c+"["+u+"]");o.push(l)}}return o}function a(s,c,o){var u;return s&&(u={},$(s,function(f,l){if(c==="string")l===void 0?u[f]="undefined":l===null?u[f]="null":l.toString?u[f]=l.toString():u[f]="invalid field: toString() is not defined.";else if(c==="number")if(l===void 0)u[f]="undefined";else if(l===null)u[f]="null";else{var m=parseFloat(l);isNaN(m)?u[f]="NaN":u[f]=m}else u[f]="invalid field: "+o+" is of unknown type.",t.throwInternal(y.CRITICAL,u[f],null,!0)})),u}})}return e}();var ac=function(){function e(){var t=ft(),r=Ie(),n=!1,i=!0;K(e,this,function(a){try{if(t&&Pt.Attach(t,"online",o)&&(Pt.Attach(t,"offline",u),n=!0),r){var s=r.body||r;ce(s.ononline)||(s.ononline=o,s.onoffline=u,n=!0)}if(n){var c=Ee();c&&!S(c.onLine)&&(i=c.onLine)}}catch(f){n=!1}a.isListening=n,a.isOnline=function(){var f=!0,l=Ee();return n?f=i:l&&!S(l.onLine)&&(f=l.onLine),f},a.isOffline=function(){return!a.isOnline()};function o(){i=!0}function u(){i=!1}})}return e.Offline=new e,e}();var qi=ac.Offline;var Do=function(){function e(){}return e.prototype.getHashCodeScore=function(t){var r=this.getHashCode(t)/e.INT_MAX_VALUE;return r*100},e.prototype.getHashCode=function(t){if(t==="")return 0;for(;t.length<e.MIN_INPUT_LENGTH;)t=t.concat(t);for(var r=5381,n=0;n<t.length;++n)r=(r<<5)+r+t.charCodeAt(n),r=r&r;return Math.abs(r)},e.INT_MAX_VALUE=2147483647,e.MIN_INPUT_LENGTH=8,e}();var Ao=function(){function e(){this.hashCodeGeneragor=new Do,this.keys=new vr}return e.prototype.getSamplingScore=function(t){var r=0;return t.tags&&t.tags[this.keys.userId]?r=this.hashCodeGeneragor.getHashCodeScore(t.tags[this.keys.userId]):t.ext&&t.ext.user&&t.ext.user.id?r=this.hashCodeGeneragor.getHashCodeScore(t.ext.user.id):t.tags&&t.tags[this.keys.operationId]?r=this.hashCodeGeneragor.getHashCodeScore(t.tags[this.keys.operationId]):t.ext&&t.ext.telemetryTrace&&t.ext.telemetryTrace.traceID?r=this.hashCodeGeneragor.getHashCodeScore(t.ext.telemetryTrace.traceID):r=Math.random()*100,r},e}();var No=function(){function e(t,r){this.INT_MAX_VALUE=2147483647,this._logger=r||vt(null),(t>100||t<0)&&(this._logger.throwInternal(y.WARNING,h.SampleRateOutOfRange,"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.",{samplingRate:t},!0),t=100),this.sampleRate=t,this.samplingScoreGenerator=new Ao}return e.prototype.isSampledIn=function(t){var r=this.sampleRate,n=!1;return r==null||r>=100||t.baseType===ze.dataType?!0:(n=this.samplingScoreGenerator.getSamplingScore(t)<r,n)},e}();function In(e){try{return e.responseText}catch(t){}return null}var Gi=function(e){O(t,e);function t(){var r=e.call(this)||this;r.priority=1001,r.identifier=Ur,r._XMLHttpRequestSupported=!1;var n,i,a,s,c,o,u={};return K(t,r,function(f,l){function m(){Pe("Method not implemented.")}f.pause=m,f.resume=m,f.flush=function(){try{f.triggerSend(!0,null,1)}catch(d){f.diagLog().throwInternal(y.CRITICAL,h.FlushFailed,"flush failed, telemetry will not be collected: "+G(d),{exception:_(d)})}},f.onunloadFlush=function(){if((f._senderConfig.onunloadDisableBeacon()===!1||f._senderConfig.isBeaconApiDisabled()===!1)&&fn())try{f.triggerSend(!0,p,2)}catch(d){f.diagLog().throwInternal(y.CRITICAL,h.FailedToSendQueuedTelemetry,"failed to flush with beacon sender on page unload, telemetry will not be collected: "+G(d),{exception:_(d)})}else f.flush()},f.teardown=m,f.addHeader=function(d,I){u[d]=I},f.initialize=function(d,I,D,b){l.initialize(d,I,D,b);var H=f._getTelCtx(),L=f.identifier;c=new bo(I.logger),n=0,i=null,a=0,f._sender=null,o=0;var V=t._getDefaultAppInsightsChannelConfig();if(f._senderConfig=t._getEmptyAppInsightsChannelConfig(),$(V,function(g,w){f._senderConfig[g]=function(){return H.getConfig(L,g,w())}}),f._buffer=f._senderConfig.enableSessionStorageBuffer()&&Kt()?new yo(f.diagLog(),f._senderConfig):new xo(f._senderConfig),f._sample=new No(f._senderConfig.samplingPercentage(),f.diagLog()),et(d)||f.diagLog().throwInternal(y.CRITICAL,h.InvalidInstrumentationKey,"Invalid Instrumentation key "+d.instrumentationKey),!Rr(f._senderConfig.endpointUrl())&&f._senderConfig.customHeaders()&&f._senderConfig.customHeaders().length>0&&M(f._senderConfig.customHeaders(),function(g){r.addHeader(g.header,g.value)}),!f._senderConfig.isBeaconApiDisabled()&&fn())f._sender=p;else{var X=Ce("XMLHttpRequest");if(X){var ee=new X;"withCredentials"in ee?(f._sender=v,f._XMLHttpRequestSupported=!0):typeof XDomainRequest!==De&&(f._sender=se)}else{var Ct=Ce("fetch");Ct&&(f._sender=x)}}},f.processTelemetry=function(d,I){I=f._getTelCtx(I);try{if(f._senderConfig.disableTelemetry())return;if(!d){I.diagLog().throwInternal(y.CRITICAL,h.CannotSendEmptyTelemetry,"Cannot send empty telemetry");return}if(d.baseData&&!d.baseType){I.diagLog().throwInternal(y.CRITICAL,h.InvalidEvent,"Cannot send telemetry without baseData and baseType");return}if(d.baseType||(d.baseType="EventData"),!f._sender){I.diagLog().throwInternal(y.CRITICAL,h.SenderNotInitialized,"Sender was not initialized");return}if(C(d))d[sr]=f._sample.sampleRate;else{I.diagLog().throwInternal(y.WARNING,h.TelemetrySampledAndNotSent,"Telemetry item was sampled out and not sent",{SampleRate:f._sample.sampleRate});return}var D=t.constructEnvelope(d,f._senderConfig.instrumentationKey(),I.diagLog());if(!D){I.diagLog().throwInternal(y.CRITICAL,h.CreateEnvelopeError,"Unable to create an AppInsights envelope");return}var b=!1;if(d.tags&&d.tags[cr]&&(M(d.tags[cr],function(X){try{X&&X(D)===!1&&(b=!0,I.diagLog().warnToConsole("Telemetry processor check returns false"))}catch(ee){I.diagLog().throwInternal(y.CRITICAL,h.TelemetryInitializerFailed,"One of telemetry initializers failed, telemetry item will not be sent: "+G(ee),{exception:_(ee)},!0)}}),delete d.tags[cr]),b)return;var H=c.serialize(D),L=f._buffer.getItems(),V=f._buffer.batchPayloads(L);V&&V.length+H.length>f._senderConfig.maxBatchSizeInBytes()&&f.triggerSend(!0,null,10),f._buffer.enqueue(H),J()}catch(X){I.diagLog().throwInternal(y.WARNING,h.FailedAddingTelemetryToBuffer,"Failed adding telemetry to the sender's buffer, some telemetry will be lost: "+G(X),{exception:_(X)})}f.processNext(d,I)},f._xhrReadyStateChange=function(d,I,D){d.readyState===4&&T(d.status,I,d.responseURL,D,W(d),In(d)||d.response)},f.triggerSend=function(d,I,D){d===void 0&&(d=!0);try{if(f._senderConfig.disableTelemetry())f._buffer.clear();else{if(f._buffer.count()>0){var b=f._buffer.getItems();Ge(D||0,d),I?I.call(r,b,d):f._sender(b,d)}a=+new Date}clearTimeout(s),s=null,i=null}catch(L){var H=nr();(!H||H>9)&&f.diagLog().throwInternal(y.CRITICAL,h.TransmissionFailed,"Telemetry transmission failed, some telemetry will be lost: "+G(L),{exception:_(L)})}},f._onError=function(d,I,D){f.diagLog().throwInternal(y.WARNING,h.OnError,"Failed to send telemetry.",{message:I}),f._buffer.clearSent(d)},f._onPartialSuccess=function(d,I){for(var D=[],b=[],H=I.errors.reverse(),L=0,V=H;L<V.length;L++){var X=V[L],ee=d.splice(X.index,1)[0];pe(X.statusCode)?b.push(ee):D.push(ee)}d.length>0&&f._onSuccess(d,I.itemsAccepted),D.length>0&&f._onError(D,W(null,["partial success",I.itemsAccepted,"of",I.itemsReceived].join(" "))),b.length>0&&(k(b),f.diagLog().throwInternal(y.WARNING,h.TransmissionFailed,"Partial success. Delivered: "+d.length+", Failed: "+D.length+". Will retry to send "+b.length+" our of "+I.itemsReceived+" items"))},f._onSuccess=function(d,I){f._buffer.clearSent(d)},f._xdrOnLoad=function(d,I){var D=In(d);if(d&&(D+""=="200"||D===""))n=0,f._onSuccess(I,0);else{var b=E(D);b&&b.itemsReceived&&b.itemsReceived>b.itemsAccepted&&!f._senderConfig.isRetryDisabled()?f._onPartialSuccess(I,b):f._onError(I,Se(d))}};function C(d){return f._sample.isSampledIn(d)}function T(d,I,D,b,H,L){var V=null;if(f._appId||(V=E(L),V&&V.appId&&(f._appId=V.appId)),(d<200||d>=300)&&d!==0){if((d===301||d===307||d===308)&&!P(D)){f._onError(I,H);return}!f._senderConfig.isRetryDisabled()&&pe(d)?(k(I),f.diagLog().throwInternal(y.WARNING,h.TransmissionFailed,". Response code "+d+". Will retry to send "+I.length+" items.")):f._onError(I,H)}else if(qi.isOffline()){if(!f._senderConfig.isRetryDisabled()){var X=10;k(I,X),f.diagLog().throwInternal(y.WARNING,h.TransmissionFailed,". Offline - Response Code: "+d+". Offline status: "+qi.isOffline()+". Will retry to send "+I.length+" items.")}}else P(D),d===206?(V||(V=E(L)),V&&!f._senderConfig.isRetryDisabled()?f._onPartialSuccess(I,V):f._onError(I,H)):(n=0,f._onSuccess(I,b))}function P(d){return o>=10?!1:!S(d)&&d!==""&&d!==f._senderConfig.endpointUrl()?(f._senderConfig.endpointUrl=function(){return d},++o,!0):!1}function p(d,I){var D=f._senderConfig.endpointUrl(),b=f._buffer.batchPayloads(d),H=new Blob([b],{type:"text/plain;charset=UTF-8"}),L=Ee().sendBeacon(D,H);L?(f._buffer.markAsSent(d),f._onSuccess(d,d.length)):(v(d,!0),f.diagLog().throwInternal(y.WARNING,h.TransmissionFailed,". Failed to send telemetry with Beacon API, retried with xhrSender."))}function v(d,I){var D=new XMLHttpRequest,b=f._senderConfig.endpointUrl();try{D[yt]=!0}catch(L){}D.open("POST",b,I),D.setRequestHeader("Content-type","application/json"),Rr(b)&&D.setRequestHeader(Z.sdkContextHeader,Z.sdkContextHeaderAppIdRequest),M(Je(u),function(L){D.setRequestHeader(L,u[L])}),D.onreadystatechange=function(){return f._xhrReadyStateChange(D,d,d.length)},D.onerror=function(L){return f._onError(d,W(D),L)};var H=f._buffer.batchPayloads(d);D.send(H),f._buffer.markAsSent(d)}function x(d,I){var D=f._senderConfig.endpointUrl(),b=f._buffer.batchPayloads(d),H=new Blob([b],{type:"text/plain;charset=UTF-8"}),L=new Headers;Rr(D)&&L.append(Z.sdkContextHeader,Z.sdkContextHeaderAppIdRequest),M(Je(u),function(ee){L.append(ee,u[ee])});var V={method:"POST",headers:L,body:H},X=new Request(D,V);fetch(X).then(function(ee){if(ee.ok)ee.text().then(function(Ct){T(ee.status,d,ee.url,d.length,ee.statusText,Ct)}),f._buffer.markAsSent(d);else throw Error(ee.statusText)}).catch(function(ee){f._onError(d,ee.message)})}function E(d){try{if(d&&d!==""){var I=he().parse(d);if(I&&I.itemsReceived&&I.itemsReceived>=I.itemsAccepted&&I.itemsReceived-I.itemsAccepted===I.errors.length)return I}}catch(D){f.diagLog().throwInternal(y.CRITICAL,h.InvalidBackendResponse,"Cannot parse the response. "+G(D),{response:d})}return null}function k(d,I){if(I===void 0&&(I=1),!(!d||d.length===0)){f._buffer.clearSent(d),n++;for(var D=0,b=d;D<b.length;D++){var H=b[D];f._buffer.enqueue(H)}N(I),J()}}function N(d){var I=10,D;if(n<=1)D=I;else{var b=(Math.pow(2,n)-1)/2,H=Math.floor(Math.random()*b*I)+1;H=d*H,D=Math.max(Math.min(H,3600),I)}var L=ve()+D*1e3;i=L}function J(){if(!s){var d=i?Math.max(0,i-ve()):0,I=Math.max(f._senderConfig.maxBatchInterval(),d);s=setTimeout(function(){f.triggerSend(!0,null,1)},I)}}function pe(d){return d===408||d===429||d===500||d===503}function W(d,I){return d?"XMLHttpRequest,Status:"+d.status+",Response:"+In(d)||false||false:I}function se(d,I){var D=ft(),b=new XDomainRequest;b.onload=function(){return f._xdrOnLoad(b,d)},b.onerror=function(X){return f._onError(d,Se(b),X)};var H=D&&D.location&&D.location.protocol||"";if(f._senderConfig.endpointUrl().lastIndexOf(H,0)!==0){f.diagLog().throwInternal(y.WARNING,h.TransmissionFailed,". Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol."),f._buffer.clear();return}var L=f._senderConfig.endpointUrl().replace(/^(https?:)/,"");b.open("POST",L);var V=f._buffer.batchPayloads(d);b.send(V),f._buffer.markAsSent(d)}function Se(d,I){return d?"XDomainRequest,Response:"+In(d)||false:I}function Qe(){var d="getNotifyMgr";return f.core[d]?f.core[d]():f.core._notificationManager}function Ge(d,I){var D=Qe();if(D&&D.eventsSendRequest)try{D.eventsSendRequest(d,I)}catch(b){f.diagLog().throwInternal(y.CRITICAL,h.NotificationException,"send request notification failed: "+G(b),{exception:_(b)})}}function et(d){var I=S(d.disableInstrumentationKeyValidation)?!1:d.disableInstrumentationKeyValidation;if(I)return!0;var D="^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",b=new RegExp(D);return b.test(d.instrumentationKey)}}),r}return t.constructEnvelope=function(r,n,i){var a;switch(n!==r.iKey&&!S(n)?a=ut({},r,{iKey:n}):a=r,a.baseType){case je.dataType:return Vi.EventEnvelopeCreator.Create(i,a);case st.dataType:return Po.TraceEnvelopeCreator.Create(i,a);case Me.dataType:return Eo.PageViewEnvelopeCreator.Create(i,a);case ct.dataType:return wo.PageViewPerformanceEnvelopeCreator.Create(i,a);case we.dataType:return Io.ExceptionEnvelopeCreator.Create(i,a);case ze.dataType:return To.MetricEnvelopeCreator.Create(i,a);case Be.dataType:return Co.DependencyEnvelopeCreator.Create(i,a);default:return Vi.EventEnvelopeCreator.Create(i,a)}},t._getDefaultAppInsightsChannelConfig=function(){return{endpointUrl:function(){return"https://dc.services.visualstudio.com/v2/track"},emitLineDelimitedJson:function(){return!1},maxBatchInterval:function(){return 15e3},maxBatchSizeInBytes:function(){return 102400},disableTelemetry:function(){return!1},enableSessionStorageBuffer:function(){return!0},isRetryDisabled:function(){return!1},isBeaconApiDisabled:function(){return!0},onunloadDisableBeacon:function(){return!1},instrumentationKey:function(){},namePrefix:function(){},samplingPercentage:function(){return 100},customHeaders:function(){}}},t._getEmptyAppInsightsChannelConfig=function(){return{endpointUrl:void 0,emitLineDelimitedJson:void 0,maxBatchInterval:void 0,maxBatchSizeInBytes:void 0,disableTelemetry:void 0,enableSessionStorageBuffer:void 0,isRetryDisabled:void 0,isBeaconApiDisabled:void 0,onunloadDisableBeacon:void 0,instrumentationKey:void 0,namePrefix:void 0,samplingPercentage:void 0,customHeaders:void 0}},t}(at);var oc="ai_session",Ki=function(){function e(){}return e}();var Fo=function(){function e(t,r){var n=this,i,a,s=vt(r),c=jt(r);K(e,n,function(o){t||(t={}),j(t.sessionExpirationMs)||(t.sessionExpirationMs=function(){return e.acquisitionSpan}),j(t.sessionRenewalMs)||(t.sessionRenewalMs=function(){return e.renewalSpan}),o.config=t;var u=o.config.sessionCookiePostfix&&o.config.sessionCookiePostfix()?o.config.sessionCookiePostfix():o.config.namePrefix&&o.config.namePrefix()?o.config.namePrefix():"";i=function(){return oc+u},o.automaticSession=new Ki,o.update=function(){var P=ve(),p=!1,v=o.automaticSession;v.id||(p=!f(v,P));var x=o.config.sessionExpirationMs();if(!p&&x>0){var E=o.config.sessionRenewalMs(),k=P-v.acquisitionDate,N=P-v.renewalDate;p=k<0||N<0,p=p||k>x,p=p||N>E}p?m(P):(!a||P-a>e.cookieUpdateInterval)&&C(v,P)},o.backup=function(){var P=o.automaticSession;T(P.id,P.acquisitionDate,P.renewalDate)};function f(P,p){var v=!1,x=c.get(i());if(x&&j(x.split))v=l(P,x);else{var E=wi(s,i());E&&(v=l(P,E))}return v||!!P.id}function l(P,p){var v=!1,x=", session will be reset",E=p.split("|");if(E.length>=2)try{var k=+E[1]||0,N=+E[2]||0;isNaN(k)||k<=0?s.throwInternal(y.WARNING,h.SessionRenewalDateIsZero,"AI session acquisition date is 0"+x):isNaN(N)||N<=0?s.throwInternal(y.WARNING,h.SessionRenewalDateIsZero,"AI session renewal date is 0"+x):E[0]&&(P.id=E[0],P.acquisitionDate=k,P.renewalDate=N,v=!0)}catch(J){s.throwInternal(y.CRITICAL,h.ErrorParsingAISessionCookie,"Error parsing ai_session value ["+(p||"")+"]"+x+" - "+G(J),{exception:_(J)})}return v}function m(P){var p=o.config||{},v=(p.getNewId?p.getNewId():null)||or;o.automaticSession.id=v(p.idLength?p.idLength():22),o.automaticSession.acquisitionDate=P,C(o.automaticSession,P),dn()||s.throwInternal(y.WARNING,h.BrowserDoesNotSupportLocalStorage,"Browser does not support local storage. Session durations will be inaccurate.")}function C(P,p){var v=P.acquisitionDate;P.renewalDate=p;var x=o.config,E=x.sessionRenewalMs(),k=v+x.sessionExpirationMs()-p,N=[P.id,v,p],J=0;k<E?J=k/1e3:J=E/1e3;var pe=x.cookieDomain?x.cookieDomain():null;c.set(i(),N.join("|"),x.sessionExpirationMs()>0?J:null,pe),a=p}function T(P,p,v){Pi(s,i(),[P,p,v].join("|"))}})}return e.acquisitionSpan=864e5,e.renewalSpan=18e5,e.cookieUpdateInterval=6e4,e}();var Ro=function(){function e(){}return e}();var Mo=function(){function e(){this.id="browser",this.deviceClass="Browser"}return e}();var sc="2.6.4",ko=function(){function e(t){this.sdkVersion=(t.sdkExtension&&t.sdkExtension()?t.sdkExtension()+"_":"")+"javascript:"+sc}return e}();function Lo(e){return!(typeof e!="string"||!e||e.match(/,|;|=| |\|/))}var Uo=function(){function e(t,r){this.isNewUser=!1;var n=vt(r),i=jt(r),a;K(e,this,function(s){s.config=t;var c=s.config.userCookiePostfix&&s.config.userCookiePostfix()?s.config.userCookiePostfix():"";a=function(){return e.userCookieName+c};var o=i.get(a());if(o){s.isNewUser=!1;var u=o.split(e.cookieSeparator);u.length>0&&(s.id=u[0])}if(!s.id){var f=t||{},l=(f.getNewId?f.getNewId():null)||or;s.id=l(f.idLength?t.idLength():22);var m=31536e3,C=Ne(new Date);s.accountAcquisitionDate=C,s.isNewUser=!0;var T=[s.id,C];i.set(a(),T.join(e.cookieSeparator),m);var P=t.namePrefix&&t.namePrefix()?t.namePrefix()+"ai_session":"ai_session";bi(n,P)}s.accountId=t.accountId?t.accountId():void 0;var p=i.get(e.authUserCookieName);if(p){p=decodeURI(p);var v=p.split(e.cookieSeparator);v[0]&&(s.authenticatedId=v[0]),v.length>1&&v[1]&&(s.accountId=v[1])}s.setAuthenticatedUserContext=function(x,E,k){k===void 0&&(k=!1);var N=!Lo(x)||E&&!Lo(E);if(N){n.throwInternal(y.WARNING,h.SetAuthContextFailedAccountName,"Setting auth user context failed. User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.",!0);return}s.authenticatedId=x;var J=s.authenticatedId;E&&(s.accountId=E,J=[s.authenticatedId,s.accountId].join(e.cookieSeparator)),k&&i.set(e.authUserCookieName,encodeURI(J))},s.clearAuthenticatedUserContext=function(){s.authenticatedId=null,s.accountId=null,i.del(e.authUserCookieName)}})}return e.cookieSeparator="|",e.userCookieName="ai_user",e.authUserCookieName="ai_authUser",e}();var _o=function(){function e(){}return e}();var Oo=function(){function e(t,r,n,i){var a=this;a.traceID=t||Ue(),a.parentID=r,a.name=n;var s=_e();!n&&s&&s.pathname&&(a.name=s.pathname),a.name=te(i,a.name)}return e}();var Tn="ext",En="tags";function hr(e,t){e&&e[t]&&Je(e[t]).length===0&&delete e[t]}var Ho=function(){function e(t,r){var n=this,i=t.logger;this.appId=function(){return null},K(e,this,function(a){a.application=new Ro,a.internal=new ko(r),Ot()&&(a.sessionManager=new Fo(r,t),a.device=new Mo,a.location=new _o,a.user=new Uo(r,t),a.telemetryTrace=new Oo(void 0,void 0,void 0,i),a.session=new Ki),a.applySessionContext=function(s,c){var o=a.session,u=a.sessionManager;o&&U(o.id)?q(ue(s.ext,be.AppExt),"sesId",o.id):u&&u.automaticSession&&q(ue(s.ext,be.AppExt),"sesId",u.automaticSession.id,U)},a.applyOperatingSystemContxt=function(s,c){q(s.ext,be.OSExt,a.os)},a.applyApplicationContext=function(s,c){var o=a.application;if(o){var u=ue(s,En);q(u,Q.applicationVersion,o.ver,U),q(u,Q.applicationBuild,o.build,U)}},a.applyDeviceContext=function(s,c){var o=a.device;if(o){var u=ue(ue(s,Tn),be.DeviceExt);q(u,"localId",o.id,U),q(u,"ip",o.ip,U),q(u,"model",o.model,U),q(u,"deviceClass",o.deviceClass,U)}},a.applyInternalContext=function(s,c){var o=a.internal;if(o){var u=ue(s,En);q(u,Q.internalAgentVersion,o.agentVersion,U),q(u,Q.internalSdkVersion,o.sdkVersion,U),(s.baseType===gt.dataType||s.baseType===Me.dataType)&&(q(u,Q.internalSnippet,o.snippetVer,U),q(u,Q.internalSdkSrc,o.sdkSrc,U))}},a.applyLocationContext=function(s,c){var o=n.location;o&&q(ue(s,En,[]),Q.locationIp,o.ip,U)},a.applyOperationContext=function(s,c){var o=a.telemetryTrace;if(o){var u=ue(ue(s,Tn),be.TraceExt,{traceID:void 0,parentID:void 0});q(u,"traceID",o.traceID,U),q(u,"name",o.name,U),q(u,"parentID",o.parentID,U)}},a.applyWebContext=function(s,c){var o=n.web;o&&q(ue(s,Tn),be.WebExt,o)},a.applyUserContext=function(s,c){var o=a.user;if(o){var u=ue(s,En,[]);q(u,Q.userAccountId,o.accountId,U);var f=ue(ue(s,Tn),be.UserExt);q(f,"id",o.id,U),q(f,"authId",o.authenticatedId,U)}},a.cleanUp=function(s,c){var o=s.ext;o&&(hr(o,be.DeviceExt),hr(o,be.UserExt),hr(o,be.WebExt),hr(o,be.OSExt),hr(o,be.AppExt),hr(o,be.TraceExt))}})}return e}();var cc=function(e){O(t,e);function t(){var r=e.call(this)||this;r.priority=110,r.identifier=Nt;var n,i;return K(t,r,function(a,s){a.initialize=function(o,u,f,l){s.initialize(o,u,f,l);var m=a._getTelCtx(),C=a.identifier,T=t.getDefaultConfig();i=i||{},$(T,function(P,p){i[P]=function(){return m.getConfig(C,P,p())}}),a.context=new Ho(u,i),n=Si(f,Ur),a.context.appId=function(){return n?n._appId:null},a._extConfig=i},a.processTelemetry=function(o,u){if(!S(o)){u=a._getTelCtx(u),o.name===Me.envelopeType&&u.diagLog().resetInternalMessageCount();var f=a.context||{};if(f.session&&typeof a.context.session.id!="string"&&f.sessionManager&&f.sessionManager.update(),c(o,u),f.user&&f.user.isNewUser){f.user.isNewUser=!1;var l=new gt(h.SendBrowserInfoOnUserInit,(Ee()||{}).userAgent||"");u.diagLog().logInternalMessage(y.CRITICAL,l)}a.processNext(o,u)}};function c(o,u){ue(o,"tags",[]),ue(o,"ext",{});var f=a.context;f.applySessionContext(o,u),f.applyApplicationContext(o,u),f.applyDeviceContext(o,u),f.applyOperationContext(o,u),f.applyUserContext(o,u),f.applyOperatingSystemContxt(o,u),f.applyWebContext(o,u),f.applyLocationContext(o,u),f.applyInternalContext(o,u),f.cleanUp(o,u)}}),r}return t.getDefaultConfig=function(){var r={instrumentationKey:function(){},accountId:function(){return null},sessionRenewalMs:function(){return 30*60*1e3},samplingPercentage:function(){return 100},sessionExpirationMs:function(){return 24*60*60*1e3},cookieDomain:function(){return null},sdkExtension:function(){return null},isBrowserLinkTrackingEnabled:function(){return!1},appId:function(){return null},namePrefix:function(){},sessionCookiePostfix:function(){},userCookiePostfix:function(){},idLength:function(){return 22},getNewId:function(){return null}};return r},t}(at),Wi=cc;var Ve="properties";function jo(e,t,r){var n=0,i=e[t],a=e[r];return i&&a&&(n=xe(i,a)),n}function Jt(e,t,r,n,i){var a=0,s=jo(r,n,i);return s&&(a=Ft(e,t,He(s))),a}function Ft(e,t,r){var n="ajaxPerf",i=0;if(e&&t&&r){var a=e[n]=e[n]||{};a[t]=r,i=1}return i}function uc(e,t){var r=e.perfTiming,n=t[Ve]||{},i=0,a="name",s="Start",c="End",o="domainLookup",u="connect",f="redirect",l="request",m="response",C="duration",T="startTime",P=o+s,p=o+c,v=u+s,x=u+c,E=l+s,k=l+c,N=m+s,J=m+c,pe=f+s,W=f=c,se="transferSize",Se="encodedBodySize",Qe="decodedBodySize",Ge="serverTiming";if(r){i|=Jt(n,f,r,pe,W),i|=Jt(n,o,r,P,p),i|=Jt(n,u,r,v,x),i|=Jt(n,l,r,E,k),i|=Jt(n,m,r,N,J),i|=Jt(n,"networkConnect",r,T,x),i|=Jt(n,"sentRequest",r,E,J);var et=r[C];et||(et=jo(r,T,J)||0),i|=Ft(n,C,et),i|=Ft(n,"perfTotal",et);var d=r[Ge];if(d){var I={};M(d,function(D,b){var H=jn(D[a]||""+b),L=I[H]||{};$(D,function(V,X){(V!==a&&U(X)||tr(X))&&(L[V]&&(X=L[V]+";"+X),(X||!U(X))&&(L[V]=X))}),I[H]=L}),i|=Ft(n,Ge,I)}i|=Ft(n,se,r[se]),i|=Ft(n,Se,r[Se]),i|=Ft(n,Qe,r[Qe])}else e.perfMark&&(i|=Ft(n,"missing",e.perfAttempts));i&&(t[Ve]=n)}var fc=function(){function e(){var t=this;t.openDone=!1,t.setRequestHeaderDone=!1,t.sendDone=!1,t.abortDone=!1,t.stateChangeAttached=!1}return e}();var Ji=function(){function e(t,r,n){var i=this,a=n,s="responseText";i.perfMark=null,i.completed=!1,i.requestHeadersSize=null,i.requestHeaders=null,i.responseReceivingDuration=null,i.callbackDuration=null,i.ajaxTotalDuration=null,i.aborted=0,i.pageUrl=null,i.requestUrl=null,i.requestSize=0,i.method=null,i.status=null,i.requestSentTime=null,i.responseStartedTime=null,i.responseFinishedTime=null,i.callbackFinishedTime=null,i.endTime=null,i.xhrMonitoringState=new fc,i.clientFailure=0,i.traceID=t,i.spanID=r,K(e,i,function(c){c.getAbsoluteUrl=function(){return c.requestUrl?mn(c.requestUrl):null},c.getPathName=function(){return c.requestUrl?xt(a,gn(c.method,c.requestUrl)):null},c.CreateTrackItem=function(o,u,f){if(c.ajaxTotalDuration=Math.round(xe(c.requestSentTime,c.responseFinishedTime)*1e3)/1e3,c.ajaxTotalDuration<0)return null;var l=(P={id:"|"+c.traceID+"."+c.spanID,target:c.getAbsoluteUrl(),name:c.getPathName(),type:o,startTime:null,duration:c.ajaxTotalDuration,success:+c.status>=200&&+c.status<400,responseCode:+c.status,method:c.method},P[Ve]={HttpMethod:c.method},P);if(c.requestSentTime&&(l.startTime=new Date,l.startTime.setTime(c.requestSentTime)),uc(c,l),u&&Je(c.requestHeaders).length>0&&(l[Ve]=l[Ve]||{},l[Ve].requestHeaders=c.requestHeaders),f){var m=f();if(m){var C=m.correlationContext;if(C&&(l.correlationContext=C),m.headerMap&&Je(m.headerMap).length>0&&(l[Ve]=l[Ve]||{},l[Ve].responseHeaders=m.headerMap),c.status>=400){var T=m.type;l[Ve]=l[Ve]||{},(T===""||T==="text")&&(l[Ve][s]=m[s]?m.statusText+" - "+m[s]:m.statusText),T==="json"&&(l[Ve][s]=m.response?m.statusText+" - "+JSON.stringify(m.response):m.statusText)}}}return l;var P}})}return e}();var Jm=function(){function e(){}return e.GetLength=function(t){var r=0;if(!S(t)){var n="";try{n=t.toString()}catch(i){}r=n.length,r=isNaN(r)?0:r}return r},e}();var Xi=function(){function e(t,r){var n=this;n.traceFlag=e.DEFAULT_TRACE_FLAG,n.version=e.DEFAULT_VERSION,t&&e.isValidTraceId(t)?n.traceId=t:n.traceId=Ue(),r&&e.isValidSpanId(r)?n.spanId=r:n.spanId=Ue().substr(0,16)}return e.isValidTraceId=function(t){return t.match(/^[0-9a-f]{32}$/)&&t!=="00000000000000000000000000000000"},e.isValidSpanId=function(t){return t.match(/^[0-9a-f]{16}$/)&&t!=="0000000000000000"},e.prototype.toString=function(){var t=this;return t.version+"-"+t.traceId+"-"+t.spanId+"-"+t.traceFlag},e.DEFAULT_TRACE_FLAG="01",e.DEFAULT_VERSION="00",e}();var zo="ai.ajxmn.",Or="diagLog",qe="ajaxData",Bo="throwInternal",Hr="fetch",Vo=0;function lc(){var e=We();return!e||S(e.Request)||S(e.Request[me])||S(e[Hr])?null:e[Hr]}function pc(e){var t=!1;if(typeof XMLHttpRequest!==De&&!S(XMLHttpRequest)){var r=XMLHttpRequest[me];t=!S(r)&&!S(r.open)&&!S(r.send)&&!S(r.abort)}var n=nr();if(n&&n<9&&(t=!1),t)try{var i=new XMLHttpRequest;i[qe]={};var a=XMLHttpRequest[me].open;XMLHttpRequest[me].open=a}catch(s){t=!1,jr(e,h.FailedMonitorAjaxOpen,"Failed to enable XMLHttpRequest monitoring, extension is not supported",{exception:_(s)})}return t}function wn(e){var t="";try{!S(e)&&!S(e[qe])&&!S(e[qe].requestUrl)&&(t+="(url: '"+e[qe].requestUrl+"')")}catch(r){}return t}function jr(e,t,r,n,i){e[Or]()[Bo](y.CRITICAL,t,r,n,i)}function Pn(e,t,r,n,i){e[Or]()[Bo](y.WARNING,t,r,n,i)}function zr(e,t,r){return function(n){jr(e,t,r,{ajaxDiagnosticsMessage:wn(n.inst),exception:_(n.err)})}}function xr(e,t){return e&&t?e.indexOf(t):-1}var Yi=function(e){O(t,e);function t(){var r=e.call(this)||this;r.identifier=t.identifier,r.priority=120;var n="trackDependencyDataInternal",i=_e(),a=!1,s=!1,c=i&&i.host&&i.host.toLowerCase(),o=t.getEmptyConfig(),u=!1,f=0,l,m,C,T,P=!1,p=0,v=!1,x=[],E={},k;return K(t,r,function(N,J){N.initialize=function(g,w,A,F){if(!N.isInitialized()){J.initialize(g,w,A,F);var R=N._getTelCtx(),B=t.getDefaultConfig();$(B,function(ke,Xt){o[ke]=R.getConfig(t.identifier,ke,Xt)});var z=o.distributedTracingMode;if(u=o.enableRequestHeaderTracking,P=o.enableAjaxPerfTracking,p=o.maxAjaxCallsPerView,v=o.enableResponseHeaderTracking,k=o.excludeRequestFromAutoTrackingPatterns,C=z===Ye.AI||z===Ye.AI_AND_W3C,m=z===Ye.AI_AND_W3C||z===Ye.W3C,P){var Y=g.instrumentationKey||"unkwn";Y.length>5?T=zo+Y.substring(Y.length-5)+".":T=zo+Y+"."}if(o.disableAjaxTracking===!1&&Se(),W(),A.length>0&&A){for(var ne=void 0,de=0;!ne&&de<A.length;)A[de]&&A[de].identifier===Nt&&(ne=A[de]),de++;ne&&(l=ne.context)}}},N.teardown=function(){M(x,function(g){g.rm()}),x=[],a=!1,s=!1,N.setInitialized(!1)},N.trackDependencyData=function(g,w){N[n](g,w)},N.includeCorrelationHeaders=function(g,w,A,F){var R=N._currentWindowHost||c;if(w){if(St.canIncludeCorrelationHeader(o,g.getAbsoluteUrl(),R)){if(A||(A={}),A.headers=new Headers(A.headers||(w instanceof Request?w.headers||{}:{})),C){var B="|"+g.traceID+"."+g.spanID;A.headers.set(Z.requestIdHeader,B),u&&(g.requestHeaders[Z.requestIdHeader]=B)}var z=o.appId||l&&l.appId();if(z&&(A.headers.set(Z.requestContextHeader,Z.requestContextAppIdFormat+z),u&&(g.requestHeaders[Z.requestContextHeader]=Z.requestContextAppIdFormat+z)),m){var Y=new Xi(g.traceID,g.spanID);A.headers.set(Z.traceParentHeader,Y.toString()),u&&(g.requestHeaders[Z.traceParentHeader]=Y.toString())}}return A}else if(F){if(St.canIncludeCorrelationHeader(o,g.getAbsoluteUrl(),R)){if(C){var B="|"+g.traceID+"."+g.spanID;F.setRequestHeader(Z.requestIdHeader,B),u&&(g.requestHeaders[Z.requestIdHeader]=B)}var z=o.appId||l&&l.appId();if(z&&(F.setRequestHeader(Z.requestContextHeader,Z.requestContextAppIdFormat+z),u&&(g.requestHeaders[Z.requestContextHeader]=Z.requestContextAppIdFormat+z)),m){var Y=new Xi(g.traceID,g.spanID);F.setRequestHeader(Z.traceParentHeader,Y.toString()),u&&(g.requestHeaders[Z.traceParentHeader]=Y.toString())}}return F}},N[n]=function(g,w,A){if(p===-1||f<p){(o.distributedTracingMode===Ye.W3C||o.distributedTracingMode===Ye.AI_AND_W3C)&&typeof g.id=="string"&&g.id[g.id.length-1]!=="."&&(g.id+="."),S(g.startTime)&&(g.startTime=new Date);var F=Ze.create(g,Be.dataType,Be.envelopeType,N[Or](),w,A);N.core.track(F)}else f===p&&jr(N,h.MaxAjaxPerPVExceeded,"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.",!0);++f};function pe(g){var w=!0;return(g||o.ignoreHeaders)&&M(o.ignoreHeaders,function(A){if(A.toLowerCase()===g.toLowerCase())return w=!1,-1}),w}function W(){var g=lc();if(!!g){var w=We(),A=g.polyfill;o.disableFetchTracking===!1?(x.push(Dr(w,Hr,{req:function(F,R,B){var z;if(a&&!Qe(null,R,B)&&!(A&&s)){var Y=F.ctx();z=V(R,B);var ne=N.includeCorrelationHeaders(z,R,B);ne!==B&&F.set(1,ne),Y.data=z}},rsp:function(F,R){var B=F.ctx().data;B&&(F.rslt=F.rslt.then(function(z){return ee(F,(z||{}).status,z,B,function(){var Y={statusText:z.statusText,headerMap:null,correlationContext:Ct(z)};if(v){var ne={};z.headers.forEach(function(de,ke){pe(ke)&&(ne[ke]=de)}),Y.headerMap=ne}return Y}),z}).catch(function(z){throw ee(F,0,R,B,null,{error:z.message}),z}))},hkErr:zr(N,h.FailedMonitorAjaxOpen,"Failed to monitor Window.fetch, monitoring data for this fetch call may be incorrect.")})),a=!0):A&&x.push(Dr(w,Hr,{req:function(F,R,B){Qe(null,R,B)}})),A&&(w[Hr].polyfill=A)}}function se(g,w,A){x.push(gi(g,w,A))}function Se(){pc(N)&&!s&&(se(XMLHttpRequest,"open",{req:function(g,w,A,F){var R=g.inst,B=R[qe];!Qe(R,A)&&Ge(R,!0)&&(!B||!B.xhrMonitoringState.openDone)&&et(R,w,A,F)},hkErr:zr(N,h.FailedMonitorAjaxOpen,"Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.")}),se(XMLHttpRequest,"send",{req:function(g,w){var A=g.inst,F=A[qe];Ge(A)&&!F.xhrMonitoringState.sendDone&&(H("xhr",F),F.requestSentTime=lr(),N.includeCorrelationHeaders(F,void 0,void 0,A),F.xhrMonitoringState.sendDone=!0)},hkErr:zr(N,h.FailedMonitorAjaxSend,"Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.")}),se(XMLHttpRequest,"abort",{req:function(g){var w=g.inst,A=w[qe];Ge(w)&&!A.xhrMonitoringState.abortDone&&(A.aborted=1,A.xhrMonitoringState.abortDone=!0)},hkErr:zr(N,h.FailedMonitorAjaxAbort,"Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.")}),u&&se(XMLHttpRequest,"setRequestHeader",{req:function(g,w,A){var F=g.inst;Ge(F)&&pe(w)&&(F[qe].requestHeaders[w]=A)},hkErr:zr(N,h.FailedMonitorAjaxSetRequestHeader,"Failed to monitor XMLHttpRequest.setRequestHeader, monitoring data for this ajax call may be incorrect.")}),s=!0)}function Qe(g,w,A){var F=!1,R=((U(w)?w:(w||{}).url||"")||"").toLowerCase();if(M(k,function(Y){var ne=Y;U(Y)&&(ne=new RegExp(Y)),F||(F=ne.test(R))}),F)return F;var B=xr(R,"?"),z=xr(R,"#");return(B===-1||z!==-1&&z<B)&&(B=z),B!==-1&&(R=R.substring(0,B)),S(g)?S(w)||(F=(typeof w=="object"?w[yt]===!0:!1)||(A?A[yt]===!0:!1)):F=g[yt]===!0||R[yt]===!0,F?E[R]||(E[R]=1):E[R]&&(F=!0),F}function Ge(g,w){var A=!0,F=s;return S(g)||(A=w===!0||!S(g[qe])),F&&A}function et(g,w,A,F){var R=l&&l.telemetryTrace&&l.telemetryTrace.traceID||Ue(),B=Ue().substr(0,16),z=new Ji(R,B,N[Or]());z.method=w,z.requestUrl=A,z.xhrMonitoringState.openDone=!0,z.requestHeaders={},z.async=F,g[qe]=z,d(g)}function d(g){g[qe].xhrMonitoringState.stateChangeAttached=Pt.Attach(g,"readystatechange",function(){try{g&&g.readyState===4&&Ge(g)&&D(g)}catch(A){var w=_(A);(!w||xr(w.toLowerCase(),"c00c023f")===-1)&&jr(N,h.FailedMonitorAjaxRSC,"Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.",{ajaxDiagnosticsMessage:wn(g),exception:w})}})}function I(g){try{var w=g.responseType;if(w===""||w==="text")return g.responseText}catch(A){}return null}function D(g){var w=g[qe];w.responseFinishedTime=lr(),w.status=g.status;function A(F,R){var B=R||{};B.ajaxDiagnosticsMessage=wn(g),F&&(B.exception=_(F)),Pn(N,h.FailedMonitorAjaxDur,"Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.",B)}L("xmlhttprequest",w,function(){try{var F=w.CreateTrackItem("Ajax",u,function(){var R={statusText:g.statusText,headerMap:null,correlationContext:b(g),type:g.responseType,responseText:I(g),response:g.response};if(v){var B=g.getAllResponseHeaders();if(B){var z=oe(B).split(/[\r\n]+/),Y={};M(z,function(ne){var de=ne.split(": "),ke=de.shift(),Xt=de.join(": ");pe(ke)&&(Y[ke]=Xt)}),R.headerMap=Y}}return R});F?N[n](F):A(null,{requestSentTime:w.requestSentTime,responseFinishedTime:w.responseFinishedTime})}finally{try{g[qe]=null}catch(R){}}},function(F){A(F,null)})}function b(g){try{var w=g.getAllResponseHeaders();if(w!==null){var A=xr(w.toLowerCase(),Z.requestContextHeaderLowerCase);if(A!==-1){var F=g.getResponseHeader(Z.requestContextHeader);return St.getCorrelationContext(F)}}}catch(R){Pn(N,h.FailedMonitorAjaxGetCorrelationHeader,"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.",{ajaxDiagnosticsMessage:wn(g),exception:_(R)})}}function H(g,w){if(w.requestUrl&&T&&P){var A=Oe();if(A&&j(A.mark)){Vo++;var F=T+g+"#"+Vo;A.mark(F);var R=A.getEntriesByName(F);R&&R.length===1&&(w.perfMark=R[0])}}}function L(g,w,A,F){var R=w.perfMark,B=Oe(),z=o.maxAjaxPerfLookupAttempts,Y=o.ajaxPerfLookupDelay,ne=w.requestUrl,de=0;(function ke(){try{if(B&&R){de++;for(var Xt=null,Qi=B.getEntries(),Dn=Qi.length-1;Dn>=0;Dn--){var dt=Qi[Dn];if(dt){if(dt.entryType==="resource")dt.initiatorType===g&&(xr(dt.name,ne)!==-1||xr(ne,dt.name)!==-1)&&(Xt=dt);else if(dt.entryType==="mark"&&dt.name===R.name){w.perfTiming=Xt;break}if(dt.startTime<R.startTime-1e3)break}}}!R||w.perfTiming||de>=z||w.async===!1?(R&&j(B.clearMarks)&&B.clearMarks(R.name),w.perfAttempts=de,A()):setTimeout(ke,Y)}catch(Wo){F(Wo)}})()}function V(g,w){var A=l&&l.telemetryTrace&&l.telemetryTrace.traceID||Ue(),F=Ue().substr(0,16),R=new Ji(A,F,N[Or]());R.requestSentTime=lr(),g instanceof Request?R.requestUrl=g?g.url:"":R.requestUrl=g;var B="GET";w&&w.method?B=w.method:g&&g instanceof Request&&(B=g.method),R.method=B;var z={};if(u){var Y=new Headers((w?w.headers:0)||(g instanceof Request?g.headers||{}:{}));Y.forEach(function(ne,de){pe(de)&&(z[de]=ne)})}return R.requestHeaders=z,H("fetch",R),R}function X(g){var w="";try{S(g)||(typeof g=="string"?w+="(url: '"+g+"')":w+="(url: '"+g.url+"')")}catch(A){jr(N,h.FailedMonitorAjaxOpen,"Failed to grab failed fetch diagnostics message",{exception:_(A)})}return w}function ee(g,w,A,F,R,B){if(!F)return;function z(Y,ne,de){var ke=de||{};ke.fetchDiagnosticsMessage=X(A),ne&&(ke.exception=_(ne)),Pn(N,Y,"Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.",ke)}F.responseFinishedTime=lr(),F.status=w,L("fetch",F,function(){var Y=F.CreateTrackItem("Fetch",u,R);Y?N[n](Y):z(h.FailedMonitorAjaxDur,null,{requestSentTime:F.requestSentTime,responseFinishedTime:F.responseFinishedTime})},function(Y){z(h.FailedMonitorAjaxGetCorrelationHeader,Y,null)})}function Ct(g){if(g&&g.headers)try{var w=g.headers.get(Z.requestContextHeader);return St.getCorrelationContext(w)}catch(A){Pn(N,h.FailedMonitorAjaxGetCorrelationHeader,"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.",{fetchDiagnosticsMessage:X(g),exception:_(A)})}}}),r}return t.getDefaultConfig=function(){var r={maxAjaxCallsPerView:500,disableAjaxTracking:!1,disableFetchTracking:!0,excludeRequestFromAutoTrackingPatterns:void 0,disableCorrelationHeaders:!1,distributedTracingMode:Ye.AI_AND_W3C,correlationHeaderExcludedDomains:["*.blob.core.windows.net","*.blob.core.chinacloudapi.cn","*.blob.core.cloudapi.de","*.blob.core.usgovcloudapi.net"],correlationHeaderDomains:void 0,correlationHeaderExcludePatterns:void 0,appId:void 0,enableCorsCorrelation:!1,enableRequestHeaderTracking:!1,enableResponseHeaderTracking:!1,enableAjaxErrorStatusText:!1,enableAjaxPerfTracking:!1,maxAjaxPerfLookupAttempts:3,ajaxPerfLookupDelay:25,ignoreHeaders:["Authorization","X-API-Key","WWW-Authenticate"]};return r},t.getEmptyConfig=function(){var r=this.getDefaultConfig();return $(r,function(n){r[n]=void 0}),r},t.prototype.processTelemetry=function(r,n){this.processNext(r,n)},t.identifier="AjaxDependencyPlugin",t}(at);var $i,qo=["snippet","dependencies","properties","_snippetVersion","appInsightsNew","getSKUDefaults"];var Zi=function(){function e(t){var r=this;r._snippetVersion=""+(t.sv||t.version||""),t.queue=t.queue||[],t.version=t.version||2;var n=t.config||{};if(n.connectionString){var i=Ni(n.connectionString),a=i.ingestionendpoint;n.endpointUrl=a?a+"/v2/track":n.endpointUrl,n.instrumentationKey=i.instrumentationkey||n.instrumentationKey}r.appInsights=new zi,r.properties=new Wi,r.dependencies=new Yi,r.core=new pi,r._sender=new Gi,r.snippet=t,r.config=n,r.getSKUDefaults()}return e.prototype.getCookieMgr=function(){return this.appInsights.getCookieMgr()},e.prototype.trackEvent=function(t,r){this.appInsights.trackEvent(t,r)},e.prototype.trackPageView=function(t){var r=t||{};this.appInsights.trackPageView(r)},e.prototype.trackPageViewPerformance=function(t){var r=t||{};this.appInsights.trackPageViewPerformance(r)},e.prototype.trackException=function(t){t&&!t.exception&&t.error&&(t.exception=t.error),this.appInsights.trackException(t)},e.prototype._onerror=function(t){this.appInsights._onerror(t)},e.prototype.trackTrace=function(t,r){this.appInsights.trackTrace(t,r)},e.prototype.trackMetric=function(t,r){this.appInsights.trackMetric(t,r)},e.prototype.startTrackPage=function(t){this.appInsights.startTrackPage(t)},e.prototype.stopTrackPage=function(t,r,n,i){this.appInsights.stopTrackPage(t,r,n,i)},e.prototype.startTrackEvent=function(t){this.appInsights.startTrackEvent(t)},e.prototype.stopTrackEvent=function(t,r,n){this.appInsights.stopTrackEvent(t,r,n)},e.prototype.addTelemetryInitializer=function(t){return this.appInsights.addTelemetryInitializer(t)},e.prototype.setAuthenticatedUserContext=function(t,r,n){n===void 0&&(n=!1),this.properties.context.user.setAuthenticatedUserContext(t,r,n)},e.prototype.clearAuthenticatedUserContext=function(){this.properties.context.user.clearAuthenticatedUserContext()},e.prototype.trackDependencyData=function(t){this.dependencies.trackDependencyData(t)},e.prototype.flush=function(t){var r=this;t===void 0&&(t=!0),lt(this.core,function(){return"AISKU.flush"},function(){M(r.core.getTransmissionControls(),function(n){M(n,function(i){i.flush(t)})})},null,t)},e.prototype.onunloadFlush=function(t){t===void 0&&(t=!0),M(this.core.getTransmissionControls(),function(r){M(r,function(n){n.onunloadFlush?n.onunloadFlush():n.flush(t)})})},e.prototype.loadAppInsights=function(t,r,n){var i=this;t===void 0&&(t=!1);var a=this;function s(c){if(c){var o="";S(a._snippetVersion)||(o+=a._snippetVersion),t&&(o+=".lg"),a.context&&a.context.internal&&(a.context.internal.snippetVer=o||"-"),$(a,function(u,f){U(u)&&!j(f)&&u&&u[0]!=="_"&&qo.indexOf(u)===-1&&(c[u]=f)})}}return t&&a.config.extensions&&a.config.extensions.length>0&&Pe("Extensions not allowed in legacy mode"),lt(a.core,function(){return"AISKU.loadAppInsights"},function(){var c=[];c.push(a._sender),c.push(a.properties),c.push(a.dependencies),c.push(a.appInsights),a.core.initialize(a.config,c,r,n),a.context=a.properties.context,$i&&a.context&&(a.context.internal.sdkSrc=$i),s(a.snippet),a.emptyQueue(),a.pollInternalLogs(),a.addHousekeepingBeforeUnload(i)}),a},e.prototype.updateSnippetDefinitions=function(t){Vn(t,this,function(r){return r&&qo.indexOf(r)===-1})},e.prototype.emptyQueue=function(){var t=this;try{if(Ae(t.snippet.queue)){for(var r=t.snippet.queue.length,n=0;n<r;n++){var i=t.snippet.queue[n];i()}t.snippet.queue=void 0,delete t.snippet.queue}}catch(s){var a={};s&&j(s.toString)&&(a.exception=s.toString())}},e.prototype.pollInternalLogs=function(){this.core.pollInternalLogs()},e.prototype.addHousekeepingBeforeUnload=function(t){if(Ot()||rn()){var r=function(){t.onunloadFlush(!1),M(t.appInsights.core._extensions,function(i){if(i.identifier===Nt)return i&&i.context&&i.context._sessionManager&&i.context._sessionManager.backup(),-1})};if(!t.appInsights.config.disableFlushOnBeforeUnload){var n=wt("beforeunload",r);n=wt("unload",r)||n,n=wt("pagehide",r)||n,n=wt("visibilitychange",r)||n,!n&&!Qn()&&t.appInsights.core.logger.throwInternal(y.CRITICAL,h.FailedToAddHandlerForOnBeforeUnload,"Could not add handler for beforeunload and pagehide")}t.appInsights.config.disableFlushOnUnload||(wt("pagehide",r),wt("visibilitychange",r))}},e.prototype.getSender=function(){return this._sender},e.prototype.getSKUDefaults=function(){var t=this;t.config.diagnosticLogInterval=t.config.diagnosticLogInterval&&t.config.diagnosticLogInterval>0?t.config.diagnosticLogInterval:1e4},e}();(function(){var e=null,t=!1,r=["://js.monitor.azure.com/","://az416426.vo.msecnd.net/"];try{var n=(document||{}).currentScript;n&&(e=n.src)}catch(c){}if(e)try{var i=e.toLowerCase();if(i){for(var a="",s=0;s<r.length;s++)if(i.indexOf(r[s])!==-1){a="cdn"+(s+1),i.indexOf("/scripts/")===-1&&(i.indexOf("/next/")!==-1?a+="-next":i.indexOf("/beta/")!==-1&&(a+="-beta")),$i=a+(t?".mod":"");break}}}catch(c){}})();var bn=class{constructor(t,r,n,i,a){this.extensionId=t;this.extensionVersion=r;this.telemetryAppender=n;this.osShim=i;this.firstParty=!1;this.userOptIn=!1;this.firstParty=!!a,this.updateUserOptStatus(),vscode__WEBPACK_IMPORTED_MODULE_0__["env"].onDidChangeTelemetryEnabled!==void 0?this.optOutListener=vscode__WEBPACK_IMPORTED_MODULE_0__["env"].onDidChangeTelemetryEnabled(()=>this.updateUserOptStatus()):this.optOutListener=vscode__WEBPACK_IMPORTED_MODULE_0__["workspace"].onDidChangeConfiguration(()=>this.updateUserOptStatus())}updateUserOptStatus(){let t=vscode__WEBPACK_IMPORTED_MODULE_0__["workspace"].getConfiguration(bn.TELEMETRY_CONFIG_ID),r=vscode__WEBPACK_IMPORTED_MODULE_0__["env"].isTelemetryEnabled===void 0?t.get(bn.TELEMETRY_CONFIG_ENABLED_ID,!0):vscode__WEBPACK_IMPORTED_MODULE_0__["env"].isTelemetryEnabled;this.userOptIn!==r&&(this.userOptIn=r)}cleanRemoteName(t){if(!t)return"none";let r="other";return["ssh-remote","dev-container","attached-container","wsl"].forEach(n=>{t.indexOf(`${n}+`)===0&&(r=n)}),r}get extension(){return this._extension===void 0&&(this._extension=vscode__WEBPACK_IMPORTED_MODULE_0__["extensions"].getExtension(this.extensionId)),this._extension}cloneAndChange(t,r){if(t===null||typeof t!="object"||typeof r!="function")return t;let n={};for(let i in t)n[i]=r(i,t[i]);return n}shouldSendErrorTelemetry(){return this.firstParty?this.cleanRemoteName(vscode__WEBPACK_IMPORTED_MODULE_0__["env"].remoteName)!=="other"?!0:!(this.extension===void 0||this.extension.extensionKind===vscode__WEBPACK_IMPORTED_MODULE_0__["ExtensionKind"].Workspace||vscode__WEBPACK_IMPORTED_MODULE_0__["env"].uiKind===vscode__WEBPACK_IMPORTED_MODULE_0__["UIKind"].Web):!0}getCommonProperties(){let t=Object.create(null);if(t["common.os"]=this.osShim.platform,t["common.platformversion"]=(this.osShim.release||"").replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/,"$1$2$3"),t["common.extname"]=this.extensionId,t["common.extversion"]=this.extensionVersion,vscode__WEBPACK_IMPORTED_MODULE_0__&&vscode__WEBPACK_IMPORTED_MODULE_0__["env"]){switch(t["common.vscodemachineid"]=vscode__WEBPACK_IMPORTED_MODULE_0__["env"].machineId,t["common.vscodesessionid"]=vscode__WEBPACK_IMPORTED_MODULE_0__["env"].sessionId,t["common.vscodeversion"]=vscode__WEBPACK_IMPORTED_MODULE_0__["version"],t["common.isnewappinstall"]=vscode__WEBPACK_IMPORTED_MODULE_0__["env"].isNewAppInstall.toString(),vscode__WEBPACK_IMPORTED_MODULE_0__["env"].uiKind){case vscode__WEBPACK_IMPORTED_MODULE_0__["UIKind"].Web:t["common.uikind"]="web";break;case vscode__WEBPACK_IMPORTED_MODULE_0__["UIKind"].Desktop:t["common.uikind"]="desktop";break;default:t["common.uikind"]="unknown"}t["common.remotename"]=this.cleanRemoteName(vscode__WEBPACK_IMPORTED_MODULE_0__["env"].remoteName)}return t}anonymizeFilePaths(t,r){let n;if(t==null)return"";let i=[];vscode__WEBPACK_IMPORTED_MODULE_0__["env"].appRoot!==""&&i.push(new RegExp(vscode__WEBPACK_IMPORTED_MODULE_0__["env"].appRoot.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"gi")),this.extension&&i.push(new RegExp(this.extension.extensionPath.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"gi"));let a=t;if(r){let s=[];for(let f of i)for(;(n=f.exec(t))&&n;)s.push([n.index,f.lastIndex]);let c=/^[\\/]?(node_modules|node_modules\.asar)[\\/]/,o=/(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-._]+(\\\\|\\|\/))+[\w-._]*/g,u=0;for(a="";(n=o.exec(t))&&n;)n[0]&&!c.test(n[0])&&s.every(([f,l])=>n.index<f||n.index>=l)&&(a+=t.substring(u,n.index)+"<REDACTED: user-file-path>",u=o.lastIndex);u<t.length&&(a+=t.substr(u))}for(let s of i)a=a.replace(s,"");return a}removePropertiesWithPossibleUserInfo(t){if(typeof t!="object")return;let r=Object.create(null);for(let n of Object.keys(t)){let i=t[n];if(!i)continue;let a=/@[a-zA-Z0-9-.]+/;/\S*(key|token|sig|password|passwd|pwd)[="':\s]+\S*/.test(i.toLowerCase())?r[n]="<REDACTED: secret>":a.test(i)?r[n]="<REDACTED: email>":r[n]=i}return r}sendTelemetryEvent(t,r,n){if(this.userOptIn&&t!==""){r=Ke(Ke({},r),this.getCommonProperties());let i=this.cloneAndChange(r,(a,s)=>this.anonymizeFilePaths(s,this.firstParty));this.telemetryAppender.logEvent(`${this.extensionId}/${t}`,{properties:this.removePropertiesWithPossibleUserInfo(i),measurements:n})}}sendTelemetryErrorEvent(t,r,n,i){if(this.userOptIn&&t!==""){r=Ke(Ke({},r),this.getCommonProperties());let a=this.cloneAndChange(r,(s,c)=>this.shouldSendErrorTelemetry()?this.anonymizeFilePaths(c,this.firstParty):i===void 0||i.indexOf(s)!==-1?"REDACTED":this.anonymizeFilePaths(c,this.firstParty));this.telemetryAppender.logEvent(`${this.extensionId}/${t}`,{properties:this.removePropertiesWithPossibleUserInfo(a),measurements:n})}}sendTelemetryException(t,r,n){if(this.shouldSendErrorTelemetry()&&this.userOptIn&&t){r=Ke(Ke({},r),this.getCommonProperties());let i=this.cloneAndChange(r,(a,s)=>this.anonymizeFilePaths(s,this.firstParty));t.stack&&(t.stack=this.anonymizeFilePaths(t.stack,this.firstParty)),this.telemetryAppender.logException(t,{properties:this.removePropertiesWithPossibleUserInfo(i),measurements:n})}}dispose(){return this.telemetryAppender.flush(),this.optOutListener.dispose()}},Br=bn;Br.TELEMETRY_CONFIG_ID="telemetry",Br.TELEMETRY_CONFIG_ENABLED_ID="enableTelemetry";var Go=class{constructor(t){let r;t&&t.indexOf("AIF-")===0&&(r="https://vortex.data.microsoft.com/collect/v1"),this._aiClient=new Zi({config:{instrumentationKey:t,endpointUrl:r,disableAjaxTracking:!0,disableExceptionTracking:!0,disableFetchTracking:!0,disableCorrelationHeaders:!0,disableCookiesUsage:!0,autoTrackPageVisitTime:!1,emitLineDelimitedJson:!0,disableInstrumentationKeyValidation:!0}}),this._aiClient.loadAppInsights(),r&&vscode__WEBPACK_IMPORTED_MODULE_0__["env"].isTelemetryEnabled&&fetch(r).catch(()=>this._aiClient=void 0)}logEvent(t,r){!this._aiClient||this._aiClient.trackEvent({name:t},Ke(Ke({},r.properties),r.measurements))}logException(t,r){!this._aiClient||this._aiClient.trackException({exception:t,properties:Ke(Ke({},r.properties),r.measurements)})}flush(){return this._aiClient&&(this._aiClient.flush(),this._aiClient=void 0),Promise.resolve(void 0)}},Ko=class extends Br{constructor(t,r,n,i){let a=new Go(n);n&&n.indexOf("AIF-")===0&&(i=!0),super(t,r,a,{release:navigator.appVersion,platform:"web"},i)}};
/*!
 * Microsoft Dynamic Proto Utility, 1.1.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(15)))

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_telemetry_1 = __webpack_require__(11);
const TelemetryUtil_1 = __webpack_require__(436);
const telemetryStrings_1 = __webpack_require__(79);
const CommandDecoratorBase_1 = __webpack_require__(219);
function telemetryCommandDecorator(telemetryEventName, telemetryFaultEventName, commandTitle, telemetryEventVersion = 1, onError) {
    return new TelemetryCommandDecorator(vso_telemetry_1.Telemetry, telemetryEventName, telemetryFaultEventName, commandTitle, telemetryEventVersion, onError).setup();
}
exports.telemetryCommandDecorator = telemetryCommandDecorator;
/**
 * Instrumentation `commandHandler` that automatically sets up any
 * default telemetry and tracing for a given command.
 */
class TelemetryCommandDecorator extends CommandDecoratorBase_1.CommandDecoratorBase {
    constructor(telemetry, telemetryEventName, telemetryFaultEventName, commandTitle, telemetryEventVersion, onError) {
        super();
        this.telemetry = telemetry;
        this.telemetryEventName = telemetryEventName;
        this.telemetryFaultEventName = telemetryFaultEventName;
        this.commandTitle = commandTitle;
        this.telemetryEventVersion = telemetryEventVersion;
        this.onError = onError;
    }
    invoke(commandInvoke, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let error = undefined;
            let telemetryEvent = this.telemetry.startTimedEvent(this.telemetryEventName);
            let telemetryResult = vso_telemetry_1.TelemetryResult.Success;
            let telemetryMessage = '';
            context.telemetryEvent = telemetryEvent;
            this.telemetry.setCorrelationEvent(telemetryEvent);
            telemetryEvent.addProperty(telemetryStrings_1.TelemetryPropertyNames.COMMAND_TEXT, context.commandText);
            telemetryEvent.addMeasure(telemetryStrings_1.TelemetryPropertyNames.TELEMETRY_EVENT_VERSION, this.telemetryEventVersion);
            this.addInvocationTelemetryProperties(telemetryEvent, options.telemetryProperties);
            try {
                result = yield commandInvoke(options, context);
                telemetryEvent.addProperty(vso_telemetry_1.TelemetryPropertyNames.EVENT_RESULT, vso_telemetry_1.TelemetryResult.Success);
            }
            catch (e) {
                telemetryResult = TelemetryUtil_1.TelemetryUtil.DeriveTelemetryResult(e);
                telemetryMessage = TelemetryUtil_1.TelemetryUtil.BuildTelemetryMessage(this.commandTitle, telemetryResult, e.message);
                telemetryEvent.addProperty(vso_telemetry_1.TelemetryPropertyNames.EVENT_RESULT, telemetryResult);
                if (this.onError) {
                    this.onError(e, context, options);
                }
                this.telemetry.sendFault(this.telemetryFaultEventName, TelemetryUtil_1.TelemetryUtil.MapTelemetryResultToFaultType(telemetryResult), telemetryMessage, e);
                error = e;
                throw e;
            }
            finally {
                telemetryMessage =
                    telemetryMessage ||
                        TelemetryUtil_1.TelemetryUtil.BuildTelemetryMessage(this.commandTitle, vso_telemetry_1.TelemetryResult.Success);
                const duration = telemetryEvent.end(telemetryResult, telemetryMessage);
                context.trace.traceEvent(TelemetryUtil_1.TelemetryUtil.MapTelemetryResultToTraceEventType(telemetryResult), 0, `Command [${context.commandName}]: ${telemetryMessage} (${duration}ms)`);
                // noting that we have logged the error. We will check this up stream
                if (error) {
                    error.hasRecorded = true;
                }
            }
            return result;
        });
    }
    addInvocationTelemetryProperties(telemetryEvent, properties = {}) {
        for (let propertyName of Object.keys(properties)) {
            telemetryEvent.addProperty(propertyName, properties[propertyName]);
        }
    }
}
exports.TelemetryCommandDecorator = TelemetryCommandDecorator;
//# sourceMappingURL=TelemetryCommandDecorator.js.map

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const vso_logging_1 = __webpack_require__(18);
const CommandError_1 = __webpack_require__(44);
const vso_telemetry_1 = __webpack_require__(11);
/**
 * Helper functions for sending telemetry events.
 */
class TelemetryUtil {
    static DeriveTelemetryResult(error) {
        if (error instanceof CommandError_1.CommandError) {
            return error.telemetryResult;
        }
        return vso_telemetry_1.TelemetryResult.Failure;
    }
    static DeriveTelemetryTitle(command, result) {
        // TODO: Could auto convert enum to friendly string.
        let category = 'Success';
        if (result === vso_telemetry_1.TelemetryResult.UserFailure) {
            category = 'User Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.Cancel) {
            category = 'Cancelled';
        }
        else if (result === vso_telemetry_1.TelemetryResult.IndeterminateFailure) {
            category = 'Indeterminate Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.Failure) {
            category = 'Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.NonBlockingFailure) {
            category = 'Non Blocking Failure';
        }
        else if (result === vso_telemetry_1.TelemetryResult.ByDesignFailure) {
            category = 'By Design Failure';
        }
        return `${command} ${category}`;
    }
    static BuildTelemetryMessage(command, result, error) {
        let errorPostfix = '';
        if (error !== undefined) {
            errorPostfix = `: ${error}`;
        }
        return `${this.DeriveTelemetryTitle(command, result)}${errorPostfix}`;
    }
    static MapTelemetryResultToFaultType(result) {
        // TODO: Can we unify on one enum type.
        switch (result) {
            case vso_telemetry_1.TelemetryResult.UserFailure:
                return vso_telemetry_1.FaultType.User;
            case vso_telemetry_1.TelemetryResult.Cancel:
                return vso_telemetry_1.FaultType.UserCancelled;
            case vso_telemetry_1.TelemetryResult.Failure:
                return vso_telemetry_1.FaultType.Error;
            case vso_telemetry_1.TelemetryResult.NonBlockingFailure:
                return vso_telemetry_1.FaultType.NonBlockingFault;
            case vso_telemetry_1.TelemetryResult.ByDesignFailure:
                return vso_telemetry_1.FaultType.ByDesign;
            case vso_telemetry_1.TelemetryResult.IndeterminateFailure:
            default:
                return vso_telemetry_1.FaultType.Unknown;
        }
    }
    static MapTelemetryResultToTraceEventType(result) {
        return result === vso_telemetry_1.TelemetryResult.Success ? vso_logging_1.LogLevel.Info : vso_logging_1.LogLevel.Error;
    }
}
exports.TelemetryUtil = TelemetryUtil;
//# sourceMappingURL=TelemetryUtil.js.map

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommandDecoratorBase_1 = __webpack_require__(219);
const NotificationUtil_1 = __webpack_require__(220);
const ByDesignErrors_1 = __webpack_require__(221);
const UserError_1 = __webpack_require__(222);
const CancellationError_1 = __webpack_require__(223);
const NonBlockingError_1 = __webpack_require__(224);
const vso_telemetry_1 = __webpack_require__(11);
function errorNotificationCommandDecorator(title, telemetryFaultEventName, isModalError = false, onError) {
    return new ErrorNotificationCommandDecorator(NotificationUtil_1.NotificationUtil, vso_telemetry_1.Telemetry, telemetryFaultEventName, title, isModalError, onError).setup();
}
exports.errorNotificationCommandDecorator = errorNotificationCommandDecorator;
/**
 * Error Notification `commandHandler` that converts exceptions into the correct
 * notification toast in the client.
 */
class ErrorNotificationCommandDecorator extends CommandDecoratorBase_1.CommandDecoratorBase {
    constructor(notificationUtil, telemetry, telemetryFaultEventName, title, isModalError, onError) {
        super();
        this.notificationUtil = notificationUtil;
        this.telemetry = telemetry;
        this.telemetryFaultEventName = telemetryFaultEventName;
        this.title = title;
        this.isModalError = isModalError;
        this.onError = onError;
    }
    invoke(commandInvoke, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const { cancellationTokenSource } = context;
            let result;
            // save the command name
            context.commandName = this.title;
            try {
                result = yield commandInvoke(options, context);
            }
            catch (error) {
                try {
                    const userMessage = error.userMessage || error.message;
                    const fullMessage = userMessage ? `${this.title}: ${userMessage}` : this.title;
                    // if `CancellationError` was throw, invalidate the cancellation token
                    if (error instanceof CancellationError_1.CancellationError) {
                        // cancel the command cancellation token if not cancelled yet
                        if (cancellationTokenSource &&
                            !cancellationTokenSource.token.isCancellationRequested) {
                            cancellationTokenSource.cancel();
                        }
                    }
                    const isCancellationOrUserError = error instanceof UserError_1.UserError || error instanceof CancellationError_1.CancellationError;
                    // Supress the notification if the error has the appropriate property
                    // or if it's a cancellation error with no message.
                    const suppressNotification = error.isSuppressUserNotification ||
                        (error instanceof CancellationError_1.CancellationError && !userMessage);
                    if (!suppressNotification) {
                        if (isCancellationOrUserError) {
                            this.notificationUtil.showInformationMessage(fullMessage, false);
                        }
                        else if (error instanceof ByDesignErrors_1.ByDesignError) {
                            yield this.notificationUtil.showErrorMessage(fullMessage, {
                                modal: this.isModalError,
                            });
                        }
                        else if (!(error instanceof NonBlockingError_1.NonBlockingError)) {
                            yield this.notificationUtil.showErrorMessage(fullMessage, {
                                modal: this.isModalError,
                            });
                        }
                    }
                }
                catch (e) {
                    // if the above block triggered an error we want to know
                    error = e;
                }
                // at this this point we will know about any errors that hasn't been
                // recorded - anything thats happened up stream of `TelemetryCommandMiddleware`
                if (error && !error.hasRecorded) {
                    const errorMessage = `${this.title}: [unhandled exception (decorator)] ${error.message}`;
                    context.trace.error(errorMessage);
                    this.telemetry.sendFault(this.telemetryFaultEventName, vso_telemetry_1.FaultType.Error, errorMessage, error);
                }
                if (error && this.onError) {
                    yield this.onError(error, context, options);
                }
            }
            return result;
        });
    }
}
exports.ErrorNotificationCommandDecorator = ErrorNotificationCommandDecorator;
//# sourceMappingURL=ErrorNotificationCommandDecorator.js.map

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class CommandBase {
}
exports.CommandBase = CommandBase;
//# sourceMappingURL=CommandBase.js.map

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CommandErrorCode;
(function (CommandErrorCode) {
    CommandErrorCode["LOCAL_DEPENDENCY"] = "ERR_LOCAL_DEPENDENCY";
    CommandErrorCode["NOT_SUPPORTED"] = "ERR_NOT_SUPPORTED";
    CommandErrorCode["REMOTE_DEPENDENCY"] = "ERR_REMOTE_DEPENDENCY";
    CommandErrorCode["UNAUTHORIZED"] = "ERR_UNAUTHORIZED";
    CommandErrorCode["FORBIDDEN_ANONYMOUS"] = "ERR_FORBIDDEN_ANONYMOUS";
    CommandErrorCode["NETWORK_ERROR"] = "ERR_NETWORK";
    CommandErrorCode["BAD_REQUEST"] = "ERR_BAD_REQUEST";
})(CommandErrorCode = exports.CommandErrorCode || (exports.CommandErrorCode = {}));
//# sourceMappingURL=CommandErrorCode.js.map

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class OptOutTelemetryFilter {
    constructor() {
        this.enableTelemetry = true;
        this.updateUserOptIn();
        this.configListener = OptOutTelemetryFilter.vscode.workspace.onDidChangeConfiguration(() => this.updateUserOptIn());
    }
    shouldSend(eventName, properties, measures) {
        return this.enableTelemetry;
    }
    updateUserOptIn() {
        const config = OptOutTelemetryFilter.vscode.workspace.getConfiguration('telemetry');
        this.enableTelemetry = config.get('enableTelemetry', true);
    }
    dispose() {
        return this.configListener.dispose();
    }
    // Defer import of `vscode` package.
    static get vscode() {
        return __webpack_require__(1);
    }
}
exports.OptOutTelemetryFilter = OptOutTelemetryFilter;
//# sourceMappingURL=OptOutTelemetryFilter.js.map

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
const path = __webpack_require__(30);
const fileAccess_1 = __webpack_require__(67);
const findFilesAsync_1 = __webpack_require__(442);
const zip = __webpack_require__(443);
const logFileExtensions = [
    '.log',
    '.blog',
];
class LogZipExporter {
    static createLogZipFileAsync(zipFilePath, directoryPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const logFiles = (yield findFilesAsync_1.findFilesAsync(directoryPath, directoryPath, (file) => logFileExtensions.indexOf(path.extname(file)) >= 0)).sort();
            const zipFile = new zip.ZipFile();
            zipFile.outputStream.pipe(fileAccess_1.fileAccess.createWriteStream(zipFilePath));
            logFiles.forEach((logFile) => {
                zipFile.addFile(path.join(directoryPath, logFile), logFile);
            });
            zipFile.end();
        });
    }
}
exports.LogZipExporter = LogZipExporter;
//# sourceMappingURL=logZipExporter.js.map

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __webpack_require__(30);
const fileAccess_1 = __webpack_require__(67);
/**
 * Async function to get the immediate children of a directory.
 */
exports.readdirAsync = (dir) => {
    return new Promise((resolve, reject) => {
        fileAccess_1.fileAccess.readdir(dir, (err, children) => (err ? reject(err) : resolve(children)));
    });
};
/**
 * Async function to get file or directory stats.
 *
 * @param fileOrDir File or directory path to get stats for.
 * @returns File or directory stats.
 */
exports.statAsync = (fileOrDir) => {
    return new Promise((resolve, reject) => {
        fileAccess_1.fileAccess.stat(fileOrDir, (err, stats) => (err ? reject(err) : resolve(stats)));
    });
};
/**
 * Searches for files in a directory that pass a given filter.
 *
 * @param root Returned results are paths relative to this root.
 * @param dir Starting directory for the search.
 * @param filter Optional callback to filter the files.
 */
exports.findFilesAsync = (root, dir, filter) => __awaiter(void 0, void 0, void 0, function* () {
    let results = [];
    let children = [];
    try {
        children = yield exports.readdirAsync(dir);
    }
    catch (e) {
        // Skip a directory if it couldn't be read.
    }
    for (let child of children) {
        const childPath = path.join(dir, child);
        let childStat;
        try {
            childStat = yield exports.statAsync(childPath);
        }
        catch (e) {
            // Skip a child if it couldn't be read.
            continue;
        }
        if (childStat.isDirectory()) {
            const childResults = yield exports.findFilesAsync(root, childPath, filter);
            results = results.concat(childResults);
        }
        else {
            const childRelativePath = path.relative(root, childPath);
            if (!filter || filter(childRelativePath)) {
                results.push(childRelativePath);
            }
        }
    }
    return results;
});
//# sourceMappingURL=findFilesAsync.js.map

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate, Buffer) {var fs = __webpack_require__(26);
var Transform = __webpack_require__(35).Transform;
var PassThrough = __webpack_require__(35).PassThrough;
var zlib = __webpack_require__(444);
var util = __webpack_require__(122);
var EventEmitter = __webpack_require__(42).EventEmitter;
var crc32 = __webpack_require__(457);

exports.ZipFile = ZipFile;
exports.dateToDosDateTime = dateToDosDateTime;

util.inherits(ZipFile, EventEmitter);
function ZipFile() {
  this.outputStream = new PassThrough();
  this.entries = [];
  this.outputStreamCursor = 0;
  this.ended = false; // .end() sets this
  this.allDone = false; // set when we've written the last bytes
  this.forceZip64Eocd = false; // configurable in .end()
}

ZipFile.prototype.addFile = function(realPath, metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, false);
  if (options == null) options = {};

  var entry = new Entry(metadataPath, false, options);
  self.entries.push(entry);
  fs.stat(realPath, function(err, stats) {
    if (err) return self.emit("error", err);
    if (!stats.isFile()) return self.emit("error", new Error("not a file: " + realPath));
    entry.uncompressedSize = stats.size;
    if (options.mtime == null) entry.setLastModDate(stats.mtime);
    if (options.mode == null) entry.setFileAttributesMode(stats.mode);
    entry.setFileDataPumpFunction(function() {
      var readStream = fs.createReadStream(realPath);
      entry.state = Entry.FILE_DATA_IN_PROGRESS;
      readStream.on("error", function(err) {
        self.emit("error", err);
      });
      pumpFileDataReadStream(self, entry, readStream);
    });
    pumpEntries(self);
  });
};

ZipFile.prototype.addReadStream = function(readStream, metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, false);
  if (options == null) options = {};
  var entry = new Entry(metadataPath, false, options);
  self.entries.push(entry);
  entry.setFileDataPumpFunction(function() {
    entry.state = Entry.FILE_DATA_IN_PROGRESS;
    pumpFileDataReadStream(self, entry, readStream);
  });
  pumpEntries(self);
};

ZipFile.prototype.addBuffer = function(buffer, metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, false);
  if (buffer.length > 0x3fffffff) throw new Error("buffer too large: " + buffer.length + " > " + 0x3fffffff);
  if (options == null) options = {};
  if (options.size != null) throw new Error("options.size not allowed");
  var entry = new Entry(metadataPath, false, options);
  entry.uncompressedSize = buffer.length;
  entry.crc32 = crc32.unsigned(buffer);
  entry.crcAndFileSizeKnown = true;
  self.entries.push(entry);
  if (!entry.compress) {
    setCompressedBuffer(buffer);
  } else {
    zlib.deflateRaw(buffer, function(err, compressedBuffer) {
      setCompressedBuffer(compressedBuffer);
    });
  }
  function setCompressedBuffer(compressedBuffer) {
    entry.compressedSize = compressedBuffer.length;
    entry.setFileDataPumpFunction(function() {
      writeToOutputStream(self, compressedBuffer);
      writeToOutputStream(self, entry.getDataDescriptor());
      entry.state = Entry.FILE_DATA_DONE;

      // don't call pumpEntries() recursively.
      // (also, don't call process.nextTick recursively.)
      setImmediate(function() {
        pumpEntries(self);
      });
    });
    pumpEntries(self);
  }
};

ZipFile.prototype.addEmptyDirectory = function(metadataPath, options) {
  var self = this;
  metadataPath = validateMetadataPath(metadataPath, true);
  if (options == null) options = {};
  if (options.size != null) throw new Error("options.size not allowed");
  if (options.compress != null) throw new Error("options.compress not allowed");
  var entry = new Entry(metadataPath, true, options);
  self.entries.push(entry);
  entry.setFileDataPumpFunction(function() {
    writeToOutputStream(self, entry.getDataDescriptor());
    entry.state = Entry.FILE_DATA_DONE;
    pumpEntries(self);
  });
  pumpEntries(self);
};

var eocdrSignatureBuffer = bufferFrom([0x50, 0x4b, 0x05, 0x06]);

ZipFile.prototype.end = function(options, finalSizeCallback) {
  if (typeof options === "function") {
    finalSizeCallback = options;
    options = null;
  }
  if (options == null) options = {};
  if (this.ended) return;
  this.ended = true;
  this.finalSizeCallback = finalSizeCallback;
  this.forceZip64Eocd = !!options.forceZip64Format;
  if (options.comment) {
    if (typeof options.comment === "string") {
      this.comment = encodeCp437(options.comment);
    } else {
      // It should be a Buffer
      this.comment = options.comment;
    }
    if (this.comment.length > 0xffff) throw new Error("comment is too large");
    // gotta check for this, because the zipfile format is actually ambiguous.
    if (bufferIncludes(this.comment, eocdrSignatureBuffer)) throw new Error("comment contains end of central directory record signature");
  } else {
    // no comment.
    this.comment = EMPTY_BUFFER;
  }
  pumpEntries(this);
};

function writeToOutputStream(self, buffer) {
  self.outputStream.write(buffer);
  self.outputStreamCursor += buffer.length;
}

function pumpFileDataReadStream(self, entry, readStream) {
  var crc32Watcher = new Crc32Watcher();
  var uncompressedSizeCounter = new ByteCounter();
  var compressor = entry.compress ? new zlib.DeflateRaw() : new PassThrough();
  var compressedSizeCounter = new ByteCounter();
  readStream.pipe(crc32Watcher)
            .pipe(uncompressedSizeCounter)
            .pipe(compressor)
            .pipe(compressedSizeCounter)
            .pipe(self.outputStream, {end: false});
  compressedSizeCounter.on("end", function() {
    entry.crc32 = crc32Watcher.crc32;
    if (entry.uncompressedSize == null) {
      entry.uncompressedSize = uncompressedSizeCounter.byteCount;
    } else {
      if (entry.uncompressedSize !== uncompressedSizeCounter.byteCount) return self.emit("error", new Error("file data stream has unexpected number of bytes"));
    }
    entry.compressedSize = compressedSizeCounter.byteCount;
    self.outputStreamCursor += entry.compressedSize;
    writeToOutputStream(self, entry.getDataDescriptor());
    entry.state = Entry.FILE_DATA_DONE;
    pumpEntries(self);
  });
}

function pumpEntries(self) {
  if (self.allDone) return;
  // first check if finalSize is finally known
  if (self.ended && self.finalSizeCallback != null) {
    var finalSize = calculateFinalSize(self);
    if (finalSize != null) {
      // we have an answer
      self.finalSizeCallback(finalSize);
      self.finalSizeCallback = null;
    }
  }

  // pump entries
  var entry = getFirstNotDoneEntry();
  function getFirstNotDoneEntry() {
    for (var i = 0; i < self.entries.length; i++) {
      var entry = self.entries[i];
      if (entry.state < Entry.FILE_DATA_DONE) return entry;
    }
    return null;
  }
  if (entry != null) {
    // this entry is not done yet
    if (entry.state < Entry.READY_TO_PUMP_FILE_DATA) return; // input file not open yet
    if (entry.state === Entry.FILE_DATA_IN_PROGRESS) return; // we'll get there
    // start with local file header
    entry.relativeOffsetOfLocalHeader = self.outputStreamCursor;
    var localFileHeader = entry.getLocalFileHeader();
    writeToOutputStream(self, localFileHeader);
    entry.doFileDataPump();
  } else {
    // all cought up on writing entries
    if (self.ended) {
      // head for the exit
      self.offsetOfStartOfCentralDirectory = self.outputStreamCursor;
      self.entries.forEach(function(entry) {
        var centralDirectoryRecord = entry.getCentralDirectoryRecord();
        writeToOutputStream(self, centralDirectoryRecord);
      });
      writeToOutputStream(self, getEndOfCentralDirectoryRecord(self));
      self.outputStream.end();
      self.allDone = true;
    }
  }
}

function calculateFinalSize(self) {
  var pretendOutputCursor = 0;
  var centralDirectorySize = 0;
  for (var i = 0; i < self.entries.length; i++) {
    var entry = self.entries[i];
    // compression is too hard to predict
    if (entry.compress) return -1;
    if (entry.state >= Entry.READY_TO_PUMP_FILE_DATA) {
      // if addReadStream was called without providing the size, we can't predict the final size
      if (entry.uncompressedSize == null) return -1;
    } else {
      // if we're still waiting for fs.stat, we might learn the size someday
      if (entry.uncompressedSize == null) return null;
    }
    // we know this for sure, and this is important to know if we need ZIP64 format.
    entry.relativeOffsetOfLocalHeader = pretendOutputCursor;
    var useZip64Format = entry.useZip64Format();

    pretendOutputCursor += LOCAL_FILE_HEADER_FIXED_SIZE + entry.utf8FileName.length;
    pretendOutputCursor += entry.uncompressedSize;
    if (!entry.crcAndFileSizeKnown) {
      // use a data descriptor
      if (useZip64Format) {
        pretendOutputCursor += ZIP64_DATA_DESCRIPTOR_SIZE;
      } else {
        pretendOutputCursor += DATA_DESCRIPTOR_SIZE;
      }
    }

    centralDirectorySize += CENTRAL_DIRECTORY_RECORD_FIXED_SIZE + entry.utf8FileName.length + entry.fileComment.length;
    if (useZip64Format) {
      centralDirectorySize += ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE;
    }
  }

  var endOfCentralDirectorySize = 0;
  if (self.forceZip64Eocd ||
      self.entries.length >= 0xffff ||
      centralDirectorySize >= 0xffff ||
      pretendOutputCursor >= 0xffffffff) {
    // use zip64 end of central directory stuff
    endOfCentralDirectorySize += ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE + ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE;
  }
  endOfCentralDirectorySize += END_OF_CENTRAL_DIRECTORY_RECORD_SIZE + self.comment.length;
  return pretendOutputCursor + centralDirectorySize + endOfCentralDirectorySize;
}

var ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE = 56;
var ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE = 20;
var END_OF_CENTRAL_DIRECTORY_RECORD_SIZE = 22;
function getEndOfCentralDirectoryRecord(self, actuallyJustTellMeHowLongItWouldBe) {
  var needZip64Format = false;
  var normalEntriesLength = self.entries.length;
  if (self.forceZip64Eocd || self.entries.length >= 0xffff) {
    normalEntriesLength = 0xffff;
    needZip64Format = true;
  }
  var sizeOfCentralDirectory = self.outputStreamCursor - self.offsetOfStartOfCentralDirectory;
  var normalSizeOfCentralDirectory = sizeOfCentralDirectory;
  if (self.forceZip64Eocd || sizeOfCentralDirectory >= 0xffffffff) {
    normalSizeOfCentralDirectory = 0xffffffff;
    needZip64Format = true;
  }
  var normalOffsetOfStartOfCentralDirectory = self.offsetOfStartOfCentralDirectory;
  if (self.forceZip64Eocd || self.offsetOfStartOfCentralDirectory >= 0xffffffff) {
    normalOffsetOfStartOfCentralDirectory = 0xffffffff;
    needZip64Format = true;
  }
  if (actuallyJustTellMeHowLongItWouldBe) {
    if (needZip64Format) {
      return (
        ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE +
        ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE +
        END_OF_CENTRAL_DIRECTORY_RECORD_SIZE
      );
    } else {
      return END_OF_CENTRAL_DIRECTORY_RECORD_SIZE;
    }
  }

  var eocdrBuffer = bufferAlloc(END_OF_CENTRAL_DIRECTORY_RECORD_SIZE + self.comment.length);
  // end of central dir signature                       4 bytes  (0x06054b50)
  eocdrBuffer.writeUInt32LE(0x06054b50, 0);
  // number of this disk                                2 bytes
  eocdrBuffer.writeUInt16LE(0, 4);
  // number of the disk with the start of the central directory  2 bytes
  eocdrBuffer.writeUInt16LE(0, 6);
  // total number of entries in the central directory on this disk  2 bytes
  eocdrBuffer.writeUInt16LE(normalEntriesLength, 8);
  // total number of entries in the central directory   2 bytes
  eocdrBuffer.writeUInt16LE(normalEntriesLength, 10);
  // size of the central directory                      4 bytes
  eocdrBuffer.writeUInt32LE(normalSizeOfCentralDirectory, 12);
  // offset of start of central directory with respect to the starting disk number  4 bytes
  eocdrBuffer.writeUInt32LE(normalOffsetOfStartOfCentralDirectory, 16);
  // .ZIP file comment length                           2 bytes
  eocdrBuffer.writeUInt16LE(self.comment.length, 20);
  // .ZIP file comment                                  (variable size)
  self.comment.copy(eocdrBuffer, 22);

  if (!needZip64Format) return eocdrBuffer;

  // ZIP64 format
  // ZIP64 End of Central Directory Record
  var zip64EocdrBuffer = bufferAlloc(ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE);
  // zip64 end of central dir signature                                             4 bytes  (0x06064b50)
  zip64EocdrBuffer.writeUInt32LE(0x06064b50, 0);
  // size of zip64 end of central directory record                                  8 bytes
  writeUInt64LE(zip64EocdrBuffer, ZIP64_END_OF_CENTRAL_DIRECTORY_RECORD_SIZE - 12, 4);
  // version made by                                                                2 bytes
  zip64EocdrBuffer.writeUInt16LE(VERSION_MADE_BY, 12);
  // version needed to extract                                                      2 bytes
  zip64EocdrBuffer.writeUInt16LE(VERSION_NEEDED_TO_EXTRACT_ZIP64, 14);
  // number of this disk                                                            4 bytes
  zip64EocdrBuffer.writeUInt32LE(0, 16);
  // number of the disk with the start of the central directory                     4 bytes
  zip64EocdrBuffer.writeUInt32LE(0, 20);
  // total number of entries in the central directory on this disk                  8 bytes
  writeUInt64LE(zip64EocdrBuffer, self.entries.length, 24);
  // total number of entries in the central directory                               8 bytes
  writeUInt64LE(zip64EocdrBuffer, self.entries.length, 32);
  // size of the central directory                                                  8 bytes
  writeUInt64LE(zip64EocdrBuffer, sizeOfCentralDirectory, 40);
  // offset of start of central directory with respect to the starting disk number  8 bytes
  writeUInt64LE(zip64EocdrBuffer, self.offsetOfStartOfCentralDirectory, 48);
  // zip64 extensible data sector                                                   (variable size)
  // nothing in the zip64 extensible data sector


  // ZIP64 End of Central Directory Locator
  var zip64EocdlBuffer = bufferAlloc(ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR_SIZE);
  // zip64 end of central dir locator signature                               4 bytes  (0x07064b50)
  zip64EocdlBuffer.writeUInt32LE(0x07064b50, 0);
  // number of the disk with the start of the zip64 end of central directory  4 bytes
  zip64EocdlBuffer.writeUInt32LE(0, 4);
  // relative offset of the zip64 end of central directory record             8 bytes
  writeUInt64LE(zip64EocdlBuffer, self.outputStreamCursor, 8);
  // total number of disks                                                    4 bytes
  zip64EocdlBuffer.writeUInt32LE(1, 16);


  return Buffer.concat([
    zip64EocdrBuffer,
    zip64EocdlBuffer,
    eocdrBuffer,
  ]);
}

function validateMetadataPath(metadataPath, isDirectory) {
  if (metadataPath === "") throw new Error("empty metadataPath");
  metadataPath = metadataPath.replace(/\\/g, "/");
  if (/^[a-zA-Z]:/.test(metadataPath) || /^\//.test(metadataPath)) throw new Error("absolute path: " + metadataPath);
  if (metadataPath.split("/").indexOf("..") !== -1) throw new Error("invalid relative path: " + metadataPath);
  var looksLikeDirectory = /\/$/.test(metadataPath);
  if (isDirectory) {
    // append a trailing '/' if necessary.
    if (!looksLikeDirectory) metadataPath += "/";
  } else {
    if (looksLikeDirectory) throw new Error("file path cannot end with '/': " + metadataPath);
  }
  return metadataPath;
}

var EMPTY_BUFFER = bufferAlloc(0);

// this class is not part of the public API
function Entry(metadataPath, isDirectory, options) {
  this.utf8FileName = bufferFrom(metadataPath);
  if (this.utf8FileName.length > 0xffff) throw new Error("utf8 file name too long. " + utf8FileName.length + " > " + 0xffff);
  this.isDirectory = isDirectory;
  this.state = Entry.WAITING_FOR_METADATA;
  this.setLastModDate(options.mtime != null ? options.mtime : new Date());
  if (options.mode != null) {
    this.setFileAttributesMode(options.mode);
  } else {
    this.setFileAttributesMode(isDirectory ? 0o40775 : 0o100664);
  }
  if (isDirectory) {
    this.crcAndFileSizeKnown = true;
    this.crc32 = 0;
    this.uncompressedSize = 0;
    this.compressedSize = 0;
  } else {
    // unknown so far
    this.crcAndFileSizeKnown = false;
    this.crc32 = null;
    this.uncompressedSize = null;
    this.compressedSize = null;
    if (options.size != null) this.uncompressedSize = options.size;
  }
  if (isDirectory) {
    this.compress = false;
  } else {
    this.compress = true; // default
    if (options.compress != null) this.compress = !!options.compress;
  }
  this.forceZip64Format = !!options.forceZip64Format;
  if (options.fileComment) {
    if (typeof options.fileComment === "string") {
      this.fileComment = bufferFrom(options.fileComment, "utf-8");
    } else {
      // It should be a Buffer
      this.fileComment = options.fileComment;
    }
    if (this.fileComment.length > 0xffff) throw new Error("fileComment is too large");
  } else {
    // no comment.
    this.fileComment = EMPTY_BUFFER;
  }
}
Entry.WAITING_FOR_METADATA = 0;
Entry.READY_TO_PUMP_FILE_DATA = 1;
Entry.FILE_DATA_IN_PROGRESS = 2;
Entry.FILE_DATA_DONE = 3;
Entry.prototype.setLastModDate = function(date) {
  var dosDateTime = dateToDosDateTime(date);
  this.lastModFileTime = dosDateTime.time;
  this.lastModFileDate = dosDateTime.date;
};
Entry.prototype.setFileAttributesMode = function(mode) {
  if ((mode & 0xffff) !== mode) throw new Error("invalid mode. expected: 0 <= " + mode + " <= " + 0xffff);
  // http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute/14727#14727
  this.externalFileAttributes = (mode << 16) >>> 0;
};
// doFileDataPump() should not call pumpEntries() directly. see issue #9.
Entry.prototype.setFileDataPumpFunction = function(doFileDataPump) {
  this.doFileDataPump = doFileDataPump;
  this.state = Entry.READY_TO_PUMP_FILE_DATA;
};
Entry.prototype.useZip64Format = function() {
  return (
    (this.forceZip64Format) ||
    (this.uncompressedSize != null && this.uncompressedSize > 0xfffffffe) ||
    (this.compressedSize != null && this.compressedSize > 0xfffffffe) ||
    (this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 0xfffffffe)
  );
}
var LOCAL_FILE_HEADER_FIXED_SIZE = 30;
var VERSION_NEEDED_TO_EXTRACT_UTF8 = 20;
var VERSION_NEEDED_TO_EXTRACT_ZIP64 = 45;
// 3 = unix. 63 = spec version 6.3
var VERSION_MADE_BY = (3 << 8) | 63;
var FILE_NAME_IS_UTF8 = 1 << 11;
var UNKNOWN_CRC32_AND_FILE_SIZES = 1 << 3;
Entry.prototype.getLocalFileHeader = function() {
  var crc32 = 0;
  var compressedSize = 0;
  var uncompressedSize = 0;
  if (this.crcAndFileSizeKnown) {
    crc32 = this.crc32;
    compressedSize = this.compressedSize;
    uncompressedSize = this.uncompressedSize;
  }

  var fixedSizeStuff = bufferAlloc(LOCAL_FILE_HEADER_FIXED_SIZE);
  var generalPurposeBitFlag = FILE_NAME_IS_UTF8;
  if (!this.crcAndFileSizeKnown) generalPurposeBitFlag |= UNKNOWN_CRC32_AND_FILE_SIZES;

  // local file header signature     4 bytes  (0x04034b50)
  fixedSizeStuff.writeUInt32LE(0x04034b50, 0);
  // version needed to extract       2 bytes
  fixedSizeStuff.writeUInt16LE(VERSION_NEEDED_TO_EXTRACT_UTF8, 4);
  // general purpose bit flag        2 bytes
  fixedSizeStuff.writeUInt16LE(generalPurposeBitFlag, 6);
  // compression method              2 bytes
  fixedSizeStuff.writeUInt16LE(this.getCompressionMethod(), 8);
  // last mod file time              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileTime, 10);
  // last mod file date              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileDate, 12);
  // crc-32                          4 bytes
  fixedSizeStuff.writeUInt32LE(crc32, 14);
  // compressed size                 4 bytes
  fixedSizeStuff.writeUInt32LE(compressedSize, 18);
  // uncompressed size               4 bytes
  fixedSizeStuff.writeUInt32LE(uncompressedSize, 22);
  // file name length                2 bytes
  fixedSizeStuff.writeUInt16LE(this.utf8FileName.length, 26);
  // extra field length              2 bytes
  fixedSizeStuff.writeUInt16LE(0, 28);
  return Buffer.concat([
    fixedSizeStuff,
    // file name (variable size)
    this.utf8FileName,
    // extra field (variable size)
    // no extra fields
  ]);
};
var DATA_DESCRIPTOR_SIZE = 16;
var ZIP64_DATA_DESCRIPTOR_SIZE = 24;
Entry.prototype.getDataDescriptor = function() {
  if (this.crcAndFileSizeKnown) {
    // the Mac Archive Utility requires this not be present unless we set general purpose bit 3
    return EMPTY_BUFFER;
  }
  if (!this.useZip64Format()) {
    var buffer = bufferAlloc(DATA_DESCRIPTOR_SIZE);
    // optional signature (required according to Archive Utility)
    buffer.writeUInt32LE(0x08074b50, 0);
    // crc-32                          4 bytes
    buffer.writeUInt32LE(this.crc32, 4);
    // compressed size                 4 bytes
    buffer.writeUInt32LE(this.compressedSize, 8);
    // uncompressed size               4 bytes
    buffer.writeUInt32LE(this.uncompressedSize, 12);
    return buffer;
  } else {
    // ZIP64 format
    var buffer = bufferAlloc(ZIP64_DATA_DESCRIPTOR_SIZE);
    // optional signature (unknown if anyone cares about this)
    buffer.writeUInt32LE(0x08074b50, 0);
    // crc-32                          4 bytes
    buffer.writeUInt32LE(this.crc32, 4);
    // compressed size                 8 bytes
    writeUInt64LE(buffer, this.compressedSize, 8);
    // uncompressed size               8 bytes
    writeUInt64LE(buffer, this.uncompressedSize, 16);
    return buffer;
  }
};
var CENTRAL_DIRECTORY_RECORD_FIXED_SIZE = 46;
var ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE = 28;
Entry.prototype.getCentralDirectoryRecord = function() {
  var fixedSizeStuff = bufferAlloc(CENTRAL_DIRECTORY_RECORD_FIXED_SIZE);
  var generalPurposeBitFlag = FILE_NAME_IS_UTF8;
  if (!this.crcAndFileSizeKnown) generalPurposeBitFlag |= UNKNOWN_CRC32_AND_FILE_SIZES;

  var normalCompressedSize = this.compressedSize;
  var normalUncompressedSize = this.uncompressedSize;
  var normalRelativeOffsetOfLocalHeader = this.relativeOffsetOfLocalHeader;
  var versionNeededToExtract;
  var zeiefBuffer;
  if (this.useZip64Format()) {
    normalCompressedSize = 0xffffffff;
    normalUncompressedSize = 0xffffffff;
    normalRelativeOffsetOfLocalHeader = 0xffffffff;
    versionNeededToExtract = VERSION_NEEDED_TO_EXTRACT_ZIP64;

    // ZIP64 extended information extra field
    zeiefBuffer = bufferAlloc(ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE);
    // 0x0001                  2 bytes    Tag for this "extra" block type
    zeiefBuffer.writeUInt16LE(0x0001, 0);
    // Size                    2 bytes    Size of this "extra" block
    zeiefBuffer.writeUInt16LE(ZIP64_EXTENDED_INFORMATION_EXTRA_FIELD_SIZE - 4, 2);
    // Original Size           8 bytes    Original uncompressed file size
    writeUInt64LE(zeiefBuffer, this.uncompressedSize, 4);
    // Compressed Size         8 bytes    Size of compressed data
    writeUInt64LE(zeiefBuffer, this.compressedSize, 12);
    // Relative Header Offset  8 bytes    Offset of local header record
    writeUInt64LE(zeiefBuffer, this.relativeOffsetOfLocalHeader, 20);
    // Disk Start Number       4 bytes    Number of the disk on which this file starts
    // (omit)
  } else {
    versionNeededToExtract = VERSION_NEEDED_TO_EXTRACT_UTF8;
    zeiefBuffer = EMPTY_BUFFER;
  }

  // central file header signature   4 bytes  (0x02014b50)
  fixedSizeStuff.writeUInt32LE(0x02014b50, 0);
  // version made by                 2 bytes
  fixedSizeStuff.writeUInt16LE(VERSION_MADE_BY, 4);
  // version needed to extract       2 bytes
  fixedSizeStuff.writeUInt16LE(versionNeededToExtract, 6);
  // general purpose bit flag        2 bytes
  fixedSizeStuff.writeUInt16LE(generalPurposeBitFlag, 8);
  // compression method              2 bytes
  fixedSizeStuff.writeUInt16LE(this.getCompressionMethod(), 10);
  // last mod file time              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileTime, 12);
  // last mod file date              2 bytes
  fixedSizeStuff.writeUInt16LE(this.lastModFileDate, 14);
  // crc-32                          4 bytes
  fixedSizeStuff.writeUInt32LE(this.crc32, 16);
  // compressed size                 4 bytes
  fixedSizeStuff.writeUInt32LE(normalCompressedSize, 20);
  // uncompressed size               4 bytes
  fixedSizeStuff.writeUInt32LE(normalUncompressedSize, 24);
  // file name length                2 bytes
  fixedSizeStuff.writeUInt16LE(this.utf8FileName.length, 28);
  // extra field length              2 bytes
  fixedSizeStuff.writeUInt16LE(zeiefBuffer.length, 30);
  // file comment length             2 bytes
  fixedSizeStuff.writeUInt16LE(this.fileComment.length, 32);
  // disk number start               2 bytes
  fixedSizeStuff.writeUInt16LE(0, 34);
  // internal file attributes        2 bytes
  fixedSizeStuff.writeUInt16LE(0, 36);
  // external file attributes        4 bytes
  fixedSizeStuff.writeUInt32LE(this.externalFileAttributes, 38);
  // relative offset of local header 4 bytes
  fixedSizeStuff.writeUInt32LE(normalRelativeOffsetOfLocalHeader, 42);

  return Buffer.concat([
    fixedSizeStuff,
    // file name (variable size)
    this.utf8FileName,
    // extra field (variable size)
    zeiefBuffer,
    // file comment (variable size)
    this.fileComment,
  ]);
};
Entry.prototype.getCompressionMethod = function() {
  var NO_COMPRESSION = 0;
  var DEFLATE_COMPRESSION = 8;
  return this.compress ? DEFLATE_COMPRESSION : NO_COMPRESSION;
};

function dateToDosDateTime(jsDate) {
  var date = 0;
  date |= jsDate.getDate() & 0x1f; // 1-31
  date |= ((jsDate.getMonth() + 1) & 0xf) << 5; // 0-11, 1-12
  date |= ((jsDate.getFullYear() - 1980) & 0x7f) << 9; // 0-128, 1980-2108

  var time = 0;
  time |= Math.floor(jsDate.getSeconds() / 2); // 0-59, 0-29 (lose odd numbers)
  time |= (jsDate.getMinutes() & 0x3f) << 5; // 0-59
  time |= (jsDate.getHours() & 0x1f) << 11; // 0-23

  return {date: date, time: time};
}

function writeUInt64LE(buffer, n, offset) {
  // can't use bitshift here, because JavaScript only allows bitshifting on 32-bit integers.
  var high = Math.floor(n / 0x100000000);
  var low = n % 0x100000000;
  buffer.writeUInt32LE(low, offset);
  buffer.writeUInt32LE(high, offset + 4);
}

function defaultCallback(err) {
  if (err) throw err;
}

util.inherits(ByteCounter, Transform);
function ByteCounter(options) {
  Transform.call(this, options);
  this.byteCount = 0;
}
ByteCounter.prototype._transform = function(chunk, encoding, cb) {
  this.byteCount += chunk.length;
  cb(null, chunk);
};

util.inherits(Crc32Watcher, Transform);
function Crc32Watcher(options) {
  Transform.call(this, options);
  this.crc32 = 0;
}
Crc32Watcher.prototype._transform = function(chunk, encoding, cb) {
  this.crc32 = crc32.unsigned(chunk, this.crc32);
  cb(null, chunk);
};

var cp437 = '\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';
if (cp437.length !== 256) throw new Error("assertion failure");
var reverseCp437 = null;

function encodeCp437(string) {
  if (/^[\x20-\x7e]*$/.test(string)) {
    // CP437, ASCII, and UTF-8 overlap in this range.
    return bufferFrom(string, "utf-8");
  }

  // This is the slow path.
  if (reverseCp437 == null) {
    // cache this once
    reverseCp437 = {};
    for (var i = 0; i < cp437.length; i++) {
      reverseCp437[cp437[i]] = i;
    }
  }

  var result = bufferAlloc(string.length);
  for (var i = 0; i < string.length; i++) {
    var b = reverseCp437[string[i]];
    if (b == null) throw new Error("character not encodable in CP437: " + JSON.stringify(string[i]));
    result[i] = b;
  }

  return result;
}

function bufferAlloc(size) {
  bufferAlloc = modern;
  try {
    return bufferAlloc(size);
  } catch (e) {
    bufferAlloc = legacy;
    return bufferAlloc(size);
  }
  function modern(size) {
    return Buffer.allocUnsafe(size);
  }
  function legacy(size) {
    return new Buffer(size);
  }
}
function bufferFrom(something, encoding) {
  bufferFrom = modern;
  try {
    return bufferFrom(something, encoding);
  } catch (e) {
    bufferFrom = legacy;
    return bufferFrom(something, encoding);
  }
  function modern(something, encoding) {
    return Buffer.from(something, encoding);
  }
  function legacy(something, encoding) {
    return new Buffer(something, encoding);
  }
}
function bufferIncludes(buffer, content) {
  bufferIncludes = modern;
  try {
    return bufferIncludes(buffer, content);
  } catch (e) {
    bufferIncludes = legacy;
    return bufferIncludes(buffer, content);
  }
  function modern(buffer, content) {
    return buffer.includes(content);
  }
  function legacy(buffer, content) {
    for (var i = 0; i <= buffer.length - content.length; i++) {
      for (var j = 0;; j++) {
        if (j === content.length) return true;
        if (buffer[i + j] !== content[j]) break;
      }
    }
    return false;
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(103).setImmediate, __webpack_require__(0).Buffer))

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var Buffer = __webpack_require__(0).Buffer;
var Transform = __webpack_require__(35).Transform;
var binding = __webpack_require__(445);
var util = __webpack_require__(122);
var assert = __webpack_require__(86).ok;
var kMaxLength = __webpack_require__(0).kMaxLength;
var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = 16 * 1024;

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
var bkeys = Object.keys(binding);
for (var bk = 0; bk < bkeys.length; bk++) {
  var bkey = bkeys[bk];
  if (bkey.match(/^Z/)) {
    Object.defineProperty(exports, bkey, {
      enumerable: true, value: binding[bkey], writable: false
    });
  }
}

// translation table for return codes.
var codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

var ckeys = Object.keys(codes);
for (var ck = 0; ck < ckeys.length; ck++) {
  var ckey = ckeys[ck];
  codes[codes[ckey]] = ckey;
}

Object.defineProperty(exports, 'codes', {
  enumerable: true, value: Object.freeze(codes), writable: false
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function (o) {
  return new Deflate(o);
};

exports.createInflate = function (o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function (o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function (o) {
  return new InflateRaw(o);
};

exports.createGzip = function (o) {
  return new Gzip(o);
};

exports.createGunzip = function (o) {
  return new Gunzip(o);
};

exports.createUnzip = function (o) {
  return new Unzip(o);
};

// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function (buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function (buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function (buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function (buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function (buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function (buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf;
    var err = null;

    if (nread >= kMaxLength) {
      err = new RangeError(kRangeErrorMessage);
    } else {
      buf = Buffer.concat(buffers, nread);
    }

    buffers = [];
    engine.close();
    callback(err, buf);
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') buffer = Buffer.from(buffer);

  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

  var flushFlag = engine._finishFlushFlag;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}

// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}

// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}

// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}

function isValidFlushFlag(flag) {
  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
}

// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  var _this = this;

  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush && !isValidFlushFlag(opts.flush)) {
    throw new Error('Invalid flush flag: ' + opts.flush);
  }
  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
    throw new Error('Invalid flush flag: ' + opts.finishFlush);
  }

  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._handle = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._handle.onerror = function (message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    _close(self);
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

  this._buffer = Buffer.allocUnsafe(this._chunkSize);
  this._offset = 0;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);

  Object.defineProperty(this, '_closed', {
    get: function () {
      return !_this._handle;
    },
    configurable: true,
    enumerable: true
  });
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function (level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function () {
      assert(self._handle, 'zlib binding closed');
      self._handle.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function () {
  assert(this._handle, 'zlib binding closed');
  return this._handle.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function (callback) {
  this._transform(Buffer.alloc(0), '', callback);
};

Zlib.prototype.flush = function (kind, callback) {
  var _this2 = this;

  var ws = this._writableState;

  if (typeof kind === 'function' || kind === undefined && !callback) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback) process.nextTick(callback);
  } else if (ws.ending) {
    if (callback) this.once('end', callback);
  } else if (ws.needDrain) {
    if (callback) {
      this.once('drain', function () {
        return _this2.flush(kind, callback);
      });
    }
  } else {
    this._flushFlag = kind;
    this.write(Buffer.alloc(0), '', callback);
  }
};

Zlib.prototype.close = function (callback) {
  _close(this, callback);
  process.nextTick(emitCloseNT, this);
};

function _close(engine, callback) {
  if (callback) process.nextTick(callback);

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) return;

  engine._handle.close();
  engine._handle = null;
}

function emitCloseNT(self) {
  self.emit('close');
}

Zlib.prototype._transform = function (chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

  if (!this._handle) return cb(new Error('zlib binding closed'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
  // (or whatever flag was provided using opts.finishFlush).
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last) flushFlag = this._finishFlushFlag;else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function (er) {
      error = er;
    });

    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag, chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError(kRangeErrorMessage);
    }

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  }

  assert(this._handle, 'zlib binding closed');
  var req = this._handle.write(flushFlag, chunk, // in
  inOff, // in_off
  availInBefore, // in_len
  this._buffer, // out
  this._offset, //out_off
  availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    // When the callback is used in an async write, the callback's
    // context is the `req` object that was created. The req object
    // is === this._handle, and that's why it's important to null
    // out the values after they are done being used. `this._handle`
    // can stay in memory longer than the callback and buffer are needed.
    if (this) {
      this.buffer = null;
      this.callback = null;
    }

    if (self._hadError) return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += availInBefore - availInAfter;
      availInBefore = availInAfter;

      if (!async) return true;

      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async) return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, process) {
/* eslint camelcase: "off" */

var assert = __webpack_require__(86);

var Zstream = __webpack_require__(449);
var zlib_deflate = __webpack_require__(450);
var zlib_inflate = __webpack_require__(453);
var constants = __webpack_require__(456);

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

var GZIP_HEADER_ID1 = 0x1f;
var GZIP_HEADER_ID2 = 0x8b;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
    throw new TypeError('Bad argument');
  }

  this.dictionary = null;
  this.err = 0;
  this.flush = 0;
  this.init_done = false;
  this.level = 0;
  this.memLevel = 0;
  this.mode = mode;
  this.strategy = 0;
  this.windowBits = 0;
  this.write_in_progress = false;
  this.pending_close = false;
  this.gzip_id_bytes_read = 0;
}

Zlib.prototype.close = function () {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }

  this.pending_close = false;

  assert(this.init_done, 'close before init');
  assert(this.mode <= exports.UNZIP);

  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
    zlib_inflate.inflateEnd(this.strm);
  }

  this.mode = exports.NONE;

  this.dictionary = null;
};

Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
  assert.equal(arguments.length, 8);

  assert(this.init_done, 'write before init');
  assert(this.mode !== exports.NONE, 'already finalized');
  assert.equal(false, this.write_in_progress, 'write already in progress');
  assert.equal(false, this.pending_close, 'close is pending');

  this.write_in_progress = true;

  assert.equal(false, flush === undefined, 'must provide flush value');

  this.write_in_progress = true;

  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
    throw new Error('Invalid flush value');
  }

  if (input == null) {
    input = Buffer.alloc(0);
    in_len = 0;
    in_off = 0;
  }

  this.strm.avail_in = in_len;
  this.strm.input = input;
  this.strm.next_in = in_off;
  this.strm.avail_out = out_len;
  this.strm.output = out;
  this.strm.next_out = out_off;
  this.flush = flush;

  if (!async) {
    // sync version
    this._process();

    if (this._checkError()) {
      return this._afterSync();
    }
    return;
  }

  // async version
  var self = this;
  process.nextTick(function () {
    self._process();
    self._after();
  });

  return this;
};

Zlib.prototype._afterSync = function () {
  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  return [avail_in, avail_out];
};

Zlib.prototype._process = function () {
  var next_expected_header_byte = null;

  // If the avail_out is left at 0, then it means that it ran out
  // of room.  If there was avail_out left over, then it means
  // that all of the input was consumed.
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflate(this.strm, this.flush);
      break;
    case exports.UNZIP:
      if (this.strm.avail_in > 0) {
        next_expected_header_byte = this.strm.next_in;
      }

      switch (this.gzip_id_bytes_read) {
        case 0:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
            this.gzip_id_bytes_read = 1;
            next_expected_header_byte++;

            if (this.strm.avail_in === 1) {
              // The only available byte was already read.
              break;
            }
          } else {
            this.mode = exports.INFLATE;
            break;
          }

        // fallthrough
        case 1:
          if (next_expected_header_byte === null) {
            break;
          }

          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
            this.gzip_id_bytes_read = 2;
            this.mode = exports.GUNZIP;
          } else {
            // There is no actual difference between INFLATE and INFLATERAW
            // (after initialization).
            this.mode = exports.INFLATE;
          }

          break;
        default:
          throw new Error('invalid number of gzip magic number bytes read');
      }

    // fallthrough
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      this.err = zlib_inflate.inflate(this.strm, this.flush

      // If data was encoded with dictionary
      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
        // Load it
        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
        if (this.err === exports.Z_OK) {
          // And try to decode again
          this.err = zlib_inflate.inflate(this.strm, this.flush);
        } else if (this.err === exports.Z_DATA_ERROR) {
          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
          // Make it possible for After() to tell a bad dictionary from bad
          // input.
          this.err = exports.Z_NEED_DICT;
        }
      }
      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
        // Bytes remain in input buffer. Perhaps this is another compressed
        // member in the same archive, or just trailing garbage.
        // Trailing zero bytes are okay, though, since they are frequently
        // used for padding.

        this.reset();
        this.err = zlib_inflate.inflate(this.strm, this.flush);
      }
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }
};

Zlib.prototype._checkError = function () {
  // Acceptable error states depend on the type of zlib stream.
  switch (this.err) {
    case exports.Z_OK:
    case exports.Z_BUF_ERROR:
      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
        this._error('unexpected end of file');
        return false;
      }
      break;
    case exports.Z_STREAM_END:
      // normal statuses, not fatal
      break;
    case exports.Z_NEED_DICT:
      if (this.dictionary == null) {
        this._error('Missing dictionary');
      } else {
        this._error('Bad dictionary');
      }
      return false;
    default:
      // something else.
      this._error('Zlib error');
      return false;
  }

  return true;
};

Zlib.prototype._after = function () {
  if (!this._checkError()) {
    return;
  }

  var avail_out = this.strm.avail_out;
  var avail_in = this.strm.avail_in;

  this.write_in_progress = false;

  // call the write() cb
  this.callback(avail_in, avail_out);

  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype._error = function (message) {
  if (this.strm.msg) {
    message = this.strm.msg;
  }
  this.onerror(message, this.err

  // no hope of rescue.
  );this.write_in_progress = false;
  if (this.pending_close) {
    this.close();
  }
};

Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');

  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
  assert(level >= -1 && level <= 9, 'invalid compression level');

  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');

  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

  this._init(level, windowBits, memLevel, strategy, dictionary);
  this._setDictionary();
};

Zlib.prototype.params = function () {
  throw new Error('deflateParams Not supported');
};

Zlib.prototype.reset = function () {
  this._reset();
  this._setDictionary();
};

Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
  this.level = level;
  this.windowBits = windowBits;
  this.memLevel = memLevel;
  this.strategy = strategy;

  this.flush = exports.Z_NO_FLUSH;

  this.err = exports.Z_OK;

  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
    this.windowBits += 16;
  }

  if (this.mode === exports.UNZIP) {
    this.windowBits += 32;
  }

  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
    this.windowBits = -1 * this.windowBits;
  }

  this.strm = new Zstream();

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
      break;
    default:
      throw new Error('Unknown mode ' + this.mode);
  }

  if (this.err !== exports.Z_OK) {
    this._error('Init error');
  }

  this.dictionary = dictionary;

  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype._setDictionary = function () {
  if (this.dictionary == null) {
    return;
  }

  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to set dictionary');
  }
};

Zlib.prototype._reset = function () {
  this.err = exports.Z_OK;

  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
    case exports.GZIP:
      this.err = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
    case exports.GUNZIP:
      this.err = zlib_inflate.inflateReset(this.strm);
      break;
    default:
      break;
  }

  if (this.err !== exports.Z_OK) {
    this._error('Failed to reset stream');
  }
};

exports.Zlib = Zlib;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer, __webpack_require__(5)))

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 447 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 448 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(87);
var trees   = __webpack_require__(451);
var adler32 = __webpack_require__(225);
var crc32   = __webpack_require__(226);
var msg     = __webpack_require__(452);

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(87);

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(87);
var adler32       = __webpack_require__(225);
var crc32         = __webpack_require__(226);
var inflate_fast  = __webpack_require__(454);
var inflate_table = __webpack_require__(455);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(87);

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(0).Buffer;

var CRC_TABLE = [
  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
  0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
  0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
  0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
  0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
  0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
  0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
  0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
  0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
  0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
  0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
  0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
  0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
  0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
  0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
  0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
  0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
  0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
  0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
  0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
  0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
  0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
  0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
  0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
  0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
  0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
  0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
  0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
  0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
  0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
  0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
  0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
  0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
  0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
  0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
  0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
  0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
  0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
  0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
  0x2d02ef8d
];

if (typeof Int32Array !== 'undefined') {
  CRC_TABLE = new Int32Array(CRC_TABLE);
}

function ensureBuffer(input) {
  if (Buffer.isBuffer(input)) {
    return input;
  }

  var hasNewBufferAPI =
      typeof Buffer.alloc === "function" &&
      typeof Buffer.from === "function";

  if (typeof input === "number") {
    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);
  }
  else if (typeof input === "string") {
    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);
  }
  else {
    throw new Error("input must be buffer, number, or string, received " +
                    typeof input);
  }
}

function bufferizeInt(num) {
  var tmp = ensureBuffer(4);
  tmp.writeInt32BE(num, 0);
  return tmp;
}

function _crc32(buf, previous) {
  buf = ensureBuffer(buf);
  if (Buffer.isBuffer(previous)) {
    previous = previous.readUInt32BE(0);
  }
  var crc = ~~previous ^ -1;
  for (var n = 0; n < buf.length; n++) {
    crc = CRC_TABLE[(crc ^ buf[n]) & 0xff] ^ (crc >>> 8);
  }
  return (crc ^ -1);
}

function crc32() {
  return bufferizeInt(_crc32.apply(null, arguments));
}
crc32.signed = function () {
  return _crc32.apply(null, arguments);
};
crc32.unsigned = function () {
  return _crc32.apply(null, arguments) >>> 0;
};

module.exports = crc32;


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ExtentionContext_1 = __webpack_require__(55);
function getExtensionUri(relativePath, extensionContext) {
    const vscodeModule = __webpack_require__(1);
    extensionContext = extensionContext || ExtentionContext_1.getExtensionContext();
    return vscodeModule.Uri.joinPath(extensionContext.extensionUri, relativePath);
}
exports.getExtensionUri = getExtensionUri;
//# sourceMappingURL=getExtensionUri.js.map

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const url = __webpack_require__(227);
const Mixins_1 = __webpack_require__(123);
const dataScrapingManager_1 = __webpack_require__(124);
/**
 * Local server url pattern matching following urls:
 * http://localhost:3000/ - commonly used across multiple frameworks
 * https://127.0.0.1:5001/ - ASP.NET
 * http://:8080 - Beego Golang
 * http://0.0.0.0:4000 - Elixir Phoenix
 */
const LOCAL_URL_REGEX = /\b\w{2,20}:\/\/(?:localhost|127\.0\.0\.1|0\.0\.0\.0|:\d{2,5})[\w\-\.\~:\/\?\#[\]\@!\$&\(\)\*\+\,\;\=]*/gim;
/**
 * Observes terminal output data while trying to match a localhost url
 * pointing to a local server port a host user might want to share.
 */
class UrlScraper extends Mixins_1.Inittable(Mixins_1.Disposable(Object)) {
    constructor() {
        super(...arguments);
        // Defer import of 'vscode' package.
        this.eventEmitter = new (__webpack_require__(1).EventEmitter)();
    }
    get onDidMatchLocalUrl() {
        return this.eventEmitter.event;
    }
    processData(data) {
        // strip ANSI terminal codes
        data = data.replace(UrlScraper.terminalCodesRegex, '');
        const urlMatches = data.match(LOCAL_URL_REGEX) || [];
        urlMatches.forEach((match) => {
            // check if valid url
            const serverUrl = url.parse(match);
            if (serverUrl) {
                // check if the port is a valid integer value
                const port = parseFloat(serverUrl.port);
                if (!isNaN(port) && Number.isInteger(port) && port > 0 && port <= 65535) {
                    // normalize the host name
                    serverUrl.hostname = 'localhost';
                    serverUrl.host = `${serverUrl.hostname}:${port}`;
                    this.eventEmitter.fire({ port, serverUrl });
                }
            }
        });
    }
}
UrlScraper.terminalCodesRegex = /(?:\u001B|\u009B)[\[\]()#;?]*(?:(?:(?:[a-zA-Z0-9]*(?:;[a-zA-Z0-9]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[0-9A-PR-TZcf-ntqry=><~]))/g;
/**
 * Register a new url scrapper
 * @param callback function to call back when a url is detected
 */
function launchUrlScraper(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataScraper = yield dataScrapingManager_1.DataScrapingManager.Instance.registerDataScraper('local-url-scraper', () => {
            const urlScraper = new UrlScraper();
            urlScraper.onDidMatchLocalUrl((event) => {
                const { port, serverUrl } = event;
                const serverModel = {
                    port,
                    browseUrl: url.format(serverUrl),
                    displayName: serverUrl.host,
                };
                callback(serverModel);
            });
            return urlScraper;
        });
        return dataScraper;
    });
}
exports.launchUrlScraper = launchUrlScraper;
//# sourceMappingURL=urlScraper.js.map

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(202)(module), __webpack_require__(15)))

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(463);
exports.encode = exports.stringify = __webpack_require__(464);


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * @author Microsoft
 */

Object.defineProperty(exports, "__esModule", { value: true });
const semver = __webpack_require__(466);
function createTerminalRenderer(name) {
    // Defer import of 'vscode' package.
    const vscodeModule = __webpack_require__(1);
    if (semver.gte(semver.coerce(vscodeModule.version), '1.37.0')) {
        return new TerminalVirtualProcessAdaptor(name);
    }
    if (vscodeModule.window.createTerminalRenderer) {
        return vscodeModule.window.createTerminalRenderer(name);
    }
    return null;
}
exports.createTerminalRenderer = createTerminalRenderer;
class TerminalVirtualProcessAdaptor {
    constructor(name) {
        this.name = name;
        // Defer import of 'vscode' package.
        const vscodeModule = __webpack_require__(1);
        this.acceptInputEmitter = new vscodeModule.EventEmitter();
        this.changeMaximumDimensionsEmitter = new vscodeModule.EventEmitter();
        this.writeEmitter = new vscodeModule.EventEmitter();
        this.overrideDimensionsEmitter = new vscodeModule.EventEmitter();
        this.terminal = vscodeModule.window.createTerminal({
            name,
            pty: {
                onDidWrite: this.writeEmitter.event,
                onDidOverrideDimensions: this.overrideDimensionsEmitter.event,
                handleInput: (data) => this.acceptInputEmitter.fire(data),
                setDimensions: (dimensions) => this.setPtyDimensions(dimensions),
                open: (initialDimensions) => this.openPty(initialDimensions),
                close: () => { },
            },
        });
    }
    //#region vscode.TerminalRenderer
    get dimensions() {
        return this.terminalDimensions;
    }
    set dimensions(value) {
        if (!value) {
            return;
        }
        if (!this.terminalDimensions ||
            this.terminalDimensions.columns !== value.columns ||
            this.terminalDimensions.rows !== value.rows) {
            this.terminalDimensions = value;
            if (this.isStarted) {
                this.isOverrideDimensionsFired = true;
                this.overrideDimensionsEmitter.fire(value);
            }
        }
    }
    get maximumDimensions() {
        return this.terminalMaximumDimensions;
    }
    write(text) {
        if (this.isStarted) {
            this.writeEmitter.fire(text);
        }
        else {
            this.writeBuffer = (this.writeBuffer || '') + text;
        }
    }
    get onDidAcceptInput() {
        return this.acceptInputEmitter.event;
    }
    get onDidChangeMaximumDimensions() {
        return this.changeMaximumDimensionsEmitter.event;
    }
    //#endregion
    setPtyDimensions(dimensions) {
        if (!dimensions) {
            return;
        }
        if (this.terminalDimensions) {
            this.terminalDimensions = {
                columns: Math.min(this.terminalDimensions.columns, dimensions.columns),
                rows: Math.min(this.terminalDimensions.rows, dimensions.rows),
            };
        }
        else {
            this.terminalDimensions = dimensions;
        }
        this.terminalMaximumDimensions = dimensions;
        this.changeMaximumDimensionsEmitter.fire(dimensions);
        if (this.terminalDimensions.columns !== dimensions.columns ||
            this.terminalDimensions.rows !== dimensions.rows) {
            if (!this.isOverrideDimensionsFired) {
                this.isOverrideDimensionsFired = true;
                this.overrideDimensionsEmitter.fire(this.terminalDimensions);
            }
        }
    }
    openPty(initialDimensions) {
        this.isStarted = true;
        this.setPtyDimensions(initialDimensions);
        if (this.writeBuffer) {
            this.writeEmitter.fire(this.writeBuffer);
            this.writeBuffer = undefined;
        }
    }
}
//# sourceMappingURL=terminalRenderer.js.map

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer

var debug
/* istanbul ignore next */
if (typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0)
    args.unshift('SEMVER')
    console.log.apply(console, args)
  }
} else {
  debug = function () {}
}

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0'

var MAX_LENGTH = 256
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16

// The actual regexps go on exports.re
var re = exports.re = []
var src = exports.src = []
var R = 0

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*'
var NUMERICIDENTIFIERLOOSE = R++
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'

// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')'

var MAINVERSIONLOOSE = R++
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')'

var PRERELEASEIDENTIFIERLOOSE = R++
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')'

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))'

var PRERELEASELOOSE = R++
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?'

src[FULL] = '^' + FULLPLAIN + '$'

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?'

var LOOSE = R++
src[LOOSE] = '^' + LOOSEPLAIN + '$'

var GTLT = R++
src[GTLT] = '((?:<|>)?=?)'

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*'
var XRANGEIDENTIFIER = R++
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*'

var XRANGEPLAIN = R++
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?'

var XRANGEPLAINLOOSE = R++
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?'

var XRANGE = R++
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$'
var XRANGELOOSE = R++
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])'

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++
src[LONETILDE] = '(?:~>?)'

var TILDETRIM = R++
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+'
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')
var tildeTrimReplace = '$1~'

var TILDE = R++
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'
var TILDELOOSE = R++
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++
src[LONECARET] = '(?:\\^)'

var CARETTRIM = R++
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+'
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')
var caretTrimReplace = '$1^'

var CARET = R++
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'
var CARETLOOSE = R++
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$'
var COMPARATOR = R++
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')
var comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$'

var HYPHENRANGELOOSE = R++
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$'

// Star ranges basically just allow anything at all.
var STAR = R++
src[STAR] = '(<|>)?=?\\s*\\*'

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i])
  if (!re[i]) {
    re[i] = new RegExp(src[i])
  }
}

exports.parse = parse
function parse (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  var r = options.loose ? re[LOOSE] : re[FULL]
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

exports.valid = valid
function valid (version, options) {
  var v = parse(version, options)
  return v ? v.version : null
}

exports.clean = clean
function clean (version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}

exports.SemVer = SemVer

function SemVer (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }
  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version
    } else {
      version = version.version
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version)
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options)
  }

  debug('SemVer', version, options)
  this.options = options
  this.loose = !!options.loose

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])

  if (!m) {
    throw new TypeError('Invalid Version: ' + version)
  }

  this.raw = version

  // these are actually numbers
  this.major = +m[1]
  this.minor = +m[2]
  this.patch = +m[3]

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version')
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version')
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version')
  }

  // numberify any prerelease numeric ids
  if (!m[4]) {
    this.prerelease = []
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id
        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num
        }
      }
      return id
    })
  }

  this.build = m[5] ? m[5].split('.') : []
  this.format()
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch
  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.')
  }
  return this.version
}

SemVer.prototype.toString = function () {
  return this.version
}

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other)
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return this.compareMain(other) || this.comparePre(other)
}

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch)
}

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length) {
    return -1
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0
  }

  var i = 0
  do {
    var a = this.prerelease[i]
    var b = other.prerelease[i]
    debug('prerelease compare', i, a, b)
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
}

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor = 0
      this.major++
      this.inc('pre', identifier)
      break
    case 'preminor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor++
      this.inc('pre', identifier)
      break
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0
      this.inc('patch', identifier)
      this.inc('pre', identifier)
      break
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier)
      }
      this.inc('pre', identifier)
      break

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0) {
        this.major++
      }
      this.minor = 0
      this.patch = 0
      this.prerelease = []
      break
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++
      }
      this.patch = 0
      this.prerelease = []
      break
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++
      }
      this.prerelease = []
      break
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0]
      } else {
        var i = this.prerelease.length
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++
            i = -2
          }
        }
        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0)
        }
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0]
          }
        } else {
          this.prerelease = [identifier, 0]
        }
      }
      break

    default:
      throw new Error('invalid increment argument: ' + release)
  }
  this.format()
  this.raw = this.version
  return this
}

exports.inc = inc
function inc (version, release, loose, identifier) {
  if (typeof (loose) === 'string') {
    identifier = loose
    loose = undefined
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version
  } catch (er) {
    return null
  }
}

exports.diff = diff
function diff (version1, version2) {
  if (eq(version1, version2)) {
    return null
  } else {
    var v1 = parse(version1)
    var v2 = parse(version2)
    var prefix = ''
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre'
      var defaultResult = 'prerelease'
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers

var numeric = /^[0-9]+$/
function compareIdentifiers (a, b) {
  var anum = numeric.test(a)
  var bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

exports.rcompareIdentifiers = rcompareIdentifiers
function rcompareIdentifiers (a, b) {
  return compareIdentifiers(b, a)
}

exports.major = major
function major (a, loose) {
  return new SemVer(a, loose).major
}

exports.minor = minor
function minor (a, loose) {
  return new SemVer(a, loose).minor
}

exports.patch = patch
function patch (a, loose) {
  return new SemVer(a, loose).patch
}

exports.compare = compare
function compare (a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose))
}

exports.compareLoose = compareLoose
function compareLoose (a, b) {
  return compare(a, b, true)
}

exports.rcompare = rcompare
function rcompare (a, b, loose) {
  return compare(b, a, loose)
}

exports.sort = sort
function sort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compare(a, b, loose)
  })
}

exports.rsort = rsort
function rsort (list, loose) {
  return list.sort(function (a, b) {
    return exports.rcompare(a, b, loose)
  })
}

exports.gt = gt
function gt (a, b, loose) {
  return compare(a, b, loose) > 0
}

exports.lt = lt
function lt (a, b, loose) {
  return compare(a, b, loose) < 0
}

exports.eq = eq
function eq (a, b, loose) {
  return compare(a, b, loose) === 0
}

exports.neq = neq
function neq (a, b, loose) {
  return compare(a, b, loose) !== 0
}

exports.gte = gte
function gte (a, b, loose) {
  return compare(a, b, loose) >= 0
}

exports.lte = lte
function lte (a, b, loose) {
  return compare(a, b, loose) <= 0
}

exports.cmp = cmp
function cmp (a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError('Invalid operator: ' + op)
  }
}

exports.Comparator = Comparator
function Comparator (comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp
    } else {
      comp = comp.value
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options)
  }

  debug('comparator', comp, options)
  this.options = options
  this.loose = !!options.loose
  this.parse(comp)

  if (this.semver === ANY) {
    this.value = ''
  } else {
    this.value = this.operator + this.semver.version
  }

  debug('comp', this)
}

var ANY = {}
Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var m = comp.match(r)

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp)
  }

  this.operator = m[1]
  if (this.operator === '=') {
    this.operator = ''
  }

  // if it literally is just '>' or '' then allow anything.
  if (!m[2]) {
    this.semver = ANY
  } else {
    this.semver = new SemVer(m[2], this.options.loose)
  }
}

Comparator.prototype.toString = function () {
  return this.value
}

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose)

  if (this.semver === ANY) {
    return true
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  return cmp(version, this.operator, this.semver, this.options)
}

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required')
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  var rangeTmp

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options)
    return satisfies(this.value, rangeTmp, options)
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options)
    return satisfies(comp.semver, rangeTmp, options)
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>')
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<')
  var sameSemVer = this.semver.version === comp.semver.version
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=')
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'))
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'))

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
}

exports.Range = Range
function Range (range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range
    } else {
      return new Range(range.raw, options)
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options)
  }

  if (!(this instanceof Range)) {
    return new Range(range, options)
  }

  this.options = options
  this.loose = !!options.loose
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim())
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length
  })

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range)
  }

  this.format()
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim()
  }).join('||').trim()
  return this.range
}

Range.prototype.toString = function () {
  return this.range
}

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose
  range = range.trim()
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]
  range = range.replace(hr, hyphenReplace)
  debug('hyphen replace', range)
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)
  debug('comparator trim', range, re[COMPARATORTRIM])

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace)

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace)

  // normalize spaces
  range = range.split(/\s+/).join(' ')

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options)
  }, this).join(' ').split(/\s+/)
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe)
    })
  }
  set = set.map(function (comp) {
    return new Comparator(comp, this.options)
  }, this)

  return set
}

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required')
  }

  return this.set.some(function (thisComparators) {
    return thisComparators.every(function (thisComparator) {
      return range.set.some(function (rangeComparators) {
        return rangeComparators.every(function (rangeComparator) {
          return thisComparator.intersects(rangeComparator, options)
        })
      })
    })
  })
}

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators
function toComparators (range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value
    }).join(' ').trim().split(' ')
  })
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator (comp, options) {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

function isX (id) {
  return !id || id.toLowerCase() === 'x' || id === '*'
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options)
  }).join(' ')
}

function replaceTilde (comp, options) {
  var r = options.loose ? re[TILDELOOSE] : re[TILDE]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
            ' <' + M + '.' + (+m + 1) + '.0'
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0'
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options)
  }).join(' ')
}

function replaceCaret (comp, options) {
  debug('caret', comp, options)
  var r = options.loose ? re[CARETLOOSE] : re[CARET]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
              ' <' + (+M + 1) + '.0.0'
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0'
      }
    }

    debug('caret return', ret)
    return ret
  })
}

function replaceXRanges (comp, options) {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options)
  }).join(' ')
}

function replaceXRange (comp, options) {
  comp = comp.trim()
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    var xM = isX(M)
    var xm = xM || isX(m)
    var xp = xm || isX(p)
    var anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      ret = gtlt + M + '.' + m + '.' + p
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars (comp, options) {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '')
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0'
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0'
  } else {
    from = '>=' + from
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0'
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0'
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
  } else {
    to = '<=' + to
  }

  return (from + ' ' + to).trim()
}

// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function (version) {
  if (!version) {
    return false
  }

  if (typeof version === 'string') {
    version = new SemVer(version, this.options)
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true
    }
  }
  return false
}

function testSet (set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}

exports.satisfies = satisfies
function satisfies (version, range, options) {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}

exports.maxSatisfying = maxSatisfying
function maxSatisfying (versions, range, options) {
  var max = null
  var maxSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}

exports.minSatisfying = minSatisfying
function minSatisfying (versions, range, options) {
  var min = null
  var minSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}

exports.minVersion = minVersion
function minVersion (range, loose) {
  range = new Range(range, loose)

  var minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error('Unexpected operation: ' + comparator.operator)
      }
    })
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}

exports.validRange = validRange
function validRange (range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr
function ltr (version, range, options) {
  return outside(version, range, '<', options)
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr
function gtr (version, range, options) {
  return outside(version, range, '>', options)
}

exports.outside = outside
function outside (version, range, hilo, options) {
  version = new SemVer(version, options)
  range = new Range(range, options)

  var gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    var high = null
    var low = null

    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

exports.prerelease = prerelease
function prerelease (version, options) {
  var parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}

exports.intersects = intersects
function intersects (r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce
function coerce (version) {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  var match = version.match(re[COERCE])

  if (match == null) {
    return null
  }

  return parse(match[1] +
    '.' + (match[2] || '0') +
    '.' + (match[3] || '0'))
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const fileAccess_1 = __webpack_require__(67);
exports.fileAccessInstance = fileAccess_1.fileAccess;
//# sourceMappingURL=fileAccessInstance.js.map

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __webpack_require__(6);
const VscodeActivityProvider_1 = __webpack_require__(228);
const VscodeSessionStatus_1 = __webpack_require__(241);
/**
 * This class will expose a mechanism to see if the liveshare extension
 * has had any activity work giving a timeout value.
 */
class VscodeSessionStatusProvider extends VscodeActivityProvider_1.VscodeActivityProvider {
    constructor(trace, activityTimeout) {
        super(trace.createChild('session-status-provider'));
        this.activityTimeout = activityTimeout;
        this.statusChangedEvent = new rpc.Emitter();
        this.currentActivityStatus = false;
        this.resetStatusTimerId = null;
        this.onActivity();
    }
    get sessionStatus() {
        return this.currentActivityStatus ? VscodeSessionStatus_1.VscodeSessionStatus.Active : VscodeSessionStatus_1.VscodeSessionStatus.Idle;
    }
    get onSessionStatusChanged() {
        return this.statusChangedEvent.event;
    }
    /**
     * Reset the activity status causing to report a 'true' activity status
     */
    reset() {
        if (!this.currentActivityStatus) {
            this.currentActivityStatus = true;
            this.statusChangedEvent.fire(VscodeSessionStatus_1.VscodeSessionStatus.Active);
        }
        if (this.resetStatusTimerId) {
            clearTimeout(this.resetStatusTimerId);
            this.resetStatusTimerId = null;
        }
        this.resetStatusTimerId = setTimeout(() => {
            this.currentActivityStatus = false;
            this.statusChangedEvent.fire(VscodeSessionStatus_1.VscodeSessionStatus.Idle);
        }, this.activityTimeout);
    }
    onActivity() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.statusChangedEvent) {
                this.reset();
            }
        });
    }
}
exports.VscodeSessionStatusProvider = VscodeSessionStatusProvider;
//# sourceMappingURL=VscodeSessionStatusProvider.js.map

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var withRetriesDecorator_1 = __webpack_require__(470);
exports.withRetriesDecorator = withRetriesDecorator_1.withRetriesDecorator;
var withHelperDecorator_1 = __webpack_require__(476);
exports.withHelperDecorator = withHelperDecorator_1.withHelperDecorator;
//# sourceMappingURL=index.js.map

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assertDefined_1 = __webpack_require__(89);
const withRetries_1 = __webpack_require__(230);
const assert_1 = __webpack_require__(37);
/**
 * Method decorator, analog of the `withRetries` util.
 */
// TODO legomushroom - test this
exports.withRetriesDecorator = (options = {}) => {
    return (target, propertyName, propertyDesciptor) => {
        const { value: method } = propertyDesciptor;
        assert_1.assert(method instanceof Function, 'This decorator works only on methods');
        assertDefined_1.assertDefined(method, `The method "${propertyName}" is not defined.`);
        // must be `function` to not loose `this` context
        const result = function (...args) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield withRetries_1.withRetries((retry) => __awaiter(this, void 0, void 0, function* () {
                    return yield method.call(this, ...args, retry);
                }), options);
            });
        };
        propertyDesciptor.value = result;
        return propertyDesciptor;
    };
};
//# sourceMappingURL=withRetriesDecorator.js.map

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class ByDesignError extends Error {
    constructor(message, code, isSuppressUserNotification) {
        super(message);
        this.code = code;
        this.isSuppressUserNotification = isSuppressUserNotification;
    }
}
exports.ByDesignError = ByDesignError;
//# sourceMappingURL=ByDesignError.js.map

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __webpack_require__(46);
/**
 * Aggregate error holds a list of errors.
 */
class AggregateError extends _1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'AggregateError';
        /**
         * The errors list as a private reference.
         */
        this.errorsReference = [];
    }
    /**
     * Get a copy aggregate error list.
     */
    get errors() {
        return [...this.errorsReference];
    }
    /**
     * Add errors to the aggregate error list.
     */
    addErrors(...errors) {
        this.errorsReference.push(...errors);
        return this;
    }
    /**
     * Creates new `AggregateError` copy from the current one and adds the errors.
     */
    cloneWithErrors(...errors) {
        const newError = new AggregateError();
        newError.addErrors(...this.errors, ...errors);
        return newError;
    }
    /**
     * Return the last error in the error sequence.s
     */
    get lastError() {
        const lastErrorIndex = this.errorsReference.length - 1;
        return this.errorsReference[lastErrorIndex];
    }
}
exports.AggregateError = AggregateError;
;
//# sourceMappingURL=AggregateError.js.map

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BaseError_1 = __webpack_require__(45);
/**
 * Error thrown when an some function or method is not implemented.
 */
class NotImplementedError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'NotImplementedError';
    }
}
exports.NotImplementedError = NotImplementedError;
;
//# sourceMappingURL=NotImplementedError.js.map

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BaseError_1 = __webpack_require__(45);
/**
 * Error inticates authentication failure.
 */
class AuthenticationError extends BaseError_1.BaseError {
    constructor() {
        super(...arguments);
        this.errorType = 'AuthenticationError';
    }
}
exports.AuthenticationError = AuthenticationError;
;
//# sourceMappingURL=AuthenticationError.js.map

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CancellationError_1 = __webpack_require__(125);
/**
 * Error thrown when some operation should be cancelled by a timeout.
 */
class TimeoutCancellationError extends CancellationError_1.CancellationError {
    constructor() {
        super(...arguments);
        this.errorType = 'TimeoutCancellationError';
    }
}
exports.TimeoutCancellationError = TimeoutCancellationError;
//# sourceMappingURL=TimeoutCancellationError.js.map

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assertDefined_1 = __webpack_require__(89);
const assert_1 = __webpack_require__(37);
/**
 * Factory function to construct a helper with
 * specific execution context.
 */
const contextMap = new Map();
const getHelper = (method, helper, options, context) => {
    /**
     * The overriden method should be associated with both
     * class instance and the class method, hence we are
     * using 2 maps here.
     */
    const existingHelpers = contextMap.get(context);
    if (existingHelpers) {
        const existingHelper = existingHelpers.get(method);
        if (existingHelper) {
            return existingHelper;
        }
    }
    else {
        contextMap.set(context, new Map());
    }
    const newHelper = helper(method.bind(context), options);
    const helpers = contextMap.get(context);
    assertDefined_1.assertDefined(helpers, 'No helpers found.');
    helpers.set(method, newHelper);
    return newHelper;
};
/**
 * Generic decorator to wrap a method with a helper.
 */
function withHelperDecorator(helper, options) {
    return function (target, propertyName, propertyDesciptor) {
        const { value: method } = propertyDesciptor;
        assert_1.assert(method instanceof Function, 'This decorator works only on methods');
        assertDefined_1.assertDefined(method, `The method "${propertyName}" is not defined.`);
        // must be `function` to not loose `this` context
        propertyDesciptor.value = function (...args) {
            return __awaiter(this, void 0, void 0, function* () {
                const wrappedMethod = getHelper(method, helper, options, this);
                return yield wrappedMethod.call(this, ...args);
            });
        };
        return propertyDesciptor;
    };
}
exports.withHelperDecorator = withHelperDecorator;
;
//# sourceMappingURL=withHelperDecorator.js.map

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __webpack_require__(37);
/**
 * Assert the `val` is instance of `classObject`.
 */
exports.assertInstance = (val, classObject, errorMessage) => {
    return assert_1.assert(val instanceof classObject, errorMessage);
};
//# sourceMappingURL=assertInstance.js.map

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = __webpack_require__(46);
/**
 * Assert to cover the cases that should never happen.
 */
// TODO legomushroom - test this
exports.assertNever = (value, errorMessage) => {
    const error = (typeof errorMessage === 'string')
        ? new errors_1.AssertionError(errorMessage)
        : errorMessage;
    throw error;
};
//# sourceMappingURL=assertNever.js.map

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Function to wrap any function (let say `fun`) with the wrapper that will
 * ensure that the `fun` will be called only once. The wrapper will cache
 * the first return value of the `fun` and return it immediately on any
 * subsequent calls.
 */
exports.once = (fun, thisArg) => {
    const invocationSymbol = Symbol();
    let result;
    function onceFunction(...args) {
        if (fun[invocationSymbol]) {
            return result;
        }
        fun[invocationSymbol] = true;
        result = fun.call(thisArg !== null && thisArg !== void 0 ? thisArg : this, ...args);
        return result;
    }
    ;
    return onceFunction;
};
//# sourceMappingURL=once.js.map

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function onlyOnce(fun, ...defaultParams) {
    const invocationSymbol = Symbol();
    let recursionCount = 0;
    let firstParams;
    let firstResult;
    return function (...params) {
        if (params.length === 0) {
            params = defaultParams;
        }
        if (!fun[invocationSymbol]) {
            recursionCount++;
            let result;
            try {
                result = fun(...params);
                if (recursionCount > 1) {
                    return result;
                }
            }
            finally {
                recursionCount--;
            }
            // Set the flag after we have called the function and got the result to allow recursion for the first invocation
            fun[invocationSymbol] = true;
            firstParams = params;
            firstResult = result;
        }
        else if (!parametersEqual(firstParams, params)) {
            throw new Error(`Parameters must be the same as in the first call of ${onlyOnce.name}(${fun.name}).`);
        }
        return firstResult;
    };
}
exports.onlyOnce = onlyOnce;
;
/** Check if two parameter arrays match.
 *
 * This check only uses === to compare the elements, so they must be of primitive type only.
 * If one array is larger than the other, the extra elements must be all undefined.
 */
function parametersEqual(a1, a2) {
    if (!Array.isArray(a1) || !Array.isArray(a2)) {
        return false;
    }
    if (a1 === a2) {
        return true;
    }
    const l = Math.min(a1.length, a2.length);
    for (var i = 0; i < l; i++) {
        if (a1[i] !== a2[i]) {
            return false;
        }
    }
    const a = a1.length > l ? a1 : a2;
    for (var i = l; i < a.length; i++) {
        if (a[i] !== undefined) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=onlyOnce.js.map

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const components_1 = __webpack_require__(90);
const PromiseRaceError_1 = __webpack_require__(231);
/**
 * Method to wait on first promise resolve or all promises rejected.
 * If a single promise resolves, the function with resolve with its result.
 * If all promises have rejected, then the function rejects with the last
 * rejection error and the `PromiseRaceError` will have all the rejected
 * errors in the order of rejection.
 */
exports.raceAsync = (promises) => {
    const signal = new components_1.Signal();
    const errors = [];
    let cnt = promises.length;
    promises.forEach((promise) => {
        promise
            .then((value) => {
            signal.resolve(value);
        })
            .catch((error) => {
            cnt--;
            errors.push(error);
            if (cnt === 0) {
                signal.reject(new PromiseRaceError_1.PromiseRaceError(errors, error));
            }
        });
    });
    return signal.promise;
};
//# sourceMappingURL=raceAsync.js.map

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(6);
const dispose_1 = __webpack_require__(233);
const utils_1 = __webpack_require__(88);
/**
 * Disposable class can handle multiple child disposable that will
 * be disposed when the disposable class isntance is disposed itself.
 * It provides the `onDispose` event for your convenience and will
 * handle the disposables lifecycle, including removing the child
 * disposable object reference from the disposables list when the
 * child gets disposed, hence enable the garbage collection of the
 * object.
 * Also holds the `trace` instance so all classes that inherit from
 * this one will have the tracing available by default.
 */
class DisposableClass {
    constructor(traceReference) {
        this.traceReference = traceReference;
        this.disposablesReference = [];
        this.isDisposedReference = false;
        this.onDisposeEmitter = new vscode_jsonrpc_1.Emitter();
        this.onDisposeEvent = this.onDisposeEmitter.event;
        /**
         * Dispose a particular single disposable object.
         */
        this.disposeObject = (disposable, reason) => {
            this.trace.verbose('disposing the object', reason, disposable);
            try {
                disposable.dispose(reason);
            }
            catch (e) {
                this.trace.warning('Error from disposable', disposable, reason, e);
            }
            finally {
                this.removeFromDisposables(disposable);
            }
        };
        /**
         * Remove a particular disposable from the child disposables list.
         */
        this.removeFromDisposables = (disposable) => {
            const index = this.disposablesReference.indexOf(disposable);
            if (index < 0) {
                return this;
            }
            this.disposablesReference.splice(index, 1);
            return this;
        };
        this.dispose = this.dispose.bind(this);
        this.onDispose = this.onDispose.bind(this);
    }
    /**
     * Trace instance used by the disposable class instance.
     */
    get disposables() {
        return [...this.disposablesReference];
    }
    /**
     * Trace instance used by the disposable class instance.
     */
    get trace() {
        return this.traceReference;
    }
    /**
     * Whether the disposable class is already disposed.
     */
    get isDisposed() {
        return this.isDisposedReference;
    }
    /**
     * Dispose all child disposables.
     */
    dispose(reason) {
        this.trace.verbose('disposing self');
        if (this.isDisposed) {
            this.trace.verbose('already disposed');
            return this;
        }
        this.isDisposedReference = true;
        const reasonToLog = () => {
            var _a;
            if (reason) {
                if (typeof reason === 'function') {
                    return `${(_a = reason.constructor) === null || _a === void 0 ? void 0 : _a.name}-${JSON.stringify(reason)}`;
                }
                return String(reason);
            }
            return 'n/a';
        };
        try {
            const reason = reasonToLog();
            this.trace.verbose(`disposing reason: '${reason}', disposing ${this.disposables.length} objects`);
            /**
             * We use the public property here since it will make the disposables array clone,
             * otherwise it might be a problem since the the `disposeObject` (or rather the
             * `removeFromDisposables`) will modify the `disposablesReference` array in-place
             * which will mess up the `forEach` loop.
             */
            this.disposables.forEach((disposable, i) => {
                if (!disposable) {
                    this.trace.warning('disposable is not set in the disposables object');
                    return;
                }
                if (disposable.isDisposed) {
                    return;
                }
                return this.disposeObject(disposable, `${reason} $${i}`);
            });
            this.disposablesReference.length = 0;
        }
        catch (e) {
            this.trace.warning('error while disposing an object', e);
        }
        this.onDisposeEmitter.fire(this);
        this.onDisposeEmitter.dispose();
        return this;
    }
    /**
     * Adds an `IDisposable` to the list of the child disposables, each of which will be
     * disposed when the disposable class is disposed.
     */
    addToDisposables(...disposables) {
        for (const disposable of disposables) {
            utils_1.assertDefined(disposable, 'Disposable must be defined.');
            /**
             * Subscribe to `onDispose` from child disposables and remove the disposable
             * from the `disposables` array so we don't hold the reference to the object.
             */
            if ('onDispose' in disposable) {
                const eventListener = disposable.onDispose(() => {
                    this.disposeObject(eventListener);
                    this.removeFromDisposables(disposable);
                });
            }
            if ('dispose' in disposable) {
                this.disposablesReference.push(disposable);
            }
        }
        return this;
    }
    /**
     * Event fired only once, when the disposable class is disposed.
     * If the disposable class already disposed the callback called immediatelly.
     */
    onDispose(callback, thisArgs) {
        if (this.isDisposed) {
            this.trace.verbose('already disposed, calling callback immediately');
            callback.call(thisArgs, this);
            return {
                dispose: () => { },
            };
        }
        this.trace.verbose('subscribing to onDispose event');
        const onDisposeEvent = this.onDisposeEvent(callback.bind(thisArgs !== null && thisArgs !== void 0 ? thisArgs : this, this));
        // delay the `onDispose()` event disposal, sp the `onDisposeEmitter` has a
        // chance to fire see `this.dispose()` method for more info.
        return dispose_1.createDisposable((reason) => {
            utils_1.defer(() => {
                try {
                    onDisposeEvent.dispose(reason);
                }
                catch ( /* noop */_a) { /* noop */ }
            }, 1);
        }, this.trace.createChild('delayed-disposable'));
    }
}
exports.DisposableClass = DisposableClass;
//# sourceMappingURL=DisposableClass.js.map

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Mutex {
    constructor() {
        this.mutex = Promise.resolve();
    }
    dispatch(fn) {
        return __awaiter(this, void 0, void 0, function* () {
            const unlock = yield this.lock();
            try {
                return yield Promise.resolve(fn());
            }
            finally {
                unlock();
            }
        });
    }
    lock() {
        let begin = (unlock) => { };
        this.mutex = this.mutex.then(() => {
            return new Promise(begin);
        });
        return new Promise((resolve) => {
            begin = resolve;
        });
    }
}
exports.Mutex = Mutex;
//# sourceMappingURL=Mutex.js.map

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class CallbackContainer {
    constructor() {
        this.callbacks = [];
    }
    clear() {
        this.callbacks.length = 0;
    }
    get items() {
        return this.callbacks;
    }
    add(callback) {
        if (callback) {
            this.callbacks.push(callback);
        }
        return {
            dispose: () => {
                if (!callback) {
                    return;
                }
                const index = this.callbacks.indexOf(callback);
                if (index !== -1) {
                    this.callbacks.splice(index, 1);
                }
            }
        };
    }
}
exports.CallbackContainer = CallbackContainer;
//# sourceMappingURL=CallbackContainer.js.map

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Create a readonly lazy instance.
 * If createIfNotCreated = false, we return either the cached instance if it exists or undefined if it does not exist.
 */
function lazyLoad(loader) {
    let cache;
    return (createIfNotCreated = true) => {
        if (cache !== undefined) {
            return cache;
        }
        else if (createIfNotCreated) {
            return (cache = loader());
        }
        return undefined;
    };
}
exports.lazyLoad = lazyLoad;
/** Create a mutable lazy load wrapper.
 * @param loader - optional value loader. If not provided, value property must be set before the value function is called.
 */
function lazyLoadMutable(loader) {
    const result = () => {
        if (result.value === undefined && result.loader) {
            result.value = result.loader();
        }
        if (result.value === undefined) {
            throw new Error('No loader o value was supplied.');
        }
        return result.value;
    };
    result.loader = loader;
    return result;
}
exports.lazyLoadMutable = lazyLoadMutable;
function lazyLoadNotImplemented() {
    throw new Error('Dependencies: Instance not provided.');
}
exports.lazyLoadNotImplemented = lazyLoadNotImplemented;
function delayedLoadMutable(propertyName) {
    return lazyLoadMutable(() => {
        throw Error(`Dependencies: ${propertyName} is not yet initialized`);
    });
}
exports.delayedLoadMutable = delayedLoadMutable;
/** Set a new loader (if it's defined) on the lazy object. Return the updated lazy object. */
function setLazyLoadMutable(orignal, loader) {
    if (typeof loader === 'function') {
        orignal.loader = loader;
    }
    return orignal;
}
exports.setLazyLoadMutable = setLazyLoadMutable;
//# sourceMappingURL=Lazy.js.map

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assertDefined_1 = __webpack_require__(89);
const Signal_1 = __webpack_require__(127);
const defer_1 = __webpack_require__(128);
/**
 * Utility to run an asynchronous function and reuse
 * the currently running version of it, if present.
 */
exports.withCache = (fn) => {
    let runningSignal;
    const res = (...args) => __awaiter(void 0, void 0, void 0, function* () {
        if (runningSignal && !runningSignal.isFulfilled) {
            return yield runningSignal.promise;
        }
        runningSignal = new Signal_1.Signal();
        /**
         * Defer function execution so we can return the signal promise
         * that will resolve to the result of the original function.
         */
        defer_1.defer(() => __awaiter(void 0, void 0, void 0, function* () {
            assertDefined_1.assertDefined(runningSignal, 'No running signal is defined.');
            try {
                const result = yield fn(...args);
                runningSignal.resolve(result);
            }
            catch (e) {
                runningSignal.reject(e);
            }
        }), 1);
        return yield runningSignal.promise;
    });
    return res;
};
//# sourceMappingURL=withCache.js.map

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const timeoutPromise_1 = __webpack_require__(234);
const components_1 = __webpack_require__(90);
const asserts_1 = __webpack_require__(232);
const utils_1 = __webpack_require__(88);
/**
 * Function to transform and event into a promise so it can be `awaited` in-place.
 *
 * ## Example:
 *
 * ```
 *  //..
 *  [1] const result = await continueWhen(this.onResolveComplete);
 *  [2] //..
 * ```
 * [1] will wait on the `onResolveComplete` event to happen before proceeding further to [2],
 * the `result` will contain the first (and only) argument of the `onResolveComplete` event.
 *
 * ```
 * /..
 *  [1] const result = await continueWhen(this.onResolveComplete, 2000);
 *  [2] //..
 * ```
 * Same as example above, but will throw the `TimeoutCancellationError`
 * error, if the event is not fired before the timeout elapses.
 *
 * ## Throws:
 *
 *  - `TimeoutCancellationError` when the finite timeout is passed and the
 *      event is not fired before the timeout is elapsed.
 *  - `AssertionError` when passed `timeout` number is `NaN`.
 */
exports.continueWhen = (event, timeout = Infinity, error) => __awaiter(void 0, void 0, void 0, function* () {
    const signal = new components_1.Signal();
    try {
        // resolve the signal when even is fired
        const eventDisposable = event((arg) => __awaiter(void 0, void 0, void 0, function* () {
            try {
                eventDisposable.dispose();
            }
            catch ( /* noop */_a) { /* noop */ }
            // give other event subscribers a chance to run
            yield utils_1.wait(1);
            // resolve the main signal
            signal.resolve(arg);
        }));
        asserts_1.assert(!Number.isNaN(timeout), 'Timeout is NaN.');
        asserts_1.assert(timeout > 0, `Timeout must be greater than zero, but "${timeout}" passed.`);
        /**
         * if we got finite timeout, throw the `TimeoutCancellationError`
         * if the event is not fired before the timeout elapses.
         */
        if (Number.isFinite(timeout)) {
            return yield timeoutPromise_1.timeoutPromise(signal.promise, timeout, error);
        }
        // no timeout - wait on the promise itself
        return yield signal.promise;
    }
    catch (e) {
        throw e;
    }
});
//# sourceMappingURL=continueWhen.js.map

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const components_1 = __webpack_require__(90);
const wait_1 = __webpack_require__(126);
/**
 * Function to get promise state.
 */
exports.getPromiseState = (promise) => __awaiter(void 0, void 0, void 0, function* () {
    const resultSignal = new components_1.Signal();
    promise.then((data) => {
        resultSignal.resolve({
            isPending: false,
            error: null,
            data,
        });
        return data;
    }, (error) => {
        resultSignal.resolve({
            isPending: false,
            error,
        });
    });
    // make sure `then`/`catch` above had a chance to run
    yield wait_1.wait(1);
    // if `then`/`catch` didn't run, resolve as pending
    resultSignal.resolve({
        isPending: true,
        error: null,
    });
    return yield resultSignal.promise;
});
//# sourceMappingURL=getPromiseState.js.map

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Identity function.
 */
// TODO legomushroom - test this
exports.idFunction = (...args) => {
    return args;
};
//# sourceMappingURL=idFunction.js.map

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const createDisposable_1 = __webpack_require__(235);
/**
 * Function to connect 2 events, then the `event` fired,
 * fire the `event` also.
 */
exports.connectEvents = (notify, ...events) => {
    const disposables = events.map((event) => {
        return event(notify.fire.bind(notify));
    });
    return createDisposable_1.createDisposable(() => {
        for (const disposable of disposables) {
            disposable === null || disposable === void 0 ? void 0 : disposable.dispose();
        }
    });
};
//# sourceMappingURL=connectEvents.js.map

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Signal_1 = __webpack_require__(127);
const hashString_1 = __webpack_require__(236);
const defer_1 = __webpack_require__(128);
/**
 * Given a list of arguments, return a serialized
 * string (id) for the arguments list.
 */
const serializeArgs = (...args) => {
    const hashedArgs = args.map((str) => {
        return hashString_1.hashString(`${str}`);
    });
    return hashedArgs.join('::');
};
;
/**
 * Default arguments for the `withMutexByArguments` helper.
 */
const DEFAULT_OPTIONS = {
    serializeArguments: serializeArgs,
};
/**
 * Utility to run an asynchronous function and reuse the currently
 * running instance of it, based on the arguments list. To work
 * correctly all the arguments should be serializable to string,
 * as they will be used as an `id` for each invocation instance.
 *
 * Any prior invocation result is ignored, e.g. we reuse only currently
 * running function instances, ignoring any previously finished ones.
 */
exports.withMutexByArguments = (fn, options = DEFAULT_OPTIONS) => {
    // the map that holds current running signals for the function invocations.
    const mutextMap = new Map();
    // result function
    const result = (...args) => __awaiter(void 0, void 0, void 0, function* () {
        const { serializeArguments = serializeArgs } = options;
        const id = serializeArguments(...args);
        const runningSignal = mutextMap.get(id);
        if (runningSignal && !runningSignal.isFulfilled) {
            return yield runningSignal.promise;
        }
        const newRunningSignal = new Signal_1.Signal();
        mutextMap.set(id, newRunningSignal);
        /**
         * Defer function execution so we can return the signal promise
         * that will resolve to the result of the original function.
         */
        defer_1.defer(() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                const result = yield fn(...args);
                newRunningSignal.resolve(result);
            }
            catch (e) {
                newRunningSignal.reject(e);
            }
            finally {
                mutextMap.delete(id);
            }
        }), 1);
        return yield newRunningSignal.promise;
    });
    return result;
};
//# sourceMappingURL=withMutexByArguments.js.map

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const randomInt_1 = __webpack_require__(129);
/**
 * Function to return a random item from an array.
 */
exports.randomItem = (items) => {
    const max = items.length;
    const randomIndex = randomInt_1.randomInt(max - 1);
    return items[randomIndex];
};
//# sourceMappingURL=randomItem.js.map

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const randomBytes_1 = __webpack_require__(238);
/**
 * Generate random string (`hex` by default) using `length` bytes.
 */
exports.randomString = (length = 16, encoding = 'hex') => {
    const randomBuffer = randomBytes_1.randomBytes(length);
    return randomBuffer.toString(encoding);
};
//# sourceMappingURL=randomString.js.map

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const randomInt_1 = __webpack_require__(129);
/**
 * Return a random boolean.
 */
exports.randomBoolean = () => {
    return (randomInt_1.randomInt(1) === 1);
};
//# sourceMappingURL=randomBoolean.js.map

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Interval version of a debounce util.
 */
exports.debounce = (fn, timeout) => {
    let interval;
    const debounced = (...args) => {
        clearInterval(interval);
        interval = setInterval(() => {
            fn(...args);
        }, timeout);
    };
    debounced.stop = () => {
        clearInterval(interval);
    };
    return debounced;
};
//# sourceMappingURL=debounce.js.map

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
;
/**
 * Function that throttles a function invocation to
 * at most one per every `interval` milliseconds.
 */
function throttle(fn, options) {
    let lockInterval;
    // wrap the original function
    return function throttledFunction(...args) {
        /**
         * If still locked, return immediatelly.
         */
        if (lockInterval) {
            return;
        }
        /**
         * If not locked, invoke the original function and
         * lock so no invocation
         */
        const { interval } = options;
        lockInterval = setTimeout(() => {
            if (lockInterval) {
                clearInterval(lockInterval);
                lockInterval = undefined;
            }
        }, interval);
        /**
         * Run the original function and return the result.
         */
        return fn.call(this, ...args);
    };
}
exports.throttle = throttle;
;
//# sourceMappingURL=throttle.js.map

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Reduce an array to one that has unique items only.
 */
exports.arrayUnique = (arr) => {
    const set = new Set(arr);
    return [...set];
};
//# sourceMappingURL=arrayUnique.js.map

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Check if `val` is thenable or promiseLike.
 */
exports.isThenable = (val) => {
    if (val == null) {
        return false;
    }
    if (typeof val.then !== 'function') {
        return false;
    }
    return true;
};
//# sourceMappingURL=isThenable.js.map

/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const errorToObject_1 = __webpack_require__(239);
/**
 * Create a stringified object that represents an error.
 */
// TODO legomushroom - test this
exports.errorToString = (error, isInternal = false) => {
    return JSON.stringify(errorToObject_1.errorToObject(error, isInternal), null, 2);
};
//# sourceMappingURL=errorToString.js.map

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function notImplemented() {
    throw new Error('Method not implemented.');
}
exports.notImplemented = notImplemented;
;
//# sourceMappingURL=notImplemented.js.map

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promiseAny = (iterable) => __awaiter(void 0, void 0, void 0, function* () {
    return Promise.all([...iterable].map(promise => {
        return new Promise((resolve, reject) => Promise.resolve(promise).then(reject, resolve));
    })).then(errors => Promise.reject(errors), value => Promise.resolve(value));
});
//# sourceMappingURL=promiseAny.js.map

/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function toCamelCase(str) {
    if (str && str.length > 0) {
        return str.substring(0, 1).toLowerCase() + str.substring(1);
    }
    return str;
}
exports.toCamelCase = toCamelCase;
//# sourceMappingURL=toCamelCase.js.map

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
let crcTable;
function makeCrcTable() {
    let c;
    const table = [];
    for (let n = 0; n < 256; n++) {
        c = n;
        for (let k = 0; k < 8; k++) {
            c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;
        }
        table[n] = c;
    }
    return table;
}
function crc32(data) {
    if (!crcTable) {
        crcTable = makeCrcTable();
    }
    let crc = 0 ^ -1;
    for (let i = 0; i < data.length; i++) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xff];
    }
    const result = (crc ^ -1) >>> 0;
    return (result + 0x100000000)
        .toString(16)
        .substr(-8)
        .toUpperCase();
}
exports.crc32 = crc32;
//# sourceMappingURL=crc32.js.map

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
__export(__webpack_require__(505));
exports.globalTrace = new vso_logging_1.TraceSource('vscs');
//# sourceMappingURL=index.js.map

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TIME_SECOND_MS = 1000;
exports.TIME_MINUTE_MS = 60 * exports.TIME_SECOND_MS;
exports.TIME_HOUR_MS = 60 * exports.TIME_MINUTE_MS;
exports.TIME_DAY_MS = 24 * exports.TIME_HOUR_MS;
//# sourceMappingURL=time.js.map

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DisposableClassMock_1 = __webpack_require__(507);
exports.DisposableClassMock = DisposableClassMock_1.DisposableClassMock;
//# sourceMappingURL=index.js.map

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
class DisposableClassMock {
    constructor() {
        this.trace = new vso_logging_1.TraceSource('test-logger');
        this.addToDisposables = (disposable) => {
            return this;
        };
        this.isDisposed = false;
        this.onDispose = (callback, thisArgs) => {
            return {
                dispose: () => { },
            };
        };
        this.dispose = () => {
            return this;
        };
    }
}
exports.DisposableClassMock = DisposableClassMock;
//# sourceMappingURL=DisposableClassMock.js.map

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const GetEnvironmentsList_1 = __webpack_require__(509);
const ShowDetails_1 = __webpack_require__(545);
const SignIn_1 = __webpack_require__(613);
const AddNewEnvironment_1 = __webpack_require__(614);
const DeleteEnvironment_1 = __webpack_require__(652);
const Refresh_1 = __webpack_require__(654);
const DocumentationLink_1 = __webpack_require__(655);
const FeedbackLink_1 = __webpack_require__(656);
const GetStartedLink_1 = __webpack_require__(657);
const IssuesLink_1 = __webpack_require__(658);
const ReportIssue_1 = __webpack_require__(659);
const SendFeedback_1 = __webpack_require__(660);
const SetActiveRepository_1 = __webpack_require__(661);
const Export_1 = __webpack_require__(662);
const OpenInBrowser_1 = __webpack_require__(663);
const ShutdownEnvironment_1 = __webpack_require__(664);
function registerCommands(context) {
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.addEnvironment" /* addEnvironment */, AddNewEnvironment_1.AddNewEnvironment);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.environmentsList" /* environmentsList */, GetEnvironmentsList_1.GetEnvironmentsList);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.deleteEnvironment" /* deleteEnvironment */, DeleteEnvironment_1.DeleteEnvironment);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.signIn" /* signIn */, SignIn_1.SignIn);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.refresh" /* refresh */, Refresh_1.Refresh);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.getStartedLink" /* getStartedLink */, GetStartedLink_1.GetStartedLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.feedbackLink" /* feedbackLink */, FeedbackLink_1.FeedbackLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.sendFeedback" /* sendFeedback */, SendFeedback_1.SendFeedback);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.documentationLink" /* documentationLink */, DocumentationLink_1.DocumentationLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.issuesLink" /* issuesLink */, IssuesLink_1.IssuesLink);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.reportIssue" /* reportIssue */, ReportIssue_1.ReportIssue);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.showDetails" /* showDetailsCommand */, ShowDetails_1.ShowDetails);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.continueInCodespace" /* continueInCodespace */, AddNewEnvironment_1.AddNewEnvironment);
    vscode_command_framework_1.vslsCommands.API.registerCommand("_codespaces.setActiveRepository" /* setActiveRepository */, SetActiveRepository_1.SetActiveRepository);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.export" /* export */, Export_1.Export);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.connect" /* connect */, OpenInBrowser_1.OpenInBrowser);
    vscode_command_framework_1.vslsCommands.API.registerCommand("github.codespaces.shutdownEnvironment" /* shutdownEnvironment */, ShutdownEnvironment_1.ShutdownEnvironment);
    return Promise.resolve();
}
exports.registerCommands = registerCommands;
;


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const vscode_command_framework_1 = __webpack_require__(3);
class GetEnvironmentsList extends vscode_command_framework_1.CommandBase {
    async invoke() {
        return await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
    }
}
exports.GetEnvironmentsList = GetEnvironmentsList;


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebECDiffieHellman = exports.WebDiffieHellman = void 0;
const buffer_1 = __webpack_require__(0);
const diffie_hellman_1 = __webpack_require__(200);
const keyExchangeAlgorithm_1 = __webpack_require__(131);
const webHmac_1 = __webpack_require__(134);
const bigInt_1 = __webpack_require__(28);
const jsonWebKeyFormatter_1 = __webpack_require__(135);
class WebDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, webHmac_1.WebHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new WebDiffieHellmanKex(this.keySizeInBits, webHmac_1.WebHmac.getWebHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.WebDiffieHellman = WebDiffieHellman;
class WebDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        switch (bitLength) {
            case 1024:
                this.dh = (0, diffie_hellman_1.getDiffieHellman)('modp2');
                break;
            case 2048:
                this.dh = (0, diffie_hellman_1.getDiffieHellman)('modp14');
                break;
            case 4096:
                this.dh = (0, diffie_hellman_1.getDiffieHellman)('modp16');
                break;
            default:
                throw new Error('Invalid DH bit length.');
        }
    }
    startKeyExchange() {
        const exchangeValueKeys = this.dh.generateKeys();
        const exchangeValue = bigInt_1.BigInt.fromBytes(exchangeValueKeys, { unsigned: true }).toBytes();
        return Promise.resolve(exchangeValue);
    }
    decryptKeyExchange(exchangeValue) {
        const key = this.dh.computeSecret(exchangeValue);
        const sharedSecret = bigInt_1.BigInt.fromBytes(key, { unsigned: true }).toBytes();
        return Promise.resolve(sharedSecret);
    }
    async sign(data) {
        const hashBuffer = await crypto.subtle.digest(this.hashAlgorithmName, data);
        return buffer_1.Buffer.from(hashBuffer);
    }
    dispose() { }
}
class WebECDiffieHellman extends keyExchangeAlgorithm_1.KeyExchangeAlgorithm {
    constructor(name, keySizeInBits, hashAlgorithmName) {
        super(name, keySizeInBits, hashAlgorithmName, webHmac_1.WebHmac.getHashDigestLength(hashAlgorithmName));
    }
    createKeyExchange() {
        return new WebECDiffieHellmanKex(this.keySizeInBits, webHmac_1.WebHmac.getWebHashAlgorithmName(this.hashAlgorithmName), this.hashDigestLength);
    }
}
exports.WebECDiffieHellman = WebECDiffieHellman;
class WebECDiffieHellmanKex {
    constructor(bitLength, hashAlgorithmName, digestLength) {
        this.bitLength = bitLength;
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
        this.algorithm = {
            name: 'ECDH',
            namedCurve: 'P-' + bitLength,
        };
    }
    async startKeyExchange() {
        if (!this.keyPair) {
            this.keyPair = await crypto.subtle.generateKey(this.algorithm, true, // exportable
            ['deriveBits']);
        }
        const jwk = await crypto.subtle.exportKey('jwk', this.keyPair.publicKey);
        const ec = jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseEC(jwk);
        const length = Math.ceil(this.bitLength / 8);
        const publicKeyBytes = buffer_1.Buffer.alloc(1 + length * 2);
        publicKeyBytes[0] = 4;
        ec.x.toBytes({ unsigned: true, length }).copy(publicKeyBytes, 1);
        ec.y.toBytes({ unsigned: true, length }).copy(publicKeyBytes, 1 + length);
        return buffer_1.Buffer.from(publicKeyBytes);
    }
    async decryptKeyExchange(exchangeValue) {
        if (!this.keyPair) {
            throw new Error('Key exchange not started.');
        }
        const xy = exchangeValue;
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatEC({
            curve: { name: this.algorithm.namedCurve },
            x: bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true }),
            y: bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true }),
        });
        const otherPublicKey = await crypto.subtle.importKey('jwk', jwk, this.algorithm, false, []);
        const sharedSecretBytes = buffer_1.Buffer.from(await crypto.subtle.deriveBits(Object.assign(Object.assign({}, this.algorithm), { public: otherPublicKey }), this.keyPair.privateKey, Math.ceil(this.bitLength / 8) * 8));
        const sharedSecret = bigInt_1.BigInt.fromBytes(sharedSecretBytes, { unsigned: true }).toBytes();
        return sharedSecret;
    }
    async sign(data) {
        const hashBuffer = await crypto.subtle.digest(this.hashAlgorithmName, data);
        return buffer_1.Buffer.from(hashBuffer);
    }
    dispose() { }
}
//# sourceMappingURL=webKeyExchange.js.map

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRsa = void 0;
const buffer_1 = __webpack_require__(0);
const publicKeyAlgorithm_1 = __webpack_require__(69);
const webHmac_1 = __webpack_require__(134);
const sshData_1 = __webpack_require__(16);
const jsonWebKeyFormatter_1 = __webpack_require__(135);
// Note this is exposed as an inner-class property below: `WebRsa.KeyPair`.
// TypeScript requires that the class definition comes first.
class WebRsaKeyPair {
    /* @internal */
    constructor(hashAlgorithm) {
        this.hashAlgorithm = hashAlgorithm;
        this.comment = null;
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return WebRsa.keyAlgorithmName;
    }
    async generate(keySizeInBits) {
        keySizeInBits = keySizeInBits !== null && keySizeInBits !== void 0 ? keySizeInBits : WebRsaKeyPair.defaultKeySize;
        try {
            const keyGenParams = {
                name: 'RSASSA-PKCS1-v1_5',
                modulusLength: keySizeInBits,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                hash: { name: this.hashAlgorithm },
            };
            const keyPair = (await crypto.subtle.generateKey(keyGenParams, true, ['sign', 'verify']));
            this.publicKey = keyPair.publicKey;
            this.privateKey = keyPair.privateKey;
        }
        catch (e) {
            throw new Error('Failed to generate RSA key pair: ' + e);
        }
    }
    async setPublicKeyBytes(keyBytes) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const algorithmName = reader.readString('ascii');
        if (algorithmName !== this.keyAlgorithmName &&
            algorithmName !== WebRsa.rsaWithSha256 &&
            algorithmName !== WebRsa.rsaWithSha512) {
            throw new Error(`Invalid RSA key algorithm: ${algorithmName}`);
        }
        const exponent = reader.readBigInt();
        const modulus = reader.readBigInt();
        // Import public key in JWK format.
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatRsa({ modulus, exponent }, false);
        jwk.alg = 'RS' + this.hashAlgorithm.replace('SHA-', '');
        jwk.key_ops = ['verify'];
        try {
            const importParams = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: { name: this.hashAlgorithm },
            };
            this.publicKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, ['verify']);
        }
        catch (e) {
            throw new Error('Failed to import RSA public key: ' + e);
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        if (!algorithmName) {
            algorithmName = this.keyAlgorithmName;
        }
        // Export public key in JWK format.
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', this.publicKey);
        }
        catch (e) {
            throw new Error('Failed to export RSA public key: ' + e);
        }
        const { modulus, exponent } = jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseRsa(jwk, false);
        // Write public key in SSH format.
        const keyBuffer = buffer_1.Buffer.alloc(512);
        const keyWriter = new sshData_1.SshDataWriter(keyBuffer);
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeBigInt(exponent);
        keyWriter.writeBigInt(modulus);
        const keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        const privateJwk = parameters.d ? jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatRsa(parameters, true) : null;
        const publicJwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatRsa(parameters, false);
        const importParams = {
            name: 'RSASSA-PKCS1-v1_5',
            hash: { name: this.hashAlgorithm },
        };
        try {
            this.publicKey = await crypto.subtle.importKey('jwk', publicJwk, importParams, true, [
                'verify',
            ]);
            if (privateJwk) {
                this.privateKey = await crypto.subtle.importKey('jwk', privateJwk, importParams, true, [
                    'sign',
                ]);
            }
            else {
                this.privateKey = undefined;
            }
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            throw new Error('Failed to import RSA key pair: ' + e.message);
        }
    }
    async exportParameters() {
        var _a;
        if (!this.publicKey)
            throw new Error('Public key not set.');
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', (_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            throw new Error('Failed to export RSA public key: ' + e.message);
        }
        return jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseRsa(jwk, !!this.privateKey);
    }
    dispose() { }
}
WebRsaKeyPair.defaultKeySize = 2048;
class WebRsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, WebRsa.keyAlgorithmName, hashAlgorithmName);
    }
    createKeyPair() {
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebRsaKeyPair(hashAlgorithm);
    }
    async generateKeyPair(keySizeInBits) {
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        const rsaKey = new WebRsaKeyPair(hashAlgorithm);
        await rsaKey.generate(keySizeInBits);
        return rsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof WebRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebRsaSignerVerifier(keyPair, hashAlgorithm, webHmac_1.WebHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof WebRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        const hashAlgorithm = WebRsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebRsaSignerVerifier(keyPair, hashAlgorithm, webHmac_1.WebHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA-');
    }
}
exports.WebRsa = WebRsa;
WebRsa.keyAlgorithmName = 'ssh-rsa';
WebRsa.rsaWithSha256 = 'rsa-sha2-256';
WebRsa.rsaWithSha512 = 'rsa-sha2-512';
// eslint-disable-next-line @typescript-eslint/tslint/config
WebRsa.KeyPair = WebRsaKeyPair;
class WebRsaSignerVerifier {
    constructor(keyPair, hashAlgorithm, digestLength) {
        this.keyPair = keyPair;
        this.hashAlgorithm = hashAlgorithm;
        this.digestLength = digestLength;
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        await this.convertKeyHashAlgorithm();
        const signature = buffer_1.Buffer.from(await crypto.subtle.sign('RSASSA-PKCS1-v1_5', this.keyPair.privateKey, data));
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        await this.convertKeyHashAlgorithm();
        const result = await crypto.subtle.verify('RSASSA-PKCS1-v1_5', this.keyPair.publicKey, signature, data);
        return result;
    }
    async convertKeyHashAlgorithm() {
        if (this.keyPair.hashAlgorithm !== this.hashAlgorithm) {
            const parameters = await this.keyPair.exportParameters();
            this.keyPair = new WebRsaKeyPair(this.hashAlgorithm);
            await this.keyPair.importParameters(parameters);
        }
    }
    dispose() { }
}
//# sourceMappingURL=webRsa.js.map

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebECDsa = void 0;
const buffer_1 = __webpack_require__(0);
const publicKeyAlgorithm_1 = __webpack_require__(69);
const sshData_1 = __webpack_require__(16);
const ecdsaCurves_1 = __webpack_require__(91);
const bigInt_1 = __webpack_require__(28);
const jsonWebKeyFormatter_1 = __webpack_require__(135);
class WebECDsaKeyPair {
    /**
     * Constructs a new ECDSA key pair object.
     *
     * @param algorithmName Key pair algorithm name. If unspecified, the key pair object must be
     * initialized before use via `importParameters()`.
     */
    constructor(algorithmName) {
        this.comment = null;
        if (algorithmName) {
            this.algorithmName = algorithmName;
        }
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return this.algorithmName;
    }
    get algorithmName() {
        return this.algorithm;
    }
    set algorithmName(value) {
        const curveName = value.split('-')[2];
        this.curve = ecdsaCurves_1.curves.find((c) => c.name === curveName);
        if (!this.curve) {
            throw new Error('Invalid or unsupported ECDSA algorithm: ' + value);
        }
        this.algorithm = value;
    }
    async generate() {
        try {
            const keyGenParams = {
                name: 'ECDSA',
                namedCurve: this.curve.shortName,
            };
            const keyPair = (await crypto.subtle.generateKey(keyGenParams, true, ['sign', 'verify']));
            this.publicKey = keyPair.publicKey;
            this.privateKey = keyPair.privateKey;
        }
        catch (e) {
            throw new Error('Failed to generate RSA key pair: ' + e);
        }
    }
    async setPublicKeyBytes(keyBytes, algorithmName) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const readAlgorithmName = reader.readString('ascii');
        this.algorithmName = algorithmName || readAlgorithmName;
        const curveName = reader.readString('ascii');
        if (curveName !== this.curve.name) {
            throw new Error('EC curve name does not match.');
        }
        // X and Y parameters are equal length, after a one-byte header.
        const key = reader.readBinary();
        const n = Math.ceil(this.curve.keySize / 8);
        const x = bigInt_1.BigInt.fromBytes(key.slice(1, 1 + n), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(key.slice(1 + n, key.length), { unsigned: true });
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatEC({
            curve: { name: this.curve.shortName, oid: this.curve.oid },
            x,
            y,
        });
        try {
            const importParams = {
                name: 'ECDSA',
                namedCurve: this.curve.shortName,
            };
            this.publicKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, ['verify']);
        }
        catch (e) {
            throw new Error('Failed to import EC public key: ' + e);
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        // Export public key in JWK format.
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', this.publicKey);
        }
        catch (e) {
            throw new Error('Failed to export ECDSA public key: ' + e);
        }
        const x = buffer_1.Buffer.from(jwk.x, 'base64');
        const y = buffer_1.Buffer.from(jwk.y, 'base64');
        const n = Math.ceil(this.curve.keySize / 8);
        if (x.length !== n || y.length !== n) {
            throw new Error('Unexpected key length.');
        }
        // Write public key in SSH format.
        algorithmName = algorithmName || this.algorithmName || this.keyAlgorithmName;
        const keyBuffer = buffer_1.Buffer.alloc(algorithmName.length + x.length + y.length + 10);
        const keyWriter = new sshData_1.SshDataWriter(keyBuffer);
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeString(this.curve.name, 'ascii');
        keyWriter.writeUInt32(1 + x.length + y.length);
        keyWriter.writeByte(4); // Indicates uncompressed curve format
        keyWriter.write(x);
        keyWriter.write(y);
        const keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        if (!parameters.curve)
            throw new TypeError('A curve is required.');
        let curve;
        if (parameters.curve.oid) {
            curve = ecdsaCurves_1.curves.find((c) => c.oid === parameters.curve.oid);
            if (!curve) {
                throw new Error(`Unsupported curve OID: ${parameters.curve.oid}`);
            }
        }
        else if (parameters.curve.name) {
            curve = ecdsaCurves_1.curves.find((c) => c.name === parameters.curve.name);
            if (!curve) {
                throw new Error(`Unsupported curve: ${parameters.curve.name}`);
            }
        }
        else {
            throw new TypeError('A curve OID or name is required.');
        }
        this.algorithmName = 'ecdsa-sha2-' + curve.name;
        const importParams = {
            name: 'ECDSA',
            namedCurve: this.curve.shortName,
        };
        const jwk = jsonWebKeyFormatter_1.JsonWebKeyFormatter.formatEC(parameters);
        jwk.crv = this.curve.shortName;
        try {
            if (jwk.d) {
                this.privateKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, [
                    'sign',
                ]);
                jwk.d = undefined;
            }
            else {
                this.privateKey = undefined;
            }
            this.publicKey = await crypto.subtle.importKey('jwk', jwk, importParams, true, ['verify']);
        }
        catch (e) {
            throw new Error('Failed to import ECDSA key pair: ' + e);
        }
    }
    async exportParameters() {
        var _a;
        const exportKey = (_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey;
        if (!exportKey) {
            throw new Error('Key not present.');
        }
        let jwk;
        try {
            jwk = await crypto.subtle.exportKey('jwk', exportKey);
        }
        catch (e) {
            throw new Error('Failed to export ECDSA key pair: ' + e);
        }
        const parameters = jsonWebKeyFormatter_1.JsonWebKeyFormatter.parseEC(jwk);
        parameters.curve = { name: this.curve.name, oid: this.curve.oid };
        return parameters;
    }
    dispose() { }
}
class WebECDsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, name, hashAlgorithmName);
    }
    createKeyPair() {
        return new WebECDsaKeyPair(this.name);
    }
    async generateKeyPair() {
        const ecdsaKey = new WebECDsaKeyPair(this.name);
        await ecdsaKey.generate();
        return ecdsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof WebECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        const hashAlgorithm = WebECDsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebECDsaSignerVerifier(keyPair, hashAlgorithm);
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof WebECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        const hashAlgorithm = WebECDsa.convertHashAlgorithmName(this.hashAlgorithmName);
        return new WebECDsaSignerVerifier(keyPair, hashAlgorithm);
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA-');
    }
    /* @internal */
    static getSignatureLength(keySizeInBits) {
        // The signature is double the key size, but formatted as 2 bigints.
        // To each bigint add 4 for the length and 1 for a leading zero.
        const keySizeInBytes = Math.ceil(keySizeInBits / 8);
        return (4 + 1 + keySizeInBytes) * 2;
    }
}
exports.WebECDsa = WebECDsa;
WebECDsa.ecdsaSha2Nistp256 = 'ecdsa-sha2-nistp256';
WebECDsa.ecdsaSha2Nistp384 = 'ecdsa-sha2-nistp384';
WebECDsa.ecdsaSha2Nistp521 = 'ecdsa-sha2-nistp521';
WebECDsa.curves = ecdsaCurves_1.curves;
// eslint-disable-next-line @typescript-eslint/tslint/config
WebECDsa.KeyPair = WebECDsaKeyPair;
class WebECDsaSignerVerifier {
    constructor(keyPair, hashAlgorithm) {
        this.keyPair = keyPair;
        this.hashAlgorithm = hashAlgorithm;
    }
    get digestLength() {
        const curve = this.keyPair.curve;
        if (!curve) {
            return 0;
        }
        else {
            return WebECDsa.getSignatureLength(curve.keySize);
        }
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        let signature = buffer_1.Buffer.from(await crypto.subtle.sign({ name: 'ECDSA', hash: { name: this.hashAlgorithm } }, this.keyPair.privateKey, data));
        const keySizeInBytes = Math.ceil(this.keyPair.curve.keySize / 8);
        if (signature.length !== 2 * keySizeInBytes) {
            throw new Error(`Unexpected signature length: ${signature.length}`);
        }
        // Reformat the signature integer bytes as required by SSH.
        const x = bigInt_1.BigInt.fromBytes(signature.slice(0, keySizeInBytes), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(signature.slice(keySizeInBytes, signature.length), {
            unsigned: true,
        });
        const signatureWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(this.digestLength));
        signatureWriter.writeBinary(x.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signatureWriter.writeBinary(y.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signature = signatureWriter.toBuffer();
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        // Reformat the signature integer bytes as required by the web crypto API.
        const signatureReader = new sshData_1.SshDataReader(signature);
        const x = signatureReader.readBigInt();
        const y = signatureReader.readBigInt();
        const keySizeInBytes = Math.ceil(this.keyPair.curve.keySize / 8);
        signature = buffer_1.Buffer.alloc(2 * keySizeInBytes);
        x.toBytes({ unsigned: true, length: keySizeInBytes }).copy(signature, 0);
        y.toBytes({ unsigned: true, length: keySizeInBytes }).copy(signature, keySizeInBytes);
        const result = await crypto.subtle.verify({ name: 'ECDSA', hash: { name: this.hashAlgorithm } }, this.keyPair.publicKey, signature, data);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=webECDsa.js.map

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebEncryption = void 0;
const trace_1 = __webpack_require__(24);
const buffer_1 = __webpack_require__(0);
const encryptionAlgorithm_1 = __webpack_require__(132);
class WebEncryption extends encryptionAlgorithm_1.EncryptionAlgorithm {
    constructor(name, algorithmName, cipherMode, keySizeInBits) {
        super(name);
        this.algorithmName = algorithmName;
        this.cipherMode = cipherMode;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = WebEncryption.getBlockSize(algorithmName);
    }
    get keyLength() {
        return this.keySizeInBits / 8;
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    async createCipher(isEncryption, key, iv) {
        const cipher = new WebCipher(isEncryption, this.algorithmName, this.cipherMode, this.keySizeInBits, this.blockSizeInBits);
        await cipher.init(key, iv);
        return cipher;
    }
    static getBlockSize(algorithmName) {
        if (algorithmName === 'AES') {
            return 128;
        }
        else {
            throw new Error(`Unsupported encryption algorithm: ${algorithmName}`);
        }
    }
}
exports.WebEncryption = WebEncryption;
class WebCipher {
    constructor(isEncryption, algorithmName, cipherMode, keySizeInBits, blockSizeInBits) {
        this.isEncryption = isEncryption;
        this.algorithmName = algorithmName;
        this.cipherMode = cipherMode;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = blockSizeInBits;
        this.tag = null;
        if (this.algorithmName === 'AES' && this.cipherMode === 'CTR') {
            this.transform = this.aesCtr.bind(this, isEncryption);
        }
        else if (this.algorithmName === 'AES' && this.cipherMode === 'CBC') {
            this.transform = this.aesCbc.bind(this, isEncryption);
        }
        else if (this.algorithmName === 'AES' && this.cipherMode === 'GCM') {
            this.transform = this.aesGcm.bind(this, isEncryption);
            this.associatedData = buffer_1.Buffer.alloc(4);
            this.decryptBuffer = buffer_1.Buffer.alloc(this.blockLength * 4);
        }
        else {
            throw new Error(`Unsupported encryption algorithm: ${this.algorithmName}-${this.cipherMode}`);
        }
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    async init(key, iv) {
        try {
            const name = `${this.algorithmName}-${this.cipherMode}`;
            this.key = await crypto.subtle.importKey('raw', key, { name, length: this.keySizeInBits }, false, this.isEncryption ? ['encrypt'] : ['decrypt']);
        }
        catch (e) {
            throw new Error('Failed to initialize AES: ' + e);
        }
        if (this.cipherMode === 'GCM') {
            this.iv = buffer_1.Buffer.from(iv.slice(0, 12));
        }
        else {
            this.iv = buffer_1.Buffer.from(iv);
        }
    }
    async aesCtr(isEncryption, data) {
        if (data.length % this.blockLength !== 0) {
            const message = 'Encrypt/decrypt input has invalid length ' +
                `${data.length}, not a multiple of block size ${this.blockLength}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        let result;
        if (isEncryption) {
            result = buffer_1.Buffer.from(await crypto.subtle.encrypt({ name: 'AES-CTR', counter: this.iv, length: this.blockSizeInBits }, this.key, data));
        }
        else {
            result = buffer_1.Buffer.from(await crypto.subtle.decrypt({ name: 'AES-CTR', counter: this.iv, length: this.blockSizeInBits }, this.key, data));
        }
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        // A single call to encrypt() or decrypt() internally increments the counter.
        // This code ensures those increments get preserved across multiple calls.
        const incrementCount = data.length / this.blockLength;
        for (let i = 0; i < incrementCount; i++) {
            // Increment the counter that is combined with the IV as a big-endian integer.
            // First increment the last byte, and if it reaches 0 then increment the
            // next-to-last byte, and so on.
            for (let k = this.iv.length - 1; k >= 0; k--) {
                this.iv[k] = this.iv[k] + 1;
                if (this.iv[k])
                    break;
            }
        }
        return result;
    }
    async aesCbc(isEncryption, data) {
        // TODO: Fix padding. Web crypto's AES-CBC uses padding by default,
        // which isn't compatible with SSH.
        if (isEncryption) {
            let result = buffer_1.Buffer.from(await crypto.subtle.encrypt({ name: 'AES-CBC', iv: this.iv }, this.key, data));
            result = result.slice(0, data.length);
            return result;
        }
        else {
            return buffer_1.Buffer.from(await crypto.subtle.decrypt({ name: 'AES-CBC', iv: this.iv }, this.key, data));
        }
    }
    async aesGcm(isEncryption, data) {
        if (data.length % this.blockLength !== 0) {
            const message = 'Encrypt/decrypt input has invalid length ' +
                `${data.length}, not a multiple of block size ${this.blockLength}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        // Associated data is the 32-bit packet length.
        const packetLength = data.length;
        this.associatedData[0] = packetLength >>> 24;
        this.associatedData[1] = packetLength >>> 16;
        this.associatedData[2] = packetLength >>> 8;
        this.associatedData[3] = packetLength;
        let result;
        if (isEncryption) {
            result = buffer_1.Buffer.from(await crypto.subtle.encrypt({
                name: 'AES-GCM',
                iv: this.iv,
                additionalData: this.associatedData,
                tagLength: this.digestLength * 8, // tagLength is in bits, not bytes
            }, this.key, data));
            this.tag = result.slice(result.length - this.digestLength);
            result = result.slice(0, result.length - this.digestLength);
        }
        else {
            if (!this.tag) {
                throw new Error('AES-GCM tag was not set before decrypting.');
            }
            // The AES-GCM decrypt API expects the ciphertext and tag to be in a contiguous buffer.
            // Re-use a temporary buffer for that purpose, expanding it as needed.
            const inputLength = data.length + this.digestLength;
            if (this.decryptBuffer.length < inputLength) {
                let newLength = this.decryptBuffer.length * 2;
                while (newLength < inputLength)
                    newLength *= 2;
                this.decryptBuffer = buffer_1.Buffer.alloc(newLength);
            }
            const input = this.decryptBuffer.slice(0, inputLength);
            data.copy(input, 0);
            this.tag.copy(input, data.length);
            result = buffer_1.Buffer.from(await crypto.subtle.decrypt({
                name: 'AES-GCM',
                iv: this.iv,
                additionalData: this.associatedData,
                tagLength: this.digestLength * 8, // tagLength is in bits, not bytes
            }, this.key, input));
        }
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        // Increment the counter (last 8 bytes of the iv/nonce) as a big-endian integer.
        // First increment the last byte, and if it reaches 0 then increment the
        // next-to-last byte, and so on.
        let k = 12;
        while (--k >= 4) {
            this.iv[k]++;
            if (this.iv[k] !== 0) {
                break;
            }
        }
        return result;
    }
    get digestLength() {
        return 16;
    }
    get authenticatedEncryption() {
        return this.cipherMode === 'GCM';
    }
    async sign(data) {
        if (!this.tag) {
            throw new Error('AES-GCM tag was not obtained by encrypting.');
        }
        return this.tag;
    }
    async verify(data, signature) {
        if (signature.length !== this.digestLength) {
            throw new Error('Incorrect AES-GCM tag length.');
        }
        this.tag = signature;
        return true;
    }
    dispose() { }
}
//# sourceMappingURL=webEncryption.js.map

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */
function log(...args) {
	// This hackery is required for IE8/9, where
	// the `console.log` function doesn't have 'apply'
	return typeof console === 'object' &&
		console.log &&
		console.log(...args);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(515)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(516);

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* Active `debug` instances.
	*/
	createDebug.instances = [];

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return match;
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.enabled = createDebug.enabled(namespace);
		debug.useColors = createDebug.useColors();
		debug.color = selectColor(namespace);
		debug.destroy = destroy;
		debug.extend = extend;
		// Debug.formatArgs = formatArgs;
		// debug.rawLog = rawLog;

		// env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		createDebug.instances.push(debug);

		return debug;
	}

	function destroy() {
		const index = createDebug.instances.indexOf(this);
		if (index !== -1) {
			createDebug.instances.splice(index, 1);
			return true;
		}
		return false;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}

		for (i = 0; i < createDebug.instances.length; i++) {
			const instance = createDebug.instances[i];
			instance.enabled = createDebug.enabled(instance.namespace);
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),
/* 516 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRandom = void 0;
class WebRandom {
    getBytes(buffer) {
        crypto.getRandomValues(buffer);
    }
}
exports.WebRandom = WebRandom;
//# sourceMappingURL=webRandom.js.map

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeRsa = void 0;
const crypto = __webpack_require__(10);
const buffer_1 = __webpack_require__(0);
const publicKeyAlgorithm_1 = __webpack_require__(69);
const sshData_1 = __webpack_require__(16);
const nodeHmac_1 = __webpack_require__(136);
const keyFormatters_1 = __webpack_require__(244);
const nodeVersionParts = process.versions.node.split('.').map((v) => parseInt(v, 10));
const nodeGenerateKeyPairSupport = nodeVersionParts[0] > 10 || (nodeVersionParts[0] === 10 && nodeVersionParts[1] >= 12);
const nodeKeyObjectSupport = nodeVersionParts[0] > 11 || (nodeVersionParts[0] === 11 && nodeVersionParts[1] >= 6);
// Note this is exposed as an inner-class property below: `NodeRsa.KeyPair`.
// TypeScript requires that the class definition comes first.
class NodeRsaKeyPair {
    /* @internal */
    constructor() {
        this.comment = null;
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return NodeRsa.keyAlgorithmName;
    }
    generate(keySizeInBits) {
        keySizeInBits = keySizeInBits !== null && keySizeInBits !== void 0 ? keySizeInBits : NodeRsaKeyPair.defaultKeySize;
        if (nodeGenerateKeyPairSupport && nodeKeyObjectSupport) {
            return this.generateNodeKeyPairObjects(keySizeInBits);
        }
        else if (nodeGenerateKeyPairSupport) {
            return this.generateNodeKeyPairBuffers(keySizeInBits);
        }
        else {
            return this.generateExternalKeyPair(keySizeInBits);
        }
    }
    async generateNodeKeyPairObjects(keySizeInBits) {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                modulusLength: keySizeInBits,
            };
            try {
                crypto.generateKeyPair('rsa', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateNodeKeyPairBuffers(keySizeInBits) {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                modulusLength: keySizeInBits,
                publicKeyEncoding: { type: 'pkcs1', format: 'pem' },
                privateKeyEncoding: {
                    type: 'pkcs1',
                    format: 'pem',
                    cipher: undefined,
                    passphrase: undefined,
                },
            };
            try {
                crypto.generateKeyPair('rsa', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateExternalKeyPair(keySizeInBits) {
        // When running in a version of node that doesn't have a built-in API
        // for RSA key-gen, use an external library. Note this implementation
        // is SLOW because it's pure JS. It may take 1-5 seconds to generate
        // a 2048 bit key.
        const externRsa = await Promise.resolve().then(() => __webpack_require__(519));
        const keyPair = new externRsa({ b: keySizeInBits });
        this.publicKey = keyPair.exportKey('pkcs1-public-pem');
        this.privateKey = keyPair.exportKey('pkcs1-private-pem');
        // Ensure the PEM format ends in a newline, just for consistency.
        if (!this.publicKey.endsWith('\n'))
            this.publicKey += '\n';
        if (!this.privateKey.endsWith('\n'))
            this.privateKey += '\n';
    }
    async setPublicKeyBytes(keyBytes) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const algorithmName = reader.readString('ascii');
        if (algorithmName !== this.keyAlgorithmName &&
            algorithmName !== NodeRsa.rsaWithSha256 &&
            algorithmName !== NodeRsa.rsaWithSha512) {
            throw new Error(`Invalid RSA key algorithm: ${algorithmName}`);
        }
        const exponent = reader.readBigInt();
        const modulus = reader.readBigInt();
        // Write public key in PKCS#1 format.
        keyBytes = keyFormatters_1.Pkcs1KeyFormatter.formatRsaPublic({ modulus, exponent });
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: keyBytes,
                type: 'pkcs1',
                format: 'der',
            });
        }
        else {
            this.publicKey = (0, keyFormatters_1.formatPem)(keyBytes, 'RSA PUBLIC KEY');
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        if (!algorithmName) {
            algorithmName = this.keyAlgorithmName;
        }
        let keyBytes;
        if (typeof this.publicKey === 'string') {
            keyBytes = (0, keyFormatters_1.parsePem)(this.publicKey);
        }
        else {
            keyBytes = this.publicKey.export({
                type: 'pkcs1',
                format: 'der',
            });
        }
        const parameters = keyFormatters_1.Pkcs1KeyFormatter.parseRsaPublic(keyBytes);
        // Write public key in SSH format.
        const keyBuffer = buffer_1.Buffer.alloc(512);
        const keyWriter = new sshData_1.SshDataWriter(keyBuffer);
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeBigInt(parameters.exponent);
        keyWriter.writeBigInt(parameters.modulus);
        keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: keyFormatters_1.Pkcs1KeyFormatter.formatRsaPublic(parameters),
                format: 'der',
                type: 'pkcs1',
            });
            if (parameters.d) {
                this.privateKey = crypto.createPrivateKey({
                    key: keyFormatters_1.Pkcs1KeyFormatter.formatRsaPrivate(parameters),
                    format: 'der',
                    type: 'pkcs1',
                });
            }
            else {
                this.privateKey = undefined;
            }
        }
        else {
            const publicKeyBytes = keyFormatters_1.Pkcs1KeyFormatter.formatRsaPublic(parameters);
            this.publicKey = (0, keyFormatters_1.formatPem)(publicKeyBytes, 'RSA PUBLIC KEY');
            if (parameters.d) {
                const privateKeyBytes = keyFormatters_1.Pkcs1KeyFormatter.formatRsaPrivate(parameters);
                this.privateKey = (0, keyFormatters_1.formatPem)(privateKeyBytes, 'RSA PRIVATE KEY');
            }
        }
    }
    async exportParameters() {
        var _a, _b;
        if (!this.publicKey)
            throw new Error('Public key not set.');
        let keyBytes;
        if (nodeKeyObjectSupport) {
            keyBytes = ((_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey).export({
                format: 'der',
                type: 'pkcs1',
            });
        }
        else {
            keyBytes = (0, keyFormatters_1.parsePem)((_b = this.privateKey) !== null && _b !== void 0 ? _b : this.publicKey);
        }
        return this.privateKey
            ? keyFormatters_1.Pkcs1KeyFormatter.parseRsaPrivate(keyBytes)
            : keyFormatters_1.Pkcs1KeyFormatter.parseRsaPublic(keyBytes);
    }
    dispose() {
        this.publicKey = undefined;
        this.privateKey = undefined;
    }
}
NodeRsaKeyPair.defaultKeySize = 2048;
class NodeRsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, NodeRsa.keyAlgorithmName, hashAlgorithmName);
    }
    createKeyPair() {
        return new NodeRsaKeyPair();
    }
    async generateKeyPair(keySizeInBits) {
        const rsaKey = new NodeRsaKeyPair();
        await rsaKey.generate(keySizeInBits);
        return rsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof NodeRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        return new NodeRsaSignerVerifier(keyPair, NodeRsa.convertHashAlgorithmName(this.hashAlgorithmName), nodeHmac_1.NodeHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof NodeRsaKeyPair)) {
            throw new TypeError('RSA key pair object expected.');
        }
        return new NodeRsaSignerVerifier(keyPair, NodeRsa.convertHashAlgorithmName(this.hashAlgorithmName), nodeHmac_1.NodeHmac.getHashDigestLength(this.hashAlgorithmName));
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA');
    }
}
exports.NodeRsa = NodeRsa;
NodeRsa.keyAlgorithmName = 'ssh-rsa';
NodeRsa.rsaWithSha256 = 'rsa-sha2-256';
NodeRsa.rsaWithSha512 = 'rsa-sha2-512';
// eslint-disable-next-line @typescript-eslint/tslint/config
NodeRsa.KeyPair = NodeRsaKeyPair;
class NodeRsaSignerVerifier {
    constructor(keyPair, hashAlgorithmName, digestLength) {
        this.keyPair = keyPair;
        this.hashAlgorithmName = hashAlgorithmName;
        this.digestLength = digestLength;
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        const signer = crypto.createSign(this.hashAlgorithmName);
        signer.update(data);
        const signature = signer.sign(this.keyPair.privateKey);
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        const verifier = crypto.createVerify(this.hashAlgorithmName);
        verifier.update(data);
        const result = verifier.verify(this.keyPair.publicKey, signature);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=nodeRsa.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * RSA library for Node.js
 *
 * Author: rzcoder
 * License MIT
 */

var constants = __webpack_require__(92);
var rsa = __webpack_require__(520);
var crypt = __webpack_require__(10);
var ber = __webpack_require__(138).Ber;
var _ = __webpack_require__(21)._;
var utils = __webpack_require__(21);
var schemes = __webpack_require__(48);
var formats = __webpack_require__(530);

if (typeof constants.RSA_NO_PADDING === "undefined") {
    //patch for node v0.10.x, constants do not defined
    constants.RSA_NO_PADDING = 3;
}

module.exports = (function () {
    var SUPPORTED_HASH_ALGORITHMS = {
        node10: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
        node: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
        iojs: ['md4', 'md5', 'ripemd160', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
        browser: ['md5', 'ripemd160', 'sha1', 'sha256', 'sha512']
    };

    var DEFAULT_ENCRYPTION_SCHEME = 'pkcs1_oaep';
    var DEFAULT_SIGNING_SCHEME = 'pkcs1';

    var DEFAULT_EXPORT_FORMAT = 'private';
    var EXPORT_FORMAT_ALIASES = {
        'private': 'pkcs1-private-pem',
        'private-der': 'pkcs1-private-der',
        'public': 'pkcs8-public-pem',
        'public-der': 'pkcs8-public-der',
    };

    /**
     * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}
     * @constructor
     */
    function NodeRSA(key, format, options) {
        if (!(this instanceof NodeRSA)) {
            return new NodeRSA(key, format, options);
        }

        if (_.isObject(format)) {
            options = format;
            format = undefined;
        }

        this.$options = {
            signingScheme: DEFAULT_SIGNING_SCHEME,
            signingSchemeOptions: {
                hash: 'sha256',
                saltLength: null
            },
            encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,
            encryptionSchemeOptions: {
                hash: 'sha1',
                label: null
            },
            environment: utils.detectEnvironment(),
            rsaUtils: this
        };
        this.keyPair = new rsa.Key();
        this.$cache = {};

        if (Buffer.isBuffer(key) || _.isString(key)) {
            this.importKey(key, format);
        } else if (_.isObject(key)) {
            this.generateKeyPair(key.b, key.e);
        }

        this.setOptions(options);
    }

    /**
     * Set and validate options for key instance
     * @param options
     */
    NodeRSA.prototype.setOptions = function (options) {
        options = options || {};
        if (options.environment) {
            this.$options.environment = options.environment;
        }

        if (options.signingScheme) {
            if (_.isString(options.signingScheme)) {
                var signingScheme = options.signingScheme.toLowerCase().split('-');
                if (signingScheme.length == 1) {
                    if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {
                        this.$options.signingSchemeOptions = {
                            hash: signingScheme[0]
                        };
                        this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;
                    } else {
                        this.$options.signingScheme = signingScheme[0];
                        this.$options.signingSchemeOptions = {
                            hash: null
                        };
                    }
                } else {
                    this.$options.signingSchemeOptions = {
                        hash: signingScheme[1]
                    };
                    this.$options.signingScheme = signingScheme[0];
                }
            } else if (_.isObject(options.signingScheme)) {
                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;
                this.$options.signingSchemeOptions = _.omit(options.signingScheme, 'scheme');
            }

            if (!schemes.isSignature(this.$options.signingScheme)) {
                throw Error('Unsupported signing scheme');
            }

            if (this.$options.signingSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }

        if (options.encryptionScheme) {
            if (_.isString(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();
                this.$options.encryptionSchemeOptions = {};
            } else if (_.isObject(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;
                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, 'scheme');
            }

            if (!schemes.isEncryption(this.$options.encryptionScheme)) {
                throw Error('Unsupported encryption scheme');
            }

            if (this.$options.encryptionSchemeOptions.hash &&
                SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {
                throw Error('Unsupported hashing algorithm for ' + this.$options.environment + ' environment');
            }
        }

        this.keyPair.setOptions(this.$options);
    };

    /**
     * Generate private/public keys pair
     *
     * @param bits {int} length key in bits. Default 2048.
     * @param exp {int} public exponent. Default 65537.
     * @returns {NodeRSA}
     */
    NodeRSA.prototype.generateKeyPair = function (bits, exp) {
        bits = bits || 2048;
        exp = exp || 65537;

        if (bits % 8 !== 0) {
            throw Error('Key size must be a multiple of 8.');
        }

        this.keyPair.generate(bits, exp.toString(16));
        this.$cache = {};
        return this;
    };

    /**
     * Importing key
     * @param keyData {string|buffer|Object}
     * @param format {string}
     */
    NodeRSA.prototype.importKey = function (keyData, format) {
        if (!keyData) {
            throw Error("Empty key given");
        }

        if (format) {
            format = EXPORT_FORMAT_ALIASES[format] || format;
        }

        if (!formats.detectAndImport(this.keyPair, keyData, format) && format === undefined) {
            throw Error("Key format must be specified");
        }
        
        this.$cache = {};
        
        return this;
    };

    /**
     * Exporting key
     * @param [format] {string}
     */
    NodeRSA.prototype.exportKey = function (format) {
        format = format || DEFAULT_EXPORT_FORMAT;
        format = EXPORT_FORMAT_ALIASES[format] || format;

        if (!this.$cache[format]) {
            this.$cache[format] = formats.detectAndExport(this.keyPair, format);
        }

        return this.$cache[format];
    };

    /**
     * Check if key pair contains private key
     */
    NodeRSA.prototype.isPrivate = function () {
        return this.keyPair.isPrivate();
    };

    /**
     * Check if key pair contains public key
     * @param [strict] {boolean} - public key only, return false if have private exponent
     */
    NodeRSA.prototype.isPublic = function (strict) {
        return this.keyPair.isPublic(strict);
    };

    /**
     * Check if key pair doesn't contains any data
     */
    NodeRSA.prototype.isEmpty = function (strict) {
        return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);
    };

    /**
     * Encrypting data method with public key
     *
     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {string|Buffer}
     */
    NodeRSA.prototype.encrypt = function (buffer, encoding, source_encoding) {
        return this.$$encryptKey(false, buffer, encoding, source_encoding);
    };

    /**
     * Decrypting data method with private key
     *
     * @param buffer {Buffer} - buffer for decrypting
     * @param encoding - encoding for result string, can also take 'json' or 'buffer' for the automatic conversion of this type
     * @returns {Buffer|object|string}
     */
    NodeRSA.prototype.decrypt = function (buffer, encoding) {
        return this.$$decryptKey(false, buffer, encoding);
    };

    /**
     * Encrypting data method with private key
     *
     * Parameters same as `encrypt` method
     */
    NodeRSA.prototype.encryptPrivate = function (buffer, encoding, source_encoding) {
        return this.$$encryptKey(true, buffer, encoding, source_encoding);
    };

    /**
     * Decrypting data method with public key
     *
     * Parameters same as `decrypt` method
     */
    NodeRSA.prototype.decryptPublic = function (buffer, encoding) {
        return this.$$decryptKey(true, buffer, encoding);
    };

    /**
     * Encrypting data method with custom key
     */
    NodeRSA.prototype.$$encryptKey = function (usePrivate, buffer, encoding, source_encoding) {
        try {
            var res = this.keyPair.encrypt(this.$getDataForEncrypt(buffer, source_encoding), usePrivate);

            if (encoding == 'buffer' || !encoding) {
                return res;
            } else {
                return res.toString(encoding);
            }
        } catch (e) {
            throw Error('Error during encryption. Original error: ' + e);
        }
    };

    /**
     * Decrypting data method with custom key
     */
    NodeRSA.prototype.$$decryptKey = function (usePublic, buffer, encoding) {
        try {
            buffer = _.isString(buffer) ? Buffer.from(buffer, 'base64') : buffer;
            var res = this.keyPair.decrypt(buffer, usePublic);

            if (res === null) {
                throw Error('Key decrypt method returns null.');
            }

            return this.$getDecryptedData(res, encoding);
        } catch (e) {
            throw Error('Error during decryption (probably incorrect key). Original error: ' + e);
        }
    };

    /**
     *  Signing data
     *
     * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {string|Buffer}
     */
    NodeRSA.prototype.sign = function (buffer, encoding, source_encoding) {
        if (!this.isPrivate()) {
            throw Error("This is not private key");
        }

        var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));

        if (encoding && encoding != 'buffer') {
            res = res.toString(encoding);
        }

        return res;
    };

    /**
     *  Verifying signed data
     *
     * @param buffer - signed data
     * @param signature
     * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
     * @param signature_encoding - optional. Encoding of given signature. May be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
     * @returns {*}
     */
    NodeRSA.prototype.verify = function (buffer, signature, source_encoding, signature_encoding) {
        if (!this.isPublic()) {
            throw Error("This is not public key");
        }
        signature_encoding = (!signature_encoding || signature_encoding == 'buffer' ? null : signature_encoding);
        return this.keyPair.verify(this.$getDataForEncrypt(buffer, source_encoding), signature, signature_encoding);
    };

    /**
     * Returns key size in bits
     * @returns {int}
     */
    NodeRSA.prototype.getKeySize = function () {
        return this.keyPair.keySize;
    };

    /**
     * Returns max message length in bytes (for 1 chunk) depending on current encryption scheme
     * @returns {int}
     */
    NodeRSA.prototype.getMaxMessageSize = function () {
        return this.keyPair.maxMessageLength;
    };

    /**
     * Preparing given data for encrypting/signing. Just make new/return Buffer object.
     *
     * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
     * @param encoding {string} - optional. Encoding for given string. Default utf8.
     * @returns {Buffer}
     */
    NodeRSA.prototype.$getDataForEncrypt = function (buffer, encoding) {
        if (_.isString(buffer) || _.isNumber(buffer)) {
            return Buffer.from('' + buffer, encoding || 'utf8');
        } else if (Buffer.isBuffer(buffer)) {
            return buffer;
        } else if (_.isObject(buffer)) {
            return Buffer.from(JSON.stringify(buffer));
        } else {
            throw Error("Unexpected data type");
        }
    };

    /**
     *
     * @param buffer {Buffer} - decrypted data.
     * @param encoding - optional. Encoding for result output. May be 'buffer', 'json' or any of Node.js Buffer supported encoding.
     * @returns {*}
     */
    NodeRSA.prototype.$getDecryptedData = function (buffer, encoding) {
        encoding = encoding || 'buffer';

        if (encoding == 'buffer') {
            return buffer;
        } else if (encoding == 'json') {
            return JSON.parse(buffer.toString());
        } else {
            return buffer.toString(encoding);
        }
    };

    return NodeRSA;
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/*
 * RSA Encryption / Decryption with PKCS1 v2 Padding.
 * 
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

/*
 * Node.js adaptation
 * long message support implementation
 * signing/verifying
 *
 * 2014 rzcoder
 */

var _ = __webpack_require__(21)._;
var crypt = __webpack_require__(10);
var BigInteger = __webpack_require__(70);
var utils = __webpack_require__(21);
var schemes = __webpack_require__(48);
var encryptEngines = __webpack_require__(524);

exports.BigInteger = BigInteger;
module.exports.Key = (function () {
    /**
     * RSA key constructor
     *
     * n - modulus
     * e - publicExponent
     * d - privateExponent
     * p - prime1
     * q - prime2
     * dmp1 - exponent1 -- d mod (p1)
     * dmq1 - exponent2 -- d mod (q-1)
     * coeff - coefficient -- (inverse of q) mod p
     */
    function RSAKey() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
    }

    RSAKey.prototype.setOptions = function (options) {
        var signingSchemeProvider = schemes[options.signingScheme];
        var encryptionSchemeProvider = schemes[options.encryptionScheme];

        if (signingSchemeProvider === encryptionSchemeProvider) {
            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
        } else {
            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
            this.signingScheme = signingSchemeProvider.makeScheme(this, options);
        }

        this.encryptEngine = encryptEngines.getEngine(this, options);
    };

    /**
     * Generate a new random private key B bits long, using public expt E
     * @param B
     * @param E
     */
    RSAKey.prototype.generate = function (B, E) {
        var qs = B >> 1;
        this.e = parseInt(E, 16);
        var ee = new BigInteger(E, 16);
        while (true) {
            while (true) {
                this.p = new BigInteger(B - qs, 1);
                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10))
                    break;
            }
            while (true) {
                this.q = new BigInteger(qs, 1);
                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10))
                    break;
            }
            if (this.p.compareTo(this.q) <= 0) {
                var t = this.p;
                this.p = this.q;
                this.q = t;
            }
            var p1 = this.p.subtract(BigInteger.ONE);
            var q1 = this.q.subtract(BigInteger.ONE);
            var phi = p1.multiply(q1);
            if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {
                this.n = this.p.multiply(this.q);
                if (this.n.bitLength() < B) {
                    continue;
                }
                this.d = ee.modInverse(phi);
                this.dmp1 = this.d.mod(p1);
                this.dmq1 = this.d.mod(q1);
                this.coeff = this.q.modInverse(this.p);
                break;
            }
        }
        this.$$recalculateCache();
    };

    /**
     * Set the private key fields N, e, d and CRT params from buffers
     *
     * @param N
     * @param E
     * @param D
     * @param P
     * @param Q
     * @param DP
     * @param DQ
     * @param C
     */
    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {
        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {
            this.n = new BigInteger(N);
            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
            this.d = new BigInteger(D);

            if (P && Q && DP && DQ && C) {
                this.p = new BigInteger(P);
                this.q = new BigInteger(Q);
                this.dmp1 = new BigInteger(DP);
                this.dmq1 = new BigInteger(DQ);
                this.coeff = new BigInteger(C);
            } else {
                // TODO: re-calculate any missing CRT params
            }
            this.$$recalculateCache();
        } else {
            throw Error("Invalid RSA private key");
        }
    };

    /**
     * Set the public key fields N and e from hex strings
     * @param N
     * @param E
     */
    RSAKey.prototype.setPublic = function (N, E) {
        if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {
            this.n = new BigInteger(N);
            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
            this.$$recalculateCache();
        } else {
            throw Error("Invalid RSA public key");
        }
    };

    /**
     * private
     * Perform raw private operation on "x": return x^d (mod n)
     *
     * @param x
     * @returns {*}
     */
    RSAKey.prototype.$doPrivate = function (x) {
        if (this.p || this.q) {
            return x.modPow(this.d, this.n);
        }

        // TODO: re-calculate any missing CRT params
        var xp = x.mod(this.p).modPow(this.dmp1, this.p);
        var xq = x.mod(this.q).modPow(this.dmq1, this.q);

        while (xp.compareTo(xq) < 0) {
            xp = xp.add(this.p);
        }
        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
    };

    /**
     * private
     * Perform raw public operation on "x": return x^e (mod n)
     *
     * @param x
     * @returns {*}
     */
    RSAKey.prototype.$doPublic = function (x) {
        return x.modPowInt(this.e, this.n);
    };

    /**
     * Return the PKCS#1 RSA encryption of buffer
     * @param buffer {Buffer}
     * @returns {Buffer}
     */
    RSAKey.prototype.encrypt = function (buffer, usePrivate) {
        var buffers = [];
        var results = [];
        var bufferSize = buffer.length;
        var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1; // total buffers count for encrypt
        var dividedSize = Math.ceil(bufferSize / buffersCount || 1); // each buffer size

        if (buffersCount == 1) {
            buffers.push(buffer);
        } else {
            for (var bufNum = 0; bufNum < buffersCount; bufNum++) {
                buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));
            }
        }

        for (var i = 0; i < buffers.length; i++) {
            results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));
        }

        return Buffer.concat(results);
    };

    /**
     * Return the PKCS#1 RSA decryption of buffer
     * @param buffer {Buffer}
     * @returns {Buffer}
     */
    RSAKey.prototype.decrypt = function (buffer, usePublic) {
        if (buffer.length % this.encryptedDataLength > 0) {
            throw Error('Incorrect data or key');
        }

        var result = [];
        var offset = 0;
        var length = 0;
        var buffersCount = buffer.length / this.encryptedDataLength;

        for (var i = 0; i < buffersCount; i++) {
            offset = i * this.encryptedDataLength;
            length = offset + this.encryptedDataLength;
            result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));
        }

        return Buffer.concat(result);
    };

    RSAKey.prototype.sign = function (buffer) {
        return this.signingScheme.sign.apply(this.signingScheme, arguments);
    };

    RSAKey.prototype.verify = function (buffer, signature, signature_encoding) {
        return this.signingScheme.verify.apply(this.signingScheme, arguments);
    };

    /**
     * Check if key pair contains private key
     */
    RSAKey.prototype.isPrivate = function () {
        return this.n && this.e && this.d && true || false;
    };

    /**
     * Check if key pair contains public key
     * @param strict {boolean} - public key only, return false if have private exponent
     */
    RSAKey.prototype.isPublic = function (strict) {
        return this.n && this.e && !(strict && this.d) || false;
    };

    Object.defineProperty(RSAKey.prototype, 'keySize', {
        get: function () {
            return this.cache.keyBitLength;
        }
    });

    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {
        get: function () {
            return this.cache.keyByteLength;
        }
    });

    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {
        get: function () {
            return this.encryptionScheme.maxMessageLength();
        }
    });

    /**
     * Caching key data
     */
    RSAKey.prototype.$$recalculateCache = function () {
        this.cache = this.cache || {};
        // Bit & byte length
        this.cache.keyBitLength = this.n.bitLength();
        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;
    };

    return RSAKey;
})();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * PKCS1 padding and signature scheme
 */

var BigInteger = __webpack_require__(70);
var crypt = __webpack_require__(10);
var constants = __webpack_require__(92);
var SIGN_INFO_HEAD = {
    md2: Buffer.from('3020300c06082a864886f70d020205000410', 'hex'),
    md5: Buffer.from('3020300c06082a864886f70d020505000410', 'hex'),
    sha1: Buffer.from('3021300906052b0e03021a05000414', 'hex'),
    sha224: Buffer.from('302d300d06096086480165030402040500041c', 'hex'),
    sha256: Buffer.from('3031300d060960864801650304020105000420', 'hex'),
    sha384: Buffer.from('3041300d060960864801650304020205000430', 'hex'),
    sha512: Buffer.from('3051300d060960864801650304020305000440', 'hex'),
    ripemd160: Buffer.from('3021300906052b2403020105000414', 'hex'),
    rmd160: Buffer.from('3021300906052b2403020105000414', 'hex')
};

var SIGN_ALG_TO_HASH_ALIASES = {
    'ripemd160': 'rmd160'
};

var DEFAULT_HASH_FUNCTION = 'sha256';

module.exports = {
    isEncryption: true,
    isSignature: true
};

module.exports.makeScheme = function (key, options) {
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }

    Scheme.prototype.maxMessageLength = function () {
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            return this.key.encryptedDataLength;
        }
        return this.key.encryptedDataLength - 11;
    };

    /**
     * Pad input Buffer to encryptedDataLength bytes, and return Buffer.from
     * alg: PKCS#1
     * @param buffer
     * @returns {Buffer}
     */
    Scheme.prototype.encPad = function (buffer, options) {
        options = options || {};
        var filled;
        if (buffer.length > this.key.maxMessageLength) {
            throw new Error("Message too long for RSA (n=" + this.key.encryptedDataLength + ", l=" + buffer.length + ")");
        }
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING treated like JAVA left pad with zero character
            filled = Buffer.alloc(this.key.maxMessageLength - buffer.length);
            filled.fill(0);
            return Buffer.concat([filled, buffer]);
        }

        /* Type 1: zeros padding for private key encrypt */
        if (options.type === 1) {
            filled = Buffer.alloc(this.key.encryptedDataLength - buffer.length - 1);
            filled.fill(0xff, 0, filled.length - 1);
            filled[0] = 1;
            filled[filled.length - 1] = 0;

            return Buffer.concat([filled, buffer]);
        } else {
            /* random padding for public key encrypt */
            filled = Buffer.alloc(this.key.encryptedDataLength - buffer.length);
            filled[0] = 0;
            filled[1] = 2;
            var rand = crypt.randomBytes(filled.length - 3);
            for (var i = 0; i < rand.length; i++) {
                var r = rand[i];
                while (r === 0) { // non-zero only
                    r = crypt.randomBytes(1)[0];
                }
                filled[i + 2] = r;
            }
            filled[filled.length - 1] = 0;
            return Buffer.concat([filled, buffer]);
        }
    };

    /**
     * Unpad input Buffer and, if valid, return the Buffer object
     * alg: PKCS#1 (type 2, random)
     * @param buffer
     * @returns {Buffer}
     */
    Scheme.prototype.encUnPad = function (buffer, options) {
        options = options || {};
        var i = 0;

        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING treated like JAVA left pad with zero character
            var unPad;
            if (typeof buffer.lastIndexOf == "function") { //patch for old node version
                unPad = buffer.slice(buffer.lastIndexOf('\0') + 1, buffer.length);
            } else {
                unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, '\0') + 1, buffer.length);
            }
            return unPad;
        }

        if (buffer.length < 4) {
            return null;
        }

        /* Type 1: zeros padding for private key decrypt */
        if (options.type === 1) {
            if (buffer[0] !== 0 || buffer[1] !== 1) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (buffer[i] != 0xFF || ++i >= buffer.length) {
                    return null;
                }
            }
        } else {
            /* random padding for public key decrypt */
            if (buffer[0] !== 0 || buffer[1] !== 2) {
                return null;
            }
            i = 3;
            while (buffer[i] !== 0) {
                if (++i >= buffer.length) {
                    return null;
                }
            }
        }
        return buffer.slice(i + 1, buffer.length);
    };

    Scheme.prototype.sign = function (buffer) {
        var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        if (this.options.environment === 'browser') {
            hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;

            var hasher = crypt.createHash(hashAlgorithm);
            hasher.update(buffer);
            var hash = this.pkcs1pad(hasher.digest(), hashAlgorithm);
            var res = this.key.$doPrivate(new BigInteger(hash)).toBuffer(this.key.encryptedDataLength);

            return res;
        } else {
            var signer = crypt.createSign('RSA-' + hashAlgorithm.toUpperCase());
            signer.update(buffer);
            return signer.sign(this.options.rsaUtils.exportKey('private'));
        }
    };

    Scheme.prototype.verify = function (buffer, signature, signature_encoding) {
        if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
            //RSA_NO_PADDING has no verify data
            return false;
        }
        var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        if (this.options.environment === 'browser') {
            hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;

            if (signature_encoding) {
                signature = Buffer.from(signature, signature_encoding);
            }

            var hasher = crypt.createHash(hashAlgorithm);
            hasher.update(buffer);
            var hash = this.pkcs1pad(hasher.digest(), hashAlgorithm);
            var m = this.key.$doPublic(new BigInteger(signature));

            return m.toBuffer().toString('hex') == hash.toString('hex');
        } else {
            var verifier = crypt.createVerify('RSA-' + hashAlgorithm.toUpperCase());
            verifier.update(buffer);
            return verifier.verify(this.options.rsaUtils.exportKey('public'), signature, signature_encoding);
        }
    };

    /**
     * PKCS#1 zero pad input buffer to max data length
     * @param hashBuf
     * @param hashAlgorithm
     * @returns {*}
     */
    Scheme.prototype.pkcs0pad = function (buffer) {
        var filled = Buffer.alloc(this.key.maxMessageLength - buffer.length);
        filled.fill(0);
        return Buffer.concat([filled, buffer]);
    };

    Scheme.prototype.pkcs0unpad = function (buffer) {
        var unPad;
        if (typeof buffer.lastIndexOf == "function") { //patch for old node version
            unPad = buffer.slice(buffer.lastIndexOf('\0') + 1, buffer.length);
        } else {
            unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, '\0') + 1, buffer.length);
        }

        return unPad;
    };

    /**
     * PKCS#1 pad input buffer to max data length
     * @param hashBuf
     * @param hashAlgorithm
     * @returns {*}
     */
    Scheme.prototype.pkcs1pad = function (hashBuf, hashAlgorithm) {
        var digest = SIGN_INFO_HEAD[hashAlgorithm];
        if (!digest) {
            throw Error('Unsupported hash algorithm');
        }

        var data = Buffer.concat([digest, hashBuf]);

        if (data.length + 10 > this.key.encryptedDataLength) {
            throw Error('Key is too short for signing algorithm (' + hashAlgorithm + ')');
        }

        var filled = Buffer.alloc(this.key.encryptedDataLength - data.length - 1);
        filled.fill(0xff, 0, filled.length - 1);
        filled[0] = 1;
        filled[filled.length - 1] = 0;

        var res = Buffer.concat([filled, data]);

        return res;
    };

    return new Scheme(key, options);
};



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * PKCS_OAEP signature scheme
 */

var BigInteger = __webpack_require__(70);
var crypt = __webpack_require__(10);

module.exports = {
    isEncryption: true,
    isSignature: false
};

module.exports.digestLength = {
    md4: 16,
    md5: 16,
    ripemd160: 20,
    rmd160: 20,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64
};

var DEFAULT_HASH_FUNCTION = 'sha1';

/*
 * OAEP Mask Generation Function 1
 * Generates a buffer full of pseudorandom bytes given seed and maskLength.
 * Giving the same seed, maskLength, and hashFunction will result in the same exact byte values in the buffer.
 *
 * https://tools.ietf.org/html/rfc3447#appendix-B.2.1
 *
 * Parameters:
 * seed			[Buffer]	The pseudo random seed for this function
 * maskLength	[int]		The length of the output
 * hashFunction	[String]	The hashing function to use. Will accept any valid crypto hash. Default "sha1"
 *		Supports "sha1" and "sha256".
 *		To add another algorythm the algorythem must be accepted by crypto.createHash, and then the length of the output of the hash function (the digest) must be added to the digestLength object below.
 *		Most RSA implementations will be expecting sha1
 */
module.exports.eme_oaep_mgf1 = function (seed, maskLength, hashFunction) {
    hashFunction = hashFunction || DEFAULT_HASH_FUNCTION;
    var hLen = module.exports.digestLength[hashFunction];
    var count = Math.ceil(maskLength / hLen);
    var T = Buffer.alloc(hLen * count);
    var c = Buffer.alloc(4);
    for (var i = 0; i < count; ++i) {
        var hash = crypt.createHash(hashFunction);
        hash.update(seed);
        c.writeUInt32BE(i, 0);
        hash.update(c);
        hash.digest().copy(T, i * hLen);
    }
    return T.slice(0, maskLength);
};

module.exports.makeScheme = function (key, options) {
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }

    Scheme.prototype.maxMessageLength = function () {
        return this.key.encryptedDataLength - 2 * module.exports.digestLength[this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION] - 2;
    };

    /**
     * Pad input
     * alg: PKCS1_OAEP
     *
     * https://tools.ietf.org/html/rfc3447#section-7.1.1
     */
    Scheme.prototype.encPad = function (buffer) {
        var hash = this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.encryptionSchemeOptions.mgf || module.exports.eme_oaep_mgf1;
        var label = this.options.encryptionSchemeOptions.label || Buffer.alloc(0);
        var emLen = this.key.encryptedDataLength;

        var hLen = module.exports.digestLength[hash];

        // Make sure we can put message into an encoded message of emLen bytes
        if (buffer.length > emLen - 2 * hLen - 2) {
            throw new Error("Message is too long to encode into an encoded message with a length of " + emLen + " bytes, increase" +
            "emLen to fix this error (minimum value for given parameters and options: " + (emLen - 2 * hLen - 2) + ")");
        }

        var lHash = crypt.createHash(hash);
        lHash.update(label);
        lHash = lHash.digest();

        var PS = Buffer.alloc(emLen - buffer.length - 2 * hLen - 1); // Padding "String"
        PS.fill(0); // Fill the buffer with octets of 0
        PS[PS.length - 1] = 1;

        var DB = Buffer.concat([lHash, PS, buffer]);
        var seed = crypt.randomBytes(hLen);

        // mask = dbMask
        var mask = mgf(seed, DB.length, hash);
        // XOR DB and dbMask together.
        for (var i = 0; i < DB.length; i++) {
            DB[i] ^= mask[i];
        }
        // DB = maskedDB

        // mask = seedMask
        mask = mgf(DB, hLen, hash);
        // XOR seed and seedMask together.
        for (i = 0; i < seed.length; i++) {
            seed[i] ^= mask[i];
        }
        // seed = maskedSeed

        var em = Buffer.alloc(1 + seed.length + DB.length);
        em[0] = 0;
        seed.copy(em, 1);
        DB.copy(em, 1 + seed.length);

        return em;
    };

    /**
     * Unpad input
     * alg: PKCS1_OAEP
     *
     * Note: This method works within the buffer given and modifies the values. It also returns a slice of the EM as the return Message.
     * If the implementation requires that the EM parameter be unmodified then the implementation should pass in a clone of the EM buffer.
     *
     * https://tools.ietf.org/html/rfc3447#section-7.1.2
     */
    Scheme.prototype.encUnPad = function (buffer) {
        var hash = this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.encryptionSchemeOptions.mgf || module.exports.eme_oaep_mgf1;
        var label = this.options.encryptionSchemeOptions.label || Buffer.alloc(0);

        var hLen = module.exports.digestLength[hash];

        // Check to see if buffer is a properly encoded OAEP message
        if (buffer.length < 2 * hLen + 2) {
            throw new Error("Error decoding message, the supplied message is not long enough to be a valid OAEP encoded message");
        }

        var seed = buffer.slice(1, hLen + 1);	// seed = maskedSeed
        var DB = buffer.slice(1 + hLen);		// DB = maskedDB

        var mask = mgf(DB, hLen, hash); // seedMask
        // XOR maskedSeed and seedMask together to get the original seed.
        for (var i = 0; i < seed.length; i++) {
            seed[i] ^= mask[i];
        }

        mask = mgf(seed, DB.length, hash); // dbMask
        // XOR DB and dbMask together to get the original data block.
        for (i = 0; i < DB.length; i++) {
            DB[i] ^= mask[i];
        }

        var lHash = crypt.createHash(hash);
        lHash.update(label);
        lHash = lHash.digest();

        var lHashEM = DB.slice(0, hLen);
        if (lHashEM.toString("hex") != lHash.toString("hex")) {
            throw new Error("Error decoding message, the lHash calculated from the label provided and the lHash in the encrypted data do not match.");
        }

        // Filter out padding
        i = hLen;
        while (DB[i++] === 0 && i < DB.length);
        if (DB[i - 1] != 1) {
            throw new Error("Error decoding message, there is no padding message separator byte");
        }

        return DB.slice(i); // Message
    };

    return new Scheme(key, options);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * PSS signature scheme
 */

var BigInteger = __webpack_require__(70);
var crypt = __webpack_require__(10);

module.exports = {
    isEncryption: false,
    isSignature: true
};

var DEFAULT_HASH_FUNCTION = 'sha1';
var DEFAULT_SALT_LENGTH = 20;

module.exports.makeScheme = function (key, options) {
    var OAEP = __webpack_require__(48).pkcs1_oaep;

    /**
     * @param key
     * @param options
     * options    [Object]    An object that contains the following keys that specify certain options for encoding.
     *  └>signingSchemeOptions
     *     ├>hash    [String]    Hash function to use when encoding and generating masks. Must be a string accepted by node's crypto.createHash function. (default = "sha1")
     *     ├>mgf    [function]    The mask generation function to use when encoding. (default = mgf1SHA1)
     *     └>sLen    [uint]        The length of the salt to generate. (default = 20)
     * @constructor
     */
    function Scheme(key, options) {
        this.key = key;
        this.options = options;
    }

    Scheme.prototype.sign = function (buffer) {
        var mHash = crypt.createHash(this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION);
        mHash.update(buffer);

        var encoded = this.emsa_pss_encode(mHash.digest(), this.key.keySize - 1);
        return this.key.$doPrivate(new BigInteger(encoded)).toBuffer(this.key.encryptedDataLength);
    };

    Scheme.prototype.verify = function (buffer, signature, signature_encoding) {
        if (signature_encoding) {
            signature = Buffer.from(signature, signature_encoding);
        }
        signature = new BigInteger(signature);

        var emLen = Math.ceil((this.key.keySize - 1) / 8);
        var m = this.key.$doPublic(signature).toBuffer(emLen);

        var mHash = crypt.createHash(this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION);
        mHash.update(buffer);

        return this.emsa_pss_verify(mHash.digest(), m, this.key.keySize - 1);
    };

    /*
     * https://tools.ietf.org/html/rfc3447#section-9.1.1
     *
     * mHash	[Buffer]	Hashed message to encode
     * emBits	[uint]		Maximum length of output in bits. Must be at least 8hLen + 8sLen + 9 (hLen = Hash digest length in bytes | sLen = length of salt in bytes)
     * @returns {Buffer} The encoded message
     */
    Scheme.prototype.emsa_pss_encode = function (mHash, emBits) {
        var hash = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.signingSchemeOptions.mgf || OAEP.eme_oaep_mgf1;
        var sLen = this.options.signingSchemeOptions.saltLength || DEFAULT_SALT_LENGTH;

        var hLen = OAEP.digestLength[hash];
        var emLen = Math.ceil(emBits / 8);

        if (emLen < hLen + sLen + 2) {
            throw new Error("Output length passed to emBits(" + emBits + ") is too small for the options " +
                "specified(" + hash + ", " + sLen + "). To fix this issue increase the value of emBits. (minimum size: " +
                (8 * hLen + 8 * sLen + 9) + ")"
            );
        }

        var salt = crypt.randomBytes(sLen);

        var Mapostrophe = Buffer.alloc(8 + hLen + sLen);
        Mapostrophe.fill(0, 0, 8);
        mHash.copy(Mapostrophe, 8);
        salt.copy(Mapostrophe, 8 + mHash.length);

        var H = crypt.createHash(hash);
        H.update(Mapostrophe);
        H = H.digest();

        var PS = Buffer.alloc(emLen - salt.length - hLen - 2);
        PS.fill(0);

        var DB = Buffer.alloc(PS.length + 1 + salt.length);
        PS.copy(DB);
        DB[PS.length] = 0x01;
        salt.copy(DB, PS.length + 1);

        var dbMask = mgf(H, DB.length, hash);

        // XOR DB and dbMask together
        var maskedDB = Buffer.alloc(DB.length);
        for (var i = 0; i < dbMask.length; i++) {
            maskedDB[i] = DB[i] ^ dbMask[i];
        }

        var bits = 8 * emLen - emBits;
        var mask = 255 ^ (255 >> 8 - bits << 8 - bits);
        maskedDB[0] = maskedDB[0] & mask;

        var EM = Buffer.alloc(maskedDB.length + H.length + 1);
        maskedDB.copy(EM, 0);
        H.copy(EM, maskedDB.length);
        EM[EM.length - 1] = 0xbc;

        return EM;
    };

    /*
     * https://tools.ietf.org/html/rfc3447#section-9.1.2
     *
     * mHash	[Buffer]	Hashed message
     * EM		[Buffer]	Signature
     * emBits	[uint]		Length of EM in bits. Must be at least 8hLen + 8sLen + 9 to be a valid signature. (hLen = Hash digest length in bytes | sLen = length of salt in bytes)
     * @returns {Boolean} True if signature(EM) matches message(M)
     */
    Scheme.prototype.emsa_pss_verify = function (mHash, EM, emBits) {
        var hash = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
        var mgf = this.options.signingSchemeOptions.mgf || OAEP.eme_oaep_mgf1;
        var sLen = this.options.signingSchemeOptions.saltLength || DEFAULT_SALT_LENGTH;

        var hLen = OAEP.digestLength[hash];
        var emLen = Math.ceil(emBits / 8);

        if (emLen < hLen + sLen + 2 || EM[EM.length - 1] != 0xbc) {
            return false;
        }

        var DB = Buffer.alloc(emLen - hLen - 1);
        EM.copy(DB, 0, 0, emLen - hLen - 1);

        var mask = 0;
        for (var i = 0, bits = 8 * emLen - emBits; i < bits; i++) {
            mask |= 1 << (7 - i);
        }

        if ((DB[0] & mask) !== 0) {
            return false;
        }

        var H = EM.slice(emLen - hLen - 1, emLen - 1);
        var dbMask = mgf(H, DB.length, hash);

        // Unmask DB
        for (i = 0; i < DB.length; i++) {
            DB[i] ^= dbMask[i];
        }

        bits = 8 * emLen - emBits;
        mask = 255 ^ (255 >> 8 - bits << 8 - bits);
        DB[0] = DB[0] & mask;

        // Filter out padding
        for (i = 0; DB[i] === 0 && i < DB.length; i++);
        if (DB[i] != 1) {
            return false;
        }

        var salt = DB.slice(DB.length - sLen);

        var Mapostrophe = Buffer.alloc(8 + hLen + sLen);
        Mapostrophe.fill(0, 0, 8);
        mHash.copy(Mapostrophe, 8);
        salt.copy(Mapostrophe, 8 + mHash.length);

        var Hapostrophe = crypt.createHash(hash);
        Hapostrophe.update(Mapostrophe);
        Hapostrophe = Hapostrophe.digest();

        return H.toString("hex") === Hapostrophe.toString("hex");
    };

    return new Scheme(key, options);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

var crypt = __webpack_require__(10);

module.exports = {
    getEngine: function (keyPair, options) {
        var engine = __webpack_require__(245);
        if (options.environment === 'node') {
            if (typeof crypt.publicEncrypt === 'function' && typeof crypt.privateDecrypt === 'function') {
                if (typeof crypt.privateEncrypt === 'function' && typeof crypt.publicDecrypt === 'function') {
                    engine = __webpack_require__(525);
                } else {
                    engine = __webpack_require__(526);
                }
            }
        }
        return engine(keyPair, options);
    }
};

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

var crypto = __webpack_require__(10);
var constants = __webpack_require__(92);
var schemes = __webpack_require__(48);

module.exports = function (keyPair, options) {
    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);

    return {
        encrypt: function (buffer, usePrivate) {
            var padding;
            if (usePrivate) {
                padding = constants.RSA_PKCS1_PADDING;
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }
                return crypto.privateEncrypt({
                    key: options.rsaUtils.exportKey('private'),
                    padding: padding
                }, buffer);
            } else {
                padding = constants.RSA_PKCS1_OAEP_PADDING;
                if (options.encryptionScheme === 'pkcs1') {
                    padding = constants.RSA_PKCS1_PADDING;
                }
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }

                var data = buffer;
                if (padding === constants.RSA_NO_PADDING) {
                    data = pkcs1Scheme.pkcs0pad(buffer);
                }

                return crypto.publicEncrypt({
                    key: options.rsaUtils.exportKey('public'),
                    padding: padding
                }, data);
            }
        },

        decrypt: function (buffer, usePublic) {
            var padding;
            if (usePublic) {
                padding = constants.RSA_PKCS1_PADDING;
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }
                return crypto.publicDecrypt({
                    key: options.rsaUtils.exportKey('public'),
                    padding: padding
                }, buffer);
            } else {
                padding = constants.RSA_PKCS1_OAEP_PADDING;
                if (options.encryptionScheme === 'pkcs1') {
                    padding = constants.RSA_PKCS1_PADDING;
                }
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                    padding = options.encryptionSchemeOptions.padding;
                }
                var res = crypto.privateDecrypt({
                    key: options.rsaUtils.exportKey('private'),
                    padding: padding
                }, buffer);

                if (padding === constants.RSA_NO_PADDING) {
                    return pkcs1Scheme.pkcs0unpad(res);
                }
                return res;
            }
        }
    };
};

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

var crypto = __webpack_require__(10);
var constants = __webpack_require__(92);
var schemes = __webpack_require__(48);

module.exports = function (keyPair, options) {
    var jsEngine = __webpack_require__(245)(keyPair, options);
    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);

    return {
        encrypt: function (buffer, usePrivate) {
            if (usePrivate) {
                return jsEngine.encrypt(buffer, usePrivate);
            }
            var padding = constants.RSA_PKCS1_OAEP_PADDING;
            if (options.encryptionScheme === 'pkcs1') {
                padding = constants.RSA_PKCS1_PADDING;
            }
            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                padding = options.encryptionSchemeOptions.padding;
            }

            var data = buffer;
            if (padding === constants.RSA_NO_PADDING) {
                data = pkcs1Scheme.pkcs0pad(buffer);
            }

            return crypto.publicEncrypt({
                key: options.rsaUtils.exportKey('public'),
                padding: padding
            }, data);
        },

        decrypt: function (buffer, usePublic) {
            if (usePublic) {
                return jsEngine.decrypt(buffer, usePublic);
            }
            var padding = constants.RSA_PKCS1_OAEP_PADDING;
            if (options.encryptionScheme === 'pkcs1') {
                padding = constants.RSA_PKCS1_PADDING;
            }
            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                padding = options.encryptionSchemeOptions.padding;
            }

            var res = crypto.privateDecrypt({
                key: options.rsaUtils.exportKey('private'),
                padding: padding
            }, buffer);

            if (padding === constants.RSA_NO_PADDING) {
                return pkcs1Scheme.pkcs0unpad(res);
            }
            return res;
        }
    };
};

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var errors = __webpack_require__(139);
var types = __webpack_require__(140);

var Reader = __webpack_require__(528);
var Writer = __webpack_require__(529);


// --- Exports

module.exports = {

  Reader: Reader,

  Writer: Writer

};

for (var t in types) {
  if (types.hasOwnProperty(t))
    module.exports[t] = types[t];
}
for (var e in errors) {
  if (errors.hasOwnProperty(e))
    module.exports[e] = errors[e];
}


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var assert = __webpack_require__(86);
var Buffer = __webpack_require__(246).Buffer;

var ASN1 = __webpack_require__(140);
var errors = __webpack_require__(139);


// --- Globals

var newInvalidAsn1Error = errors.newInvalidAsn1Error;



// --- API

function Reader(data) {
  if (!data || !Buffer.isBuffer(data))
    throw new TypeError('data must be a node Buffer');

  this._buf = data;
  this._size = data.length;

  // These hold the "current" state
  this._len = 0;
  this._offset = 0;
}

Object.defineProperty(Reader.prototype, 'length', {
  enumerable: true,
  get: function () { return (this._len); }
});

Object.defineProperty(Reader.prototype, 'offset', {
  enumerable: true,
  get: function () { return (this._offset); }
});

Object.defineProperty(Reader.prototype, 'remain', {
  get: function () { return (this._size - this._offset); }
});

Object.defineProperty(Reader.prototype, 'buffer', {
  get: function () { return (this._buf.slice(this._offset)); }
});


/**
 * Reads a single byte and advances offset; you can pass in `true` to make this
 * a "peek" operation (i.e., get the byte, but don't advance the offset).
 *
 * @param {Boolean} peek true means don't move offset.
 * @return {Number} the next byte, null if not enough data.
 */
Reader.prototype.readByte = function (peek) {
  if (this._size - this._offset < 1)
    return null;

  var b = this._buf[this._offset] & 0xff;

  if (!peek)
    this._offset += 1;

  return b;
};


Reader.prototype.peek = function () {
  return this.readByte(true);
};


/**
 * Reads a (potentially) variable length off the BER buffer.  This call is
 * not really meant to be called directly, as callers have to manipulate
 * the internal buffer afterwards.
 *
 * As a result of this call, you can call `Reader.length`, until the
 * next thing called that does a readLength.
 *
 * @return {Number} the amount of offset to advance the buffer.
 * @throws {InvalidAsn1Error} on bad ASN.1
 */
Reader.prototype.readLength = function (offset) {
  if (offset === undefined)
    offset = this._offset;

  if (offset >= this._size)
    return null;

  var lenB = this._buf[offset++] & 0xff;
  if (lenB === null)
    return null;

  if ((lenB & 0x80) === 0x80) {
    lenB &= 0x7f;

    if (lenB === 0)
      throw newInvalidAsn1Error('Indefinite length not supported');

    if (lenB > 4)
      throw newInvalidAsn1Error('encoding too long');

    if (this._size - offset < lenB)
      return null;

    this._len = 0;
    for (var i = 0; i < lenB; i++)
      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);

  } else {
    // Wasn't a variable length
    this._len = lenB;
  }

  return offset;
};


/**
 * Parses the next sequence in this BER buffer.
 *
 * To get the length of the sequence, call `Reader.length`.
 *
 * @return {Number} the sequence's tag.
 */
Reader.prototype.readSequence = function (tag) {
  var seq = this.peek();
  if (seq === null)
    return null;
  if (tag !== undefined && tag !== seq)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                              ': got 0x' + seq.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`
  if (o === null)
    return null;

  this._offset = o;
  return seq;
};


Reader.prototype.readInt = function () {
  return this._readTag(ASN1.Integer);
};


Reader.prototype.readBoolean = function () {
  return (this._readTag(ASN1.Boolean) === 0 ? false : true);
};


Reader.prototype.readEnumeration = function () {
  return this._readTag(ASN1.Enumeration);
};


Reader.prototype.readString = function (tag, retbuf) {
  if (!tag)
    tag = ASN1.OctetString;

  var b = this.peek();
  if (b === null)
    return null;

  if (b !== tag)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                              ': got 0x' + b.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`

  if (o === null)
    return null;

  if (this.length > this._size - o)
    return null;

  this._offset = o;

  if (this.length === 0)
    return retbuf ? Buffer.alloc(0) : '';

  var str = this._buf.slice(this._offset, this._offset + this.length);
  this._offset += this.length;

  return retbuf ? str : str.toString('utf8');
};

Reader.prototype.readOID = function (tag) {
  if (!tag)
    tag = ASN1.OID;

  var b = this.readString(tag, true);
  if (b === null)
    return null;

  var values = [];
  var value = 0;

  for (var i = 0; i < b.length; i++) {
    var byte = b[i] & 0xff;

    value <<= 7;
    value += byte & 0x7f;
    if ((byte & 0x80) === 0) {
      values.push(value);
      value = 0;
    }
  }

  value = values.shift();
  values.unshift(value % 40);
  values.unshift((value / 40) >> 0);

  return values.join('.');
};


Reader.prototype._readTag = function (tag) {
  assert.ok(tag !== undefined);

  var b = this.peek();

  if (b === null)
    return null;

  if (b !== tag)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +
                              ': got 0x' + b.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`
  if (o === null)
    return null;

  if (this.length > 4)
    throw newInvalidAsn1Error('Integer too long: ' + this.length);

  if (this.length > this._size - o)
    return null;
  this._offset = o;

  var fb = this._buf[this._offset];
  var value = 0;

  for (var i = 0; i < this.length; i++) {
    value <<= 8;
    value |= (this._buf[this._offset++] & 0xff);
  }

  if ((fb & 0x80) === 0x80 && i !== 4)
    value -= (1 << (i * 8));

  return value >> 0;
};



// --- Exported API

module.exports = Reader;


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var assert = __webpack_require__(86);
var Buffer = __webpack_require__(246).Buffer;
var ASN1 = __webpack_require__(140);
var errors = __webpack_require__(139);


// --- Globals

var newInvalidAsn1Error = errors.newInvalidAsn1Error;

var DEFAULT_OPTS = {
  size: 1024,
  growthFactor: 8
};


// --- Helpers

function merge(from, to) {
  assert.ok(from);
  assert.equal(typeof (from), 'object');
  assert.ok(to);
  assert.equal(typeof (to), 'object');

  var keys = Object.getOwnPropertyNames(from);
  keys.forEach(function (key) {
    if (to[key])
      return;

    var value = Object.getOwnPropertyDescriptor(from, key);
    Object.defineProperty(to, key, value);
  });

  return to;
}



// --- API

function Writer(options) {
  options = merge(DEFAULT_OPTS, options || {});

  this._buf = Buffer.alloc(options.size || 1024);
  this._size = this._buf.length;
  this._offset = 0;
  this._options = options;

  // A list of offsets in the buffer where we need to insert
  // sequence tag/len pairs.
  this._seq = [];
}

Object.defineProperty(Writer.prototype, 'buffer', {
  get: function () {
    if (this._seq.length)
      throw newInvalidAsn1Error(this._seq.length + ' unended sequence(s)');

    return (this._buf.slice(0, this._offset));
  }
});

Writer.prototype.writeByte = function (b) {
  if (typeof (b) !== 'number')
    throw new TypeError('argument must be a Number');

  this._ensure(1);
  this._buf[this._offset++] = b;
};


Writer.prototype.writeInt = function (i, tag) {
  if (typeof (i) !== 'number')
    throw new TypeError('argument must be a Number');
  if (typeof (tag) !== 'number')
    tag = ASN1.Integer;

  var sz = 4;

  while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) &&
        (sz > 1)) {
    sz--;
    i <<= 8;
  }

  if (sz > 4)
    throw newInvalidAsn1Error('BER ints cannot be > 0xffffffff');

  this._ensure(2 + sz);
  this._buf[this._offset++] = tag;
  this._buf[this._offset++] = sz;

  while (sz-- > 0) {
    this._buf[this._offset++] = ((i & 0xff000000) >>> 24);
    i <<= 8;
  }

};


Writer.prototype.writeNull = function () {
  this.writeByte(ASN1.Null);
  this.writeByte(0x00);
};


Writer.prototype.writeEnumeration = function (i, tag) {
  if (typeof (i) !== 'number')
    throw new TypeError('argument must be a Number');
  if (typeof (tag) !== 'number')
    tag = ASN1.Enumeration;

  return this.writeInt(i, tag);
};


Writer.prototype.writeBoolean = function (b, tag) {
  if (typeof (b) !== 'boolean')
    throw new TypeError('argument must be a Boolean');
  if (typeof (tag) !== 'number')
    tag = ASN1.Boolean;

  this._ensure(3);
  this._buf[this._offset++] = tag;
  this._buf[this._offset++] = 0x01;
  this._buf[this._offset++] = b ? 0xff : 0x00;
};


Writer.prototype.writeString = function (s, tag) {
  if (typeof (s) !== 'string')
    throw new TypeError('argument must be a string (was: ' + typeof (s) + ')');
  if (typeof (tag) !== 'number')
    tag = ASN1.OctetString;

  var len = Buffer.byteLength(s);
  this.writeByte(tag);
  this.writeLength(len);
  if (len) {
    this._ensure(len);
    this._buf.write(s, this._offset);
    this._offset += len;
  }
};


Writer.prototype.writeBuffer = function (buf, tag) {
  if (typeof (tag) !== 'number')
    throw new TypeError('tag must be a number');
  if (!Buffer.isBuffer(buf))
    throw new TypeError('argument must be a buffer');

  this.writeByte(tag);
  this.writeLength(buf.length);
  this._ensure(buf.length);
  buf.copy(this._buf, this._offset, 0, buf.length);
  this._offset += buf.length;
};


Writer.prototype.writeStringArray = function (strings) {
  if ((!strings instanceof Array))
    throw new TypeError('argument must be an Array[String]');

  var self = this;
  strings.forEach(function (s) {
    self.writeString(s);
  });
};

// This is really to solve DER cases, but whatever for now
Writer.prototype.writeOID = function (s, tag) {
  if (typeof (s) !== 'string')
    throw new TypeError('argument must be a string');
  if (typeof (tag) !== 'number')
    tag = ASN1.OID;

  if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
    throw new Error('argument is not a valid OID string');

  function encodeOctet(bytes, octet) {
    if (octet < 128) {
        bytes.push(octet);
    } else if (octet < 16384) {
        bytes.push((octet >>> 7) | 0x80);
        bytes.push(octet & 0x7F);
    } else if (octet < 2097152) {
      bytes.push((octet >>> 14) | 0x80);
      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
      bytes.push(octet & 0x7F);
    } else if (octet < 268435456) {
      bytes.push((octet >>> 21) | 0x80);
      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
      bytes.push(octet & 0x7F);
    } else {
      bytes.push(((octet >>> 28) | 0x80) & 0xFF);
      bytes.push(((octet >>> 21) | 0x80) & 0xFF);
      bytes.push(((octet >>> 14) | 0x80) & 0xFF);
      bytes.push(((octet >>> 7) | 0x80) & 0xFF);
      bytes.push(octet & 0x7F);
    }
  }

  var tmp = s.split('.');
  var bytes = [];
  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
  tmp.slice(2).forEach(function (b) {
    encodeOctet(bytes, parseInt(b, 10));
  });

  var self = this;
  this._ensure(2 + bytes.length);
  this.writeByte(tag);
  this.writeLength(bytes.length);
  bytes.forEach(function (b) {
    self.writeByte(b);
  });
};


Writer.prototype.writeLength = function (len) {
  if (typeof (len) !== 'number')
    throw new TypeError('argument must be a Number');

  this._ensure(4);

  if (len <= 0x7f) {
    this._buf[this._offset++] = len;
  } else if (len <= 0xff) {
    this._buf[this._offset++] = 0x81;
    this._buf[this._offset++] = len;
  } else if (len <= 0xffff) {
    this._buf[this._offset++] = 0x82;
    this._buf[this._offset++] = len >> 8;
    this._buf[this._offset++] = len;
  } else if (len <= 0xffffff) {
    this._buf[this._offset++] = 0x83;
    this._buf[this._offset++] = len >> 16;
    this._buf[this._offset++] = len >> 8;
    this._buf[this._offset++] = len;
  } else {
    throw newInvalidAsn1Error('Length too long (> 4 bytes)');
  }
};

Writer.prototype.startSequence = function (tag) {
  if (typeof (tag) !== 'number')
    tag = ASN1.Sequence | ASN1.Constructor;

  this.writeByte(tag);
  this._seq.push(this._offset);
  this._ensure(3);
  this._offset += 3;
};


Writer.prototype.endSequence = function () {
  var seq = this._seq.pop();
  var start = seq + 3;
  var len = this._offset - start;

  if (len <= 0x7f) {
    this._shift(start, len, -2);
    this._buf[seq] = len;
  } else if (len <= 0xff) {
    this._shift(start, len, -1);
    this._buf[seq] = 0x81;
    this._buf[seq + 1] = len;
  } else if (len <= 0xffff) {
    this._buf[seq] = 0x82;
    this._buf[seq + 1] = len >> 8;
    this._buf[seq + 2] = len;
  } else if (len <= 0xffffff) {
    this._shift(start, len, 1);
    this._buf[seq] = 0x83;
    this._buf[seq + 1] = len >> 16;
    this._buf[seq + 2] = len >> 8;
    this._buf[seq + 3] = len;
  } else {
    throw newInvalidAsn1Error('Sequence too long');
  }
};


Writer.prototype._shift = function (start, len, shift) {
  assert.ok(start !== undefined);
  assert.ok(len !== undefined);
  assert.ok(shift);

  this._buf.copy(this._buf, start + shift, start, start + len);
  this._offset += shift;
};

Writer.prototype._ensure = function (len) {
  assert.ok(len);

  if (this._size - this._offset < len) {
    var sz = this._size * this._options.growthFactor;
    if (sz - this._offset < len)
      sz += len;

    var buf = Buffer.alloc(sz);

    this._buf.copy(buf, 0, 0, this._offset);
    this._buf = buf;
    this._size = sz;
  }
};



// --- Exported API

module.exports = Writer;


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

var _ = __webpack_require__(21)._;

function formatParse(format) {
    format = format.split('-');
    var keyType = 'private';
    var keyOpt = {type: 'default'};

    for (var i = 1; i < format.length; i++) {
        if (format[i]) {
            switch (format[i]) {
                case 'public':
                    keyType = format[i];
                    break;
                case 'private':
                    keyType = format[i];
                    break;
                case 'pem':
                    keyOpt.type = format[i];
                    break;
                case 'der':
                    keyOpt.type = format[i];
                    break;
            }
        }
    }

    return {scheme: format[0], keyType: keyType, keyOpt: keyOpt};
}

module.exports = {
    pkcs1: __webpack_require__(531),
    pkcs8: __webpack_require__(532),
    components: __webpack_require__(533),

    isPrivateExport: function (format) {
        return module.exports[format] && typeof module.exports[format].privateExport === 'function';
    },

    isPrivateImport: function (format) {
        return module.exports[format] && typeof module.exports[format].privateImport === 'function';
    },

    isPublicExport: function (format) {
        return module.exports[format] && typeof module.exports[format].publicExport === 'function';
    },

    isPublicImport: function (format) {
        return module.exports[format] && typeof module.exports[format].publicImport === 'function';
    },

    detectAndImport: function (key, data, format) {
        if (format === undefined) {
            for (var scheme in module.exports) {
                if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {
                    return true;
                }
            }
        } else if (format) {
            var fmt = formatParse(format);

            if (module.exports[fmt.scheme]) {
                if (fmt.keyType === 'private') {
                    module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);
                } else {
                    module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);
                }
            } else {
                throw Error('Unsupported key format');
            }
        }

        return false;
    },

    detectAndExport: function (key, format) {
        if (format) {
            var fmt = formatParse(format);

            if (module.exports[fmt.scheme]) {
                if (fmt.keyType === 'private') {
                    if (!key.isPrivate()) {
                        throw Error("This is not private key");
                    }
                    return module.exports[fmt.scheme].privateExport(key, fmt.keyOpt);
                } else {
                    if (!key.isPublic()) {
                        throw Error("This is not public key");
                    }
                    return module.exports[fmt.scheme].publicExport(key, fmt.keyOpt);
                }
            } else {
                throw Error('Unsupported key format');
            }
        }
    }
};

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var ber = __webpack_require__(138).Ber;
var _ = __webpack_require__(21)._;
var utils = __webpack_require__(21);

const PRIVATE_OPENING_BOUNDARY = '-----BEGIN RSA PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END RSA PRIVATE KEY-----';

const PUBLIC_OPENING_BOUNDARY = '-----BEGIN RSA PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END RSA PUBLIC KEY-----';

module.exports = {
    privateExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var d = key.d.toBuffer();
        var p = key.p.toBuffer();
        var q = key.q.toBuffer();
        var dmp1 = key.dmp1.toBuffer();
        var dmq1 = key.dmq1.toBuffer();
        var coeff = key.coeff.toBuffer();

        var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
        var writer = new ber.Writer({size: length});

        writer.startSequence();
        writer.writeInt(0);
        writer.writeBuffer(n, 2);
        writer.writeInt(key.e);
        writer.writeBuffer(d, 2);
        writer.writeBuffer(p, 2);
        writer.writeBuffer(q, 2);
        writer.writeBuffer(dmp1, 2);
        writer.writeBuffer(dmq1, 2);
        writer.writeBuffer(coeff, 2);
        writer.endSequence();

        if (options.type === 'der') {
            return writer.buffer;
        } else {
            return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
        }
    },

    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            } else {
                throw Error('Unsupported key format');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var reader = new ber.Reader(buffer);
        reader.readSequence();
        reader.readString(2, true); // just zero
        key.setPrivate(
            reader.readString(2, true),  // modulus
            reader.readString(2, true),  // publicExponent
            reader.readString(2, true),  // privateExponent
            reader.readString(2, true),  // prime1
            reader.readString(2, true),  // prime2
            reader.readString(2, true),  // exponent1 -- d mod (p1)
            reader.readString(2, true),  // exponent2 -- d mod (q-1)
            reader.readString(2, true)   // coefficient -- (inverse of q) mod p
        );
    },

    publicExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var length = n.length + 512; // magic

        var bodyWriter = new ber.Writer({size: length});
        bodyWriter.startSequence();
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.endSequence();

        if (options.type === 'der') {
            return bodyWriter.buffer;
        } else {
            return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(bodyWriter.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
        }
    },

    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var body = new ber.Reader(buffer);
        body.readSequence();
        key.setPublic(
            body.readString(0x02, true), // modulus
            body.readString(0x02, true)  // publicExponent
        );
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        // [\S\s]* matches zero or more of any character
        if (/^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }

        if (/^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }

        return false;
    }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var ber = __webpack_require__(138).Ber;
var _ = __webpack_require__(21)._;
var PUBLIC_RSA_OID = '1.2.840.113549.1.1.1';
var utils = __webpack_require__(21);

const PRIVATE_OPENING_BOUNDARY = '-----BEGIN PRIVATE KEY-----';
const PRIVATE_CLOSING_BOUNDARY = '-----END PRIVATE KEY-----';

const PUBLIC_OPENING_BOUNDARY = '-----BEGIN PUBLIC KEY-----';
const PUBLIC_CLOSING_BOUNDARY = '-----END PUBLIC KEY-----';

module.exports = {
    privateExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var d = key.d.toBuffer();
        var p = key.p.toBuffer();
        var q = key.q.toBuffer();
        var dmp1 = key.dmp1.toBuffer();
        var dmq1 = key.dmq1.toBuffer();
        var coeff = key.coeff.toBuffer();

        var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512; // magic
        var bodyWriter = new ber.Writer({size: length});

        bodyWriter.startSequence();
        bodyWriter.writeInt(0);
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.writeBuffer(d, 2);
        bodyWriter.writeBuffer(p, 2);
        bodyWriter.writeBuffer(q, 2);
        bodyWriter.writeBuffer(dmp1, 2);
        bodyWriter.writeBuffer(dmq1, 2);
        bodyWriter.writeBuffer(coeff, 2);
        bodyWriter.endSequence();

        var writer = new ber.Writer({size: length});
        writer.startSequence();
        writer.writeInt(0);
        writer.startSequence();
        writer.writeOID(PUBLIC_RSA_OID);
        writer.writeNull();
        writer.endSequence();
        writer.writeBuffer(bodyWriter.buffer, 4);
        writer.endSequence();

        if (options.type === 'der') {
            return writer.buffer;
        } else {
            return PRIVATE_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PRIVATE_CLOSING_BOUNDARY;
        }
    },

    privateImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY)
                    .replace('-----END PRIVATE KEY-----', '')
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            } else {
                throw Error('Unsupported key format');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var reader = new ber.Reader(buffer);
        reader.readSequence();
        reader.readInt(0);
        var header = new ber.Reader(reader.readString(0x30, true));

        if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
            throw Error('Invalid Public key format');
        }

        var body = new ber.Reader(reader.readString(0x04, true));
        body.readSequence();
        body.readString(2, true); // just zero
        key.setPrivate(
            body.readString(2, true),  // modulus
            body.readString(2, true),  // publicExponent
            body.readString(2, true),  // privateExponent
            body.readString(2, true),  // prime1
            body.readString(2, true),  // prime2
            body.readString(2, true),  // exponent1 -- d mod (p1)
            body.readString(2, true),  // exponent2 -- d mod (q-1)
            body.readString(2, true)   // coefficient -- (inverse of q) mod p
        );
    },

    publicExport: function (key, options) {
        options = options || {};

        var n = key.n.toBuffer();
        var length = n.length + 512; // magic

        var bodyWriter = new ber.Writer({size: length});
        bodyWriter.writeByte(0);
        bodyWriter.startSequence();
        bodyWriter.writeBuffer(n, 2);
        bodyWriter.writeInt(key.e);
        bodyWriter.endSequence();

        var writer = new ber.Writer({size: length});
        writer.startSequence();
        writer.startSequence();
        writer.writeOID(PUBLIC_RSA_OID);
        writer.writeNull();
        writer.endSequence();
        writer.writeBuffer(bodyWriter.buffer, 3);
        writer.endSequence();

        if (options.type === 'der') {
            return writer.buffer;
        } else {
            return PUBLIC_OPENING_BOUNDARY + '\n' + utils.linebrk(writer.buffer.toString('base64'), 64) + '\n' + PUBLIC_CLOSING_BOUNDARY;
        }
    },

    publicImport: function (key, data, options) {
        options = options || {};
        var buffer;

        if (options.type !== 'der') {
            if (Buffer.isBuffer(data)) {
                data = data.toString('utf8');
            }

            if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY)
                    .replace(/\s+|\n\r|\n|\r$/gm, '');
                buffer = Buffer.from(pem, 'base64');
            }
        } else if (Buffer.isBuffer(data)) {
            buffer = data;
        } else {
            throw Error('Unsupported key format');
        }

        var reader = new ber.Reader(buffer);
        reader.readSequence();
        var header = new ber.Reader(reader.readString(0x30, true));

        if (header.readOID(0x06, true) !== PUBLIC_RSA_OID) {
            throw Error('Invalid Public key format');
        }

        var body = new ber.Reader(reader.readString(0x03, true));
        body.readByte();
        body.readSequence();
        key.setPublic(
            body.readString(0x02, true), // modulus
            body.readString(0x02, true)  // publicExponent
        );
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        if (/^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(data)) {
            module.exports.privateImport(key, data);
            return true;
        }

        if (/^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(data)) {
            module.exports.publicImport(key, data);
            return true;
        }

        return false;
    }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

var _ = __webpack_require__(21)._;
var utils = __webpack_require__(21);

module.exports = {
    privateExport: function (key, options) {
        return {
            n: key.n.toBuffer(),
            e: key.e,
            d: key.d.toBuffer(),
            p: key.p.toBuffer(),
            q: key.q.toBuffer(),
            dmp1: key.dmp1.toBuffer(),
            dmq1: key.dmq1.toBuffer(),
            coeff: key.coeff.toBuffer()
        };
    },

    privateImport: function (key, data, options) {
        if (data.n && data.e && data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
            key.setPrivate(
                data.n,
                data.e,
                data.d,
                data.p,
                data.q,
                data.dmp1,
                data.dmq1,
                data.coeff
            );
        } else {
            throw Error("Invalid key data");
        }
    },

    publicExport: function (key, options) {
        return {
            n: key.n.toBuffer(),
            e: key.e
        };
    },

    publicImport: function (key, data, options) {
        if (data.n && data.e) {
            key.setPublic(
                data.n,
                data.e
            );
        } else {
            throw Error("Invalid key data");
        }
    },

    /**
     * Trying autodetect and import key
     * @param key
     * @param data
     */
    autoImport: function (key, data) {
        if (data.n && data.e) {
            if (data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
                module.exports.privateImport(key, data);
                return true;
            } else {
                module.exports.publicImport(key, data);
                return true;
            }
        }

        return false;
    }
};


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeECDsa = void 0;
const crypto = __webpack_require__(10);
const buffer_1 = __webpack_require__(0);
const publicKeyAlgorithm_1 = __webpack_require__(69);
const ecdsaCurves_1 = __webpack_require__(91);
const bigInt_1 = __webpack_require__(28);
const derData_1 = __webpack_require__(137);
const sshData_1 = __webpack_require__(16);
const keyFormatters_1 = __webpack_require__(244);
const nodeVersionParts = process.versions.node.split('.').map((v) => parseInt(v, 10));
const nodeGenerateKeyPairSupport = nodeVersionParts[0] > 10 || (nodeVersionParts[0] === 10 && nodeVersionParts[1] >= 12);
const nodeKeyObjectSupport = nodeVersionParts[0] > 11 || (nodeVersionParts[0] === 11 && nodeVersionParts[1] >= 6);
class NodeECDsaKeyPair {
    /**
     * Constructs a new ECDSA key pair object.
     *
     * @param algorithmName Key pair algorithm name. If unspecified, the key pair object must be
     * initialized before use via `importParameters()`.
     */
    constructor(algorithmName) {
        this.comment = null;
        if (algorithmName) {
            this.algorithmName = algorithmName;
        }
    }
    get hasPublicKey() {
        return !!this.publicKey;
    }
    get hasPrivateKey() {
        return !!this.privateKey;
    }
    get keyAlgorithmName() {
        return this.algorithmName;
    }
    get algorithmName() {
        return this.algorithm;
    }
    set algorithmName(value) {
        const curveName = value.split('-')[2];
        this.curve = ecdsaCurves_1.curves.find((c) => c.name === curveName);
        if (!this.curve) {
            throw new Error('Invalid or unsupported ECDSA algorithm: ' + value);
        }
        this.algorithm = value;
    }
    generate() {
        if (nodeGenerateKeyPairSupport && nodeKeyObjectSupport) {
            return this.generateNodeKeyPairObjects();
        }
        else if (nodeGenerateKeyPairSupport) {
            return this.generateNodeKeyPairBuffers();
        }
        else {
            return this.generateExternalKeyPair();
        }
    }
    async generateNodeKeyPairObjects() {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                namedCurve: this.curve.shortName,
            };
            try {
                crypto.generateKeyPair('ec', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateNodeKeyPairBuffers() {
        [this.publicKey, this.privateKey] = await new Promise((resolve, reject) => {
            const keyGenParams = {
                namedCurve: this.curve.shortName,
                publicKeyEncoding: { type: 'spki', format: 'pem' },
                privateKeyEncoding: {
                    type: 'sec1',
                    format: 'pem',
                    cipher: undefined,
                    passphrase: undefined,
                },
            };
            try {
                crypto.generateKeyPair('ec', keyGenParams, (err, publicKey, privateKey) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve([publicKey, privateKey]);
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    async generateExternalKeyPair() {
        throw new Error('This version of node does not support generating key pairs. Use node >= 10.12.');
    }
    async setPublicKeyBytes(keyBytes, algorithmName) {
        if (!keyBytes) {
            throw new TypeError('Buffer is required.');
        }
        // Read public key in SSH format.
        const reader = new sshData_1.SshDataReader(keyBytes);
        const readAlgorithmName = reader.readString('ascii');
        this.algorithmName = algorithmName || readAlgorithmName;
        const curveName = reader.readString('ascii');
        this.algorithmName = `ecdsa-sha2-${curveName}`;
        const xy = reader.readBinary();
        const x = bigInt_1.BigInt.fromBytes(xy.slice(1, 1 + (xy.length - 1) / 2), { unsigned: true });
        const y = bigInt_1.BigInt.fromBytes(xy.slice(1 + (xy.length - 1) / 2), { unsigned: true });
        const derKeyBytes = keyFormatters_1.Sec1KeyFormatter.formatECPublic({
            curve: { name: this.curve.name, oid: this.curve.oid },
            x,
            y,
        });
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: derKeyBytes,
                type: 'spki',
                format: 'der',
            });
        }
        else {
            this.publicKey = (0, keyFormatters_1.formatPem)(derKeyBytes, 'PUBLIC KEY');
        }
    }
    async getPublicKeyBytes(algorithmName) {
        if (!this.publicKey) {
            return null;
        }
        let derKeyBytes;
        if (typeof this.publicKey === 'string') {
            derKeyBytes = (0, keyFormatters_1.parsePem)(this.publicKey);
        }
        else {
            derKeyBytes = this.publicKey.export({
                type: 'spki',
                format: 'der',
            });
        }
        const ec = keyFormatters_1.Sec1KeyFormatter.parseECPublic(derKeyBytes);
        // Write public key in SSH format.
        algorithmName = algorithmName || this.algorithmName || this.keyAlgorithmName;
        const keyWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(512));
        keyWriter.writeString(algorithmName, 'ascii');
        keyWriter.writeString(this.curve.name, 'ascii');
        const keySizeInBytes = Math.ceil(this.curve.keySize / 8);
        const xBytes = ec.x.toBytes({ unsigned: true, length: keySizeInBytes });
        const yBytes = ec.y.toBytes({ unsigned: true, length: keySizeInBytes });
        keyWriter.writeUInt32(1 + xBytes.length + yBytes.length);
        keyWriter.writeByte(4); // Indicates uncompressed curve format
        keyWriter.write(xBytes);
        keyWriter.write(yBytes);
        const keyBytes = keyWriter.toBuffer();
        return keyBytes;
    }
    async importParameters(parameters) {
        if (!parameters.curve)
            throw new TypeError('A curve is required.');
        let curve;
        if (parameters.curve.oid) {
            curve = ecdsaCurves_1.curves.find((c) => c.oid === parameters.curve.oid);
            if (!curve) {
                throw new Error(`Unsupported curve OID: ${parameters.curve.oid}`);
            }
        }
        else if (parameters.curve.name) {
            curve = ecdsaCurves_1.curves.find((c) => c.name === parameters.curve.name);
            if (!curve) {
                throw new Error(`Unsupported curve: ${parameters.curve.name}`);
            }
        }
        else {
            throw new TypeError('A curve OID or name is required.');
        }
        this.algorithmName = 'ecdsa-sha2-' + curve.name;
        const publicKeyBytes = keyFormatters_1.Sec1KeyFormatter.formatECPublic(parameters);
        if (nodeKeyObjectSupport) {
            this.publicKey = crypto.createPublicKey({
                key: publicKeyBytes,
                type: 'spki',
                format: 'der',
            });
        }
        else {
            this.publicKey = (0, keyFormatters_1.formatPem)(publicKeyBytes, 'EC PUBLIC KEY');
        }
        if (parameters.d) {
            const privateKeyBytes = keyFormatters_1.Sec1KeyFormatter.formatECPrivate(parameters);
            if (nodeKeyObjectSupport) {
                this.privateKey = crypto.createPrivateKey({
                    key: privateKeyBytes,
                    type: 'sec1',
                    format: 'der',
                });
            }
            else {
                this.privateKey = (0, keyFormatters_1.formatPem)(privateKeyBytes, 'EC PRIVATE KEY');
            }
        }
        else {
            this.privateKey = undefined;
        }
    }
    async exportParameters() {
        var _a, _b;
        if (!this.publicKey) {
            throw new Error('Key is not present.');
        }
        let derKeyBytes;
        if (typeof this.publicKey === 'string') {
            derKeyBytes = (0, keyFormatters_1.parsePem)((_a = this.privateKey) !== null && _a !== void 0 ? _a : this.publicKey);
        }
        else {
            derKeyBytes = ((_b = this.privateKey) !== null && _b !== void 0 ? _b : this.publicKey).export({
                type: this.privateKey ? 'sec1' : 'spki',
                format: 'der',
            });
        }
        return this.privateKey
            ? keyFormatters_1.Sec1KeyFormatter.parseECPrivate(derKeyBytes)
            : keyFormatters_1.Sec1KeyFormatter.parseECPublic(derKeyBytes);
    }
    dispose() { }
}
class NodeECDsa extends publicKeyAlgorithm_1.PublicKeyAlgorithm {
    constructor(name, hashAlgorithmName) {
        super(name, name, // The key algorithm name is the same (unlike RSA).
        hashAlgorithmName);
    }
    createKeyPair() {
        return new NodeECDsaKeyPair(this.name);
    }
    async generateKeyPair() {
        const ecdsaKey = new NodeECDsaKeyPair(this.name);
        await ecdsaKey.generate();
        return ecdsaKey;
    }
    createSigner(keyPair) {
        if (!(keyPair instanceof NodeECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        return new NodeECDsaSignerVerifier(keyPair, NodeECDsa.convertHashAlgorithmName(this.hashAlgorithmName));
    }
    createVerifier(keyPair) {
        if (!(keyPair instanceof NodeECDsaKeyPair)) {
            throw new TypeError('ECDSA key pair object expected.');
        }
        return new NodeECDsaSignerVerifier(keyPair, NodeECDsa.convertHashAlgorithmName(this.hashAlgorithmName));
    }
    static convertHashAlgorithmName(hashAlgorithmName) {
        return hashAlgorithmName.replace('SHA2-', 'SHA');
    }
    /* @internal */
    static getSignatureLength(keySizeInBits) {
        // The signature is double the key size, but formatted as 2 bigints.
        // To each bigint add 4 for the length and 1 for a leading zero.
        const keySizeInBytes = Math.ceil(keySizeInBits / 8);
        return (4 + 1 + keySizeInBytes) * 2;
    }
}
exports.NodeECDsa = NodeECDsa;
NodeECDsa.ecdsaSha2Nistp256 = 'ecdsa-sha2-nistp256';
NodeECDsa.ecdsaSha2Nistp384 = 'ecdsa-sha2-nistp384';
NodeECDsa.ecdsaSha2Nistp521 = 'ecdsa-sha2-nistp521';
NodeECDsa.curves = ecdsaCurves_1.curves;
// eslint-disable-next-line @typescript-eslint/tslint/config
NodeECDsa.KeyPair = NodeECDsaKeyPair;
class NodeECDsaSignerVerifier {
    constructor(keyPair, hashAlgorithmName) {
        this.keyPair = keyPair;
        this.hashAlgorithmName = hashAlgorithmName;
    }
    get digestLength() {
        const curve = this.keyPair.curve;
        if (!curve) {
            return 0;
        }
        else {
            return NodeECDsa.getSignatureLength(curve.keySize);
        }
    }
    async sign(data) {
        if (!this.keyPair.privateKey) {
            throw new Error('Private key not set.');
        }
        const signer = crypto.createSign(this.hashAlgorithmName);
        signer.update(data);
        let signature = signer.sign(this.keyPair.privateKey);
        // Reformat the signature integer bytes as required by SSH.
        const signatureReader = new derData_1.DerReader(signature);
        const x = signatureReader.readInteger();
        const y = signatureReader.readInteger();
        const keySizeInBytes = Math.ceil(this.keyPair.curve.keySize / 8);
        const signatureWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(this.digestLength));
        signatureWriter.writeBinary(x.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signatureWriter.writeBinary(y.toBytes({ unsigned: true, length: keySizeInBytes + 1 }));
        signature = signatureWriter.toBuffer();
        return signature;
    }
    async verify(data, signature) {
        if (!this.keyPair.publicKey) {
            throw new Error('Public key not set.');
        }
        // Reformat the signature integer bytes as required by node.
        const signatureReader = new sshData_1.SshDataReader(signature);
        const x = signatureReader.readBigInt();
        const y = signatureReader.readBigInt();
        const signatureWriter = new derData_1.DerWriter(buffer_1.Buffer.alloc(signature.length));
        signatureWriter.writeInteger(x);
        signatureWriter.writeInteger(y);
        signature = signatureWriter.toBuffer();
        const verifier = crypto.createVerify(this.hashAlgorithmName);
        verifier.update(data);
        const result = verifier.verify(this.keyPair.publicKey, signature);
        return result;
    }
    dispose() { }
}
//# sourceMappingURL=nodeECDsa.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEncryption = void 0;
const crypto = __webpack_require__(10);
const buffer_1 = __webpack_require__(0);
const encryptionAlgorithm_1 = __webpack_require__(132);
const trace_1 = __webpack_require__(24);
class NodeEncryption extends encryptionAlgorithm_1.EncryptionAlgorithm {
    constructor(name, algorithmName, cipherMode, keySizeInBits) {
        super(name);
        this.algorithmName = algorithmName;
        this.cipherMode = cipherMode;
        this.keySizeInBits = keySizeInBits;
        if (algorithmName !== 'AES') {
            throw new Error(`Unsupported encryption algorithm: ${algorithmName}`);
        }
        this.blockSizeInBits = NodeEncryption.getBlockSize(algorithmName);
    }
    get keyLength() {
        return this.keySizeInBits / 8;
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    async createCipher(isEncryption, key, iv) {
        let cipher;
        if (this.cipherMode === 'CTR' || this.cipherMode === 'CBC') {
            cipher = new NodeAesCipher(isEncryption, this.keySizeInBits, this.blockSizeInBits, key, iv, this.cipherMode);
        }
        else if (this.cipherMode === 'GCM') {
            cipher = new NodeAesGcmCipher(isEncryption, this.keySizeInBits, this.blockSizeInBits, key, iv);
        }
        else {
            throw new Error(`Unsupported cipher mode: ${this.cipherMode}`);
        }
        return cipher;
    }
    static getBlockSize(algorithmName) {
        if (algorithmName === 'AES') {
            return 128;
        }
        else {
            throw new Error(`Unsupported encryption algorithm: ${algorithmName}`);
        }
    }
}
exports.NodeEncryption = NodeEncryption;
class NodeAesCipher {
    constructor(isEncryption, keySizeInBits, blockSizeInBits, key, iv, cipherMode) {
        this.isEncryption = isEncryption;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = blockSizeInBits;
        const nodeAlgorithm = `AES-${this.keySizeInBits}-${cipherMode}`;
        this.cipher = this.isEncryption
            ? crypto.createCipheriv(nodeAlgorithm, key, iv)
            : crypto.createDecipheriv(nodeAlgorithm, key, iv);
        this.cipher.setAutoPadding(false);
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    transform(data) {
        const result = this.cipher.update(data);
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        return Promise.resolve(result);
    }
    dispose() { }
}
class NodeAesGcmCipher {
    constructor(isEncryption, keySizeInBits, blockSizeInBits, key, iv) {
        this.isEncryption = isEncryption;
        this.keySizeInBits = keySizeInBits;
        this.blockSizeInBits = blockSizeInBits;
        this.tag = null;
        this.algorithmName = `aes-${this.keySizeInBits}-gcm`;
        this.key = buffer_1.Buffer.alloc(key.length);
        key.copy(this.key);
        // Ininitialize the nonce to the first 12 bytes of the IV. It will be incremented by each op.
        this.nonce = buffer_1.Buffer.alloc(12);
        iv.copy(this.nonce, 0, 0, 12);
        this.associatedData = buffer_1.Buffer.alloc(4);
    }
    get blockLength() {
        return this.blockSizeInBits / 8;
    }
    get digestLength() {
        return 16;
    }
    get authenticatedEncryption() {
        return true;
    }
    transform(data) {
        if (data.length % this.blockLength !== 0) {
            const message = 'Encrypt/decrypt input has invalid length ' +
                `${data.length}, not a multiple of block size ${this.blockLength}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        const cipher = this.isEncryption
            ? crypto.createCipheriv(this.algorithmName, this.key, this.nonce)
            : crypto.createDecipheriv(this.algorithmName, this.key, this.nonce);
        // Associated data is the 32-bit packet length.
        const packetLength = data.length;
        this.associatedData[0] = packetLength >>> 24;
        this.associatedData[1] = packetLength >>> 16;
        this.associatedData[2] = packetLength >>> 8;
        this.associatedData[3] = packetLength;
        cipher.setAAD(this.associatedData);
        if (!this.isEncryption) {
            if (!this.tag) {
                throw new Error('AES-GCM tag was not set before decrypting.');
            }
            cipher.setAuthTag(this.tag);
        }
        const result = cipher.update(data);
        if (result.length !== data.length) {
            const message = 'Result from encrypt/decrypt has invalid length ' +
                `${result.length}, expected ${data.length}.`;
            (0, trace_1.trace)('Error: ' + message);
            throw new Error(message);
        }
        cipher.final();
        if (this.isEncryption) {
            this.tag = cipher.getAuthTag();
        }
        else {
            this.tag = null;
        }
        // Increment the counter (last 8 bytes of the nonce) as a big-endian integer.
        // First increment the last byte, and if it reaches 0 then increment the
        // next-to-last byte, and so on.
        let k = 12;
        while (--k >= 4) {
            this.nonce[k]++;
            if (this.nonce[k] !== 0) {
                break;
            }
        }
        return Promise.resolve(result);
    }
    async sign(data) {
        if (!this.tag) {
            throw new Error('AES-GCM tag was not obtained by encrypting.');
        }
        return this.tag;
    }
    async verify(data, signature) {
        if (signature.length !== this.digestLength) {
            throw new Error('Incorrect AES-GCM tag length.');
        }
        this.tag = signature;
        return true;
    }
    dispose() { }
}
//# sourceMappingURL=nodeEncryption.js.map

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeRandom = void 0;
const crypto = __webpack_require__(10);
class NodeRandom {
    getBytes(buffer) {
        const randomBytes = crypto.randomBytes(buffer.length);
        randomBytes.copy(buffer);
    }
}
exports.NodeRandom = NodeRandom;
//# sourceMappingURL=nodeRandom.js.map

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshProtocol = void 0;
const trace_1 = __webpack_require__(24);
const buffer_1 = __webpack_require__(0);
const queue_1 = __webpack_require__(93);
const semaphore_1 = __webpack_require__(72);
const sshMessage_1 = __webpack_require__(50);
const sshData_1 = __webpack_require__(16);
const transportMessages_1 = __webpack_require__(29);
const kexMessages_1 = __webpack_require__(143);
const connectionMessages_1 = __webpack_require__(38);
const errors_1 = __webpack_require__(25);
class SequencedMessage {
    constructor(sequence, message) {
        this.sequence = sequence;
        this.message = message;
    }
}
/**
 * Implements the base SSH protocol (sending and receiving messages) over a Stream.
 */
class SshProtocol {
    constructor(stream, config, metrics) {
        this.config = config;
        this.metrics = metrics;
        this.sessionSemaphore = new semaphore_1.Semaphore(1);
        this.inboundPacketSequence = 0;
        this.outboundPacketSequence = 0;
        this.inboundFlow = 0;
        this.outboundFlow = 0;
        // Sent messages are kept for a short time, until the other side acknowledges
        // that they have been received. This enables re-sending lost messages on reconnect.
        this.recentSentMessages = new queue_1.Queue();
        // Initialize buffers that are re-used for each sent/received message.
        // The buffers will be automatically expanded as necessary.
        this.sendWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(1024));
        this.receiveWriter = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(1024));
        this.extensions = null;
        this.kexService = null;
        this.algorithms = null;
        this.outgoingMessagesHaveLatencyInfo = false;
        this.incomingMessagesHaveLatencyInfo = false;
        this.outgoingMessagesHaveReconnectInfo = false;
        this.incomingMessagesHaveReconnectInfo = false;
        this.stream = stream;
    }
    get lastIncomingSequence() {
        return this.inboundPacketSequence - 1;
    }
    getSentMessages(startingSequenceNumber) {
        if (startingSequenceNumber === this.outboundPacketSequence + 1) {
            // The recipient is already up-to-date.
            return [];
        }
        if (this.recentSentMessages.size > 0 &&
            startingSequenceNumber < this.recentSentMessages.peek().sequence) {
            // The cached recent messages do not go back as far as the requested sequence number.
            // This should never happen because messages are not dropped from this list until
            // the other side acknowledges they have been received, so they should not be
            // requested again after reconnecting.
            return null;
        }
        // Return all messages starting with the requested sequence number.
        // Exclude key exchange messages because they cannot be retransmitted; a reconnected
        // session will do key exchange separately. Also exclude any disconnect messages that
        // may have been attempted when the connection was lost.
        const messagesToRetransmit = new Array();
        for (let sequencedMessage of this.recentSentMessages) {
            if (sequencedMessage.sequence >= startingSequenceNumber) {
                const message = sequencedMessage.message;
                if (!(message instanceof kexMessages_1.KeyExchangeMessage || message instanceof transportMessages_1.DisconnectMessage)) {
                    messagesToRetransmit.push(message);
                }
            }
        }
        return messagesToRetransmit;
    }
    async writeProtocolVersion(version, cancellation) {
        const stream = this.stream;
        if (!stream)
            throw new Error('SSH session disconnected.');
        const data = buffer_1.Buffer.from(version + '\r\n');
        await stream.write(data, cancellation);
        this.metrics.addMessageSent(data.length);
        return Promise.resolve();
    }
    async readProtocolVersion(cancellation) {
        const stream = this.stream;
        if (!stream)
            throw new Error('SSH session disconnected.');
        // http://tools.ietf.org/html/rfc4253#section-4.2
        const buffer = buffer_1.Buffer.alloc(255);
        let lineCount = 0;
        for (let i = 0; i < buffer.length; i++) {
            const byteBuffer = await stream.read(1, cancellation);
            if (!byteBuffer) {
                break;
            }
            buffer[i] = byteBuffer[0];
            const carriageReturn = 0x0d;
            const lineFeed = 0x0a;
            if (i > 0 && buffer[i - 1] === carriageReturn && buffer[i] === lineFeed) {
                const line = buffer.toString('utf8', 0, i - 1);
                if (line.startsWith('SSH-')) {
                    this.metrics.addMessageReceived(i + 1);
                    return line;
                }
                else if (lineCount > 20) {
                    // Give up if a version string was not found after 20 lines.
                    break;
                }
                else {
                    // Ignore initial lines before the version line.
                    lineCount++;
                    i = -1;
                }
            }
        }
        throw new errors_1.SshConnectionError('Failed to read the protocol version', transportMessages_1.SshDisconnectReason.protocolError);
    }
    async handleNewKeys(cancellation) {
        try {
            await this.sessionSemaphore.wait(cancellation);
            this.inboundFlow = 0;
            this.outboundFlow = 0;
            this.algorithms = this.kexService.finishKeyExchange();
        }
        finally {
            this.sessionSemaphore.release();
        }
    }
    /**
     * Attempts to read from the stream until the buffer is full.
     * @returns True if the read succeeded, false if the stream was disposed.
     */
    async read(buffer, cancellation) {
        const stream = this.stream;
        if (!stream)
            return false;
        let bytesRead = 0;
        do {
            let data;
            try {
                data = await stream.read(buffer.length - bytesRead, cancellation);
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                if (stream.isDisposed)
                    return false;
                stream.dispose();
                this.stream = null;
                (0, trace_1.trace)('Error reading from stream: ' + e.message);
                throw new errors_1.SshConnectionError('Error reading from stream: ' + e.message, transportMessages_1.SshDisconnectReason.connectionLost);
            }
            if (!data)
                return false;
            data.copy(buffer, bytesRead);
            bytesRead += data.length;
        } while (bytesRead < buffer.length);
        return true;
    }
    /**
     * Attempts to write data to the stream.
     * @returns True if the write succeeded, false if the stream was disposed.
     */
    async write(data, cancellation) {
        const stream = this.stream;
        if (!stream)
            return false;
        try {
            await stream.write(data, cancellation);
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            if (stream.isDisposed)
                return false;
            stream.dispose();
            this.stream = null;
            (0, trace_1.trace)('Error writing to stream: ' + e.message);
            throw new errors_1.SshConnectionError('Error writing to stream: ' + e.message, transportMessages_1.SshDisconnectReason.connectionLost);
        }
        return true;
    }
    async considerReExchange(initial, cancellation) {
        const kexService = this.kexService;
        if (!kexService)
            return;
        let kexMessage = null;
        let kexGuessMessage = null;
        if (!kexService.exchanging &&
            (initial || this.inboundFlow + this.outboundFlow > this.config.keyRotationThreshold)) {
            [kexMessage, kexGuessMessage] = await kexService.startKeyExchange(initial);
        }
        if (kexMessage) {
            await this.sendMessage(kexMessage, cancellation);
            if (kexGuessMessage) {
                await this.sendMessage(kexGuessMessage, cancellation);
            }
        }
    }
    async computeHmac(signer, payload, seq) {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(4 + payload.length));
        writer.writeUInt32(seq);
        writer.write(payload);
        const result = await signer.sign(writer.toBuffer());
        return result;
    }
    async verifyHmac(verifier, payload, seq, mac) {
        const writer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(4 + payload.length));
        writer.writeUInt32(seq);
        writer.write(payload);
        const result = await verifier.verify(writer.toBuffer(), mac);
        return result;
    }
    async readAndVerifyHmac(verifier, data, macBuffer, cancellation) {
        if (!(await this.read(macBuffer, cancellation))) {
            return false;
        }
        const verified = await this.verifyHmac(verifier, data, this.inboundPacketSequence, macBuffer);
        if (!verified) {
            throw new errors_1.SshConnectionError('Invalid MAC', transportMessages_1.SshDisconnectReason.macError);
        }
        return true;
    }
    /**
     * Attemps to write one message to the stream.
     * @returns `true` if writing succeeded, `false` if the stream was disposed.
     * @throws SshConnectionException if writing to the stream failed for any other reason.
     */
    async sendMessage(message, cancellation) {
        var _a;
        const algorithms = this.algorithms;
        const compression = algorithms === null || algorithms === void 0 ? void 0 : algorithms.compressor;
        const encryption = algorithms === null || algorithms === void 0 ? void 0 : algorithms.cipher;
        const hmac = algorithms === null || algorithms === void 0 ? void 0 : algorithms.messageSigner;
        let result;
        await this.sessionSemaphore.wait(cancellation);
        try {
            const blockSize = encryption ? Math.max(8, encryption.blockLength) : 8;
            // Start by writing the uncompressed payload to the buffer at the correct offset.
            const payloadOffset = SshProtocol.packetLengthSize + SshProtocol.paddingLengthSize;
            this.sendWriter.position = payloadOffset;
            message.write(this.sendWriter);
            if (this.outgoingMessagesHaveReconnectInfo) {
                // Write the sequence number of the last inbound packet processed.
                this.sendWriter.writeUInt64(this.lastIncomingSequence);
                if (this.outgoingMessagesHaveLatencyInfo) {
                    // Write the time (in microseconds, not ms) since last packet was received.
                    const timeSinceLastReceivedMessage = Math.min(4294967295, // max uint32
                    Math.round((this.metrics.time - this.lastIncomingTimestamp) * 1000));
                    this.sendWriter.writeUInt32(timeSinceLastReceivedMessage);
                }
            }
            let payload = this.sendWriter.toBuffer().slice(payloadOffset);
            if (compression != null) {
                payload = compression.compress(payload);
            }
            // The packet length is not encrypted when in EtM or AEAD mode.
            const isLengthEncrypted = !((hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) || (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption));
            // http://tools.ietf.org/html/rfc4253
            // 6.  Binary Packet Protocol
            // the total length of (packet_length || padding_length || payload || padding)
            // is a multiple of the cipher block size or 8,
            // padding length must between 4 and 255 bytes.
            let paddingLength = blockSize -
                (((isLengthEncrypted ? SshProtocol.packetLengthSize : 0) +
                    SshProtocol.paddingLengthSize +
                    payload.length) %
                    blockSize);
            if (paddingLength < 4) {
                paddingLength += blockSize;
            }
            const packetLength = SshProtocol.paddingLengthSize + payload.length + paddingLength;
            this.sendWriter.position = 0;
            this.sendWriter.writeUInt32(packetLength);
            this.sendWriter.writeByte(paddingLength);
            // The uncompressed payload was already written at the correct offset.
            // When compression is enabled, rewrite the compressed payload.
            if (compression != null) {
                this.sendWriter.write(payload);
            }
            else {
                this.sendWriter.position += payload.length;
            }
            this.sendWriter.writeRandom(paddingLength);
            payload = this.sendWriter.toBuffer();
            let mac = null;
            if ((hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) && encryption) {
                // In EtM mode, compute the MAC after encrypting. And don't encrypt the length.
                const packetWithoutLength = payload.slice(SshProtocol.packetLengthSize, payload.length);
                const encryptedPacket = await encryption.transform(packetWithoutLength);
                encryptedPacket.copy(packetWithoutLength);
                mac = await this.computeHmac(hmac, payload, this.outboundPacketSequence);
            }
            else if (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption) {
                // With a GCM cipher, the packet length is not included in the plaintext.
                let packetWithoutLength = payload.slice(SshProtocol.packetLengthSize, payload.length);
                const encryptedPacket = await encryption.transform(packetWithoutLength);
                encryptedPacket.copy(packetWithoutLength);
                // The GCM tag was already generated during the transform call above;
                // this just retrieves it.
                mac = await hmac.sign(packetWithoutLength);
            }
            else {
                if (hmac) {
                    mac = await this.computeHmac(hmac, payload, this.outboundPacketSequence);
                }
                if (encryption) {
                    payload = await encryption.transform(payload);
                }
            }
            if (!(message instanceof connectionMessages_1.ChannelDataMessage)) {
                (0, trace_1.trace)(`Sending #${this.outboundPacketSequence} ${message}`);
            }
            else if (trace_1.traceData.enabled) {
                (0, trace_1.traceData)(`Sending #${this.outboundPacketSequence} ${message}`);
            }
            if (this.incomingMessagesHaveReconnectInfo) {
                // Save sent messages in case they need to be re-sent after reconnect.
                // They'll be discarded soon, after the other side acknowledges them.
                const sequencedMessage = new SequencedMessage(this.outboundPacketSequence, message);
                sequencedMessage.sentTime = this.metrics.time;
                this.recentSentMessages.enqueue(sequencedMessage);
            }
            this.outboundPacketSequence++;
            this.outboundFlow += packetLength;
            if (mac) {
                const packet = buffer_1.Buffer.concat([payload, mac], payload.length + mac.length);
                result = await this.write(packet, cancellation);
            }
            else {
                result = await this.write(payload, cancellation);
            }
            this.metrics.addMessageSent(SshProtocol.packetLengthSize + packetLength + ((_a = hmac === null || hmac === void 0 ? void 0 : hmac.digestLength) !== null && _a !== void 0 ? _a : 0));
        }
        finally {
            this.sessionSemaphore.release();
        }
        await this.considerReExchange(false, cancellation);
        return result;
    }
    /**
     * Attemps to read one message from the stream.
     * @returns The message, or `null` if the stream was disposed.
     * @throws SshConnectionError if reading from the stream failed for any other reason.
     */
    async receiveMessage(cancellation) {
        var _a;
        const algorithms = this.algorithms;
        const encryption = algorithms === null || algorithms === void 0 ? void 0 : algorithms.decipher;
        const hmac = algorithms === null || algorithms === void 0 ? void 0 : algorithms.messageVerifier;
        const compression = algorithms === null || algorithms === void 0 ? void 0 : algorithms.decompressor;
        // The packet length is not encrypted when in EtM or AEAD mode.
        // So read only the length bytes first, separate from the remaining payload.
        const isLengthEncrypted = !((hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) || (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption));
        const firstBlockSize = !isLengthEncrypted
            ? SshProtocol.packetLengthSize
            : encryption
                ? Math.max(8, encryption.blockLength)
                : 8;
        this.receiveWriter.position = firstBlockSize;
        let firstBlock = this.receiveWriter.toBuffer();
        if (!(await this.read(firstBlock, cancellation))) {
            return null;
        }
        this.lastIncomingTimestamp = this.metrics.time;
        // Decrypt the first block to get the packet length.
        if (encryption && isLengthEncrypted) {
            firstBlock = await encryption.transform(firstBlock);
            this.receiveWriter.position = 0;
            this.receiveWriter.write(firstBlock);
        }
        const receiveReader = new sshData_1.SshDataReader(firstBlock);
        const packetLength = receiveReader.readUInt32();
        if (packetLength > SshProtocol.maxPacketLength) {
            (0, trace_1.trace)('Invalid packet length.');
            throw new errors_1.SshConnectionError('Invalid packet length.', transportMessages_1.SshDisconnectReason.protocolError);
        }
        const packetBufferSize = SshProtocol.packetLengthSize + packetLength;
        if (packetBufferSize > firstBlockSize) {
            this.receiveWriter.skip(packetBufferSize - firstBlockSize);
        }
        if (hmac) {
            // Ensure the receive buffer is large enough to also hold the mac without expanding.
            this.receiveWriter.skip(hmac.digestLength);
        }
        const receiveBuffer = this.receiveWriter.toBuffer();
        const packetBuffer = receiveBuffer.slice(0, packetBufferSize);
        const macBuffer = receiveBuffer.slice(packetBufferSize);
        let followingBlocks = packetBuffer.slice(firstBlockSize, packetBufferSize);
        if (followingBlocks.length > 0) {
            if (!(await this.read(followingBlocks, cancellation))) {
                return null;
            }
            if (hmac === null || hmac === void 0 ? void 0 : hmac.encryptThenMac) {
                // In EtM mode, read and verify the MAC before decrypting.
                ///const packetWithoutLength = packet.slice(SshProtocol.packetLengthSize);
                if (!(await this.readAndVerifyHmac(hmac, packetBuffer, macBuffer, cancellation))) {
                    return null;
                }
            }
            if (encryption) {
                if (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption) {
                    // With a GCM cipher, the MAC is required for decryption.
                    if (!(await this.read(macBuffer, cancellation))) {
                        return null;
                    }
                    // This doesn't actually verify anything yet (hence the return value is not checked);
                    // it sets the tag to be used for verification in the following transform call.
                    await hmac.verify(followingBlocks, macBuffer);
                }
                try {
                    followingBlocks = await encryption.transform(followingBlocks);
                }
                catch (e) {
                    if (hmac === null || hmac === void 0 ? void 0 : hmac.authenticatedEncryption) {
                        // GCM decryption failed to verify data + tag.
                        throw new errors_1.SshConnectionError('Invalid MAC', transportMessages_1.SshDisconnectReason.macError);
                    }
                    else {
                        throw e;
                    }
                }
                this.receiveWriter.position = firstBlockSize;
                this.receiveWriter.write(followingBlocks);
            }
        }
        if (hmac && !hmac.encryptThenMac && !hmac.authenticatedEncryption) {
            if (!(await this.readAndVerifyHmac(hmac, packetBuffer, macBuffer, cancellation))) {
                return null;
            }
        }
        const paddingLength = packetBuffer[SshProtocol.packetLengthSize];
        let payload = packetBuffer.slice(SshProtocol.packetLengthSize + SshProtocol.paddingLengthSize, SshProtocol.packetLengthSize + (packetLength - paddingLength));
        if (compression) {
            payload = compression.decompress(payload);
        }
        if (this.incomingMessagesHaveReconnectInfo) {
            // Read the extension info from the end of the payload.
            let lastSequenceSeenByRemote;
            let remoteTimeSinceLastReceived;
            if (this.incomingMessagesHaveLatencyInfo) {
                const reader = new sshData_1.SshDataReader(payload.slice(payload.length - 12, payload.length));
                lastSequenceSeenByRemote = reader.readUInt64();
                remoteTimeSinceLastReceived = reader.readUInt32() / 1000; // microseconds to ms
                payload = payload.slice(0, payload.length - 12);
            }
            else {
                const reader = new sshData_1.SshDataReader(payload.slice(payload.length - 8, payload.length));
                lastSequenceSeenByRemote = reader.readUInt64();
                remoteTimeSinceLastReceived = 0;
                payload = payload.slice(0, payload.length - 8);
            }
            // Discard any recently sent messages that were acknowledged.
            while (this.recentSentMessages.size > 0) {
                const oldestSequenceMessage = this.recentSentMessages.peek();
                if (oldestSequenceMessage.sequence > lastSequenceSeenByRemote) {
                    break;
                }
                if (this.stream &&
                    this.incomingMessagesHaveLatencyInfo &&
                    oldestSequenceMessage.sequence === lastSequenceSeenByRemote) {
                    // Compute the time since the message with the last-seen sequence was sent.
                    // Subtract the time between when the remote side received the message with the
                    // last-seen sequence and sent the current message.
                    const timeSinceSent = this.lastIncomingTimestamp - oldestSequenceMessage.sentTime;
                    const roundTripLatency = timeSinceSent - remoteTimeSinceLastReceived;
                    this.metrics.updateLatency(roundTripLatency);
                }
                this.recentSentMessages.dequeue();
            }
        }
        const messageType = payload[0];
        let message = sshMessage_1.SshMessage.create(messageType, payload);
        if (!message) {
            const unimplementedMessage = new transportMessages_1.UnimplementedMessage();
            unimplementedMessage.sequenceNumber = this.inboundPacketSequence;
            unimplementedMessage.unimplementedMessageType = messageType;
            message = unimplementedMessage;
        }
        if (!(message instanceof connectionMessages_1.ChannelDataMessage)) {
            (0, trace_1.trace)(`Receiving #${this.inboundPacketSequence} ${message}`);
        }
        else if (trace_1.traceData.enabled) {
            (0, trace_1.traceData)(`Receiving #${this.inboundPacketSequence} ${message}`);
        }
        await this.sessionSemaphore.wait(cancellation);
        this.inboundPacketSequence++;
        this.inboundFlow += packetLength;
        this.sessionSemaphore.release();
        this.metrics.addMessageReceived(SshProtocol.packetLengthSize + packetLength + ((_a = hmac === null || hmac === void 0 ? void 0 : hmac.digestLength) !== null && _a !== void 0 ? _a : 0));
        await this.considerReExchange(false, cancellation);
        return message;
    }
    dispose() {
        try {
            if (this.stream)
                this.stream.close().catch((e) => {
                    (0, trace_1.trace)('Error closing stream: ' + e.message);
                });
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            (0, trace_1.trace)('Error closing stream: ' + e.message);
        }
        this.stream = null;
        this.metrics.updateLatency(0);
        if (this.algorithms)
            this.algorithms.dispose();
    }
}
exports.SshProtocol = SshProtocol;
SshProtocol.maxPacketLength = 1024 * 1024; // 1 MB
SshProtocol.packetLengthSize = 4;
SshProtocol.paddingLengthSize = 1;
//# sourceMappingURL=sshProtocol.js.map

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshSessionAlgorithms = void 0;
class SshSessionAlgorithms {
    dispose() {
        if (this.cipher)
            this.cipher.dispose();
        if (this.decipher)
            this.decipher.dispose();
        if (this.signer)
            this.signer.dispose();
        if (this.verifier)
            this.verifier.dispose();
    }
}
exports.SshSessionAlgorithms = SshSessionAlgorithms;
//# sourceMappingURL=sshSessionAlgorithms.js.map

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshClientSession = void 0;
const trace_1 = __webpack_require__(24);
const sshSession_1 = __webpack_require__(71);
const transportMessages_1 = __webpack_require__(29);
const sshAuthenticatingEventArgs_1 = __webpack_require__(145);
const promiseCompletionSource_1 = __webpack_require__(39);
const cancellation_1 = __webpack_require__(40);
const sshSessionConfiguration_1 = __webpack_require__(68);
const authenticationService_1 = __webpack_require__(144);
const connectionService_1 = __webpack_require__(73);
const errors_1 = __webpack_require__(25);
/**
 * The client side of an SSH session. Extends the base `SshSession` class to
 * support client authentication.
 */
class SshClientSession extends sshSession_1.SshSession {
    constructor(config) {
        super(config, true);
        this.serviceRequests = new Map();
        this.clientAuthCompletion = null;
    }
    /**
     * Attempts to authenticate both the server and client.
     *
     * This method must be called only after encrypting the session. It is equivalent
     * to calling both `authenticateServer()` and `authenticateClient()` and waiting on
     * both results.
     *
     * @returns `true` if authentication succeeded, `false` if it failed.
     */
    async authenticate(clientCredentials, cancellation) {
        const serverAuthenticated = await this.authenticateServer(cancellation);
        if (!serverAuthenticated) {
            return false;
        }
        const clientAuthenticated = await this.authenticateClient(clientCredentials, cancellation);
        if (!clientAuthenticated) {
            return false;
        }
        return true;
    }
    /**
     * Triggers server authentication by invoking the `authenticating` event with
     * the verified server host key.
     *
     * This method must be called only after encrypting the session. It does not wait for any
     * further message exchange with the server, since the server host key would have already
     * been obtained during the key-exchange.
     *
     * @returns `true` if authentication succeeded, `false` if it failed.
     */
    async authenticateServer(cancellation) {
        if (!(this.kexService && this.kexService.hostKey)) {
            throw new Error('Encrypt the session before authenticating.');
        }
        try {
            // Raise an Authenticating event that allows handlers to do verification
            // of the host key and return a principal for the server.
            this.principal = await this.raiseAuthenticatingEvent(new sshAuthenticatingEventArgs_1.SshAuthenticatingEventArgs(sshAuthenticatingEventArgs_1.SshAuthenticationType.serverPublicKey, {
                publicKey: this.kexService.hostKey,
            }, cancellation));
        }
        catch (e) {
            if (!(e instanceof Error))
                throw e;
            (0, trace_1.trace)('Error while authenticating server: ' + e.message);
            throw e;
        }
        if (!this.principal) {
            await this.close(transportMessages_1.SshDisconnectReason.hostKeyNotVerifiable, 'Server authentication failed.');
            (0, trace_1.trace)(`${this} server authentication failed.`);
            return false;
        }
        (0, trace_1.trace)(`${this} server authenticated.`);
        return true;
    }
    /* @internal */
    authenticateClient(credentials, callbackOrCancellation, cancellation) {
        if (!credentials) {
            throw new TypeError('A credentials object is required.');
        }
        if (typeof callbackOrCancellation === 'function') {
            return this.authenticateClientWithCompletion(credentials, callbackOrCancellation, cancellation);
        }
        else {
            return new Promise(async (resolve, reject) => {
                await this.authenticateClientWithCompletion(credentials, (err, result) => {
                    if (err)
                        reject(err);
                    else
                        resolve(result);
                }, callbackOrCancellation);
            });
        }
    }
    async authenticateClientWithCompletion(credentials, callback, cancellation) {
        this.clientAuthCompletion = new promiseCompletionSource_1.PromiseCompletionSource();
        this.clientAuthCompletion.promise.then((result) => callback(undefined, result), (err) => callback(err));
        if (cancellation) {
            if (cancellation.isCancellationRequested)
                throw new cancellation_1.CancellationError();
            cancellation.onCancellationRequested((e) => {
                if (this.clientAuthCompletion) {
                    this.clientAuthCompletion.reject(new cancellation_1.CancellationError());
                }
            });
        }
        let authService = this.getService(authenticationService_1.AuthenticationService);
        if (!authService) {
            const serviceRequestMessage = new transportMessages_1.ServiceRequestMessage();
            serviceRequestMessage.serviceName = authenticationService_1.AuthenticationService.serviceName;
            await this.sendMessage(serviceRequestMessage, cancellation);
            // Assume the service request is accepted, without waiting for an accept message.
            // (If not, the following auth requests will fail anyway.)
            authService = this.activateService(authenticationService_1.AuthenticationService);
        }
        await authService.authenticateClient(credentials, cancellation);
    }
    /* @internal */
    onAuthenticationComplete(success) {
        if (success) {
            (0, trace_1.trace)(`${this} client authenticated.`);
        }
        else {
            (0, trace_1.trace)(`${this} client authentication failed.`);
        }
        if (this.clientAuthCompletion) {
            this.clientAuthCompletion.resolve(success);
            this.clientAuthCompletion = null;
        }
    }
    /**
     * Sends a request for a service and waits for a response.
     *
     * @param serviceName Name of the service to be requested.
     * @param cancellation Optional cancellation token.
     * @returns A promise that resolves when the service request has been accepted.
     *
     * If the server does not accept the service request, it will disconnect the session.
     */
    async requestService(serviceName, cancellation) {
        let sendRequest = false;
        let completion = this.serviceRequests.get(serviceName);
        if (!completion) {
            completion = new promiseCompletionSource_1.PromiseCompletionSource();
            this.serviceRequests.set(serviceName, completion);
            sendRequest = true;
        }
        if (sendRequest) {
            const requestMessage = new transportMessages_1.ServiceRequestMessage();
            requestMessage.serviceName = serviceName;
            await this.sendMessage(requestMessage, cancellation);
        }
        await completion.promise;
    }
    /* @internal */
    async handleServiceAcceptMessage(message, cancellation) {
        const completion = this.serviceRequests.get(message.serviceName);
        completion === null || completion === void 0 ? void 0 : completion.resolve(true);
    }
    async openChannel(channelTypeOrOpenMessageOrCancellation, initialRequestOrCancellation, cancellation) {
        if (!this.connectionService) {
            // Authentication must have been skipped, meaning there was no
            // connection service request sent yet. Send it now, and assume
            // it is accepted without waiting for a response.
            const serviceRequestMessage = new transportMessages_1.ServiceRequestMessage();
            serviceRequestMessage.serviceName = connectionService_1.ConnectionService.serviceName;
            await this.sendMessage(serviceRequestMessage, cancellation);
        }
        return await super.openChannel(channelTypeOrOpenMessageOrCancellation, initialRequestOrCancellation, cancellation);
    }
    /* @internal */
    handleDisconnected() {
        if (this.reconnecting) {
            this.reconnecting = false;
            return false;
        }
        return super.handleDisconnected();
    }
    /**
     * Call instead of `connect()` to reconnect to a prior session instead of connecting
     * a new session.
     * @param stream A new stream that has just (re-) connected to the server.
     * @param cancellation Optional cancellation token.
     * @returns True if reconnect succeeded, false if the server declined the reconnect
     * request or reconnect session validation failed. In the case of a false return value,
     * retrying is unlikely to succeed.
     * @throws {SshConnectionError} There was a problem connecting to or communicating with
     * the server; retrying may still succeed if connectivity is restored.
     * @throws {SshReconnectError} Reconnect failed for some reason other than a communication
     * issue: see the `failureReason` property of the error. Retrying is unlikely to succeed,
     * unless the specific error condition can be addressed.
     */
    async reconnect(stream, cancellation) {
        if (this.isClosed) {
            throw new errors_1.ObjectDisposedError(this);
        }
        else if (this.isConnected) {
            throw new Error('Already connected.');
        }
        if (!this.protocol) {
            throw new Error('The session was never previously connected.');
        }
        if (this.reconnecting) {
            throw new Error('Already reconnecting.');
        }
        this.reconnecting = true;
        try {
            await this.reconnectInternal(stream, cancellation);
        }
        finally {
            this.reconnecting = false;
        }
    }
    async reconnectInternal(stream, cancellation) {
        var _a, _b, _c, _d, _e, _f;
        const previousSessionId = this.sessionId;
        const previousProtocolInstance = this.protocol;
        const previousHostKey = (_a = this.kexService) === null || _a === void 0 ? void 0 : _a.hostKey;
        if (!previousSessionId ||
            !previousProtocolInstance ||
            !this.kexService ||
            !previousHostKey ||
            !((_b = previousProtocolInstance.extensions) === null || _b === void 0 ? void 0 : _b.has(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            throw new Error('Reconnect was not enabled for this session.');
        }
        let newSessionId;
        try {
            // Reconnecting will temporarily create a new session ID.
            this.sessionId = null;
            await this.connect(stream, cancellation);
            if (!this.sessionId || !this.algorithms || !this.algorithms.signer) {
                throw new Error('Session is not encrypted.');
            }
            // Ensure the client is not reconnecting to a different server.
            const newHostKey = this.kexService.hostKey;
            const newHostPublicKey = !newHostKey ? null : await newHostKey.getPublicKeyBytes();
            const previousHostPublicKey = await previousHostKey.getPublicKeyBytes();
            if (!newHostPublicKey ||
                !previousHostPublicKey ||
                !newHostPublicKey.equals(previousHostPublicKey)) {
                const message = 'The server host key is different.';
                (0, trace_1.trace)(`Reconnection failed: ${message}`);
                throw new errors_1.SshReconnectError(message, transportMessages_1.SshReconnectFailureReason.differentServerHostKey);
            }
            newSessionId = this.sessionId;
        }
        catch (e) {
            // Restore the previous protocol instance so reconnect may be attempted again.
            this.protocol = previousProtocolInstance;
            super.handleDisconnected();
            throw e;
        }
        finally {
            // Restore the previous session ID and host key for the reconnected session.
            this.sessionId = previousSessionId;
            this.kexService.hostKey = previousHostKey;
        }
        const reconnectToken = await this.createReconnectToken(previousSessionId, newSessionId);
        const reconnectRequest = new transportMessages_1.SessionReconnectRequestMessage();
        reconnectRequest.requestType = "session-reconnect@microsoft.com" /* sessionReconnect */;
        reconnectRequest.clientReconnectToken = reconnectToken;
        reconnectRequest.lastReceivedSequenceNumber = previousProtocolInstance.lastIncomingSequence;
        reconnectRequest.wantReply = true;
        const response = await this.requestResponse(reconnectRequest, transportMessages_1.SessionReconnectResponseMessage, transportMessages_1.SessionReconnectFailureMessage, cancellation);
        if (response instanceof transportMessages_1.SessionReconnectFailureMessage) {
            const reason = (_c = response.reasonCode) !== null && _c !== void 0 ? _c : transportMessages_1.SshReconnectFailureReason.unknownServerFailure;
            const message = (_d = response.description) !== null && _d !== void 0 ? _d : 'The server rejected the reconnect request.';
            (0, trace_1.trace)(`Reconnection failed: ${message}`);
            // Restore the previous protocol instance so reconnect may be attempted again.
            this.protocol = previousProtocolInstance;
            throw new errors_1.SshReconnectError(message, reason);
        }
        if (!this.verifyReconnectToken(previousSessionId, newSessionId, (_e = response.serverReconnectToken) !== null && _e !== void 0 ? _e : Buffer.alloc(0))) {
            const message = 'The reconnect token provided by the server was invalid.';
            (0, trace_1.trace)(`Reconnection failed: ${message}`);
            throw new errors_1.SshReconnectError(message, transportMessages_1.SshReconnectFailureReason.invalidServerReconnectToken);
        }
        (0, trace_1.trace)('Reconnect request was accepted by the server.');
        // Re-send lost messages.
        const messagesToResend = previousProtocolInstance.getSentMessages(((_f = response.lastReceivedSequenceNumber) !== null && _f !== void 0 ? _f : 0) + 1);
        if (!messagesToResend) {
            const message = 'Client is unable to re-send messages requested by the server.';
            (0, trace_1.trace)(`Reconnection failed: ${message}`);
            throw new errors_1.SshReconnectError(message, transportMessages_1.SshReconnectFailureReason.clientDroppedMessages);
        }
        let count = 0;
        for (let message of messagesToResend) {
            await this.sendMessage(message, cancellation);
            count++;
        }
        // Now the session is fully reconnected!
        previousProtocolInstance.dispose();
        this.metrics.addReconnection();
        (0, trace_1.trace)(`Reconnected. Re-sent ${count} dropped messages.`);
    }
    dispose() {
        if (this.clientAuthCompletion) {
            this.clientAuthCompletion.reject(new errors_1.ObjectDisposedError(this));
        }
        super.dispose();
    }
}
exports.SshClientSession = SshClientSession;
//# sourceMappingURL=sshClientSession.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshServerSession = void 0;
const sshSession_1 = __webpack_require__(71);
const vscode_jsonrpc_1 = __webpack_require__(6);
const transportMessages_1 = __webpack_require__(29);
const errors_1 = __webpack_require__(25);
const sshSessionConfiguration_1 = __webpack_require__(68);
const trace_1 = __webpack_require__(24);
/**
 * The server side of an SSH session. Extends the base `SshSession` class
 * to support host authentication.
 */
class SshServerSession extends sshSession_1.SshSession {
    constructor(config, reconnectableSessions) {
        super(config, false);
        this.reconnectedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onReconnected = this.reconnectedEmitter.event;
        /**
         * Gets or sets credentials and/or credential callbacks for authenticating the session.
         */
        this.credentials = { publicKeys: [] };
        const enableReconnect = config.protocolExtensions.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect);
        if (enableReconnect && !reconnectableSessions) {
            throw new Error('When reconnect is enabled, server sessions require a reference to a ' +
                'shared collection to track reconnectable sessions.');
        }
        else if (!enableReconnect && reconnectableSessions) {
            throw new Error('When reconnect is not enabled, the reconnectable sessions collection ' +
                'is not applicable.');
        }
        this.reconnectableSessions = reconnectableSessions;
    }
    /* @internal */
    async handleServiceRequestMessage(message, cancellation) {
        const service = this.activateService(message.serviceName);
        if (service) {
            const acceptMessage = new transportMessages_1.ServiceAcceptMessage();
            acceptMessage.serviceName = message.serviceName;
            await this.sendMessage(acceptMessage, cancellation);
        }
        else {
            throw new errors_1.SshConnectionError(`Service "${message.serviceName}" not available.`, transportMessages_1.SshDisconnectReason.serviceNotAvailable);
        }
    }
    /* @internal */
    async handleRequestMessage(message, cancellation) {
        var _a;
        if (message.requestType === "session-reconnect@microsoft.com" /* sessionReconnect */ &&
            ((_a = this.config.protocolExtensions) === null || _a === void 0 ? void 0 : _a.includes(sshSessionConfiguration_1.SshProtocolExtensionNames.sessionReconnect))) {
            const reconnectRequest = message.convertTo(new transportMessages_1.SessionReconnectRequestMessage());
            await this.reconnect(reconnectRequest, cancellation);
            // reconnect() handles sending the response message.
            return;
        }
        await super.handleRequestMessage(message, cancellation);
    }
    /* @internal */
    async enableReconnect(cancellation) {
        await super.enableReconnect(cancellation);
        if (!this.reconnectableSessions.includes(this)) {
            this.reconnectableSessions.push(this);
        }
    }
    /* @internal */
    handleDisconnected() {
        if (this.reconnecting) {
            // Prevent closing the session while reconnecting.
            return true;
        }
        return super.handleDisconnected();
    }
    /**
     * Attempts to reconnect the client to a disconnected server session.
     *
     * If reconnection is successful, the current server session is disposed because the client
     * gets reconnected to a different server session.
     */
    /* @internal */
    async reconnect(reconnectRequest, cancellation) {
        var _a, _b, _c;
        if (!this.reconnectableSessions) {
            throw new Error('Disconnected sessions collection ' +
                'should have been initialied when reconnect is enabled.');
        }
        // Try to find the requested server session in the list of available disconnected
        // server sessions, by validating the reconnect token.
        let reconnectSession;
        for (let reconnectableSession of this.reconnectableSessions) {
            if (reconnectableSession !== this &&
                (await this.verifyReconnectToken(reconnectableSession.sessionId, this.sessionId, (_a = reconnectRequest.clientReconnectToken) !== null && _a !== void 0 ? _a : Buffer.alloc(0)))) {
                reconnectSession = reconnectableSession;
                this.reconnectableSessions.splice(this.reconnectableSessions.indexOf(reconnectSession), 1);
                break;
            }
        }
        if (!reconnectSession || reconnectSession.isClosed) {
            const message = 'Requested reconnect session was not found or ' +
                'the reconnect token provided by the client was invalid.';
            (0, trace_1.trace)(`Reconnect failed: ${message}`);
            const failure = new transportMessages_1.SessionReconnectFailureMessage();
            failure.reasonCode = transportMessages_1.SshReconnectFailureReason.sessionNotFound;
            failure.description = message;
            await this.sendMessage(failure, cancellation);
            return;
        }
        const messagesToResend = reconnectSession.protocol.getSentMessages(((_b = reconnectRequest.lastReceivedSequenceNumber) !== null && _b !== void 0 ? _b : 0) + 1);
        if (!messagesToResend) {
            // Messages are not available from requested sequence number.
            // Restore the current session protocol and put the old session back in the collection.
            this.reconnectableSessions.push(reconnectSession);
            const message = 'Server is unable to re-send messages requested by the client.';
            (0, trace_1.trace)(`Reconnect failed: ${message}`);
            const failure = new transportMessages_1.SessionReconnectFailureMessage();
            failure.reasonCode = transportMessages_1.SshReconnectFailureReason.serverDroppedMessages;
            failure.description = message;
            await this.sendMessage(failure, cancellation);
            return;
        }
        const responseMessage = new transportMessages_1.SessionReconnectResponseMessage();
        responseMessage.serverReconnectToken = await this.createReconnectToken(reconnectSession.sessionId, this.sessionId);
        responseMessage.lastReceivedSequenceNumber = reconnectSession.protocol.lastIncomingSequence;
        await this.sendMessage(responseMessage, cancellation);
        try {
            reconnectSession.reconnecting = true;
            // Ensure the old connection is disconnected before switching over to the new one.
            (_c = reconnectSession.protocol) === null || _c === void 0 ? void 0 : _c.dispose();
            while (reconnectSession.isConnected) {
                await new Promise((resolve) => setTimeout(() => resolve(), 5));
            }
            // Move this session's protocol instance over to the reconnected session.
            reconnectSession.protocol = this.protocol;
            reconnectSession.protocol.kexService = reconnectSession.kexService;
            this.protocol = undefined;
            // Re-send the lost messages that the client requested.
            for (let message of messagesToResend) {
                await reconnectSession.sendMessage(message, cancellation);
            }
            // Now this server session is invalid because the client reconnected to another one.
            this.dispose();
        }
        finally {
            reconnectSession.reconnecting = false;
        }
        this.reconnectableSessions.push(reconnectSession);
        reconnectSession.metrics.addReconnection();
        // Restart the message loop for the reconnected session.
        reconnectSession.processMessages().catch((e) => {
            (0, trace_1.trace)(`Unhandled error processing messages: ${e.message || JSON.stringify(e)}`);
        });
        (0, trace_1.trace)(`Session reconnected. Re-sent ${messagesToResend.length} dropped messages.`);
        // Notify event listeners about the successful reconnection.
        reconnectSession.reconnectedEmitter.fire();
    }
    dispose() {
        if (this.reconnectableSessions) {
            const index = this.reconnectableSessions.indexOf(this);
            if (index >= 0) {
                this.reconnectableSessions.splice(index, 1);
            }
        }
        super.dispose();
    }
}
exports.SshServerSession = SshServerSession;
//# sourceMappingURL=sshServerSession.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketStream = exports.NodeStream = exports.BaseStream = void 0;
const buffer_1 = __webpack_require__(0);
const vscode_jsonrpc_1 = __webpack_require__(6);
const cancellation_1 = __webpack_require__(40);
const errors_1 = __webpack_require__(25);
function handleCancellation(reject, cancellation) {
    if (cancellation) {
        if (cancellation.isCancellationRequested) {
            reject(new cancellation_1.CancellationError());
        }
        else {
            cancellation.onCancellationRequested(() => {
                reject(new cancellation_1.CancellationError());
            });
        }
    }
}
/**
 * Base class for stream adapters.
 */
class BaseStream {
    constructor() {
        this.incomingData = [];
        this.pendingReads = [];
        this.error = null;
        this.disposed = false;
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.closed = this.closedEmitter.event;
    }
    onData(data) {
        while (this.pendingReads.length > 0) {
            const read = this.pendingReads.shift();
            if (read.count >= data.length) {
                // This read operation consumes all of the incoming data.
                read.resolve(data);
                return;
            }
            else {
                // This read operation consumes part of the incoming data.
                const readData = data.slice(0, read.count);
                data = data.slice(read.count);
                read.resolve(readData);
            }
        }
        this.incomingData.push(data);
    }
    onEnd() {
        while (this.pendingReads.length > 0) {
            const read = this.pendingReads.shift();
            read.resolve(null);
        }
        this.incomingData.push(buffer_1.Buffer.alloc(0));
    }
    onError(error) {
        if (!this.error) {
            this.error = error;
        }
        while (this.pendingReads.length > 0) {
            const read = this.pendingReads.shift();
            read.reject(error);
        }
    }
    async read(count, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (this.incomingData.length > 0) {
            // Consume data that has already arrived.
            let data = this.incomingData[0];
            if (data.length === 0) {
                // Reached the end of the stream.
                return null;
            }
            else if (count >= data.length) {
                // Consuming the whole chunk.
                this.incomingData.shift();
            }
            else {
                // Consuming part of the chunk.
                this.incomingData[0] = data.slice(count);
                data = data.slice(0, count);
            }
            return data;
        }
        else if (this.error) {
            throw this.error;
        }
        else {
            // Wait for more data to arrive.
            return await new Promise((resolve, reject) => {
                if (cancellation) {
                    if (cancellation.isCancellationRequested) {
                        reject(new cancellation_1.CancellationError());
                        return;
                    }
                    cancellation.onCancellationRequested(() => {
                        // Discard any pending reads that use this cancellation token.
                        for (let i = 0; i < this.pendingReads.length; i++) {
                            if (Object.is(cancellation, this.pendingReads[i].cancellation)) {
                                const read = this.pendingReads.splice(i--, 1)[0];
                                read.reject(new cancellation_1.CancellationError());
                            }
                        }
                    });
                }
                this.pendingReads.push({ count, resolve, reject, cancellation });
            });
        }
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            const error = new errors_1.ObjectDisposedError(this);
            this.onError(error);
            this.fireOnClose(error);
        }
    }
    fireOnClose(error) {
        this.closedEmitter.fire({ error });
    }
    get isDisposed() {
        return this.disposed;
    }
}
exports.BaseStream = BaseStream;
/**
 * Stream adapter for a Node.js Socket, Duplex stream, or Readable/Writable stream pair.
 */
class NodeStream extends BaseStream {
    constructor(duplexOrReadStream, writeStream) {
        super();
        if (!duplexOrReadStream)
            throw new TypeError('Duplex or Readable/Writable stream are required.');
        this.readStream = duplexOrReadStream;
        this.writeStream = writeStream || duplexOrReadStream;
        this.readStream.on('data', this.onData.bind(this));
        this.readStream.on('end', this.onEnd.bind(this));
        this.readStream.on('error', this.onError.bind(this));
        this.readStream.on('close', () => {
            this.onEnd();
            this.fireOnClose();
        });
    }
    async write(data, cancellation) {
        if (!data)
            throw new TypeError('Data is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        return new Promise((resolve, reject) => {
            handleCancellation(reject, cancellation);
            this.writeStream.write(data, (err) => {
                if (!err) {
                    resolve();
                }
                else {
                    reject(err);
                }
            });
        });
    }
    async close(error, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        await new Promise((resolve, reject) => {
            handleCancellation(reject, cancellation);
            this.writeStream.end(resolve);
        });
        this.disposed = true;
        this.onError(error || new errors_1.ObjectDisposedError(this));
        this.closedEmitter.fire({ error });
    }
    dispose() {
        if (!this.disposed) {
            const error = new errors_1.ObjectDisposedError(this);
            this.readStream.destroy(error);
            this.writeStream.destroy(error);
        }
        super.dispose();
    }
}
exports.NodeStream = NodeStream;
/**
 * Stream adapter for a browser websocket.
 */
class WebSocketStream extends BaseStream {
    constructor(websocket) {
        super();
        this.websocket = websocket;
        if (!websocket)
            throw new TypeError('WebSocket is required.');
        if (typeof websocket.binaryType === 'string' &&
            websocket.binaryType !== 'arraybuffer') {
            throw new Error('WebSocket must use arraybuffer binary type.');
        }
        websocket.onmessage = (e) => {
            this.onData(buffer_1.Buffer.from(e.data));
        };
        websocket.onclose = (e) => {
            if (e.wasClean) {
                this.onEnd();
            }
            else {
                const error = new Error(e.reason);
                error.code = e.code;
                this.onError(error);
            }
        };
    }
    async write(data, cancellation) {
        if (!data)
            throw new TypeError('Data is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if ('readyState' in this.websocket) {
            if (this.websocket.readyState === 2 /* Closing */ ||
                this.websocket.readyState === 3 /* Closed */) {
                throw new DOMException('WebSocket is already in CLOSING or CLOSED state.', 'InvalidStateError');
            }
        }
        this.websocket.send(data);
    }
    async close(error, cancellation) {
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        if (!error) {
            this.websocket.close();
        }
        else {
            const code = typeof error.code === 'number' ? error.code : undefined;
            this.websocket.close(code, error.message);
        }
        this.disposed = true;
        this.closedEmitter.fire({ error });
        this.onError(error || new Error('Stream closed.'));
    }
    dispose() {
        if (!this.disposed) {
            this.websocket.close();
        }
        super.dispose();
    }
}
exports.WebSocketStream = WebSocketStream;
//# sourceMappingURL=streams.js.map

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SshRpcMessageStream = void 0;
const rpc = __webpack_require__(6);
const buffer_1 = __webpack_require__(0);
const sshData_1 = __webpack_require__(16);
const contentLengthHeaderPrefix = 'Content-Length: ';
const headersSeparator = '\r\n\r\n';
class SshRpcMessageReader {
    constructor(channel) {
        this.channel = channel;
        this.errorEmitter = new rpc.Emitter();
        this.closeEmitter = new rpc.Emitter();
        this.partialMessageEmitter = new rpc.Emitter();
        this.callback = null;
        this.messageBuffer = new sshData_1.SshDataWriter(buffer_1.Buffer.alloc(1024));
        this.headersLength = null;
        this.messageLength = null;
        this.onError = this.errorEmitter.event;
        this.onClose = this.closeEmitter.event;
        this.onPartialMessage = this.partialMessageEmitter.event;
        this.eventRegistration = this.channel.onDataReceived(this.onDataReceived.bind(this));
        this.channel.onClosed((e) => {
            if (e.error) {
                this.errorEmitter.fire(e.error);
            }
            // Note: we always want to fire a close event to avoid the rpc connection
            // to be used. After the event any usage of the rpc message connection will
            // throw an error with this code: ConnectionErrors.Closed
            this.closeEmitter.fire();
        });
    }
    listen(callback) {
        this.callback = callback;
    }
    dispose() {
        if (this.eventRegistration) {
            this.eventRegistration.dispose();
        }
    }
    onDataReceived(data) {
        this.messageBuffer.write(data);
        this.channel.adjustWindow(data.length);
        // In case of recursion, the `data` might have already been a slice of the message buffer,
        // but it could have been invalidated by expansion during write() above.
        data = this.messageBuffer.toBuffer();
        if (this.messageLength === null) {
            const headersEnd = data.indexOf(headersSeparator);
            if (headersEnd < 0) {
                return; // Wait for more data.
            }
            const headers = data.slice(0, headersEnd).toString();
            if (!headers.startsWith(contentLengthHeaderPrefix)) {
                throw new Error(`Message does not start with JSON-RPC headers.\n${headers}`);
            }
            this.headersLength = headersEnd + headersSeparator.length;
            this.messageLength = parseInt(headers.substr(contentLengthHeaderPrefix.length, headersEnd - contentLengthHeaderPrefix.length), 10);
        }
        const position = this.messageBuffer.position;
        const totalLength = this.headersLength + this.messageLength;
        if (position >= totalLength) {
            if (this.callback) {
                const messageJson = data.slice(this.headersLength, totalLength).toString();
                let message;
                try {
                    message = JSON.parse(messageJson);
                }
                catch (e) {
                    if (!(e instanceof Error))
                        throw e;
                    throw new Error(`Failed to parse JSON-RPC message: ${e.message}\n${messageJson}`);
                }
                this.callback(message);
            }
            this.messageLength = null;
            this.messageBuffer.position = 0;
            if (position > totalLength) {
                // Recursively receive the remaining data, which will cause it
                // to be copied to the beginning of the buffer;
                this.onDataReceived(data.slice(totalLength));
            }
        }
    }
}
class SshRpcMessageWriter {
    constructor(channel) {
        this.channel = channel;
        this.errorEmitter = new rpc.Emitter();
        this.closeEmitter = new rpc.Emitter();
        this.onError = this.errorEmitter.event;
        this.onClose = this.closeEmitter.event;
        this.channel.onClosed((e) => {
            if (e.error) {
                this.errorEmitter.fire([
                    e.error,
                    (e.errorMessage && { jsonrpc: e.errorMessage }) || undefined,
                    e.exitStatus,
                ]);
            }
            this.closeEmitter.fire();
        });
    }
    write(message) {
        const messageJson = JSON.stringify(message);
        const messageData = buffer_1.Buffer.from(messageJson);
        const headerData = buffer_1.Buffer.from(contentLengthHeaderPrefix + messageData.length + headersSeparator);
        const data = buffer_1.Buffer.alloc(headerData.length + messageData.length);
        headerData.copy(data, 0);
        messageData.copy(data, headerData.length);
        this.channel.send(data).catch((e) => {
            this.errorEmitter.fire([e, undefined, undefined]);
        });
    }
    dispose() { }
}
class SshRpcMessageStream {
    constructor(channel) {
        this.reader = new SshRpcMessageReader(channel);
        this.writer = new SshRpcMessageWriter(channel);
    }
}
exports.SshRpcMessageStream = SshRpcMessageStream;
//# sourceMappingURL=sshRpcMessageStream.js.map

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionContour = void 0;
const errors_1 = __webpack_require__(25);
const queue_1 = __webpack_require__(93);
const semaphore_1 = __webpack_require__(72);
/**
 * Collects session metrics over time, producing an outline of the timing, speed,
 * and quantity of bytes sent/received during the session.
 *
 * Metrics are recorded across a number of equal time intervals. As the session time
 * increases, intervals are expanded to keep the number of intervals under the configured
 * maximum. Each expansion doubles the length of all intervals, while combining the metrics
 * within each pair of combined intervals. Therefore, a longer session has longer intervals
 * and less-granular metrics. In this way, the memory usage (and serialized size) of the
 * session contour remains roughly constant regardless of the length of the session.
 *
 * Metrics exposed via the collection properties on this class may be momentarily
 * inconsistent (but will not throw exceptions) if continued session operation causes
 * intervals to be expanded while the data is being read concurrently. To avoid any
 * inconsistency, hold a lock on the <see cref="SessionContour" /> instance while reading
 * data. (Or wait until the session ends.)
 *
 * A session contour can be exported in a compact form suitable for logging or telemetry.
 * Use the code in `SessionContour.kql` to chart a session contour in Azure Data Explorer.
 */
class SessionContour {
    /**
     * Creates a new instance of the `SessionContour` class.
     *
     * @param maxIntervals Maximum number of metric intervals to record,
     * defaults to 256. Must be a power of two.
     */
    constructor(maxIntervals = 256) {
        /** Current size of the metrics interval, in milliseconds. */
        this.intervalMs = SessionContour.initialInterval;
        /** Number of intervals for which metrics have been recorded. */
        this.count = 0;
        this.updateQueue = new queue_1.Queue();
        this.updateSemaphore = new semaphore_1.Semaphore(0);
        this.disposed = false;
        if (maxIntervals < 2 || (maxIntervals & (maxIntervals - 1)) !== 0) {
            throw new Error('Contour intervals must be a power of two.');
        }
        this.maxIntervals = maxIntervals;
        this.intervalBytesSent = new Array(maxIntervals);
        this.intervalBytesReceived = new Array(maxIntervals);
        this.intervalLatencyMin = new Array(maxIntervals);
        this.intervalLatencyMax = new Array(maxIntervals);
        this.intervalLatencySum = new Array(maxIntervals);
        this.intervalLatencyCount = new Array(maxIntervals);
        this.intervalLatencyAvg = new Array(maxIntervals);
        this.intervalBytesSent.fill(0);
        this.intervalBytesReceived.fill(0);
        this.intervalLatencyMin.fill(0);
        this.intervalLatencyMax.fill(0);
        this.intervalLatencySum.fill(0);
        this.intervalLatencyCount.fill(0);
        this.intervalLatencyAvg.fill(0);
    }
    /**
     * Gets the current number of contour intervals with recorded metrics. This is always
     * less than `maxIntervals`.
     */
    get intervalCount() {
        return this.count;
    }
    /**
     * Gets the current time span of each contour interval, in milliseconds. This interval time
     * span is doubled as necesary such that the entire duration of the session is always covered
     * by fewer intervals than the maximum.
     */
    get interval() {
        return this.intervalMs;
    }
    /**
     * Gets the total number of bytes sent for each interval during the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes. The number of values is equal to `intervalCount`.
     */
    get bytesSent() {
        return this.intervalBytesSent.slice(0, this.count);
    }
    /**
     * Gets the total number of bytes received for each interval during the session,
     * including all channels and non-channel protocol messages, and including message
     * framing, padding, and MAC bytes. The number of values is equal to `intervalCount`.
     */
    get bytesReceived() {
        return this.intervalBytesReceived.slice(0, this.count);
    }
    /**
     * Gets the minimum recorded round-trip connection latency between client and server for
     * each interval during the session. The number of values is equal to `intervalCount`.
     */
    get latencyMinMs() {
        return this.intervalLatencyMin.slice(0, this.count);
    }
    /**
     * Gets the maximum recorded round-trip connection latency between client and server for
     * each interval during the session. The number of values is equal to `intervalCount`.
     */
    get latencyMaxMs() {
        return this.intervalLatencyMax.slice(0, this.count);
    }
    /**
     * Gets the average recorded round-trip connection latency between client and server for
     * each interval during the session. The number of values is equal to `intervalCount`.
     */
    get latencyAverageMs() {
        return this.intervalLatencyAvg.slice(0, this.count);
    }
    onMessageSent(e) {
        this.updateQueue.enqueue({
            time: e.time,
            bytesSent: e.size,
        });
        this.updateSemaphore.tryRelease();
    }
    onMessageReceived(e) {
        this.updateQueue.enqueue({
            time: e.time,
            bytesReceived: e.size,
        });
        this.updateSemaphore.tryRelease();
    }
    onLatencyUpdated(e) {
        this.updateQueue.enqueue(e);
        this.updateSemaphore.tryRelease();
    }
    onSessionClosed() {
        this.updateSemaphore.tryRelease();
    }
    /**
     * Starts collecting session metrics, and processes the metrics in a backgroud loop until
     * cancelled or until the session is closed or the `SessionContour` instance is disposed.
     */
    async collectMetrics(sessionMetrics, cancellation) {
        if (!sessionMetrics)
            throw new TypeError('A session metrics object is required.');
        if (this.disposed)
            throw new errors_1.ObjectDisposedError(this);
        const eventRegistrations = [];
        eventRegistrations.push(sessionMetrics.onMessageSent(this.onMessageSent.bind(this)));
        eventRegistrations.push(sessionMetrics.onMessageReceived(this.onMessageReceived.bind(this)));
        eventRegistrations.push(sessionMetrics.onLatencyUpdated(this.onLatencyUpdated.bind(this)));
        eventRegistrations.push(sessionMetrics.onSessionClosed(this.onSessionClosed.bind(this)));
        try {
            while (!(cancellation === null || cancellation === void 0 ? void 0 : cancellation.isCancellationRequested)) {
                try {
                    await this.updateSemaphore.wait(cancellation);
                }
                catch (e) {
                    // The semaphore was disposed.
                    break;
                }
                const update = this.updateQueue.dequeue();
                if (!update) {
                    // The semaphore was released without enqueueing an update item.
                    break;
                }
                const intervalIndex = this.updateInterval(update.time);
                if (update.bytesSent) {
                    this.intervalBytesSent[intervalIndex] += update.bytesSent;
                }
                if (update.bytesReceived) {
                    this.intervalBytesReceived[intervalIndex] += update.bytesReceived;
                }
                const latency = update.latency;
                if (latency) {
                    if (!this.intervalLatencyMin[intervalIndex] ||
                        latency < this.intervalLatencyMin[intervalIndex]) {
                        this.intervalLatencyMin[intervalIndex] = latency;
                    }
                    if (!this.intervalLatencyMax[intervalIndex] ||
                        latency > this.intervalLatencyMax[intervalIndex]) {
                        this.intervalLatencyMax[intervalIndex] = latency;
                    }
                    this.intervalLatencySum[intervalIndex] += latency;
                    this.intervalLatencyCount[intervalIndex]++;
                    this.intervalLatencyAvg[intervalIndex] =
                        this.intervalLatencySum[intervalIndex] / this.intervalLatencyCount[intervalIndex];
                }
            }
            if (this.disposed) {
                this.updateSemaphore.dispose();
            }
        }
        finally {
            for (let eventRegistration of eventRegistrations) {
                eventRegistration.dispose();
            }
        }
    }
    updateInterval(time) {
        let intervalIndex = Math.floor(time / this.intervalMs);
        if (intervalIndex >= this.intervalCount) {
            // Expand as needed to accomodate the current time interval.
            while (intervalIndex >= this.maxIntervals) {
                this.expandIntervals();
                intervalIndex = Math.floor(time / this.intervalMs);
            }
            this.count = intervalIndex + 1;
        }
        return intervalIndex;
    }
    expandIntervals() {
        const combineLatency = (a, b, f) => a === 0 ? b : b === 0 ? a : f(a, b);
        const halfMaxIntervals = this.maxIntervals / 2;
        for (let i = 0; i < halfMaxIntervals; i++) {
            const iA = 2 * i;
            const iB = 2 * i + 1;
            this.intervalBytesSent[i] = this.intervalBytesSent[iA] + this.intervalBytesSent[iB];
            this.intervalBytesReceived[i] =
                this.intervalBytesReceived[iA] + this.intervalBytesReceived[iB];
            this.intervalLatencyMin[i] = combineLatency(this.intervalLatencyMin[iA], this.intervalLatencyMin[iB], Math.min);
            this.intervalLatencyMax[i] = combineLatency(this.intervalLatencyMax[iA], this.intervalLatencyMax[iB], Math.max);
            this.intervalLatencySum[i] = this.intervalLatencySum[iA] + this.intervalLatencySum[iB];
            const countSum = this.intervalLatencyCount[iA] + this.intervalLatencyCount[iB];
            this.intervalLatencyCount[i] = countSum;
            this.intervalLatencyAvg[i] =
                countSum === 0 ? 0 : this.intervalLatencySum[i] / this.intervalLatencyCount[i];
        }
        this.intervalBytesSent.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalBytesReceived.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyMin.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyMax.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencySum.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyCount.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalLatencyAvg.fill(0, halfMaxIntervals, this.maxIntervals);
        this.intervalMs *= 2;
    }
    dispose() {
        this.disposed = true;
        // The semaphore will be disposed after all remaining updates have been processed.
        this.updateSemaphore.tryRelease();
    }
    /**
     * Serializes the session contour into a compact form suitable for recording in
     * logs or telemetry.
     *
     * This compact serialization format uses one byte per metric per interval, so there is
     * some loss of precision, but generally not so much that it affects a visualization. A
     * scale factor for each metric is automatically determined and included in the serialized
     * header. The size of the serialized encoded data will be a little under 7 bytes per
     * interval. With the default interval maximum (256), that comes out to less than 1.75 KB.
     *
     * Use the code in `SessionContour.kql` to decode and chart this output in
     * Azure Data Explorer.
     */
    export() {
        // Time and value scales are in log2 form, determined based on the maximum
        // value in each series. This allows for a reasonable range of precision for each
        // value (with byte values ranging from 0-255). For example a max latency in the
        // 500ms range will get a scale factor of 1 (because ceil(log2(500/255)) = 1), so
        // each serialized value (0-255) is half the actual value (0-510).
        const getScale = (values) => Math.max(0, Math.ceil(Math.log2(Math.max(...values) / 255)));
        const applyReverseScale = (value, scale) => Math.round(value / Math.pow(2, scale));
        const bytes = Buffer.alloc(3 + (2 + this.intervalCount) * 5);
        const version = 1;
        const timeScale = Math.log2(this.interval / SessionContour.initialInterval);
        bytes[0] = version;
        bytes[1] = 5; // Number of metrics per interval
        bytes[2] = timeScale;
        bytes[3] = getScale(this.latencyMinMs);
        bytes[4] = getScale(this.latencyMaxMs);
        bytes[5] = getScale(this.latencyAverageMs);
        bytes[6] = getScale(this.bytesSent);
        bytes[7] = getScale(this.bytesReceived);
        bytes[8] = SessionMetric.latencyMin;
        bytes[9] = SessionMetric.latencyMax;
        bytes[10] = SessionMetric.latencyAverage;
        bytes[11] = SessionMetric.bytesSent;
        bytes[12] = SessionMetric.bytesReceived;
        for (let i = 0; i < this.intervalCount; i++) {
            const offset = 13 + 5 * i;
            bytes[offset + 0] = applyReverseScale(this.intervalLatencyMin[i], bytes[3]);
            bytes[offset + 1] = applyReverseScale(this.intervalLatencyMax[i], bytes[4]);
            bytes[offset + 2] = applyReverseScale(this.intervalLatencyAvg[i], bytes[5]);
            bytes[offset + 3] = applyReverseScale(this.intervalBytesSent[i], bytes[6]);
            bytes[offset + 4] = applyReverseScale(this.intervalBytesReceived[i], bytes[7]);
        }
        return bytes.toString('base64');
    }
    /**
     * Deserializes a session contour that was previously exported.
     *
     * Due to loss in precision, some values in the deserialized contour will not exactly match
     * the original, but they will be close.
     */
    static import(contourBase64) {
        const bytes = Buffer.from(contourBase64, 'base64');
        if (bytes.length < 3) {
            throw new Error('Invalid session contour string.');
        }
        const version = bytes[0];
        const metricsPerInterval = bytes[1];
        const timeScale = bytes[2];
        if (version !== 1) {
            throw new Error(`Unsupported session contour version: ${version}`);
        }
        const intervalCount = (bytes.length - 3) / metricsPerInterval - 2;
        if (intervalCount < 1 || bytes.length !== 3 + metricsPerInterval * (intervalCount + 2)) {
            throw new Error(`Incomplete session contour string.`);
        }
        const maxIntervals = Math.pow(2, Math.ceil(Math.log2(intervalCount)));
        const sessionContour = new SessionContour(maxIntervals);
        sessionContour.intervalMs = Math.pow(2, timeScale) * SessionContour.initialInterval;
        sessionContour.count = intervalCount;
        const scales = new Array(metricsPerInterval);
        for (let m = 0; m < metricsPerInterval; m++) {
            scales[m] = Math.pow(2, bytes[3 + m]);
        }
        const ids = new Array(metricsPerInterval);
        for (let m = 0; m < metricsPerInterval; m++) {
            ids[m] = bytes[3 + metricsPerInterval + m];
        }
        for (let i = 0; i < intervalCount; i++) {
            const offset = 3 + (2 + i) * metricsPerInterval;
            for (let m = 0; m < metricsPerInterval; m++) {
                switch (ids[m]) {
                    case SessionMetric.latencyMin:
                        sessionContour.intervalLatencyMin[i] = bytes[offset + m] * scales[m];
                        break;
                    case SessionMetric.latencyMax:
                        sessionContour.intervalLatencyMax[i] = bytes[offset + m] * scales[m];
                        break;
                    case SessionMetric.latencyAverage:
                        sessionContour.intervalLatencyAvg[i] = sessionContour.intervalLatencySum[i] =
                            bytes[offset + m] * scales[m];
                        sessionContour.intervalLatencyCount[i] = bytes[offset + m] === 0 ? 0 : 1;
                        break;
                    case SessionMetric.bytesSent:
                        sessionContour.intervalBytesSent[i] = bytes[offset + m] * scales[m];
                        break;
                    case SessionMetric.bytesReceived:
                        sessionContour.intervalBytesReceived[i] = bytes[offset + m] * scales[m];
                        break;
                    default:
                        // Ignore any unknown metrics
                        break;
                }
            }
        }
        return sessionContour;
    }
}
exports.SessionContour = SessionContour;
SessionContour.initialInterval = 1000; // 1 second (in milliseconds)
var SessionMetric;
(function (SessionMetric) {
    SessionMetric[SessionMetric["none"] = 0] = "none";
    SessionMetric[SessionMetric["latencyMin"] = 1] = "latencyMin";
    SessionMetric[SessionMetric["latencyMax"] = 2] = "latencyMax";
    SessionMetric[SessionMetric["latencyAverage"] = 3] = "latencyAverage";
    SessionMetric[SessionMetric["bytesSent"] = 11] = "bytesSent";
    SessionMetric[SessionMetric["bytesReceived"] = 12] = "bytesReceived";
})(SessionMetric || (SessionMetric = {}));
//# sourceMappingURL=sessionContour.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiChannelStream = void 0;
const vscode_jsonrpc_1 = __webpack_require__(6);
const trace_1 = __webpack_require__(24);
const sshStream_1 = __webpack_require__(255);
const sshSession_1 = __webpack_require__(71);
const sshSessionConfiguration_1 = __webpack_require__(68);
const transportMessages_1 = __webpack_require__(29);
const connectionService_1 = __webpack_require__(73);
/**
 * This class allows to establish an ssh session with no security beign defined.
 * Both side could open multiple channel to send/receive data.
 */
class MultiChannelStream {
    constructor(transportStream) {
        this.transportStream = transportStream;
        this.disposed = false;
        this.disposables = [];
        this.closedEmitter = new vscode_jsonrpc_1.Emitter();
        this.onClosed = this.closedEmitter.event;
        this.channelOpeningEmitter = new vscode_jsonrpc_1.Emitter();
        if (!transportStream)
            throw new TypeError('transportStream is required.');
        const noSecurityConfig = new sshSessionConfiguration_1.SshSessionConfiguration(false);
        this.session = new sshSession_1.SshSession(noSecurityConfig);
        this.session.onClosed(this.onSessionClosed, this, this.disposables);
        this.session.onChannelOpening(this.onSessionChannelOpening, this, this.disposables);
    }
    get isClosed() {
        return this.disposed || this.session.isClosed;
    }
    get onChannelOpening() {
        if (!this.isClosed) {
            this.session.activateService(connectionService_1.ConnectionService);
        }
        return this.channelOpeningEmitter.event;
    }
    /**
     * Connects ssh session.
     * @param cancellation optional cancellation token.
     */
    async connect(cancellation) {
        await this.session.connect(this.transportStream, cancellation);
    }
    /**
     * Accept a new channel on the ssh session.
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async acceptChannel(channelType, cancellation) {
        await this.session.connect(this.transportStream, cancellation);
        const channel = await this.session.acceptChannel(channelType, cancellation);
        return channel;
    }
    /**
     * Accept a remote ssh stream.
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async acceptStream(channelType, cancellation) {
        return new sshStream_1.SshStream(await this.acceptChannel(channelType, cancellation));
    }
    /**
     * Open a channel to a remote ssh session
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async openChannel(channelType, cancellation) {
        await this.session.connect(this.transportStream, cancellation);
        const channel = await this.session.openChannel(channelType !== null && channelType !== void 0 ? channelType : null, cancellation);
        return channel;
    }
    /**
     * open a stream to a remote ssh session
     * @param channelType optional channel type
     * @param cancellation optional cancellation token.
     */
    async openStream(channelType, cancellation) {
        return new sshStream_1.SshStream(await this.openChannel(channelType, cancellation));
    }
    /**
     * Connect ssh session and run it until closed.
     * @param cancellation optional cancellation token.
     */
    async connectAndRunUntilClosed(cancellation) {
        const disposables = [];
        const sessionClosedPromise = new Promise((resolve, reject) => {
            cancellation === null || cancellation === void 0 ? void 0 : cancellation.onCancellationRequested(reject, null, disposables);
            this.session.onClosed(resolve, null, disposables);
        });
        try {
            await this.connect(cancellation);
            await sessionClosedPromise;
        }
        finally {
            disposables.forEach((d) => d.dispose());
            await this.close();
        }
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            this.session.dispose();
            this.unsubscribe();
            try {
                if (this.transportStream)
                    this.transportStream.close().catch((e) => {
                        (0, trace_1.trace)('Error closing transport stream: ' + e.message);
                    });
            }
            catch (e) {
                if (!(e instanceof Error))
                    throw e;
                (0, trace_1.trace)('Error closing transport stream: ' + e.message);
            }
        }
    }
    async close() {
        if (!this.disposed) {
            this.disposed = true;
            await this.session.close(transportMessages_1.SshDisconnectReason.none, 'SshSession disposed');
            this.session.dispose();
            this.unsubscribe();
            await this.transportStream.close();
        }
    }
    onSessionClosed(e) {
        this.unsubscribe();
        this.closedEmitter.fire(e);
    }
    onSessionChannelOpening(e) {
        this.channelOpeningEmitter.fire(e);
    }
    unsubscribe() {
        this.disposables.forEach((d) => d.dispose());
        this.disposables = [];
    }
}
exports.MultiChannelStream = MultiChannelStream;
//# sourceMappingURL=multiChannelStream.js.map

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const dependencies_1 = __webpack_require__(14);
class ShowDetails extends vscode_command_framework_1.CommandBase {
    async invoke() {
        await dependencies_1.dependencies.commandUtil.executeCommand('workbench.view.remote');
    }
}
exports.ShowDetails = ShowDetails;


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var bind = __webpack_require__(256);
var Axios = __webpack_require__(547);
var mergeConfig = __webpack_require__(262);
var defaults = __webpack_require__(147);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(263);
axios.CancelToken = __webpack_require__(561);
axios.isCancel = __webpack_require__(261);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(562);

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(563);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var buildURL = __webpack_require__(257);
var InterceptorManager = __webpack_require__(548);
var dispatchRequest = __webpack_require__(549);
var mergeConfig = __webpack_require__(262);
var validator = __webpack_require__(559);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var transformData = __webpack_require__(550);
var isCancel = __webpack_require__(261);
var defaults = __webpack_require__(147);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);
var defaults = __webpack_require__(147);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(260);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(555);
var combineURLs = __webpack_require__(556);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(17);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pkg = __webpack_require__(560);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),
/* 560 */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"axios\",\"version\":\"0.21.4\",\"description\":\"Promise based HTTP client for the browser and node.js\",\"main\":\"index.js\",\"scripts\":{\"test\":\"grunt test\",\"start\":\"node ./sandbox/server.js\",\"build\":\"NODE_ENV=production grunt build\",\"preversion\":\"npm test\",\"version\":\"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json\",\"postversion\":\"git push && git push --tags\",\"examples\":\"node ./examples/server.js\",\"coveralls\":\"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\",\"fix\":\"eslint --fix lib/**/*.js\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/axios/axios.git\"},\"keywords\":[\"xhr\",\"http\",\"ajax\",\"promise\",\"node\"],\"author\":\"Matt Zabriskie\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/axios/axios/issues\"},\"homepage\":\"https://axios-http.com\",\"devDependencies\":{\"coveralls\":\"^3.0.0\",\"es6-promise\":\"^4.2.4\",\"grunt\":\"^1.3.0\",\"grunt-banner\":\"^0.6.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-clean\":\"^1.1.0\",\"grunt-contrib-watch\":\"^1.0.0\",\"grunt-eslint\":\"^23.0.0\",\"grunt-karma\":\"^4.0.0\",\"grunt-mocha-test\":\"^0.13.3\",\"grunt-ts\":\"^6.0.0-beta.19\",\"grunt-webpack\":\"^4.0.2\",\"istanbul-instrumenter-loader\":\"^1.0.0\",\"jasmine-core\":\"^2.4.1\",\"karma\":\"^6.3.2\",\"karma-chrome-launcher\":\"^3.1.0\",\"karma-firefox-launcher\":\"^2.1.0\",\"karma-jasmine\":\"^1.1.1\",\"karma-jasmine-ajax\":\"^0.1.13\",\"karma-safari-launcher\":\"^1.0.0\",\"karma-sauce-launcher\":\"^4.3.6\",\"karma-sinon\":\"^1.0.5\",\"karma-sourcemap-loader\":\"^0.3.8\",\"karma-webpack\":\"^4.0.2\",\"load-grunt-tasks\":\"^3.5.2\",\"minimist\":\"^1.2.0\",\"mocha\":\"^8.2.1\",\"sinon\":\"^4.5.0\",\"terser-webpack-plugin\":\"^4.2.3\",\"typescript\":\"^4.0.5\",\"url-search-params\":\"^0.10.0\",\"webpack\":\"^4.44.2\",\"webpack-dev-server\":\"^3.11.0\"},\"browser\":{\"./lib/adapters/http.js\":\"./lib/adapters/xhr.js\"},\"jsdelivr\":\"dist/axios.min.js\",\"unpkg\":\"dist/axios.min.js\",\"typings\":\"./index.d.ts\",\"dependencies\":{\"follow-redirects\":\"^1.14.0\"},\"bundlesize\":[{\"path\":\"./dist/axios.min.js\",\"threshold\":\"5kB\"}]}");

/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(263);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNetworkError = isNetworkError;
exports.isRetryableError = isRetryableError;
exports.isSafeRequestError = isSafeRequestError;
exports.isIdempotentRequestError = isIdempotentRequestError;
exports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
exports.exponentialDelay = exponentialDelay;
exports.default = axiosRetry;

var _isRetryAllowed = __webpack_require__(565);

var _isRetryAllowed2 = _interopRequireDefault(_isRetryAllowed);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var namespace = 'axios-retry';

/**
 * @param  {Error}  error
 * @return {boolean}
 */
function isNetworkError(error) {
  return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests
  error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests
  (0, _isRetryAllowed2.default)(error); // Prevents retrying unsafe errors
}

var SAFE_HTTP_METHODS = ['get', 'head', 'options'];
var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);

/**
 * @param  {Error}  error
 * @return {boolean}
 */
function isRetryableError(error) {
  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);
}

/**
 * @param  {Error}  error
 * @return {boolean}
 */
function isSafeRequestError(error) {
  if (!error.config) {
    // Cannot determine if the request can be retried
    return false;
  }

  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
}

/**
 * @param  {Error}  error
 * @return {boolean}
 */
function isIdempotentRequestError(error) {
  if (!error.config) {
    // Cannot determine if the request can be retried
    return false;
  }

  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
}

/**
 * @param  {Error}  error
 * @return {boolean}
 */
function isNetworkOrIdempotentRequestError(error) {
  return isNetworkError(error) || isIdempotentRequestError(error);
}

/**
 * @return {number} - delay in milliseconds, always 0
 */
function noDelay() {
  return 0;
}

/**
 * @param  {number} [retryNumber=0]
 * @return {number} - delay in milliseconds
 */
function exponentialDelay() {
  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  var delay = Math.pow(2, retryNumber) * 100;
  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay
  return delay + randomSum;
}

/**
 * Initializes and returns the retry state for the given request/config
 * @param  {AxiosRequestConfig} config
 * @return {Object}
 */
function getCurrentState(config) {
  var currentState = config[namespace] || {};
  currentState.retryCount = currentState.retryCount || 0;
  config[namespace] = currentState;
  return currentState;
}

/**
 * Returns the axios-retry options for the current request
 * @param  {AxiosRequestConfig} config
 * @param  {AxiosRetryConfig} defaultOptions
 * @return {AxiosRetryConfig}
 */
function getRequestOptions(config, defaultOptions) {
  return Object.assign({}, defaultOptions, config[namespace]);
}

/**
 * @param  {Axios} axios
 * @param  {AxiosRequestConfig} config
 */
function fixConfig(axios, config) {
  if (axios.defaults.agent === config.agent) {
    delete config.agent;
  }
  if (axios.defaults.httpAgent === config.httpAgent) {
    delete config.httpAgent;
  }
  if (axios.defaults.httpsAgent === config.httpsAgent) {
    delete config.httpsAgent;
  }
}

/**
 * Adds response interceptors to an axios instance to retry requests failed due to network issues
 *
 * @example
 *
 * import axios from 'axios';
 *
 * axiosRetry(axios, { retries: 3 });
 *
 * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'
 *   .then(result => {
 *     result.data; // 'ok'
 *   });
 *
 * // Exponential back-off retry delay between requests
 * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});
 *
 * // Custom retry delay
 * axiosRetry(axios, { retryDelay : (retryCount) => {
 *   return retryCount * 1000;
 * }});
 *
 * // Also works with custom axios instances
 * const client = axios.create({ baseURL: 'http://example.com' });
 * axiosRetry(client, { retries: 3 });
 *
 * client.get('/test') // The first request fails and the second returns 'ok'
 *   .then(result => {
 *     result.data; // 'ok'
 *   });
 *
 * // Allows request-specific configuration
 * client
 *   .get('/test', {
 *     'axios-retry': {
 *       retries: 0
 *     }
 *   })
 *   .catch(error => { // The first request fails
 *     error !== undefined
 *   });
 *
 * @param {Axios} axios An axios instance (the axios object or one created from axios.create)
 * @param {Object} [defaultOptions]
 * @param {number} [defaultOptions.retries=3] Number of retries
 * @param {boolean} [defaultOptions.shouldResetTimeout=false]
 *        Defines if the timeout should be reset between retries
 * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]
 *        A function to determine if the error can be retried
 * @param {Function} [defaultOptions.retryDelay=noDelay]
 *        A function to determine the delay between retry requests
 */
function axiosRetry(axios, defaultOptions) {
  axios.interceptors.request.use(function (config) {
    var currentState = getCurrentState(config);
    currentState.lastRequestTime = Date.now();
    return config;
  });

  axios.interceptors.response.use(null, function (error) {
    var config = error.config;

    // If we have no information to retry the request
    if (!config) {
      return Promise.reject(error);
    }

    var _getRequestOptions = getRequestOptions(config, defaultOptions),
        _getRequestOptions$re = _getRequestOptions.retries,
        retries = _getRequestOptions$re === undefined ? 3 : _getRequestOptions$re,
        _getRequestOptions$re2 = _getRequestOptions.retryCondition,
        retryCondition = _getRequestOptions$re2 === undefined ? isNetworkOrIdempotentRequestError : _getRequestOptions$re2,
        _getRequestOptions$re3 = _getRequestOptions.retryDelay,
        retryDelay = _getRequestOptions$re3 === undefined ? noDelay : _getRequestOptions$re3,
        _getRequestOptions$sh = _getRequestOptions.shouldResetTimeout,
        shouldResetTimeout = _getRequestOptions$sh === undefined ? false : _getRequestOptions$sh;

    var currentState = getCurrentState(config);

    var shouldRetry = retryCondition(error) && currentState.retryCount < retries;

    if (shouldRetry) {
      currentState.retryCount += 1;
      var delay = retryDelay(currentState.retryCount, error);

      // Axios fails merging this configuration to the default configuration because it has an issue
      // with circular structures: https://github.com/mzabriskie/axios/issues/370
      fixConfig(axios, config);

      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
        var lastRequestDuration = Date.now() - currentState.lastRequestTime;
        // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)
        config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);
      }

      config.transformRequest = [function (data) {
        return data;
      }];

      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve(axios(config));
        }, delay);
      });
    }

    return Promise.reject(error);
  });
}

// Compatibility with CommonJS
axiosRetry.isNetworkError = isNetworkError;
axiosRetry.isSafeRequestError = isSafeRequestError;
axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
axiosRetry.exponentialDelay = exponentialDelay;
axiosRetry.isRetryableError = isRetryableError;
//# sourceMappingURL=index.js.map

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var WHITELIST = [
	'ETIMEDOUT',
	'ECONNRESET',
	'EADDRINUSE',
	'ESOCKETTIMEDOUT',
	'ECONNREFUSED',
	'EPIPE',
	'EHOSTUNREACH',
	'EAI_AGAIN'
];

var BLACKLIST = [
	'ENOTFOUND',
	'ENETUNREACH',

	// SSL errors from https://github.com/nodejs/node/blob/ed3d8b13ee9a705d89f9e0397d9e96519e7e47ac/src/node_crypto.cc#L1950
	'UNABLE_TO_GET_ISSUER_CERT',
	'UNABLE_TO_GET_CRL',
	'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
	'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
	'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
	'CERT_SIGNATURE_FAILURE',
	'CRL_SIGNATURE_FAILURE',
	'CERT_NOT_YET_VALID',
	'CERT_HAS_EXPIRED',
	'CRL_NOT_YET_VALID',
	'CRL_HAS_EXPIRED',
	'ERROR_IN_CERT_NOT_BEFORE_FIELD',
	'ERROR_IN_CERT_NOT_AFTER_FIELD',
	'ERROR_IN_CRL_LAST_UPDATE_FIELD',
	'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
	'OUT_OF_MEM',
	'DEPTH_ZERO_SELF_SIGNED_CERT',
	'SELF_SIGNED_CERT_IN_CHAIN',
	'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
	'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
	'CERT_CHAIN_TOO_LONG',
	'CERT_REVOKED',
	'INVALID_CA',
	'PATH_LENGTH_EXCEEDED',
	'INVALID_PURPOSE',
	'CERT_UNTRUSTED',
	'CERT_REJECTED'
];

module.exports = function (err) {
	if (!err || !err.code) {
		return true;
	}

	if (WHITELIST.indexOf(err.code) !== -1) {
		return true;
	}

	if (BLACKLIST.indexOf(err.code) !== -1) {
		return false;
	}

	return true;
};


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
const constants_1 = __webpack_require__(149);
const IConfigurationManager_1 = __webpack_require__(150);
class ConfigurationManager {
    constructor() {
        this.configChangeEmitters = new Map();
        vscode.workspace.onDidChangeConfiguration((e) => {
            for (let [fullKey, emitter] of this.configChangeEmitters.entries()) {
                if (e.affectsConfiguration(fullKey)) {
                    // take a key of form "section.setting.value" and split into "section" and "setting.value"
                    const splitLocation = fullKey.indexOf('.');
                    const section = fullKey.substr(0, splitLocation);
                    const key = fullKey.substr(splitLocation + 1);
                    emitter.fire(this.getConfigValue(key, section));
                }
            }
        });
    }
    onDidChangeConfigValue(key, configName = IConfigurationManager_1.ConfigurationKey.configName) {
        const fullKey = `${configName}.${key}`;
        let configChangeEmitter = this.configChangeEmitters.get(fullKey);
        if (!configChangeEmitter) {
            configChangeEmitter = new vscode.EventEmitter();
            this.configChangeEmitters.set(fullKey, configChangeEmitter);
        }
        return configChangeEmitter.event;
    }
    getDefaultExtensions() {
        const extensionConfig = vscode.workspace.getConfiguration(IConfigurationManager_1.ConfigurationKey.configName);
        const settings = extensionConfig.inspect(IConfigurationManager_1.ConfigurationKey.defaultExtensions);
        if (settings && Array.isArray(settings.globalValue)) {
            return settings.globalValue;
        }
        return constants_1.DEFAULT_EXTENSIONS;
    }
    getConfigValue(key, configName = IConfigurationManager_1.ConfigurationKey.configName) {
        const extensionConfig = vscode.workspace.getConfiguration(configName);
        return extensionConfig.get(key);
    }
    async setConfigValue(key, value, configName = IConfigurationManager_1.ConfigurationKey.configName) {
        const extensionConfig = vscode.workspace.getConfiguration(configName);
        await extensionConfig.update(key, value, vscode.ConfigurationTarget.Global);
    }
    get isRunningInWeb() {
        var _a, _b;
        const webUIKind = (_b = (_a = vscode.UIKind) === null || _a === void 0 ? void 0 : _a.Web) !== null && _b !== void 0 ? _b : -1;
        return !!(vscode.env.uiKind === webUIKind);
    }
}
exports.ConfigurationManager = ConfigurationManager;


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
class CommandUtil {
    static get Instance() {
        if (!CommandUtil.singleton) {
            CommandUtil.singleton = new CommandUtil();
        }
        return CommandUtil.singleton;
    }
    getCommands() {
        return vscode.commands.getCommands();
    }
    executeCommand(command, ...rest) {
        return vscode.commands.executeCommand(command, ...rest);
    }
}
exports.CommandUtil = CommandUtil;
const Instance = CommandUtil.Instance;
exports.Instance = Instance;


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = __webpack_require__(51);
const vscode = __webpack_require__(1);
class ExtensionsUtil {
    constructor(dependencies) {
        this.dependencies = dependencies;
    }
    getExtension(extensionId) {
        return vscode.extensions.getExtension(extensionId);
    }
    getWorkspaceFile() {
        return vscode.workspace.workspaceFile;
    }
    getWorkspaceFolders() {
        return vscode.workspace.workspaceFolders;
    }
    getRemoteDevelopmentName() {
        return vscode.env ? vscode.env.remoteName : undefined;
    }
    createTerminal(name, env) {
        return vscode.window.createTerminal({ name, env });
    }
    createUriFromFile(path) {
        return vscode.Uri.file(path);
    }
    /**
     * Launches the environment by running 'vscode.openFolder' command with connection uri.
     */
    async openRemoteFolder(codespaceName, sessionPath, newWindow) {
        const folderUri = this.dependencies.util.getEnvironmentConnectionUri(codespaceName, sessionPath);
        const newUri = vscode.Uri.parse(folderUri);
        await this.dependencies.util.waitIfUITestRunning();
        await vscode.commands.executeCommand('vscode.openFolder', newUri, newWindow);
    }
    parseUri(value) {
        const uri = vscode.Uri.parse(value);
        return Object.assign(Object.assign({}, uri), { toString: (skipEncoding) => uri.toString(skipEncoding), append: (path) => {
                const trimmedUri = `${uri}`.replace(/\/$/, '');
                const trimmedPath = path.replace(/^\//, '');
                return `${trimmedUri}/${trimmedPath}`;
            }, with: (change) => uri.with(change), toJSON: () => uri.toJSON() });
    }
    getIsInternalUser() {
        return configuration_1.getIsInternalUser();
    }
    async openLinkInBrowser(url) {
        await vscode.env.openExternal(vscode.Uri.parse(url));
    }
    async writeFileAsync(pathUri, data) {
        return vscode.workspace.fs.writeFile(pathUri, Buffer.from(data, 'utf8'));
    }
    setExtensionContext(context) {
        this.extensionContext = context;
    }
    getExtensionContext() {
        return this.extensionContext;
    }
    getRelativeExtensionUri(relativePath) {
        if (!this.extensionContext) {
            throw new Error("ExtensionContext not set");
        }
        return vscode.Uri.joinPath(this.extensionContext.extensionUri, relativePath);
    }
}
exports.ExtensionsUtil = ExtensionsUtil;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var singleComment = 1;
var multiComment = 2;

function stripWithoutWhitespace() {
	return '';
}

function stripWithWhitespace(str, start, end) {
	return str.slice(start, end).replace(/\S/g, ' ');
}

module.exports = function (str, opts) {
	opts = opts || {};

	var currentChar;
	var nextChar;
	var insideString = false;
	var insideComment = false;
	var offset = 0;
	var ret = '';
	var strip = opts.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;

	for (var i = 0; i < str.length; i++) {
		currentChar = str[i];
		nextChar = str[i + 1];

		if (!insideComment && currentChar === '"') {
			var escaped = str[i - 1] === '\\' && str[i - 2] !== '\\';
			if (!escaped) {
				insideString = !insideString;
			}
		}

		if (insideString) {
			continue;
		}

		if (!insideComment && currentChar + nextChar === '//') {
			ret += str.slice(offset, i);
			offset = i;
			insideComment = singleComment;
			i++;
		} else if (insideComment === singleComment && currentChar + nextChar === '\r\n') {
			i++;
			insideComment = false;
			ret += strip(str, offset, i);
			offset = i;
			continue;
		} else if (insideComment === singleComment && currentChar === '\n') {
			insideComment = false;
			ret += strip(str, offset, i);
			offset = i;
		} else if (!insideComment && currentChar + nextChar === '/*') {
			ret += str.slice(offset, i);
			offset = i;
			insideComment = multiComment;
			i++;
			continue;
		} else if (insideComment === multiComment && currentChar + nextChar === '*/') {
			i++;
			insideComment = false;
			ret += strip(str, offset, i + 1);
			offset = i + 1;
			continue;
		}
	}

	return ret + (insideComment ? strip(str.substr(offset)) : str.substr(offset));
};


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
const TVscsTarget_1 = __webpack_require__(571);
// Parse `vscsTarget` value.
exports.parseVscsTarget = (value) => {
    // If `null` or `undefined`, use the default prod.
    if (!value) {
        return TVscsTarget_1.TVscsTarget.Production;
    }
    // Make sure the value is at least a string, throw for any other type.
    vscs_utils_1.assert(typeof value === 'string', `Unexpected type of "vscsTarget", got "${typeof value}" but "string" expected.`);
    // The value must be one of the enum values.
    if (Object.values(TVscsTarget_1.TVscsTarget).includes(value)) {
        return value;
    }
    // String, but value is not from the set, throw.
    throw new Error(`"${value}" is not valid "vscsTarget" value, see "VscsTarget" enum for all acceptable values.`);
};


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TVscsTarget;
(function (TVscsTarget) {
    TVscsTarget["Local"] = "local";
    TVscsTarget["Development"] = "development";
    TVscsTarget["DevGen2"] = "devgen2";
    TVscsTarget["Ppe"] = "ppe";
    TVscsTarget["Canary"] = "canary";
    TVscsTarget["Production"] = "production";
})(TVscsTarget = exports.TVscsTarget || (exports.TVscsTarget = {}));


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PrebuildAvailability;
(function (PrebuildAvailability) {
    PrebuildAvailability["none"] = "none";
    PrebuildAvailability["blob"] = "blob";
    PrebuildAvailability["pool"] = "pool";
})(PrebuildAvailability = exports.PrebuildAvailability || (exports.PrebuildAvailability = {}));
;


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const util_1 = __webpack_require__(52);
const vscode_1 = __webpack_require__(1);
const nls = __webpack_require__(7);
const directoryPicker_1 = __webpack_require__(575);
const UserPrompt_1 = __webpack_require__(264);
const localize = nls.loadMessageBundle();
const defaultSkuExternal = 'standardLinux32gb';
const defaultSkuInternal = 'standardLinux';
let repositories;
class CodespaceCreationPrompt extends UserPrompt_1.UserPrompt {
    constructor(dependencies) {
        super();
        this.dependencies = dependencies;
    }
    async run(options) {
        var _a, _b, _c;
        // Start locations requests in background while user selects repo/branch
        const locationsPromise = this.dependencies.getApiProvider().locations.getLocationsList();
        const fullRepoName = ((_a = options === null || options === void 0 ? void 0 : options.values) === null || _a === void 0 ? void 0 : _a.fullRepoName) ? this.repoOrUrlToRepo(options.values.fullRepoName)
            : await this.promptForRepoName();
        const [owner, repoName] = fullRepoName.split('/');
        const repo = await this.dependencies.getApiProvider().environments.getRepo(owner, repoName);
        const ref = (_c = (_b = options === null || options === void 0 ? void 0 : options.values) === null || _b === void 0 ? void 0 : _b.ref) !== null && _c !== void 0 ? _c : (await this.promptForBranch(repo));
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        let workingDirectory;
        if (isInternalUser) {
            if (await this.needCustomWorkingDirectory()) {
                workingDirectory = await this.promptForWorkingDirectory(repo, ref);
                // Remove leading '/' if any, as the agent does not expect that
                if (workingDirectory.charAt(0) === '/') {
                    workingDirectory = workingDirectory.substring(1);
                }
            }
        }
        const location = (await locationsPromise).current;
        const skuName = await this.promptForSku(repo, ref, location);
        return {
            fullRepoName,
            repo,
            ref,
            location,
            sku: skuName,
            workingDirectory,
        };
    }
    repoOrUrlToRepo(repoOrUrl) {
        return repoOrUrl
            .trim()
            .replace(/^.*?github\.com\//, '') // Remove leading https://github.com
            .replace(/\.git$/, '');
    }
    async promptForRepoName() {
        const state = { rateLimitMsgShown: false };
        let timeout;
        const onUpdatedInput = (input) => new Promise((resolve) => {
            clearTimeout(timeout);
            timeout = setTimeout(async () => resolve(this.fetchRepoItems(input, state, false)), input.endsWith('/') ? 0 : 250);
        });
        const acceptNonMatchingInput = async (input) => {
            try {
                const [owner, repo] = this.repoOrUrlToRepo(input).split('/');
                await this.dependencies.getApiProvider().environments.getRepo(owner, repo);
                return true;
            }
            catch (_a) {
                return false;
            }
        };
        const prompt = localize('message.codespaceCreation.selectRepo', 'Select a repo to create your codespace');
        const fetchingPrompt = localize('message.codespaceCreation.loadingRepos', 'Loading your repositories...');
        const quickPick = this.dependencies.notificationUtil.createQuickPickWithRefresh(fetchingPrompt, prompt, onUpdatedInput, acceptNonMatchingInput);
        let pickItems = await this.fetchRepoItems('', state, true);
        quickPick.setItems(pickItems);
        const selection = await quickPick.valuePromise;
        if (!selection) {
            throw new vscode_command_framework_1.CancellationError();
        }
        return typeof selection === 'string' ? this.repoOrUrlToRepo(selection) : selection.label;
    }
    async fetchRepoItems(query, state, cache) {
        query = query && this.repoOrUrlToRepo(query);
        repositories =
            cache && repositories
                ? repositories
                : await this.dependencies
                    .getApiProvider()
                    .environments.listRepos(query)
                    .catch((e) => {
                    if (e.message.includes('rate limit') && !state.rateLimitMsgShown) {
                        state.rateLimitMsgShown = true;
                        const message = localize('message.codespaceCreation.rateLimitExceeded', 'Search rate limit exceeded. You can wait or specify the repository by full name or URL.');
                        this.dependencies.notificationUtil.showInformationMessage(message, false);
                    }
                    return [];
                });
        return repositories.map((r) => ({
            label: `${r.owner}/${r.name}`,
            description: r.description,
        }));
    }
    async promptForSku(repo, ref, location) {
        const placeHolder = localize('message.codespaceCreation.selectSku', 'Select the instance type for your codespace');
        let skus = await this.dependencies
            .getApiProvider()
            .environments.getMachinesForCreation(repo, ref, location);
        if (skus.length === 0) {
            // we should not hit this anymore as we already check the response we get from github in "listMachines",
            // however, we check this for any unknown reason.
            const quotaErrorMessage = localize('message.codespaceCreation.emptyMachines', 'There are currently no machine types available for this repository.');
            throw new vscode_command_framework_1.CancellationError(quotaErrorMessage);
        }
        // If the user only has one choice for the machine type, do not bother prompting, just use it
        if (skus.length === 1) {
            return skus[0];
        }
        const skuNames = skus.map((sku) => ({
            label: sku.displayName,
            description: util_1.Util.Instance.getMachineTypeDescription(sku.prebuildAvailability),
            picked: sku.name === defaultSkuExternal || sku.name === defaultSkuInternal,
            sku,
        }));
        // If none of the skus are selected by default, make the first item selected
        if (!skuNames.some(x => x.picked)) {
            skuNames[0].picked = true;
        }
        const pickedItem = await this.dependencies.notificationUtil.showQuickPick(skuNames, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            throw new vscode_command_framework_1.CancellationError();
        }
        return pickedItem.sku;
    }
    async promptForBranch(repo) {
        const loadingMessage = localize('message.codespaceCreation.loadingBranches', 'Loading branches...');
        const message = localize('message.codespaceCreation.selectBranch', "Select the branch you'd like to use for the codespace");
        const defaultBranchItem = {
            label: repo.defaultBranch,
            description: localize('message.codespaceCreation.defaultBranch', 'Default Branch'),
            alwaysShow: true,
        };
        let originalBranchItems = [];
        let listWithDefaultBranch = [defaultBranchItem];
        let timeout;
        const onUpdatedInput = (input) => new Promise((resolve) => {
            clearTimeout(timeout);
            timeout = setTimeout(async () => {
                // If GitHub previously paged back the list of branches (100 results),
                // call into the API to verify whether the user-provided branch exists
                if (originalBranchItems.length === 100 &&
                    !listWithDefaultBranch.some((item) => item.label.includes(input))) {
                    try {
                        await this.dependencies
                            .getApiProvider()
                            .environments.getBranch(repo.owner, repo.name, input);
                        listWithDefaultBranch.push({ label: input, picked: true });
                    }
                    catch (e) {
                        // don't add to list
                    }
                }
                resolve(listWithDefaultBranch);
            }, 200);
        });
        const quickPick = this.dependencies.notificationUtil.createQuickPickWithRefresh(loadingMessage, message, onUpdatedInput);
        const branchNames = await this.dependencies
            .getApiProvider()
            .environments.listBranchNames(repo.owner, repo.name);
        originalBranchItems = branchNames.map((name) => ({
            label: name,
            picked: name === repo.defaultBranch,
        }));
        listWithDefaultBranch = [
            defaultBranchItem,
            ...originalBranchItems.filter((item) => item.label !== defaultBranchItem.label),
        ];
        quickPick.setItems(listWithDefaultBranch);
        const branch = await quickPick.valuePromise;
        if (!branch) {
            throw new vscode_command_framework_1.CancellationError();
        }
        if (typeof branch === 'string') {
            return branch;
        }
        return branch.label;
    }
    async promptForWorkingDirectory(repo, branch) {
        const placeHolderMessage = localize('message.codespaceCreation.selectOrEnterWorkingDirectory', 'Select or enter the working directory path');
        const loadingMessage = localize('message.codespaceCreation.loadingDirectories', 'Loading directories...');
        const title = localize('message.codespaceCreation.pickWorkingDirectory', 'Select your working directory');
        const pickerButtonTooltip = localize('message.codespaceCreation.pickWorkingDirectoryButton', 'Use this path as the working directory');
        const gitHubDirectoryPicker = new directoryPicker_1.GitHubDirectoryPicker(placeHolderMessage, loadingMessage, title, pickerButtonTooltip, this.dependencies.getApiProvider().environments, repo, branch);
        const selectedDirectory = await gitHubDirectoryPicker.run();
        return selectedDirectory;
    }
    async needCustomWorkingDirectory() {
        const placeHolder = localize('message.codespaceCreation.selectWorkingDirectoryType', 'Select your working directory');
        const defaultWorkingDirectory = localize('message.codespaceCreation.defaultWorkingDirectoryOption', 'Use default directory (repository root)');
        const customWorkingDirectory = localize('message.codespaceCreation.customWorkingDirectoryOption', 'Pick a custom directory');
        const learnMore = localize('message.codespaceCreation.workingDirectoryLearnMore', 'Learn how your working directory can affect your codespace configuration');
        const learnMoreUri = vscode_1.Uri.parse('https://aka.ms/codespaces-custom-directory');
        const options = [
            {
                label: defaultWorkingDirectory,
                picked: true,
            },
            {
                label: customWorkingDirectory,
            },
            {
                label: learnMore,
            },
        ];
        const pickedItem = await this.dependencies.notificationUtil.showQuickPick(options, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            throw new vscode_command_framework_1.CancellationError();
        }
        if (pickedItem.label === learnMore) {
            await vscode_1.env.openExternal(learnMoreUri);
            return await this.needCustomWorkingDirectory();
        }
        return pickedItem.label === customWorkingDirectory;
    }
}
exports.CodespaceCreationPrompt = CodespaceCreationPrompt;


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const localize = nls.loadMessageBundle();
class DirectoryPicker {
    constructor(placeHolderMessage, loadingMessage, title, rootItem, pickerButtonTooltip, quickPick) {
        this.placeHolderMessage = placeHolderMessage;
        this.loadingMessage = loadingMessage;
        this.rootItem = rootItem;
        if (quickPick) {
            this.quickPick = quickPick;
            this.submitButton = {
                iconPath: { id: 'check' },
                tooltip: pickerButtonTooltip,
            };
        }
        else {
            this.quickPick = __webpack_require__(1).window.createQuickPick();
            const ThemeIcon = __webpack_require__(1).ThemeIcon;
            this.submitButton = {
                iconPath: new ThemeIcon('check'),
                tooltip: pickerButtonTooltip,
            };
        }
        this.quickPick.buttons = [this.submitButton];
        this.quickPick.title = title;
        this.quickPick.ignoreFocusOut = true;
        this.selected = rootItem;
        const emptyItem = {
            label: '',
            path: '',
            fullPath: '',
            children: null,
            parent: null,
            alwaysShow: true,
        };
        this.submitterItem = Object.assign(Object.assign({}, emptyItem), { label: pickerButtonTooltip, picked: true });
        this.goBackItem = Object.assign(Object.assign({}, emptyItem), { label: '..' });
        const errorMessage = localize('error.codespaceCreation.invalidWorkingDirectory', 'Path you entered is invalid');
        this.errorItem = Object.assign(Object.assign({}, emptyItem), { label: errorMessage });
    }
    async run() {
        await this.populateSubDirectories(this.rootItem);
        this.setItems(this.rootItem.children || []);
        this.quickPick.value = this.rootItem.path;
        this.quickPick.onDidAccept(async () => {
            this.quickPick.placeholder = this.loadingMessage;
            this.quickPick.enabled = false;
            const lastSelected = this.selected;
            if (this.quickPick.selectedItems.length) {
                this.selected = this.quickPick.selectedItems[0];
            }
            if (this.selected) {
                if (this.selected === this.submitterItem) {
                    // Handled in the valuePromise below. No action required
                    return;
                }
                else if (this.selected === this.errorItem) {
                    this.selected = this.rootItem;
                }
                else if (this.selected === this.goBackItem && lastSelected.parent) {
                    this.selected = lastSelected.parent;
                }
                this.quickPick.value = this.selected.fullPath;
                await this.populateSubDirectories(this.selected);
                this.setItems(this.selected.children || []);
            }
            this.quickPick.enabled = true;
        });
        this.quickPick.onDidChangeValue(async (input) => {
            this.quickPick.enabled = false;
            if (this.selected.fullPath === input) {
                this.quickPick.enabled = true;
                return;
            }
            await this.validateEnteredPath(input);
            this.quickPick.enabled = true;
        });
        this.quickPick.show();
        const valuePromise = new Promise((resolve) => {
            const validateAndResolve = async () => {
                // Double check the value
                await this.validateEnteredPath(this.quickPick.value, true);
                if (this.selected === this.errorItem) {
                    return;
                }
                this.quickPick.dispose();
                resolve(this.selected.fullPath);
            };
            this.quickPick.onDidTriggerButton(async (b) => {
                if (b === this.submitButton) {
                    await validateAndResolve();
                }
            });
            this.quickPick.onDidAccept(async () => {
                if (this.selected === this.submitterItem) {
                    await validateAndResolve();
                }
            });
        });
        return valuePromise;
    }
    async populateSubDirectories(item) {
        this.quickPick.enabled = false;
        this.quickPick.busy = true;
        if (item.children) {
            return;
        }
        else {
            const children = await this.getChildren(item);
            if (item === this.rootItem) {
                item.children = [this.submitterItem, ...children];
            }
            else {
                item.children = [this.submitterItem, this.goBackItem, ...children];
            }
        }
        this.quickPick.enabled = true;
        this.quickPick.busy = false;
    }
    setItems(items) {
        this.quickPick.placeholder = this.placeHolderMessage;
        this.quickPick.items = items;
        this.quickPick.busy = false;
    }
    async validateEnteredPath(enteredPath, treatAsFullPath) {
        var _a, _b;
        let fullPath = enteredPath;
        if (!treatAsFullPath) {
            fullPath = this.getParentDirectory(enteredPath);
        }
        const pathElements = fullPath.split('/').filter(x => x !== '');
        let item = this.rootItem;
        for (const path of pathElements) {
            const match = (_a = item.children) === null || _a === void 0 ? void 0 : _a.find((x) => x.path === path);
            if (!match) {
                item = this.errorItem;
                break;
            }
            item = match;
            await this.populateSubDirectories(item);
        }
        this.selected = item;
        if (item === this.errorItem) {
            this.setItems([this.errorItem]);
        }
        else {
            this.setItems((_b = item.children) !== null && _b !== void 0 ? _b : []);
        }
    }
    /**
     * Returns a qualified directory from the path string (by removing the file part)
     * @param path path string (ex: `/src/code/abc`)
     * @returns
     *  for `src/code/abc/` it returns `src/code/abc/`
     *  for `src/code/abc` it returns `src/code/`
     *  for `src/` it returns `src/`
     *  for `src` it returns ``
     */
    getParentDirectory(path) {
        let i = path.lastIndexOf('/');
        if (i < 0) {
            return '';
        }
        else {
            return path.substring(0, i);
        }
    }
}
class GitHubDirectoryPicker extends DirectoryPicker {
    constructor(placeHolderMessage, loadingMessage, title, pickerButtonTooltip, environmentsApi, repo, branch, quickPick) {
        const rootItem = {
            label: '/',
            path: '/',
            fullPath: '/',
            children: null,
            sha: branch,
            parent: null,
            alwaysShow: true,
        };
        super(placeHolderMessage, loadingMessage, title, rootItem, pickerButtonTooltip, quickPick);
        this.environmentsApi = environmentsApi;
        this.repo = repo;
    }
    async getChildren(item) {
        const getFullPath = (currentDirectory) => {
            if (item === this.rootItem || !item.fullPath) {
                return currentDirectory;
            }
            return `${item.fullPath}/${currentDirectory}`;
        };
        const subDirectories = await this.environmentsApi.getDirectories(this.repo.owner, this.repo.name, item.sha);
        const childItems = subDirectories.map(x => ({
            label: x.path,
            path: x.path,
            sha: x.sha,
            children: null,
            parent: item,
            alwaysShow: true,
            fullPath: getFullPath(x.path),
        }));
        return childItems;
    }
}
exports.GitHubDirectoryPicker = GitHubDirectoryPicker;


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const url = __webpack_require__(227);
const vso_workspace_core_1 = __webpack_require__(577);
const githubEnvironmentsApi_1 = __webpack_require__(598);
const githubLocationsApi_1 = __webpack_require__(600);
const vscode_jsonrpc_1 = __webpack_require__(6);
const githubApi_1 = __webpack_require__(601);
const OctokitProvider_1 = __webpack_require__(603);
const githubAuthentication_1 = __webpack_require__(608);
const vscode_1 = __webpack_require__(1);
const vscode_command_framework_1 = __webpack_require__(3);
const localize = nls.loadMessageBundle();
class GitHubApiProvider {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.onSignInChangeEmitter = new vscode_jsonrpc_1.Emitter();
        this.initializationComplete = false;
        this.onSignInChanged = this.onSignInChangeEmitter.event;
        this.logger = vscode_command_framework_1.traceSource.withName('API');
        this.tokenProvider = new githubAuthentication_1.GitHubAuthentication(() => this.onAuthenticationChanged());
        this.githubApi = new githubApi_1.GitHubApi(this.tokenProvider, new OctokitProvider_1.OctokitProvider(this.tokenProvider), this.dependencies);
        this.environments = new githubEnvironmentsApi_1.GitHubEnvironmentsApi(this.githubApi, dependencies.util, dependencies.httpClientUtil);
        this.locations = new githubLocationsApi_1.GitHubLocationsApi(dependencies.httpClientUtil, dependencies.util);
    }
    async init() {
        if (this.initializationComplete) {
            return;
        }
        const githubAuthExtension = vscode_1.extensions.getExtension('vscode.github-authentication');
        await (githubAuthExtension === null || githubAuthExtension === void 0 ? void 0 : githubAuthExtension.activate());
        // Only use a cached token if it exists so that we do not pop open a modal sign in dialog during activation
        await this.signIn(true);
        this.initializationComplete = true;
    }
    async signIn(cacheOnlySignIn = false, forceNewAuthSession = false) {
        if (this.isSignedIn() && !forceNewAuthSession) {
            return;
        }
        let signInSuccess;
        try {
            if (cacheOnlySignIn) {
                // Calling `hasCachedToken` results in a side effect that loads
                // the existing session from the authentication provider.
                signInSuccess = await this.tokenProvider.hasCachedToken();
            }
            else {
                signInSuccess = await this.tokenProvider.signIn(forceNewAuthSession);
            }
        }
        catch (err) {
            this.logger.warning(`Failed to sign in: ${err.message}`);
            signInSuccess = false;
        }
        if (!signInSuccess) {
            this.logger.info(`Signing out due to unsuccessful sign in attempt`);
            await this.signOut();
            return;
        }
        this.logger.info(`Successfully signed in`);
        this.onAuthenticationChanged();
    }
    async signOut() {
        if (!this.isSignedIn()) {
            return;
        }
        await this.tokenProvider.signOut();
        this.onAuthenticationChanged();
    }
    isSignedIn() {
        return this.tokenProvider.isSignedIn();
    }
    getSession() {
        return this.tokenProvider.getSession();
    }
    async getWorkspaceApi(codespace, trace) {
        const token = await this.githubApi.getCascadeToken(codespace);
        if (!token) {
            throw new Error(localize('error.cascadeTokenExchangeFailed', 'Unable to exchange a cascade token.'));
        }
        return new vso_workspace_core_1.WorkspaceApi(codespace.connection.serviceUri, () => token, trace);
    }
    async getTelemetryId(codespace) {
        const token = await this.githubApi.getCascadeToken(codespace);
        const profileEndpoint = url.resolve(codespace.connection.serviceUri, 'profile');
        const profile = await this.dependencies.httpClientUtil
            .get(profileEndpoint, {
            headers: { Authorization: `Bearer ${token}` },
        })
            .catch((e) => {
            return { data: { telemetryId: '' } };
        });
        return profile.data.telemetryId || '';
    }
    getAccessToken() {
        return this.tokenProvider.getGitHubToken();
    }
    getUsername() {
        return this.tokenProvider.getUsername();
    }
    onAuthenticationChanged() {
        if (!this.initializationComplete) {
            // This avoids updating the value while connecting to a remote session which causes an error
            return;
        }
        this.onSignInChangeEmitter.fire(undefined);
    }
}
exports.GitHubApiProvider = GitHubApiProvider;


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectedState_1 = __webpack_require__(578);
exports.ConnectedState = ConnectedState_1.ConnectedState;
__export(__webpack_require__(579));
__export(__webpack_require__(580));
__export(__webpack_require__(581));
__export(__webpack_require__(593));
__export(__webpack_require__(594));
__export(__webpack_require__(595));
__export(__webpack_require__(596));
__export(__webpack_require__(270));
__export(__webpack_require__(271));
var WorkspaceClientBase_1 = __webpack_require__(597);
exports.WorkspaceClientBase = WorkspaceClientBase_1.WorkspaceClientBase;
//# sourceMappingURL=index.js.map

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ConnectedState;
(function (ConnectedState) {
    ConnectedState[ConnectedState["Reconnecting"] = 1] = "Reconnecting";
    ConnectedState[ConnectedState["Reconnected"] = 2] = "Reconnected";
    ConnectedState[ConnectedState["Closed"] = 3] = "Closed";
})(ConnectedState = exports.ConnectedState || (exports.ConnectedState = {}));
//# sourceMappingURL=ConnectedState.js.map

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Workspace connection mode. Must match vsls.ConnectionMode
 */
var ConnectionMode;
(function (ConnectionMode) {
    ConnectionMode["Auto"] = "auto";
    ConnectionMode["Direct"] = "direct";
    ConnectionMode["Relay"] = "relay";
    ConnectionMode["Local"] = "local";
    ConnectionMode["SignalR"] = "signalR";
})(ConnectionMode = exports.ConnectionMode || (exports.ConnectionMode = {}));
//# sourceMappingURL=IWorkspaceSessionInfo.js.map

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class LatencyMetrics {
    constructor(latencyCurrent, latencyAvg, latencyMin, latencyMax) {
        this.current = latencyCurrent;
        this.average = latencyAvg;
        this.min = latencyMin;
        this.max = latencyMax;
    }
}
exports.LatencyMetrics = LatencyMetrics;
//# sourceMappingURL=IWorkspaceConnection.js.map

/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
const vso_http_client_1 = __webpack_require__(704);
const vscs_utils_1 = __webpack_require__(8);
const ssh = __importStar(__webpack_require__(130));
const vsls_contracts_1 = __webpack_require__(582);
/**
 * Class to interact with our liveshare workspace API.
 */
class WorkspaceApi {
    constructor(serviceUri, tokenProvider, logger) {
        this.serviceUri = serviceUri;
        this.tokenProvider = tokenProvider;
        this.logger = logger;
        this.getRequestHeaders = () => __awaiter(this, void 0, void 0, function* () {
            return {
                Authorization: `Bearer ${yield this.tokenProvider()}`,
                'Cache-Control': 'no-cache',
                'Content-Type': 'application/json',
            };
        });
        vscs_utils_1.assertDefined(serviceUri, 'service uri needs to be defined');
        let baseUri = serviceUri;
        if (!baseUri.endsWith('/')) {
            baseUri = baseUri + '/';
        }
        if (!baseUri.includes('api/v1.2')) {
            baseUri = baseUri + 'api/v1.2';
        }
        // We need to remove the trailing slash in the case it was directly
        // taken from an environment record
        this.baseUri = this.removeTrailingSlash(baseUri);
        this.httpClient = new vso_http_client_1.HttpClient(logger);
    }
    static getWorkspaceSessionInfo(workspaceId, options, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.info(`getWorkspaceSessionInfo -> workspaceId:${workspaceId}`);
            const workspaceApi = new WorkspaceApi(options.liveShareEndpoint, () => options.token, logger);
            const [workspaceAccess, workspaceInfo] = yield Promise.all([
                workspaceApi.getWorkspaceAccess(workspaceId),
                workspaceApi.getWorkspaceInfo(workspaceId),
            ]);
            const workspaceSessionInfo = Object.assign(Object.assign({}, workspaceAccess), workspaceInfo);
            vscs_utils_1.assertDefined(workspaceInfo, 'Cannot get LiveShare workspace info.');
            vscs_utils_1.assertDefined(workspaceAccess, 'Cannot get LiveShare workspace access.');
            vscs_utils_1.assertDefined(workspaceInfo.relaySas, 'No RelaySas token found.');
            return workspaceSessionInfo;
        });
    }
    deleteWorkspace(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            vscs_utils_1.assertDefined(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `delete workspace -> ${url}`);
            const response = yield this.httpClient.delete(url, {
                headers: yield this.getRequestHeaders(),
            });
            return response.ok;
        });
    }
    getManagedWorkspaces() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace/managed`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get managed workspaces -> ${url}`);
            const workspaces = yield this.httpClient
                .get(url, {
                headers: yield this.getRequestHeaders(),
            })
                .value();
            return workspaces;
        });
    }
    deleteLink(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            vscs_utils_1.assertDefined(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/link/${workspaceId}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `delete link -> ${url}`);
            const response = yield this.httpClient.delete(url, {
                headers: yield this.getRequestHeaders(),
            });
            return response.ok;
        });
    }
    rename(workspaceId, label) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace/${workspaceId.toUpperCase()}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `rename workspace -> ${url}`);
            return yield this.httpClient
                .post(url, {
                headers: yield this.getRequestHeaders(),
                body: JSON.stringify(label),
            })
                .value();
        });
    }
    getWorkspaceInfo(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            vscs_utils_1.assertDefined(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get workspace info -> ${url}`);
            return yield this.httpClient
                .get(url, {
                headers: yield this.getRequestHeaders(),
            })
                .value();
        });
    }
    getWorkspaceAccess(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            vscs_utils_1.assertDefined(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}/user`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get workspace access -> ${url}`);
            return yield this.httpClient
                .put(url, {
                headers: yield this.getRequestHeaders(),
            })
                .value();
        });
    }
    postWorkspaceInfo(workspaceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `post workspace info -> ${url}`);
            return yield this.httpClient
                .post(url, {
                headers: yield this.getRequestHeaders(),
                body: JSON.stringify(workspaceInfo),
            })
                .value();
        });
    }
    createInvitationLink(invitationLinkInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUri}/workspace/${invitationLinkInfo.workspaceId}/link`;
            const response = yield this.httpClient
                .put(url, {
                headers: yield this.getRequestHeaders(),
                body: JSON.stringify(invitationLinkInfo),
            })
                .value();
            return response;
        });
    }
    getWorkspaceUserProfile(workspaceId, userToken) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            vscs_utils_1.assertDefined(workspaceId, 'Cannot get Live Share workspaceId');
            workspaceId = workspaceId.toUpperCase();
            const url = `${this.baseUri}/workspace/${workspaceId}/user`;
            this.logger.log(vso_logging_1.LogLevel.Debug, `get workspace user profile -> ${url}`);
            const workspaceUserProfile = yield this.httpClient
                .get(url, {
                headers: Object.assign(Object.assign({}, (yield this.getRequestHeaders())), { 'User-Session-Token': userToken }),
            })
                .value();
            // The collaboration service's WorkspaceGetProfileResponse returns 'username'
            // vsls.WorkspaceUserProfile property has a different casing 'userName'
            if ((_a = workspaceUserProfile) === null || _a === void 0 ? void 0 : _a.username) {
                workspaceUserProfile.userName = workspaceUserProfile.username;
            }
            return workspaceUserProfile;
        });
    }
    static createSshKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const rsa = ssh.SshAlgorithms.publicKey.rsaWithSha512;
            const hostPrivateKey = yield rsa.generateKeyPair();
            const hostPublicKey = (yield hostPrivateKey.getPublicKeyBytes(hostPrivateKey.keyAlgorithmName)).toString('base64');
            return [hostPrivateKey, hostPublicKey];
        });
    }
    createSharedWorkspace(workspaceShareInfo) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const sshKeys = yield WorkspaceApi.createSshKeys();
            const workspacePayload = {
                name: workspaceShareInfo.name,
                connectionMode: (_a = workspaceShareInfo.connectionMode) !== null && _a !== void 0 ? _a : vsls_contracts_1.vsls.ConnectionMode.Relay,
                areAnonymousGuestsAllowed: workspaceShareInfo.areAnonymousGuestsAllowed,
                hostPublicKeys: [sshKeys[1]],
                connectLinks: workspaceShareInfo.connectLinks,
            };
            const workspaceInfo = yield this.postWorkspaceInfo(workspacePayload);
            return {
                workspaceInfo,
                hostPrivateKeys: [sshKeys[0]],
                getWorkspaceUserProfile: (userToken) => this.getWorkspaceUserProfile(workspaceInfo.id, userToken),
            };
        });
    }
    removeTrailingSlash(baseUri) {
        return baseUri.endsWith('/') ? baseUri.substr(0, baseUri.length - 1) : baseUri;
    }
}
exports.WorkspaceApi = WorkspaceApi;
//# sourceMappingURL=WorkspaceApi.js.map

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// export auto generated VSLS
exports.vsls = __webpack_require__(583);
// export auto generated ContactProtocol
exports.contactProtocol = __webpack_require__(592);
//# sourceMappingURL=index.js.map

/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.19.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Describes the kind of data to be formatted. */
const vso_rpc_1 = __webpack_require__(152);
/** Represents a data object containing attributes needed to access a remote stream. */
class RemoteStreamMoniker {
}
exports.RemoteStreamMoniker = RemoteStreamMoniker;
/** File service root directory configuration. */
class FileServiceRootDirectoryConfiguration {
}
exports.FileServiceRootDirectoryConfiguration = FileServiceRootDirectoryConfiguration;
/** File service root configuration. */
class FileServiceRootConfiguration {
}
__decorate([
    vso_rpc_1.dataFormat(FileServiceRootDirectoryConfiguration),
    __metadata("design:type", Array)
], FileServiceRootConfiguration.prototype, "directories", void 0);
exports.FileServiceRootConfiguration = FileServiceRootConfiguration;
class MaybeImmutableOfAccessControl {
}
exports.MaybeImmutableOfAccessControl = MaybeImmutableOfAccessControl;
/** Access control */
class AccessControl extends MaybeImmutableOfAccessControl {
}
exports.AccessControl = AccessControl;
var SeekOrigin;
(function (SeekOrigin) {
    SeekOrigin[SeekOrigin["Begin"] = 'begin'] = "Begin";
    SeekOrigin[SeekOrigin["Current"] = 'current'] = "Current";
    SeekOrigin[SeekOrigin["End"] = 'end'] = "End";
})(SeekOrigin = exports.SeekOrigin || (exports.SeekOrigin = {}));
class FeatureFlagStore {
}
exports.FeatureFlagStore = FeatureFlagStore;
class EventArgs {
}
exports.EventArgs = EventArgs;
class AttemptHubConnectionEventArgs extends EventArgs {
}
exports.AttemptHubConnectionEventArgs = AttemptHubConnectionEventArgs;
var HubConnectionError;
(function (HubConnectionError) {
    HubConnectionError[HubConnectionError["None"] = 'none'] = "None";
    HubConnectionError[HubConnectionError["TokenExpired"] = 'tokenExpired'] = "TokenExpired";
    HubConnectionError[HubConnectionError["ServiceUnavailable"] = 'serviceUnavailable'] = "ServiceUnavailable";
})(HubConnectionError = exports.HubConnectionError || (exports.HubConnectionError = {}));
class AgentTraceEventArgs extends EventArgs {
}
exports.AgentTraceEventArgs = AgentTraceEventArgs;
class AgentSessionRequest {
}
exports.AgentSessionRequest = AgentSessionRequest;
class AgentSessionResponse {
}
exports.AgentSessionResponse = AgentSessionResponse;
class AuthenticationToken {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticationToken.prototype, "token", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticationToken.prototype, "code", void 0);
exports.AuthenticationToken = AuthenticationToken;
/** UserAccountInfo represents the minimum information we require in order to retrieve cached credentials in a machine. It purposefully doesn't include the User's Id, as that is unknown at the time of retrieval. */
class UserAccountInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserAccountInfo.prototype, "accountId", void 0);
exports.UserAccountInfo = UserAccountInfo;
class UserInfo extends UserAccountInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserInfo.prototype, "id", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserInfo.prototype, "displayName", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Email),
    __metadata("design:type", String)
], UserInfo.prototype, "emailAddress", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], UserInfo.prototype, "userName", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], UserInfo.prototype, "avatarUri", void 0);
exports.UserInfo = UserInfo;
var UserAccountStatus;
(function (UserAccountStatus) {
    UserAccountStatus[UserAccountStatus["Unknown"] = 'unknown'] = "Unknown";
    UserAccountStatus[UserAccountStatus["Transient"] = 'transient'] = "Transient";
    UserAccountStatus[UserAccountStatus["Pending"] = 'pending'] = "Pending";
    UserAccountStatus[UserAccountStatus["Accepted"] = 'accepted'] = "Accepted";
    UserAccountStatus[UserAccountStatus["Deleted"] = 'deleted'] = "Deleted";
})(UserAccountStatus = exports.UserAccountStatus || (exports.UserAccountStatus = {}));
class RecentCollaborator {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Email),
    __metadata("design:type", String)
], RecentCollaborator.prototype, "email", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], RecentCollaborator.prototype, "name", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], RecentCollaborator.prototype, "avatarUri", void 0);
exports.RecentCollaborator = RecentCollaborator;
class AuthenticationOptions {
}
exports.AuthenticationOptions = AuthenticationOptions;
class AuthenticationChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(UserInfo),
    __metadata("design:type", UserInfo)
], AuthenticationChangedEventArgs.prototype, "account", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticationChangedEventArgs.prototype, "accessToken", void 0);
exports.AuthenticationChangedEventArgs = AuthenticationChangedEventArgs;
class AuthenticatedUserInfo {
}
__decorate([
    vso_rpc_1.dataFormat(UserInfo),
    __metadata("design:type", UserInfo)
], AuthenticatedUserInfo.prototype, "userInfo", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], AuthenticatedUserInfo.prototype, "accessToken", void 0);
exports.AuthenticatedUserInfo = AuthenticatedUserInfo;
/** A data object containing charasteristics necessary to establish and configure a broker RPC session. */
class BrokerManifest {
}
exports.BrokerManifest = BrokerManifest;
/** Represents event data associated with certain broker events. */
class BrokerEventArgs extends EventArgs {
}
exports.BrokerEventArgs = BrokerEventArgs;
var ChatMessageType;
(function (ChatMessageType) {
    ChatMessageType[ChatMessageType["Text"] = 'text'] = "Text";
    ChatMessageType[ChatMessageType["Typing"] = 'typing'] = "Typing";
})(ChatMessageType = exports.ChatMessageType || (exports.ChatMessageType = {}));
class ChatParticipant {
}
exports.ChatParticipant = ChatParticipant;
class ChatMessageBody {
}
exports.ChatMessageBody = ChatMessageBody;
class ChatMessage {
}
__decorate([
    vso_rpc_1.dataFormat(ChatMessageBody),
    __metadata("design:type", ChatMessageBody)
], ChatMessage.prototype, "body", void 0);
exports.ChatMessage = ChatMessage;
class MessageReceivedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(ChatMessage),
    __metadata("design:type", ChatMessage)
], MessageReceivedEventArgs.prototype, "message", void 0);
exports.MessageReceivedEventArgs = MessageReceivedEventArgs;
class Position {
    constructor() {
        /** The zero-based index of the character in the buffer. */
        this.startOffset = -1;
    }
}
exports.Position = Position;
var CommentThreadStatus;
(function (CommentThreadStatus) {
    CommentThreadStatus[CommentThreadStatus["Active"] = 'active'] = "Active";
    CommentThreadStatus[CommentThreadStatus["Closed"] = 'closed'] = "Closed";
})(CommentThreadStatus = exports.CommentThreadStatus || (exports.CommentThreadStatus = {}));
class CommentThreadContext {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], CommentThreadContext.prototype, "filePath", void 0);
__decorate([
    vso_rpc_1.dataFormat(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "leftFileStart", void 0);
__decorate([
    vso_rpc_1.dataFormat(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "leftFileEnd", void 0);
__decorate([
    vso_rpc_1.dataFormat(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "rightFileStart", void 0);
__decorate([
    vso_rpc_1.dataFormat(Position),
    __metadata("design:type", Position)
], CommentThreadContext.prototype, "rightFileEnd", void 0);
exports.CommentThreadContext = CommentThreadContext;
class Comment {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], Comment.prototype, "participantId", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], Comment.prototype, "participantLabel", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], Comment.prototype, "text", void 0);
exports.Comment = Comment;
class CommentThread {
}
__decorate([
    vso_rpc_1.dataFormat(Comment),
    __metadata("design:type", Array)
], CommentThread.prototype, "comments", void 0);
__decorate([
    vso_rpc_1.dataFormat(CommentThreadContext),
    __metadata("design:type", CommentThreadContext)
], CommentThread.prototype, "threadContext", void 0);
exports.CommentThread = CommentThread;
class CommentThreadChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(CommentThread),
    __metadata("design:type", CommentThread)
], CommentThreadChangedEventArgs.prototype, "newThread", void 0);
__decorate([
    vso_rpc_1.dataFormat(Comment),
    __metadata("design:type", Comment)
], CommentThreadChangedEventArgs.prototype, "changedComment", void 0);
exports.CommentThreadChangedEventArgs = CommentThreadChangedEventArgs;
class CommentThreadLocation {
}
__decorate([
    vso_rpc_1.dataFormat(CommentThreadContext),
    vso_rpc_1.dataFormat(CommentThreadContext),
    __metadata("design:type", CommentThreadContext)
], CommentThreadLocation.prototype, "threadContext", void 0);
exports.CommentThreadLocation = CommentThreadLocation;
class AddressAndMask {
}
exports.AddressAndMask = AddressAndMask;
class AgentVersionInfo {
}
exports.AgentVersionInfo = AgentVersionInfo;
class ClientVersionInfo {
}
exports.ClientVersionInfo = ClientVersionInfo;
var FirewallStatus;
(function (FirewallStatus) {
    FirewallStatus[FirewallStatus["None"] = 'none'] = "None";
    FirewallStatus[FirewallStatus["Allow"] = 'allow'] = "Allow";
    FirewallStatus[FirewallStatus["Block"] = 'block'] = "Block";
})(FirewallStatus = exports.FirewallStatus || (exports.FirewallStatus = {}));
class HubMethodNotifyEventArgs extends EventArgs {
}
exports.HubMethodNotifyEventArgs = HubMethodNotifyEventArgs;
class HubConnectionStateEventArgs extends EventArgs {
}
exports.HubConnectionStateEventArgs = HubConnectionStateEventArgs;
/** Possible states on an Invited Contact status */
var InviteContactStatus;
(function (InviteContactStatus) {
    InviteContactStatus[InviteContactStatus["None"] = 'none'] = "None";
    InviteContactStatus[InviteContactStatus["Invited"] = 'invited'] = "Invited";
    InviteContactStatus[InviteContactStatus["Dismissed"] = 'dismissed'] = "Dismissed";
    InviteContactStatus[InviteContactStatus["Joining"] = 'joining'] = "Joining";
    InviteContactStatus[InviteContactStatus["Joined"] = 'joined'] = "Joined";
})(InviteContactStatus = exports.InviteContactStatus || (exports.InviteContactStatus = {}));
/** Define a notification entity when an invite status changed for an Invite contact */
class InviteStatusNotify {
}
exports.InviteStatusNotify = InviteStatusNotify;
/** Represents state of Live Share session at online environment client. */
var LiveShareSessionState;
(function (LiveShareSessionState) {
    LiveShareSessionState[LiveShareSessionState["Idle"] = 'idle'] = "Idle";
    LiveShareSessionState[LiveShareSessionState["Shared"] = 'shared'] = "Shared";
})(LiveShareSessionState = exports.LiveShareSessionState || (exports.LiveShareSessionState = {}));
var PrivacyEnum;
(function (PrivacyEnum) {
    PrivacyEnum[PrivacyEnum["Private"] = 'private'] = "Private";
    PrivacyEnum[PrivacyEnum["Public"] = 'public'] = "Public";
    PrivacyEnum[PrivacyEnum["Org"] = 'org'] = "Org";
})(PrivacyEnum = exports.PrivacyEnum || (exports.PrivacyEnum = {}));
/** Shared server info. StreamName and Condition can be used to get the streams from CancellationToken). */
class SharedServer {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], SharedServer.prototype, "browseUrl", void 0);
__decorate([
    vso_rpc_1.dataFormat(PrivacyEnum),
    __metadata("design:type", Number)
], SharedServer.prototype, "privacy", void 0);
exports.SharedServer = SharedServer;
/** Shared pipe info. StreamName and Condition can be used to get the streams from CancellationToken). */
class SharedPipe {
}
exports.SharedPipe = SharedPipe;
/** Event args for an event when a new server is shared. */
class ServerSharingStartedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SharedServer),
    __metadata("design:type", SharedServer)
], ServerSharingStartedEventArgs.prototype, "server", void 0);
exports.ServerSharingStartedEventArgs = ServerSharingStartedEventArgs;
/** Event args for an event when a new pipe is shared. */
class PipeSharingStartedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SharedPipe),
    __metadata("design:type", SharedPipe)
], PipeSharingStartedEventArgs.prototype, "pipe", void 0);
exports.PipeSharingStartedEventArgs = PipeSharingStartedEventArgs;
/** Event args for an event when a server is no longer shared. */
class ServerSharingStoppedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SharedServer),
    __metadata("design:type", SharedServer)
], ServerSharingStoppedEventArgs.prototype, "server", void 0);
exports.ServerSharingStoppedEventArgs = ServerSharingStoppedEventArgs;
/** Event args for an event when a pipe is no longer shared. */
class PipeSharingStoppedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SharedPipe),
    __metadata("design:type", SharedPipe)
], PipeSharingStoppedEventArgs.prototype, "pipe", void 0);
exports.PipeSharingStoppedEventArgs = PipeSharingStoppedEventArgs;
/** Event args for an event when a server is updated. */
class ServerSharingChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SharedServer),
    __metadata("design:type", SharedServer)
], ServerSharingChangedEventArgs.prototype, "server", void 0);
exports.ServerSharingChangedEventArgs = ServerSharingChangedEventArgs;
var ChangeKind;
(function (ChangeKind) {
    ChangeKind[ChangeKind["Start"] = 'start'] = "Start";
    ChangeKind[ChangeKind["Update"] = 'update'] = "Update";
    ChangeKind[ChangeKind["Stop"] = 'stop'] = "Stop";
})(ChangeKind = exports.ChangeKind || (exports.ChangeKind = {}));
/** Event args for an event when a server change succeeds. */
class ServerSharingSucceededEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(ChangeKind),
    __metadata("design:type", Number)
], ServerSharingSucceededEventArgs.prototype, "changeKind", void 0);
exports.ServerSharingSucceededEventArgs = ServerSharingSucceededEventArgs;
/** Event args for an event when a server change fails. */
class ServerSharingFailedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(ChangeKind),
    __metadata("design:type", Number)
], ServerSharingFailedEventArgs.prototype, "changeKind", void 0);
exports.ServerSharingFailedEventArgs = ServerSharingFailedEventArgs;
class SessionUpdateEventArgs extends EventArgs {
}
exports.SessionUpdateEventArgs = SessionUpdateEventArgs;
/** Source control identity. */
class SourceControlIdentifier {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlIdentifier.prototype, "instanceId", void 0);
exports.SourceControlIdentifier = SourceControlIdentifier;
/** Version within source control. */
class SourceControlVersion {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlVersion.prototype, "version", void 0);
exports.SourceControlVersion = SourceControlVersion;
/** Type of source control resource. */
var SourceControlResourceType;
(function (SourceControlResourceType) {
    SourceControlResourceType[SourceControlResourceType["Workspace"] = 'workspace'] = "Workspace";
    SourceControlResourceType[SourceControlResourceType["External"] = 'external'] = "External";
    SourceControlResourceType[SourceControlResourceType["SpecificVerision"] = 'specificVerision'] = "SpecificVerision";
    SourceControlResourceType[SourceControlResourceType["WorkspaceWithSpecificVersion"] = 'workspaceWithSpecificVersion'] = "WorkspaceWithSpecificVersion";
})(SourceControlResourceType = exports.SourceControlResourceType || (exports.SourceControlResourceType = {}));
/** Type of source control resource change or diff. */
var SourceControlChangeType;
(function (SourceControlChangeType) {
    SourceControlChangeType[SourceControlChangeType["None"] = 'none'] = "None";
    SourceControlChangeType[SourceControlChangeType["Add"] = 'add'] = "Add";
    SourceControlChangeType[SourceControlChangeType["Edit"] = 'edit'] = "Edit";
    SourceControlChangeType[SourceControlChangeType["Delete"] = 'delete'] = "Delete";
    SourceControlChangeType[SourceControlChangeType["Rename"] = 'rename'] = "Rename";
    SourceControlChangeType[SourceControlChangeType["Conflict"] = 'conflict'] = "Conflict";
    SourceControlChangeType[SourceControlChangeType["IndexEdit"] = 'indexEdit'] = "IndexEdit";
    SourceControlChangeType[SourceControlChangeType["IndexDelete"] = 'indexDelete'] = "IndexDelete";
    SourceControlChangeType[SourceControlChangeType["IndexCopy"] = 'indexCopy'] = "IndexCopy";
    SourceControlChangeType[SourceControlChangeType["Untracked"] = 'untracked'] = "Untracked";
    SourceControlChangeType[SourceControlChangeType["Ignored"] = 'ignored'] = "Ignored";
    SourceControlChangeType[SourceControlChangeType["AddByUs"] = 'addByUs'] = "AddByUs";
    SourceControlChangeType[SourceControlChangeType["AddByThem"] = 'addByThem'] = "AddByThem";
    SourceControlChangeType[SourceControlChangeType["DeleteByUs"] = 'deleteByUs'] = "DeleteByUs";
    SourceControlChangeType[SourceControlChangeType["DeleteByThem"] = 'deleteByThem'] = "DeleteByThem";
    SourceControlChangeType[SourceControlChangeType["AddBoth"] = 'addBoth'] = "AddBoth";
    SourceControlChangeType[SourceControlChangeType["DeleteBoth"] = 'deleteBoth'] = "DeleteBoth";
})(SourceControlChangeType = exports.SourceControlChangeType || (exports.SourceControlChangeType = {}));
/** Resource under source control. */
class SourceControlResource {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlResource.prototype, "path", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlResource.prototype, "version", void 0);
exports.SourceControlResource = SourceControlResource;
/** Individual file state under source control. */
class SourceControlResourceState {
}
__decorate([
    vso_rpc_1.dataFormat(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceState.prototype, "current", void 0);
__decorate([
    vso_rpc_1.dataFormat(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceState.prototype, "original", void 0);
exports.SourceControlResourceState = SourceControlResourceState;
/** Identifier of the source control resource. */
class SourceControlResourceIdentifier extends SourceControlResource {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], SourceControlResourceIdentifier.prototype, "instanceId", void 0);
exports.SourceControlResourceIdentifier = SourceControlResourceIdentifier;
/** Group of source-controlled states, e.g. 'Changes', 'Index', or 'Merge' in git. */
class SourceControlResourceGroup {
}
__decorate([
    vso_rpc_1.dataFormat(SourceControlResourceState),
    __metadata("design:type", Array)
], SourceControlResourceGroup.prototype, "resourceStates", void 0);
exports.SourceControlResourceGroup = SourceControlResourceGroup;
/** Source control data. */
class SourceControlInstance extends SourceControlIdentifier {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlInstance.prototype, "name", void 0);
__decorate([
    vso_rpc_1.dataFormat(SourceControlResourceGroup),
    __metadata("design:type", Array)
], SourceControlInstance.prototype, "resourceGroups", void 0);
exports.SourceControlInstance = SourceControlInstance;
/** Source control resource diff info. */
class SourceControlResourceDiff {
}
__decorate([
    vso_rpc_1.dataFormat(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceDiff.prototype, "right", void 0);
__decorate([
    vso_rpc_1.dataFormat(SourceControlResource),
    __metadata("design:type", SourceControlResource)
], SourceControlResourceDiff.prototype, "left", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], SourceControlResourceDiff.prototype, "title", void 0);
exports.SourceControlResourceDiff = SourceControlResourceDiff;
/** Source control change type. */
var SourceControlChange;
(function (SourceControlChange) {
    SourceControlChange[SourceControlChange["Updated"] = 'updated'] = "Updated";
    SourceControlChange[SourceControlChange["Added"] = 'added'] = "Added";
    SourceControlChange[SourceControlChange["Removed"] = 'removed'] = "Removed";
})(SourceControlChange = exports.SourceControlChange || (exports.SourceControlChange = {}));
/** Event args for event when source control changed on the host. */
class SourceControlChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SourceControlIdentifier),
    __metadata("design:type", SourceControlIdentifier)
], SourceControlChangedEventArgs.prototype, "sourceControl", void 0);
exports.SourceControlChangedEventArgs = SourceControlChangedEventArgs;
/** Event args for event when source control resources changed on the host. */
class SourceControlResourceChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(SourceControlIdentifier),
    __metadata("design:type", SourceControlIdentifier)
], SourceControlResourceChangedEventArgs.prototype, "sourceControl", void 0);
__decorate([
    vso_rpc_1.dataFormat(SourceControlResource),
    __metadata("design:type", Array)
], SourceControlResourceChangedEventArgs.prototype, "resources", void 0);
exports.SourceControlResourceChangedEventArgs = SourceControlResourceChangedEventArgs;
class SyncStatus {
}
exports.SyncStatus = SyncStatus;
/** A content type of a task output or feed. */
var TaskOutputContentType;
(function (TaskOutputContentType) {
    TaskOutputContentType[TaskOutputContentType["PlainText"] = 'plainText'] = "PlainText";
    TaskOutputContentType[TaskOutputContentType["TextWithAnsiEscapeCodes"] = 'textWithAnsiEscapeCodes'] = "TextWithAnsiEscapeCodes";
})(TaskOutputContentType = exports.TaskOutputContentType || (exports.TaskOutputContentType = {}));
/** Single task execution feed */
class TaskOutputFeedInfo {
}
__decorate([
    vso_rpc_1.dataFormat(RemoteStreamMoniker),
    __metadata("design:type", RemoteStreamMoniker)
], TaskOutputFeedInfo.prototype, "streamMoniker", void 0);
exports.TaskOutputFeedInfo = TaskOutputFeedInfo;
/** Options pertaining to a task output */
class TaskOutputOptions {
}
exports.TaskOutputOptions = TaskOutputOptions;
/** Represents a task output, typically associated with a output or terminal window in IDE. It can be used to send ouput from task execution feeds. Only one feed can be active. */
class TaskOutputInfo {
}
__decorate([
    vso_rpc_1.dataFormat(TaskOutputFeedInfo),
    __metadata("design:type", TaskOutputFeedInfo)
], TaskOutputInfo.prototype, "feed", void 0);
__decorate([
    vso_rpc_1.dataFormat(TaskOutputOptions),
    __metadata("design:type", TaskOutputOptions)
], TaskOutputInfo.prototype, "options", void 0);
exports.TaskOutputInfo = TaskOutputInfo;
/** Represents an event data sent with a task output event. */
class TaskOutputEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(TaskOutputInfo),
    __metadata("design:type", TaskOutputInfo)
], TaskOutputEventArgs.prototype, "taskOutput", void 0);
exports.TaskOutputEventArgs = TaskOutputEventArgs;
class TelemetrySettings {
}
exports.TelemetrySettings = TelemetrySettings;
class GenericOperationEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], GenericOperationEventArgs.prototype, "payload", void 0);
exports.GenericOperationEventArgs = GenericOperationEventArgs;
var TelemetryResult;
(function (TelemetryResult) {
    TelemetryResult[TelemetryResult["None"] = 'none'] = "None";
    TelemetryResult[TelemetryResult["Success"] = 'success'] = "Success";
    TelemetryResult[TelemetryResult["Failure"] = 'failure'] = "Failure";
    TelemetryResult[TelemetryResult["UserFault"] = 'userFault'] = "UserFault";
    TelemetryResult[TelemetryResult["UserCancel"] = 'userCancel'] = "UserCancel";
})(TelemetryResult = exports.TelemetryResult || (exports.TelemetryResult = {}));
class FaultTelemetryEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], FaultTelemetryEventArgs.prototype, "payload", void 0);
exports.FaultTelemetryEventArgs = FaultTelemetryEventArgs;
/** Options that control how terminal is started */
class TerminalOptions {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], TerminalOptions.prototype, "cwd", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], TerminalOptions.prototype, "app", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", Array)
], TerminalOptions.prototype, "commandLine", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Boolean)
], TerminalOptions.prototype, "verbatimCommandLine", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], TerminalOptions.prototype, "environment", void 0);
exports.TerminalOptions = TerminalOptions;
/** Info on running terminal */
class TerminalInfo {
}
__decorate([
    vso_rpc_1.dataFormat(TerminalOptions),
    __metadata("design:type", TerminalOptions)
], TerminalInfo.prototype, "options", void 0);
exports.TerminalInfo = TerminalInfo;
/** Event args for notification for a terminal */
class TerminalEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(TerminalInfo),
    __metadata("design:type", TerminalInfo)
], TerminalEventArgs.prototype, "terminal", void 0);
exports.TerminalEventArgs = TerminalEventArgs;
/** A class that describes a restricted operation which is controlled by access control. By default, the operation is disabled in read-only session. */
class RestrictedOperation {
}
exports.RestrictedOperation = RestrictedOperation;
/** Restricted operation for a specific terminal */
class SharedTerminalRestrictedOperation extends RestrictedOperation {
}
exports.SharedTerminalRestrictedOperation = SharedTerminalRestrictedOperation;
class VSServerWorkspaceInfo {
}
exports.VSServerWorkspaceInfo = VSServerWorkspaceInfo;
class VSServerCreateSessionInfo {
}
exports.VSServerCreateSessionInfo = VSServerCreateSessionInfo;
class MaybeImmutableOfWorkspaceAccessControl {
}
exports.MaybeImmutableOfWorkspaceAccessControl = MaybeImmutableOfWorkspaceAccessControl;
/** Event args for an event when user access control changes. */
class WorkspaceAccessControl extends MaybeImmutableOfWorkspaceAccessControl {
}
__decorate([
    vso_rpc_1.dataFormat(AccessControl),
    __metadata("design:type", AccessControl)
], WorkspaceAccessControl.prototype, "defaultAccessControl", void 0);
exports.WorkspaceAccessControl = WorkspaceAccessControl;
/** Event args for an event when user access control changes. */
class WorkspaceAccessControlEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(WorkspaceAccessControl),
    __metadata("design:type", WorkspaceAccessControl)
], WorkspaceAccessControlEventArgs.prototype, "accessControl", void 0);
exports.WorkspaceAccessControlEventArgs = WorkspaceAccessControlEventArgs;
/** Event args for an event when a guest requests access to a restricted operation. */
class RestrictedOperationAccessRequestedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(RestrictedOperation),
    __metadata("design:type", RestrictedOperation)
], RestrictedOperationAccessRequestedEventArgs.prototype, "operation", void 0);
exports.RestrictedOperationAccessRequestedEventArgs = RestrictedOperationAccessRequestedEventArgs;
/** Represents severity of an error reported by a workspace task. */
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity[ErrorSeverity["Error"] = 'error'] = "Error";
    ErrorSeverity[ErrorSeverity["Warning"] = 'warning'] = "Warning";
    ErrorSeverity[ErrorSeverity["Message"] = 'message'] = "Message";
})(ErrorSeverity = exports.ErrorSeverity || (exports.ErrorSeverity = {}));
/** An entry representing error, warning or message generated by a workspace task */
class DiagnosticEntry {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], DiagnosticEntry.prototype, "fileId", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], DiagnosticEntry.prototype, "message", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", Object)
], DiagnosticEntry.prototype, "properties", void 0);
exports.DiagnosticEntry = DiagnosticEntry;
/** Describes a diagnostic data event containing a collection of diagnostic entries emitted by a workspace task. */
class DiagnosticDataChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(DiagnosticEntry),
    __metadata("design:type", Array)
], DiagnosticDataChangedEventArgs.prototype, "entries", void 0);
exports.DiagnosticDataChangedEventArgs = DiagnosticDataChangedEventArgs;
/** Invitation link info provided to the agent to create an access control link */
class InvitationLinkInfo {
}
exports.InvitationLinkInfo = InvitationLinkInfo;
class WorkspaceInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "conversationId", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "name", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "joinUri", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Omit),
    __metadata("design:type", String)
], WorkspaceInfo.prototype, "ownerId", void 0);
exports.WorkspaceInfo = WorkspaceInfo;
var WorkspaceConnectionStatus;
(function (WorkspaceConnectionStatus) {
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unknown"] = 'unknown'] = "Unknown";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Available"] = 'available'] = "Available";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unavailable"] = 'unavailable'] = "Unavailable";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Connected"] = 'connected'] = "Connected";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Disconnected"] = 'disconnected'] = "Disconnected";
})(WorkspaceConnectionStatus = exports.WorkspaceConnectionStatus || (exports.WorkspaceConnectionStatus = {}));
var WorkspaceDisconnectedReason;
(function (WorkspaceDisconnectedReason) {
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["None"] = 'none'] = "None";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["Requested"] = 'requested'] = "Requested";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["UserRemoved"] = 'userRemoved'] = "UserRemoved";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["UserBlocked"] = 'userBlocked'] = "UserBlocked";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionEnded"] = 'sessionEnded'] = "SessionEnded";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ConnectionLost"] = 'connectionLost'] = "ConnectionLost";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["InternalError"] = 'internalError'] = "InternalError";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionExpired"] = 'sessionExpired'] = "SessionExpired";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["NetworkDisconnected"] = 'networkDisconnected'] = "NetworkDisconnected";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ListenerWentOffline"] = 'listenerWentOffline'] = "ListenerWentOffline";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["CollaborationServiceFactoryCriticalFailure"] = 'collaborationServiceFactoryCriticalFailure'] = "CollaborationServiceFactoryCriticalFailure";
})(WorkspaceDisconnectedReason = exports.WorkspaceDisconnectedReason || (exports.WorkspaceDisconnectedReason = {}));
class WorkspaceConnectionStatusChangedEventArgs extends EventArgs {
}
exports.WorkspaceConnectionStatusChangedEventArgs = WorkspaceConnectionStatusChangedEventArgs;
/** Event that is fired by IWorkspaceService when shared workspace become ready for connections */
class WorkspaceReadyForConnectionEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(WorkspaceInfo),
    __metadata("design:type", WorkspaceInfo)
], WorkspaceReadyForConnectionEventArgs.prototype, "workspace", void 0);
exports.WorkspaceReadyForConnectionEventArgs = WorkspaceReadyForConnectionEventArgs;
var WorkspaceProgress;
(function (WorkspaceProgress) {
    WorkspaceProgress[WorkspaceProgress["None"] = 'none'] = "None";
    WorkspaceProgress[WorkspaceProgress["CreatedWorkspace"] = 'createdWorkspace'] = "CreatedWorkspace";
    WorkspaceProgress[WorkspaceProgress["InitializedAgentServices"] = 'initializedAgentServices'] = "InitializedAgentServices";
    WorkspaceProgress[WorkspaceProgress["InitializedRelayAndTCP"] = 'initializedRelayAndTCP'] = "InitializedRelayAndTCP";
    WorkspaceProgress[WorkspaceProgress["AddedUserToWorkspace"] = 'addedUserToWorkspace'] = "AddedUserToWorkspace";
    WorkspaceProgress[WorkspaceProgress["JoinedLocalWorkspace"] = 'joinedLocalWorkspace'] = "JoinedLocalWorkspace";
    WorkspaceProgress[WorkspaceProgress["ReadWorkspaceInfo"] = 'readWorkspaceInfo'] = "ReadWorkspaceInfo";
    WorkspaceProgress[WorkspaceProgress["OpeningRemoteSession"] = 'openingRemoteSession'] = "OpeningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["OpenedRemoteSession"] = 'openedRemoteSession'] = "OpenedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoiningRemoteSession"] = 'joiningRemoteSession'] = "JoiningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoinedRemoteSession"] = 'joinedRemoteSession'] = "JoinedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["WaitingForHost"] = 'waitingForHost'] = "WaitingForHost";
    WorkspaceProgress[WorkspaceProgress["DoneWaitingForHost"] = 'doneWaitingForHost'] = "DoneWaitingForHost";
    WorkspaceProgress[WorkspaceProgress["ReconnectingToHost"] = 'reconnectingToHost'] = "ReconnectingToHost";
    WorkspaceProgress[WorkspaceProgress["ReconnectedToHost"] = 'reconnectedToHost'] = "ReconnectedToHost";
    WorkspaceProgress[WorkspaceProgress["ReconnectionFailed"] = 'reconnectionFailed'] = "ReconnectionFailed";
    WorkspaceProgress[WorkspaceProgress["UpdatedWorkspace"] = 'updatedWorkspace'] = "UpdatedWorkspace";
})(WorkspaceProgress = exports.WorkspaceProgress || (exports.WorkspaceProgress = {}));
class WorkspaceProgressEventArgs extends EventArgs {
}
exports.WorkspaceProgressEventArgs = WorkspaceProgressEventArgs;
class WorkspaceShareInfo extends WorkspaceInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], WorkspaceShareInfo.prototype, "rootDirectories", void 0);
__decorate([
    vso_rpc_1.dataFormat(FileServiceRootConfiguration),
    __metadata("design:type", FileServiceRootConfiguration)
], WorkspaceShareInfo.prototype, "persistentRootConfiguration", void 0);
exports.WorkspaceShareInfo = WorkspaceShareInfo;
/** Defines the ways that an RPC caller can connect to a workspace when joining. */
var ConnectionMode;
(function (ConnectionMode) {
    ConnectionMode[ConnectionMode["Auto"] = 'auto'] = "Auto";
    ConnectionMode[ConnectionMode["Direct"] = 'direct'] = "Direct";
    ConnectionMode[ConnectionMode["Relay"] = 'relay'] = "Relay";
    ConnectionMode[ConnectionMode["Local"] = 'local'] = "Local";
    ConnectionMode[ConnectionMode["SignalR"] = 'signalR'] = "SignalR";
})(ConnectionMode = exports.ConnectionMode || (exports.ConnectionMode = {}));
class ClientCapabilities {
}
exports.ClientCapabilities = ClientCapabilities;
class WorkspaceJoinInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "directAddress", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "relayAddress", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "relaySharedAccessSignature", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "joiningUserSessionToken", void 0);
__decorate([
    vso_rpc_1.dataFormat(ClientCapabilities),
    __metadata("design:type", ClientCapabilities)
], WorkspaceJoinInfo.prototype, "clientCapabilities", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "userIdentity", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Token),
    __metadata("design:type", String)
], WorkspaceJoinInfo.prototype, "initialViewName", void 0);
exports.WorkspaceJoinInfo = WorkspaceJoinInfo;
class WorkspaceListOptions {
    constructor() {
        /** Optionally include remote workspaces. */
        this.includeRemoteWorkspaces = true;
        /** Get only the managed workspaces. */
        this.onlyManagedWorkspaces = false;
    }
}
exports.WorkspaceListOptions = WorkspaceListOptions;
class WorkspaceSessionInfo extends WorkspaceInfo {
}
exports.WorkspaceSessionInfo = WorkspaceSessionInfo;
class WorkspaceUserProfile {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "name", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Email),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "email", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "userName", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "provider", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Uri),
    __metadata("design:type", String)
], WorkspaceUserProfile.prototype, "avatarUri", void 0);
__decorate([
    vso_rpc_1.dataFormat(ClientCapabilities),
    __metadata("design:type", ClientCapabilities)
], WorkspaceUserProfile.prototype, "clientCapabilities", void 0);
exports.WorkspaceUserProfile = WorkspaceUserProfile;
class WorkspaceServicesChangedEventArgs extends EventArgs {
}
exports.WorkspaceServicesChangedEventArgs = WorkspaceServicesChangedEventArgs;
var CollectionChangeType;
(function (CollectionChangeType) {
    CollectionChangeType[CollectionChangeType["None"] = 'none'] = "None";
    CollectionChangeType[CollectionChangeType["Add"] = 'add'] = "Add";
    CollectionChangeType[CollectionChangeType["Remove"] = 'remove'] = "Remove";
    CollectionChangeType[CollectionChangeType["Replace"] = 'replace'] = "Replace";
})(CollectionChangeType = exports.CollectionChangeType || (exports.CollectionChangeType = {}));
class GuestAcceptance {
}
exports.GuestAcceptance = GuestAcceptance;
var WorkspaceSessionChangeType;
(function (WorkspaceSessionChangeType) {
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["None"] = 'none'] = "None";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Joined"] = 'joined'] = "Joined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Unjoined"] = 'unjoined'] = "Unjoined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Canceled"] = 'canceled'] = "Canceled";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Requested"] = 'requested'] = "Requested";
})(WorkspaceSessionChangeType = exports.WorkspaceSessionChangeType || (exports.WorkspaceSessionChangeType = {}));
class WorkspaceSessionChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(WorkspaceUserProfile),
    __metadata("design:type", WorkspaceUserProfile)
], WorkspaceSessionChangedEventArgs.prototype, "userProfile", void 0);
exports.WorkspaceSessionChangedEventArgs = WorkspaceSessionChangedEventArgs;
class UserSettings {
}
__decorate([
    vso_rpc_1.dataFormat(FeatureFlagStore),
    __metadata("design:type", FeatureFlagStore)
], UserSettings.prototype, "experimentalFeatures", void 0);
exports.UserSettings = UserSettings;
class VSOnlineSettings {
}
exports.VSOnlineSettings = VSOnlineSettings;
class TextChange {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], TextChange.prototype, "newText", void 0);
exports.TextChange = TextChange;
class MessageBase {
    constructor() {
        this.messageType = MessageType.Unknown;
    }
}
exports.MessageBase = MessageBase;
var MessageType;
(function (MessageType) {
    MessageType[MessageType["SelectionChange"] = 'selectionChange'] = "SelectionChange";
    MessageType[MessageType["NotebookSelectionChange"] = 'notebookSelectionChange'] = "NotebookSelectionChange";
    MessageType[MessageType["VisibleRangesChange"] = 'visibleRangesChange'] = "VisibleRangesChange";
    MessageType[MessageType["TextChange"] = 'textChange'] = "TextChange";
    MessageType[MessageType["FileOpenRequest"] = 'fileOpenRequest'] = "FileOpenRequest";
    MessageType[MessageType["ResetFileClient"] = 'resetFileClient'] = "ResetFileClient";
    MessageType[MessageType["UntitledFileSaved"] = 'untitledFileSaved'] = "UntitledFileSaved";
    MessageType[MessageType["UntitledFileOpened"] = 'untitledFileOpened'] = "UntitledFileOpened";
    MessageType[MessageType["UntitledFileClosed"] = 'untitledFileClosed'] = "UntitledFileClosed";
    MessageType[MessageType["DiffViewOpen"] = 'diffViewOpen'] = "DiffViewOpen";
    MessageType[MessageType["DiffViewClosed"] = 'diffViewClosed'] = "DiffViewClosed";
    MessageType[MessageType["FileOpenAcknowledge"] = 'fileOpenAcknowledge'] = "FileOpenAcknowledge";
    MessageType[MessageType["FileRelease"] = 'fileRelease'] = "FileRelease";
    MessageType[MessageType["SaveFile"] = 'saveFile'] = "SaveFile";
    MessageType[MessageType["SaveNotebook"] = 'saveNotebook'] = "SaveNotebook";
    MessageType[MessageType["JoinRequest"] = 'joinRequest'] = "JoinRequest";
    MessageType[MessageType["JoinAcknowledge"] = 'joinAcknowledge'] = "JoinAcknowledge";
    MessageType[MessageType["ReadOnlyChange"] = 'readOnlyChange'] = "ReadOnlyChange";
    MessageType[MessageType["Handshake"] = 'handshake'] = "Handshake";
    MessageType[MessageType["Summon"] = 'summon'] = "Summon";
    MessageType[MessageType["LayoutScroll"] = 'layoutScroll'] = "LayoutScroll";
    MessageType[MessageType["NotebookScroll"] = 'notebookScroll'] = "NotebookScroll";
    MessageType[MessageType["ProjectFileOpened"] = 'projectFileOpened'] = "ProjectFileOpened";
    MessageType[MessageType["ProjectFileClosed"] = 'projectFileClosed'] = "ProjectFileClosed";
    MessageType[MessageType["PresenterUpdate"] = 'presenterUpdate'] = "PresenterUpdate";
    MessageType[MessageType["FollowChange"] = 'followChange'] = "FollowChange";
    MessageType[MessageType["AnonymousAccessLevelChange"] = 'anonymousAccessLevelChange'] = "AnonymousAccessLevelChange";
    MessageType[MessageType["Ping"] = 'ping'] = "Ping";
    MessageType[MessageType["Unknown"] = 'unknown'] = "Unknown";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
class FileMessageBase extends MessageBase {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileMessageBase.prototype, "fileName", void 0);
exports.FileMessageBase = FileMessageBase;
class JoinRequestMessage extends MessageBase {
}
exports.JoinRequestMessage = JoinRequestMessage;
class JoinAcknowledgeMessage extends MessageBase {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], JoinAcknowledgeMessage.prototype, "files", void 0);
exports.JoinAcknowledgeMessage = JoinAcknowledgeMessage;
class PresenterUpdateMessage extends MessageBase {
}
exports.PresenterUpdateMessage = PresenterUpdateMessage;
class FollowChangeMessage extends MessageBase {
}
exports.FollowChangeMessage = FollowChangeMessage;
class SelectionChangeMessage extends FileMessageBase {
}
exports.SelectionChangeMessage = SelectionChangeMessage;
class NotebookSelectionChangeMessage extends FileMessageBase {
}
exports.NotebookSelectionChangeMessage = NotebookSelectionChangeMessage;
class Range {
}
exports.Range = Range;
class LayoutScrollMessage extends FileMessageBase {
}
__decorate([
    vso_rpc_1.dataFormat(Range),
    __metadata("design:type", Array)
], LayoutScrollMessage.prototype, "visibleRanges", void 0);
exports.LayoutScrollMessage = LayoutScrollMessage;
class NotebookScrollMessage extends FileMessageBase {
}
exports.NotebookScrollMessage = NotebookScrollMessage;
class EditorVisibleRanges {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], EditorVisibleRanges.prototype, "fileName", void 0);
__decorate([
    vso_rpc_1.dataFormat(Range),
    __metadata("design:type", Array)
], EditorVisibleRanges.prototype, "visibleRanges", void 0);
exports.EditorVisibleRanges = EditorVisibleRanges;
class VisibleRangesChangeMessage extends MessageBase {
}
__decorate([
    vso_rpc_1.dataFormat(EditorVisibleRanges),
    __metadata("design:type", Array)
], VisibleRangesChangeMessage.prototype, "clientVisibleRanges", void 0);
exports.VisibleRangesChangeMessage = VisibleRangesChangeMessage;
class FileOpenRequestMessage extends FileMessageBase {
}
exports.FileOpenRequestMessage = FileOpenRequestMessage;
class ResetFileClientMessage extends FileMessageBase {
}
exports.ResetFileClientMessage = ResetFileClientMessage;
class UntitledFileSavedMessage extends FileMessageBase {
}
exports.UntitledFileSavedMessage = UntitledFileSavedMessage;
class UntitledFileOpenedMessage extends FileMessageBase {
}
exports.UntitledFileOpenedMessage = UntitledFileOpenedMessage;
class UntitledFileClosedMessage extends FileMessageBase {
}
exports.UntitledFileClosedMessage = UntitledFileClosedMessage;
class DiffViewMessage extends MessageBase {
}
exports.DiffViewMessage = DiffViewMessage;
class DiffViewOpenMessage extends DiffViewMessage {
}
exports.DiffViewOpenMessage = DiffViewOpenMessage;
class DiffViewClosedMessage extends DiffViewMessage {
}
exports.DiffViewClosedMessage = DiffViewClosedMessage;
class HandshakeMessage extends FileMessageBase {
}
exports.HandshakeMessage = HandshakeMessage;
class SaveFileMessage extends FileMessageBase {
}
exports.SaveFileMessage = SaveFileMessage;
class SaveNotebookMessage extends FileMessageBase {
}
exports.SaveNotebookMessage = SaveNotebookMessage;
class FileReleaseMessage extends FileMessageBase {
}
exports.FileReleaseMessage = FileReleaseMessage;
class AnonymousAcccessLevelChangedMessage extends FileMessageBase {
}
exports.AnonymousAcccessLevelChangedMessage = AnonymousAcccessLevelChangedMessage;
class TextChangeMessage extends FileMessageBase {
}
__decorate([
    vso_rpc_1.dataFormat(TextChange),
    __metadata("design:type", Array)
], TextChangeMessage.prototype, "changes", void 0);
exports.TextChangeMessage = TextChangeMessage;
class ReadOnlyChangeMessage extends FileMessageBase {
}
exports.ReadOnlyChangeMessage = ReadOnlyChangeMessage;
/** Message sent by a guest or Nexus client when he or she opens the first editor window for a project file. */
class ProjectFileOpenedMessage extends FileMessageBase {
}
exports.ProjectFileOpenedMessage = ProjectFileOpenedMessage;
/** Message sent by a guest or Nexus client when he or she closes the last editor window for a project file. */
class ProjectFileClosedMessage extends FileMessageBase {
}
exports.ProjectFileClosedMessage = ProjectFileClosedMessage;
class ServerVersionSnapshot {
}
__decorate([
    vso_rpc_1.dataFormat(TextChangeMessage),
    __metadata("design:type", TextChangeMessage)
], ServerVersionSnapshot.prototype, "message", void 0);
exports.ServerVersionSnapshot = ServerVersionSnapshot;
class FileOpenAcknowledgeMessage extends FileMessageBase {
}
__decorate([
    vso_rpc_1.dataFormat(ServerVersionSnapshot),
    __metadata("design:type", Array)
], FileOpenAcknowledgeMessage.prototype, "history", void 0);
exports.FileOpenAcknowledgeMessage = FileOpenAcknowledgeMessage;
class SummonMessage extends MessageBase {
}
exports.SummonMessage = SummonMessage;
class PingMessage extends MessageBase {
}
exports.PingMessage = PingMessage;
var DocumentChangesNotificationFlags;
(function (DocumentChangesNotificationFlags) {
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyDidOpenClose"] = 'notifyDidOpenClose'] = "NotifyDidOpenClose";
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyDidChange"] = 'notifyDidChange'] = "NotifyDidChange";
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyDidSave"] = 'notifyDidSave'] = "NotifyDidSave";
    DocumentChangesNotificationFlags[DocumentChangesNotificationFlags["NotifyAll"] = 'notifyAll'] = "NotifyAll";
})(DocumentChangesNotificationFlags = exports.DocumentChangesNotificationFlags || (exports.DocumentChangesNotificationFlags = {}));
class CoeditingInformation {
}
exports.CoeditingInformation = CoeditingInformation;
class DocumentFilter {
}
exports.DocumentFilter = DocumentFilter;
class LanguageServerProviderMetadata {
}
__decorate([
    vso_rpc_1.dataFormat(DocumentFilter),
    __metadata("design:type", Array)
], LanguageServerProviderMetadata.prototype, "documentFilters", void 0);
exports.LanguageServerProviderMetadata = LanguageServerProviderMetadata;
class NotificationEventArgs extends EventArgs {
}
exports.NotificationEventArgs = NotificationEventArgs;
class LspMessage {
}
exports.LspMessage = LspMessage;
class DebugSession {
}
exports.DebugSession = DebugSession;
var DebugSessionChangeType;
(function (DebugSessionChangeType) {
    DebugSessionChangeType[DebugSessionChangeType["None"] = 'none'] = "None";
    DebugSessionChangeType[DebugSessionChangeType["Add"] = 'add'] = "Add";
    DebugSessionChangeType[DebugSessionChangeType["Remove"] = 'remove'] = "Remove";
})(DebugSessionChangeType = exports.DebugSessionChangeType || (exports.DebugSessionChangeType = {}));
class DebugSessionChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(DebugSession),
    __metadata("design:type", DebugSession)
], DebugSessionChangedEventArgs.prototype, "debugSession", void 0);
exports.DebugSessionChangedEventArgs = DebugSessionChangedEventArgs;
class LaunchConfigurationChangedEventArgs extends EventArgs {
}
exports.LaunchConfigurationChangedEventArgs = LaunchConfigurationChangedEventArgs;
var ContinueReason;
(function (ContinueReason) {
    ContinueReason[ContinueReason["Go"] = 'go'] = "Go";
    ContinueReason[ContinueReason["StepIn"] = 'stepIn'] = "StepIn";
    ContinueReason[ContinueReason["StepOut"] = 'stepOut'] = "StepOut";
    ContinueReason[ContinueReason["StepOver"] = 'stepOver'] = "StepOver";
})(ContinueReason = exports.ContinueReason || (exports.ContinueReason = {}));
/** Event args for an event when access control changes. */
class AccessControlEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(AccessControl),
    __metadata("design:type", AccessControl)
], AccessControlEventArgs.prototype, "accessControl", void 0);
exports.AccessControlEventArgs = AccessControlEventArgs;
/** Access for a restricted operation. */
var RestrictedOperationAccess;
(function (RestrictedOperationAccess) {
    RestrictedOperationAccess[RestrictedOperationAccess["Allowed"] = 'allowed'] = "Allowed";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedInReadOnlySession"] = 'rejectedInReadOnlySession'] = "RejectedInReadOnlySession";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedForNotOwner"] = 'rejectedForNotOwner'] = "RejectedForNotOwner";
    RestrictedOperationAccess[RestrictedOperationAccess["DisabledByHostConfiguration"] = 'disabledByHostConfiguration'] = "DisabledByHostConfiguration";
    RestrictedOperationAccess[RestrictedOperationAccess["ExplicitlyRejectedByHost"] = 'explicitlyRejectedByHost'] = "ExplicitlyRejectedByHost";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedPersistentRootNotSupported"] = 'rejectedPersistentRootNotSupported'] = "RejectedPersistentRootNotSupported";
})(RestrictedOperationAccess = exports.RestrictedOperationAccess || (exports.RestrictedOperationAccess = {}));
/** Event args for an event when a restricted operation has failed. */
class RestrictedOperationAccessEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(RestrictedOperation),
    __metadata("design:type", RestrictedOperation)
], RestrictedOperationAccessEventArgs.prototype, "operation", void 0);
exports.RestrictedOperationAccessEventArgs = RestrictedOperationAccessEventArgs;
class FileListOptions {
}
exports.FileListOptions = FileListOptions;
/** Specifies what descendents should be included when listing or watching a path. */
var FileRecurseMode;
(function (FileRecurseMode) {
    FileRecurseMode[FileRecurseMode["None"] = 'none'] = "None";
    FileRecurseMode[FileRecurseMode["Children"] = 'children'] = "Children";
    FileRecurseMode[FileRecurseMode["SingleChildDescendants"] = 'singleChildDescendants'] = "SingleChildDescendants";
    FileRecurseMode[FileRecurseMode["AllDescendants"] = 'allDescendants'] = "AllDescendants";
})(FileRecurseMode = exports.FileRecurseMode || (exports.FileRecurseMode = {}));
var FileAttributes;
(function (FileAttributes) {
    FileAttributes[FileAttributes["None"] = 'none'] = "None";
    FileAttributes[FileAttributes["Hidden"] = 'hidden'] = "Hidden";
    FileAttributes[FileAttributes["ReadOnly"] = 'readOnly'] = "ReadOnly";
    FileAttributes[FileAttributes["Excluded"] = 'excluded'] = "Excluded";
    FileAttributes[FileAttributes["External"] = 'external'] = "External";
})(FileAttributes = exports.FileAttributes || (exports.FileAttributes = {}));
class FileInfo {
    constructor() {
        this.exists = true;
    }
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileInfo.prototype, "path", void 0);
__decorate([
    vso_rpc_1.dataFormat(FileInfo),
    __metadata("design:type", Array)
], FileInfo.prototype, "children", void 0);
exports.FileInfo = FileInfo;
class FileRootInfo extends FileInfo {
}
exports.FileRootInfo = FileRootInfo;
class FileTextInfo extends FileInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], FileTextInfo.prototype, "text", void 0);
exports.FileTextInfo = FileTextInfo;
class FileReadOptions {
}
exports.FileReadOptions = FileReadOptions;
class FileWriteOptions {
}
exports.FileWriteOptions = FileWriteOptions;
class FileMoveOptions {
}
exports.FileMoveOptions = FileMoveOptions;
class FileDeleteOptions {
}
exports.FileDeleteOptions = FileDeleteOptions;
class FileWatchOptions {
}
exports.FileWatchOptions = FileWatchOptions;
class FileChange {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileChange.prototype, "path", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileChange.prototype, "fullPath", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], FileChange.prototype, "localFullPath", void 0);
exports.FileChange = FileChange;
var FileChangeType;
(function (FileChangeType) {
    FileChangeType[FileChangeType["None"] = 'none'] = "None";
    FileChangeType[FileChangeType["Updated"] = 'updated'] = "Updated";
    FileChangeType[FileChangeType["Added"] = 'added'] = "Added";
    FileChangeType[FileChangeType["Deleted"] = 'deleted'] = "Deleted";
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
class FilesChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(FileChange),
    __metadata("design:type", Array)
], FilesChangedEventArgs.prototype, "changes", void 0);
exports.FilesChangedEventArgs = FilesChangedEventArgs;
class ExternalFilesChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], ExternalFilesChangedEventArgs.prototype, "localPaths", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", Array)
], ExternalFilesChangedEventArgs.prototype, "vslsPaths", void 0);
exports.ExternalFilesChangedEventArgs = ExternalFilesChangedEventArgs;
/** File service root changed event args. */
class RootsChangedEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], RootsChangedEventArgs.prototype, "root", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], RootsChangedEventArgs.prototype, "fullPath", void 0);
exports.RootsChangedEventArgs = RootsChangedEventArgs;
class DiffBaseInfo {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], DiffBaseInfo.prototype, "description", void 0);
exports.DiffBaseInfo = DiffBaseInfo;
class ExternalFileMapResult {
}
exports.ExternalFileMapResult = ExternalFileMapResult;
class TextSearchResultRange {
}
exports.TextSearchResultRange = TextSearchResultRange;
class TextSearchResult {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Path),
    __metadata("design:type", String)
], TextSearchResult.prototype, "path", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], TextSearchResult.prototype, "text", void 0);
__decorate([
    vso_rpc_1.dataFormat(TextSearchResultRange),
    __metadata("design:type", Array)
], TextSearchResult.prototype, "ranges", void 0);
__decorate([
    vso_rpc_1.dataFormat(TextSearchResultRange),
    __metadata("design:type", Array)
], TextSearchResult.prototype, "previewRanges", void 0);
exports.TextSearchResult = TextSearchResult;
class ReadTextResult {
}
__decorate([
    vso_rpc_1.dataFormat(FileTextInfo),
    __metadata("design:type", Array)
], ReadTextResult.prototype, "results", void 0);
exports.ReadTextResult = ReadTextResult;
class TextSearchOptions {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", Array)
], TextSearchOptions.prototype, "fileIncludes", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", Array)
], TextSearchOptions.prototype, "fileExcludes", void 0);
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Text),
    __metadata("design:type", String)
], TextSearchOptions.prototype, "pattern", void 0);
exports.TextSearchOptions = TextSearchOptions;
/** Types of nodes present in a solution view */
class NodeType {
}
exports.NodeType = NodeType;
/** Represents a node in solution view */
class SolutionWorkspaceNode {
}
exports.SolutionWorkspaceNode = SolutionWorkspaceNode;
/** Hierarchy change event data */
class SolutionChangedEventArgs extends EventArgs {
}
exports.SolutionChangedEventArgs = SolutionChangedEventArgs;
/** Workspace root changed!: solution || folder opened || closed */
class WorkspaceRootChangedEventArgs extends EventArgs {
}
exports.WorkspaceRootChangedEventArgs = WorkspaceRootChangedEventArgs;
/** The type of workspace being shared */
var WorkspaceMode;
(function (WorkspaceMode) {
    WorkspaceMode[WorkspaceMode["Empty"] = 'empty'] = "Empty";
    WorkspaceMode[WorkspaceMode["Folder"] = 'folder'] = "Folder";
    WorkspaceMode[WorkspaceMode["Solution"] = 'solution'] = "Solution";
})(WorkspaceMode = exports.WorkspaceMode || (exports.WorkspaceMode = {}));
/** Types of hierarchy node operations */
class SolutionChangeType {
}
exports.SolutionChangeType = SolutionChangeType;
class SourceEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(vso_rpc_1.DataFormat.Hide),
    __metadata("design:type", String)
], SourceEventArgs.prototype, "jsonContent", void 0);
exports.SourceEventArgs = SourceEventArgs;
var StreamTraits;
(function (StreamTraits) {
    StreamTraits[StreamTraits["None"] = 'none'] = "None";
    StreamTraits[StreamTraits["CanRead"] = 'canRead'] = "CanRead";
    StreamTraits[StreamTraits["CanWrite"] = 'canWrite'] = "CanWrite";
    StreamTraits[StreamTraits["CanSeek"] = 'canSeek'] = "CanSeek";
})(StreamTraits = exports.StreamTraits || (exports.StreamTraits = {}));
/** The scope a task is associated with */
var TaskScope;
(function (TaskScope) {
    TaskScope[TaskScope["Global"] = 'global'] = "Global";
    TaskScope[TaskScope["Workspace"] = 'workspace'] = "Workspace";
    TaskScope[TaskScope["WorkspaceFolder"] = 'workspaceFolder'] = "WorkspaceFolder";
})(TaskScope = exports.TaskScope || (exports.TaskScope = {}));
/** Represents a task declared in a collaboration workspace. Examples!: build, publish, pack, lint, etc. */
class WorkspaceTask {
}
exports.WorkspaceTask = WorkspaceTask;
/** Represents a task execution. Any single task may be executed multiple times. Each execution will receive a new moniker with unique ID. */
class TaskExecutionMoniker {
}
exports.TaskExecutionMoniker = TaskExecutionMoniker;
/** Event occured to a task that may lead to a task state change. */
var TaskExecutionStatusChange;
(function (TaskExecutionStatusChange) {
    TaskExecutionStatusChange[TaskExecutionStatusChange["Started"] = 'started'] = "Started";
    TaskExecutionStatusChange[TaskExecutionStatusChange["Terminated"] = 'terminated'] = "Terminated";
})(TaskExecutionStatusChange = exports.TaskExecutionStatusChange || (exports.TaskExecutionStatusChange = {}));
/** Message sent by a remote task to signal change in the status. */
class TaskExecutionStatusEventArgs extends EventArgs {
}
__decorate([
    vso_rpc_1.dataFormat(TaskExecutionMoniker),
    __metadata("design:type", TaskExecutionMoniker)
], TaskExecutionStatusEventArgs.prototype, "taskExecution", void 0);
__decorate([
    vso_rpc_1.dataFormat(WorkspaceTask),
    __metadata("design:type", WorkspaceTask)
], TaskExecutionStatusEventArgs.prototype, "task", void 0);
exports.TaskExecutionStatusEventArgs = TaskExecutionStatusEventArgs;
/** List of statuses produced by IWorkspaceTaskService in response to start a task execution. */
var RunTaskStatus;
(function (RunTaskStatus) {
    RunTaskStatus[RunTaskStatus["Started"] = 'started'] = "Started";
    RunTaskStatus[RunTaskStatus["AlreadyRunning"] = 'alreadyRunning'] = "AlreadyRunning";
    RunTaskStatus[RunTaskStatus["RetryLater"] = 'retryLater'] = "RetryLater";
    RunTaskStatus[RunTaskStatus["TaskNotFound"] = 'taskNotFound'] = "TaskNotFound";
    RunTaskStatus[RunTaskStatus["RejectedByHost"] = 'rejectedByHost'] = "RejectedByHost";
})(RunTaskStatus = exports.RunTaskStatus || (exports.RunTaskStatus = {}));
/** Represents a result of a run task operation. */
class RunTaskResult {
}
__decorate([
    vso_rpc_1.dataFormat(TaskExecutionMoniker),
    __metadata("design:type", TaskExecutionMoniker)
], RunTaskResult.prototype, "taskExecution", void 0);
exports.RunTaskResult = RunTaskResult;
/** Restricted operation for a control action performed for a specific task, including run and terminate actions. */
class WorkspaceTaskRestrictedOperation extends RestrictedOperation {
}
exports.WorkspaceTaskRestrictedOperation = WorkspaceTaskRestrictedOperation;
var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes[ErrorCodes["CouldNotConnectToServer"] = -32000] = "CouldNotConnectToServer";
    ErrorCodes[ErrorCodes["OlderThanServer"] = -32001] = "OlderThanServer";
    ErrorCodes[ErrorCodes["NewerThanServer"] = -32002] = "NewerThanServer";
    ErrorCodes[ErrorCodes["OlderThanPeer"] = -32003] = "OlderThanPeer";
    ErrorCodes[ErrorCodes["NewerThanPeer"] = -32004] = "NewerThanPeer";
    ErrorCodes[ErrorCodes["OlderThanAgent"] = -32005] = "OlderThanAgent";
    ErrorCodes[ErrorCodes["NewerThanAgent"] = -32006] = "NewerThanAgent";
    ErrorCodes[ErrorCodes["NoIPAddressesDetected"] = -32010] = "NoIPAddressesDetected";
    ErrorCodes[ErrorCodes["NoConnectionAddresses"] = -32011] = "NoConnectionAddresses";
    ErrorCodes[ErrorCodes["AutoConnectionFailed"] = -32012] = "AutoConnectionFailed";
    ErrorCodes[ErrorCodes["RelayConnectionFailed"] = -32013] = "RelayConnectionFailed";
    ErrorCodes[ErrorCodes["DirectConnectionFailed"] = -32014] = "DirectConnectionFailed";
    ErrorCodes[ErrorCodes["SessionProtocolError"] = -32015] = "SessionProtocolError";
    ErrorCodes[ErrorCodes["SessionAuthenticationFailed"] = -32016] = "SessionAuthenticationFailed";
    ErrorCodes[ErrorCodes["ReconnectFailed"] = -32017] = "ReconnectFailed";
    ErrorCodes[ErrorCodes["DirectConnectionNotEnabled"] = -32020] = "DirectConnectionNotEnabled";
    ErrorCodes[ErrorCodes["RelayConnectionNotEnabled"] = -32021] = "RelayConnectionNotEnabled";
    ErrorCodes[ErrorCodes["CollaborationSessionUsersLimitReached"] = -32022] = "CollaborationSessionUsersLimitReached";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestRejected"] = -32023] = "CollaborationSessionGuestRejected";
    ErrorCodes[ErrorCodes["CollaborationSessionRequestTimedOut"] = -32024] = "CollaborationSessionRequestTimedOut";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestCanceled"] = -32025] = "CollaborationSessionGuestCanceled";
    ErrorCodes[ErrorCodes["CollaborationSessionNotFound"] = -32026] = "CollaborationSessionNotFound";
    ErrorCodes[ErrorCodes["CollaborationSessionEnded"] = -32027] = "CollaborationSessionEnded";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestBlocked"] = -32028] = "CollaborationSessionGuestBlocked";
    ErrorCodes[ErrorCodes["NonSuccessHttpStatusCodeReceived"] = -32030] = "NonSuccessHttpStatusCodeReceived";
    ErrorCodes[ErrorCodes["KeychainAccessFailed"] = -32031] = "KeychainAccessFailed";
    ErrorCodes[ErrorCodes["UnauthorizedHttpStatusCode"] = -32032] = "UnauthorizedHttpStatusCode";
    ErrorCodes[ErrorCodes["ForbiddenHttpStatusCode"] = -32033] = "ForbiddenHttpStatusCode";
    ErrorCodes[ErrorCodes["RelayConnectionHostFailure"] = -32040] = "RelayConnectionHostFailure";
    ErrorCodes[ErrorCodes["RelayConnectionGuestFailure"] = -32041] = "RelayConnectionGuestFailure";
    ErrorCodes[ErrorCodes["RelayHubNotFoundFailure"] = -32045] = "RelayHubNotFoundFailure";
    ErrorCodes[ErrorCodes["RelayHubNoHostFailure"] = -32046] = "RelayHubNoHostFailure";
    ErrorCodes[ErrorCodes["RelayHubNotConnectedFailure"] = -32047] = "RelayHubNotConnectedFailure";
    ErrorCodes[ErrorCodes["BrokerNotAuthorized"] = -32050] = "BrokerNotAuthorized";
    ErrorCodes[ErrorCodes["CouldNotConnectToServerAuthFailed"] = -32060] = "CouldNotConnectToServerAuthFailed";
    ErrorCodes[ErrorCodes["RemoteLaunchNotEnabled"] = -32200] = "RemoteLaunchNotEnabled";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestRejectedWithSpecificReason"] = -32300] = "CollaborationSessionGuestRejectedWithSpecificReason";
    ErrorCodes[ErrorCodes["OperationRejected"] = -32400] = "OperationRejected";
    ErrorCodes[ErrorCodes["OperationRejectedInReadOnlySession"] = -32401] = "OperationRejectedInReadOnlySession";
    ErrorCodes[ErrorCodes["OperationRejectedForNotOwner"] = -32402] = "OperationRejectedForNotOwner";
    ErrorCodes[ErrorCodes["OperationRejectedAsPersistentRootNotSupported"] = -32403] = "OperationRejectedAsPersistentRootNotSupported";
    ErrorCodes[ErrorCodes["FileOperationNotSupported"] = -32500] = "FileOperationNotSupported";
    ErrorCodes[ErrorCodes["ErrorFileAdditionFailed"] = -32501] = "ErrorFileAdditionFailed";
    ErrorCodes[ErrorCodes["ErrorFileDeleteFailed"] = -32502] = "ErrorFileDeleteFailed";
    ErrorCodes[ErrorCodes["ErrorFileRenameFailed"] = -32503] = "ErrorFileRenameFailed";
    ErrorCodes[ErrorCodes["FileAlreadyExists"] = -32504] = "FileAlreadyExists";
    ErrorCodes[ErrorCodes["ErrorFolderAdditionFailed"] = -32505] = "ErrorFolderAdditionFailed";
    ErrorCodes[ErrorCodes["ErrorFolderRenameFailed"] = -32506] = "ErrorFolderRenameFailed";
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
var TraceEventIds;
(function (TraceEventIds) {
    TraceEventIds[TraceEventIds["None"] = 0] = "None";
    TraceEventIds[TraceEventIds["AgentLogCreated"] = 1002] = "AgentLogCreated";
    TraceEventIds[TraceEventIds["AgentOutput"] = 2001] = "AgentOutput";
    TraceEventIds[TraceEventIds["CallingOutput"] = 10001] = "CallingOutput";
    TraceEventIds[TraceEventIds["RpcListeningOnPipe"] = 1001] = "RpcListeningOnPipe";
})(TraceEventIds = exports.TraceEventIds || (exports.TraceEventIds = {}));
var TraceSources;
(function (TraceSources) {
    TraceSources["Agent"] = "Agent";
    TraceSources["AgentAuth"] = "Agent.Auth";
    TraceSources["AgentCSharpLS"] = "Agent.CSharpLS";
    TraceSources["AgentFile"] = "Agent.File";
    TraceSources["AgentFirewall"] = "Agent.Firewall";
    TraceSources["AgentHttp"] = "Agent.Http";
    TraceSources["AgentProxy"] = "Agent.Proxy";
    TraceSources["AgentPortForwarding"] = "Agent.PortFowrading";
    TraceSources["AgentTcpListenersObserver"] = "Agent.TcpListeners";
    TraceSources["AgentRpc"] = "Agent.Rpc";
    TraceSources["AgentRpcAuth"] = "Agent.Rpc.Auth";
    TraceSources["AgentRpcChat"] = "Agent.Rpc.Chat";
    TraceSources["AgentRpcFile"] = "Agent.Rpc.File";
    TraceSources["AgentRpcFirewall"] = "Agent.Rpc.Firewall";
    TraceSources["AgentRpcServerSharing"] = "Agent.Rpc.ServerSharing";
    TraceSources["AgentRpcSourceEvent"] = "Agent.Rpc.SourceEvent";
    TraceSources["AgentRpcStream"] = "Agent.Rpc.Stream";
    TraceSources["AgentRpcStreamManager"] = "Agent.Rpc.StreamManager";
    TraceSources["AgentRpcStreamTransport"] = "Agent.Rpc.StreamTransport";
    TraceSources["AgentRpcTerminal"] = "Agent.Rpc.Terminal";
    TraceSources["AgentTerminalConnection"] = "Agent.Terminal.Connection";
    TraceSources["AgentRpcWorkspace"] = "Agent.Rpc.Workspace";
    TraceSources["AgentRpcWorkspaceUser"] = "Agent.Rpc.WorkspaceUser";
    TraceSources["AgentRpcTaskOutput"] = "Agent.Rpc.TaskOutput";
    TraceSources["AgentSsh"] = "Agent.Ssh";
    TraceSources["AgentTSLS"] = "Agent.TSLS";
    TraceSources["AgentWorkspace"] = "Agent.Workspace";
    TraceSources["AgentWorkspaceSessionAccessControl"] = "Agent.WorkspaceSession.AccessControl";
    TraceSources["ClientAgent"] = "Client.Agent";
    TraceSources["ClientCoEditing"] = "Client.CoEditing";
    TraceSources["ClientCoEditingBufferManager"] = "Client.CoEditing.BufferManager";
    TraceSources["ClientCoEditingVSCodeEvent"] = "Client.CoEditing.VSCodeEvent";
    TraceSources["ClientFileProvider"] = "Client.FileProvider";
    TraceSources["ClientLauncher"] = "Client.Launcher";
    TraceSources["ClientRpc"] = "Client.Rpc";
    TraceSources["ClientRpcAgentSession"] = "Client.Rpc.AgentSession";
    TraceSources["ClientRpcAuth"] = "Client.Rpc.Auth";
    TraceSources["ClientRpcFile"] = "Client.Rpc.File";
    TraceSources["ClientRpcPortForwarding"] = "Client.Rpc.PortForwarding";
    TraceSources["ClientRpcServerSharing"] = "Client.Rpc.ServerSharing";
    TraceSources["ClientRpcSourceEvent"] = "Client.Rpc.SourceEvent";
    TraceSources["ClientRpcStream"] = "Client.Rpc.Stream";
    TraceSources["ClientRpcStreamManager"] = "Client.Rpc.StreamManager";
    TraceSources["ClientRpcTerminal"] = "Client.Rpc.Terminal";
    TraceSources["ClientRpcChat"] = "Client.Rpc.Chat";
    TraceSources["ClientRpcTerminalEndpoint"] = "Client.Rpc.TerminalEndpoint";
    TraceSources["ClientRpcWorkspace"] = "Client.Rpc.Workspace";
    TraceSources["ClientRpcWorkspaceUser"] = "Client.Rpc.WorkspaceUser";
    TraceSources["ClientRpcSessionContext"] = "Client.Rpc.SessionContext";
    TraceSources["ClientRpcContact"] = "Client.Rpc.Contact";
    TraceSources["ClientWorkspace"] = "Client.Workspace";
    TraceSources["ClientRemoteBuild"] = "Client.RemoteBuild";
    TraceSources["ClientCSharpLS"] = "Client.CSharpLS";
    TraceSources["ClientSharedTerminal"] = "Client.SharedTerminal";
    TraceSources["ClientWorkspaceAccessControl"] = "Client.Workspace.AccessControl";
    TraceSources["ClientAccessControl"] = "Client.AccessControl";
    TraceSources["ClientSearch"] = "Client.Search";
    TraceSources["ClientSourceControl"] = "Client.SourceControl";
    TraceSources["ClientSyncService"] = "Client.SyncService";
    TraceSources["ClientCommentService"] = "Client.CommentService";
    TraceSources["ClientGettingStartedPageContentProvider"] = "Client.GettingStartedPageContentProvider";
    TraceSources["ClientPortForwardingBrowser"] = "Client.PortForwardingBrowser";
    TraceSources["ClientOnlineEnvironmentSessionService"] = "Client.OnlineEnvironmentSessionService";
    TraceSources["Calling"] = "Calling";
    TraceSources["DebugHostAdapter"] = "Debug.HostAdapter";
    TraceSources["DebugRpcHostAdapter"] = "Debug.Rpc.HostAdapter";
    TraceSources["DebugAdapterHost"] = "Debug.AdapterHost";
    TraceSources["ForwardingTcpServer"] = "ForwardingTcpServer";
    TraceSources["ForwardingPipeServer"] = "ForwardingPipeServer";
    TraceSources["Telemetry"] = "Telemetry";
    TraceSources["ClientAccessCheck"] = "ClientAccessCheck";
    TraceSources["LSPCoauthoringManager"] = "LSP.CoauthoringManager";
    TraceSources["RemoteServiceBroker"] = "RemoteServiceBroker";
    TraceSources["ReviewsDiffs"] = "Reviews.Diffs";
    TraceSources["Cli"] = "CLI";
    TraceSources["CliRestore"] = "CLI.restore";
    TraceSources["CliStart"] = "CLI.start";
    TraceSources["CliStop"] = "CLI.stop";
    TraceSources["TTY"] = "TTY";
    TraceSources["Settings"] = "Settings";
    TraceSources["API"] = "API";
    TraceSources["VmAgent"] = "VmAgent";
    TraceSources["SelfHostedAgent"] = "SelfHostedAgent";
    TraceSources["EnvironmentConfig"] = "EnvConfig";
    TraceSources["VMConfig"] = "VMCFG";
    TraceSources["LinuxContainerUpdate"] = "LinuxContainerUpdate";
    TraceSources["ShutDownEnvironmentHandler"] = "ShutdownEnvironment";
    TraceSources["StartEnvironmentHandler"] = "StartEnvironment";
    TraceSources["VmAgentRpcService"] = "VmAgentRpcService";
    TraceSources["RebuildEnvironmentHandler"] = "RebuildEnvironment";
    TraceSources["WarmupEnvironmentHandler"] = "WarmupEnvironment";
    TraceSources["StartLiveShareHandler"] = "StartLiveShare";
    TraceSources["StartPortForwardingHandler"] = "StartPortForwardingHandler";
    TraceSources["ContainerEnvironmentMonitor"] = "ContainerMonitor";
    TraceSources["SSHServerMonitor"] = "SSHServerMonitor";
    TraceSources["ContainerTunnel"] = "ContainerTunnel";
    TraceSources["RunningContainerInfoProvider"] = "RunningContainerInfo";
    TraceSources["DevContainerChangesWatcher"] = "DevContainerChangesWatcher";
    TraceSources["VSCodeServerHostService"] = "VSCodeServerHostService";
    TraceSources["SshServerHostService"] = "SSHServerHostService";
    TraceSources["CodespaceHostService"] = "CodespaceHostService";
    TraceSources["ClientAutoSuspendMonitor"] = "ClientAutoSuspendMonitor";
    TraceSources["DockerImagePrune"] = "DockerImagePrune";
    TraceSources["PrebuildPoolUpdateHandler"] = "PrebuildPoolUpdate";
    TraceSources["StandAloneAgent"] = "StandAloneAgent";
    TraceSources["StopCodespacePolicyMonitor"] = "StopCodespacePolicy";
    TraceSources["Viewlet"] = "Viewlet";
    TraceSources["VSIX"] = "VSIX";
    TraceSources["ClientPrefix"] = "Client.";
    TraceSources["ClientLSP"] = "Client.LSP";
    TraceSources["LSPHost"] = "LSP.Host";
    TraceSources["BreakpointManager"] = "BreakpointManager";
    TraceSources["DebugAdapter"] = "Debug.Adapter";
    TraceSources["DebugRemote"] = "Debug.Remote";
    TraceSources["DebugSessionHost"] = "Debug.SessionHost";
    TraceSources["DebugHost"] = "Debug.Host";
    TraceSources["DebugRpcHost"] = "Debug.Rpc.Host";
    TraceSources["DebugTargetHostProcess"] = "Debug.TargetHostProcess";
    TraceSources["DebugRpcSessionHost"] = "Debug.Rpc.SessionHost";
})(TraceSources = exports.TraceSources || (exports.TraceSources = {}));
exports.AgentSessionService = {
    name: 'agentSessionService',
    methods: ['initializeSession', 'enableReconnect', 'keepAlive', 'forceKill'],
    events: [],
};
exports.AuthenticationCoreService = {
    methods: ['getCurrentAuthenticatedUser', 'getCurrentUser', 'removeRecentCollaborator', 'removeAllRecentCollaborators'],
    events: ['authenticationChanged'],
};
exports.AuthenticationService = {
    name: 'auth',
    methods: ['getLoginUri', 'findLoginCode', 'login', 'loginAsAnonymous', 'loginWithCachedToken', 'loginWithExternalToken', 'logout', 'getCachedToken', 'getCurrentAuthenticatedUser', 'getCurrentUser', 'removeRecentCollaborator', 'removeAllRecentCollaborators'],
    events: ['authenticationChanged'],
};
exports.BrokerAuthorizationService = {
    name: 'brokerAuthorization',
    methods: ['authorize'],
    events: [],
};
exports.BrokerManagerService = {
    name: 'brokerManager',
    methods: ['register', 'tryRevoke'],
    events: [],
};
exports.ChatService = {
    name: 'chat',
    methods: ['getMessageHistory', 'getParticipants', 'sendMessage', 'dispose'],
    events: ['messageReceived'],
};
exports.CommentService = {
    name: 'commentService',
    methods: ['createCommentThread', 'createComment', 'updateComment', 'deleteComment', 'getAllCommentThreads', 'getCommentThreadPositions', 'updateLike'],
    events: ['commentThreadChanged'],
};
exports.ConfigurationService = {
    name: 'version',
    methods: ['exchangeVersions', 'exchangeSettings', 'getSubnetMasks'],
    events: [],
};
exports.FirewallService = {
    name: 'firewall',
    methods: ['getFirewallStatus'],
    events: [],
};
exports.HubConnectionService = {
    name: 'hubConnection',
    methods: ['getIsConnected', 'getIsAttempting', 'getEnabled', 'setEnabled', 'registerHubMethodNotify', 'unregisterHubMethodNotify', 'invokeHubMethod', 'sendHubMethod'],
    events: ['hubConnectionStateChanged', 'hubConnectionAttempted', 'hubMethodNotified'],
};
exports.OnlineEnvironmentSessionService = {
    name: 'onlineEnvironmentLiveShareSessionService',
    methods: ['getSessionState', 'updateSessionState'],
    events: [],
};
exports.PortForwardingService = {
    name: 'portForwarding',
    methods: ['getSharedServers', 'getSharedPipes', 'getLastAccessTime', 'setDestinationPort'],
    events: ['sharingStarted', 'pipeSharingStarted', 'browseSharingStarted', 'sharingStopped', 'pipeSharingStopped', 'sharingChanged'],
};
exports.ServerSharingService = {
    name: 'serverSharing',
    methods: ['startSharing', 'startSharingPipe', 'stopSharing', 'stopSharingPipe', 'stopSharingBrowseSessions', 'getSharedServers', 'getSharedPipes', 'updateSessionName', 'updateSharedServerProtocol', 'updateSharedServerPrivacy'],
    voidMethods: ['invokeSharingSucceeded', 'invokeSharingFailed'],
    events: ['sharingStarted', 'pipeSharingStarted', 'browseSharingStarted', 'sharingStopped', 'pipeSharingStopped', 'sharingChanged', 'sharingSucceeded', 'sharingFailed'],
};
exports.SessionContextService = {
    name: 'sessionContext',
    methods: ['getServiceNames'],
    voidMethods: ['sendSessionStateUpdateToClient', 'sendSessionStatusUpdateToClient'],
    events: ['sessionStateUpdate', 'sessionStatusUpdate'],
};
exports.SourceControlService = {
    name: 'sourceControl',
    methods: ['getAllSourceControls', 'getSourceControls', 'getSourceControl', 'getRecentVersions', 'getRecentVersionsTillMergeVersion', 'getDiffsForVersion', 'getDiffForResource', 'getResource', 'cleanResources', 'getMergeVersion', 'getRemoteVersionsNames', 'getCurrentVersionName'],
    events: ['sourceControlChanged', 'resourceChanged'],
};
exports.SyncService = {
    name: 'syncService',
    methods: ['checkSync', 'checkSyncForVersion', 'checkSyncForVersion2'],
    events: [],
};
exports.TaskOutputService = {
    name: 'taskOutput',
    methods: ['getTaskOutputs', 'shareTaskOutput', 'updateTaskOutputFeed', 'closeTaskOutput'],
    events: ['taskOutputShared', 'taskOutputFeedUpdated', 'taskOutputClosed'],
};
exports.TelemetryService = {
    name: 'telemetry',
    methods: ['initialize', 'getServiceUri'],
    events: ['genericOperation', 'fault'],
};
exports.TerminalEndpoint = {
    name: 'terminalEndpoint',
    methods: ['readBytes', 'writeBytes', 'readString', 'writeString'],
    events: [],
};
exports.TerminalService = {
    name: 'terminal',
    methods: ['startTerminal', 'getRunningTerminals', 'resizeTerminal', 'stopTerminal', 'clearTerminalBuffer', 'setTerminalReadOnlyForGuests'],
    events: ['terminalStarted', 'terminalResized', 'terminalStopped', 'terminalReadOnlyChanged'],
};
exports.TextSearchService = {
    name: 'textSearch',
    methods: ['getTextSearchResults', 'getTextSearchResultsWithProgress'],
    events: [],
};
exports.VSServerHostService = {
    name: 'vsServerHostService',
    methods: ['createSession'],
    events: [],
};
exports.WorkspaceAccessControlService = {
    name: 'workspaceAccessControl',
    methods: ['getAccessControl', 'setAccessControl', 'requestOperationAccess', 'setOperationAccess', 'rejectOperation'],
    events: ['accessControlChanged', 'operationRejected', 'operationAccessChanged', 'opeationAccessRequested'],
};
exports.WorkspaceDiagnosticsService = {
    name: 'workspaceDiagnostics',
    methods: ['getDiagnostics'],
    events: ['diagnosticDataChanged'],
};
exports.WorkspaceService = {
    name: 'workspace',
    methods: ['getWorkspace', 'listWorkspaces', 'createPersistentWorkspace', 'deleteWorkspace', 'renameWorkspace', 'shareWorkspace', 'createInvitationLink', 'getInvitationLinks', 'unshareWorkspace', 'beginJoinWorkspace', 'joinWorkspace', 'unjoinWorkspace', 'registerServices', 'canUserShareWorkspace', 'canUserHostWorkspace', 'createPublicInviteLink', 'disconnectGuest', 'unjoinOnlineEnvironmentsGuests', 'setWorkspaceReadyForConnection', 'updateWorkspaceOwner'],
    events: ['servicesChanged', 'connectionStatusChanged', 'progressUpdated', 'userRemoved', 'userBlocked', 'workspaceReadyForConnection'],
};
exports.WorkspaceUserService = {
    name: 'workspaceuser',
    methods: ['acceptOrRejectGuest', 'autoAcceptGuests', 'removeUser', 'removeAllInteractiveUsers', 'fireProgressUpdatedToGuest', 'getCountOfGuestsWithSameAccount', 'createGuestDisplayName', 'getCachedGuestDisplayName', 'getGuestUserProfile', 'getCountOfInteractiveGuests'],
    events: ['workspaceSessionChanged'],
};
exports.LanguageServerProvider = {
    methods: ['getMetadata', 'request'],
    voidMethods: ['notify'],
    events: ['notified'],
};
exports.DebuggerHostService = {
    name: 'DebuggerHostService',
    methods: ['getCurrentDebugSessions', 'launchDebugSession', 'getLaunchConfigurations'],
    events: ['debugSessionChanged', 'launchConfigurationsChanged'],
};
exports.AccessControlService = {
    name: 'accessControl',
    methods: ['getAccessControl'],
    events: ['accessControlChanged'],
};
exports.FileService = {
    name: 'file',
    methods: ['registerExternalFiles', 'registerNamedExternalFiles', 'listRoots', 'list', 'readText', 'readTextWithProgress', 'writeText', 'createDirectory', 'delete', 'copy', 'move', 'getFiles', 'isExcluded', 'findFiles', 'getTextSearchResults', 'getTextSearchResultsWithProgress', 'clearRoots', 'addRoot', 'removeRoot', 'replaceRoot'],
    events: ['filesChanged', 'rootsChanged', 'externalFilesChanged'],
};
exports.SolutionViewService = {
    name: 'solutionView',
    methods: ['getSolutionMode', 'getSolutionCaption', 'getChildrenNodes', 'getRootNodes', 'addNewItem', 'renameItem', 'deleteItem'],
    events: ['solutionChanged', 'workspaceRootChanged'],
};
exports.SourceEventService = {
    name: 'sourceEvent',
    methods: ['fireEvent', 'setSourceData', 'getSourceData'],
    events: ['event'],
};
exports.StreamManagerService = {
    name: 'streamManager',
    methods: ['getStream'],
    events: [],
};
exports.StreamService = {
    name: 'stream',
    methods: ['getStreamTraits', 'getLength', 'setLength', 'seek', 'readBytes', 'writeBytes', 'disposeStream'],
    events: [],
};
exports.WorkspaceTaskService = {
    name: 'workspaceTask',
    methods: ['getSupportedTasks', 'getTaskExecutions', 'runTask', 'runProjectTask', 'runDefaultBuildTask', 'terminateTask'],
    events: ['taskStarted', 'taskTerminated'],
};
//# sourceMappingURL=VSLS.js.map

/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const RpcConnectionErrors_1 = __webpack_require__(267);
const RpcClientProxy_1 = __webpack_require__(153);
const RpcServiceHandler_1 = __webpack_require__(154);
const vscs_utils_1 = __webpack_require__(8);
class RpcClientProxy extends RpcClientProxy_1.RpcClientProxyBase {
    constructor(rpcClient, logger) {
        super(logger);
        this.rpcClient = rpcClient;
    }
    ensureConnectionAsync() {
        return this.rpcClient.ensureConnectionAsync();
    }
}
class RpcClient extends RpcServiceHandler_1.RpcServiceHandler {
    constructor(connectionFactory, logger) {
        super(logger);
        this.connectionFactory = connectionFactory;
        this.connection = null;
        this.connectionFactoryMutex = new vscs_utils_1.Mutex();
        this.rpcClientProxy = new RpcClientProxy(this, logger);
        if (connectionFactory.dispose) {
            this.addToDisposables(connectionFactory);
        }
    }
    static fromRpcMessageStream(rpcMessageStreamCallback, logger, disposeCallback) {
        return new RpcClient({
            create: (rpcClient) => __awaiter(this, void 0, void 0, function* () {
                const rpcMessageStream = yield rpcMessageStreamCallback();
                const rpcConnection = rpcClient.createRpcConnection(rpcMessageStream, logger);
                rpcConnection.listen();
                return rpcConnection;
            }),
            dispose: () => {
                if (disposeCallback) {
                    disposeCallback();
                }
            },
        }, logger);
    }
    sendRequest(logger, serviceAndMethodName, progress, cancellationToken, ...args) {
        return this.rpcClientProxy.sendRequest(logger, serviceAndMethodName, progress, cancellationToken, ...args);
    }
    sendNotification(logger, serviceAndName, args) {
        return this.rpcClientProxy.sendNotification(logger, serviceAndName, args);
    }
    onConnect(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnectionAsync();
            handler();
        });
    }
    onClose(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnectionAsync();
            this.connection.onClose(handler);
        });
    }
    ensureConnectionInternal() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.connection) {
                yield this.connectionFactoryMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {
                    if (!this.connection) {
                        this.setConnection(yield this.connectionFactory.create(this));
                    }
                }));
            }
        });
    }
    ensureConnectionAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureConnectionInternal();
            return this.connection;
        });
    }
    setConnection(conection) {
        this.connection = conection;
        if (conection) {
            this.attachConnection(conection);
            this.addToDisposables(conection);
        }
    }
    attachConnection(connection) {
        connection.onClose(() => {
            this.trace.info(`RPC connection closed. disposed: "${this.isDisposed}"`);
            if (!this.isDisposed) {
                // The connection was closed unexpectedly (not due to extension deactivation).
                // Dispose with an error that causes further communication attemps to be
                // rejected with an appropriate exception.
                this.dispose(new RpcConnectionErrors_1.RpcConnectionClosedError());
            }
        });
        // add generic request support
        connection.onRequest((method, ...params) => {
            return this.onRequest(null, connection, method, ...params);
        });
        // Add progress and generic notification support.
        connection.onNotification((method, ...params) => {
            this.onNotification(connection, method, ...params);
        });
    }
}
exports.RpcClient = RpcClient;
//# sourceMappingURL=RpcClient.js.map

/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vso_logging_1 = __webpack_require__(18);
const RpcServiceHandler_1 = __webpack_require__(154);
const sendRpcRequest_1 = __webpack_require__(269);
const RpcUtils_1 = __webpack_require__(75);
/**
 * define a class capable to host multiple rpc services
 */
class RpcServer extends RpcServiceHandler_1.RpcServiceHandler {
    constructor(logger, notifyEventProvider) {
        super(logger);
        this.rpcSessionNumber = 0;
        this.rpcConnections = [];
        const defaultNotifyProvider = (serviceAndMethod, e) => {
            RpcUtils_1.notifyConnections(this.rpcConnections, serviceAndMethod, e, logger);
        };
        this.notifyEventProvider = notifyEventProvider || defaultNotifyProvider;
    }
    registerRemoteRpcService(serviceName, messageConnection) {
        this.trace.info(`adding remote rpc service:${serviceName}`);
        const serviceNamePrefix = serviceName + '.';
        messageConnection.onNotification((method, ...params) => {
            if (method.startsWith(serviceNamePrefix)) {
                this.notifyEventProvider(method, params);
            }
        });
        const disposable = this.onHandleNoneRequest((rpcConnection, method, ...params) => __awaiter(this, void 0, void 0, function* () {
            if (method.startsWith(serviceNamePrefix)) {
                return yield sendRpcRequest_1.sendRpcRequest(messageConnection, method, params, this.trace);
            }
        }));
        messageConnection.onClose(() => disposable.dispose());
        messageConnection.onDispose(() => disposable.dispose());
        return disposable;
    }
    sendNotification(logger, serviceAndName, args) {
        this.notifyEventProvider(serviceAndName, args);
        return Promise.resolve();
    }
    acceptRpcMessageStream(rpcMessageStream) {
        const messageConnection = this.createRpcConnection(rpcMessageStream, this.trace);
        const rpcSessionNumber = this.attachConnection(messageConnection);
        return [messageConnection, rpcSessionNumber];
    }
    attachConnection(messageConnection) {
        this.rpcConnections.push(messageConnection);
        const rpcSessionNumber = ++this.rpcSessionNumber;
        this.trace.verbose(`Rpc #${rpcSessionNumber} created`);
        messageConnection.onRequest((method, ...params) => {
            return this.onRequest((requestHandler, ...requestParams) => __awaiter(this, void 0, void 0, function* () {
                // inject rpc request context on the last argument
                const rpcRequestContext = {
                    connection: messageConnection,
                    session: rpcSessionNumber,
                };
                requestParams.push(rpcRequestContext);
                const result = yield Promise.resolve(requestHandler(...requestParams));
                const loggerResult = vso_logging_1.LoggerSettings.disableObfuscation
                    ? ` => ${JSON.stringify(result)}`
                    : '';
                this.trace.verbose(`> #${rpcSessionNumber} ${method}()${loggerResult}`);
                return result;
            }), messageConnection, method, ...params);
        });
        // Add progress and generic notification support.
        messageConnection.onNotification((method, ...params) => {
            this.onNotification(messageConnection, method, ...params);
        });
        const removeRpc = (event) => {
            const index = this.rpcConnections.indexOf(messageConnection);
            if (index !== -1) {
                this.trace.verbose(`Rpc #${rpcSessionNumber} removed event:${event}`);
                this.rpcConnections.splice(index, 1);
            }
        };
        messageConnection.onClose((e) => {
            removeRpc('closed');
        });
        messageConnection.onDispose((e) => {
            removeRpc('disposed');
        });
        return rpcSessionNumber;
    }
}
exports.RpcServer = RpcServer;
//# sourceMappingURL=RpcServer.js.map

/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __importStar(__webpack_require__(6));
const contentLengthHeaderPrefix = 'Content-Length: ';
const headersSeparator = '\r\n\r\n';
class RpcMessageWriter {
    constructor() {
        this.onErrorEmitter = new rpc.Emitter();
        this.onCloseEmitter = new rpc.Emitter();
        this.onError = this.onErrorEmitter.event;
        this.onClose = this.onCloseEmitter.event;
    }
    write(message) {
        const messageJson = JSON.stringify(message);
        const messageData = Buffer.from(messageJson);
        const headerData = Buffer.from(contentLengthHeaderPrefix + messageData.length + headersSeparator);
        const data = Buffer.alloc(headerData.length + messageData.length);
        headerData.copy(data, 0);
        messageData.copy(data, headerData.length);
        if (this.onSendCallback) {
            this.onSendCallback(data).catch((e) => {
                this.onErrorEmitter.fire([e, undefined, undefined]);
            });
        }
    }
    dispose() { }
}
exports.RpcMessageWriter = RpcMessageWriter;
//# sourceMappingURL=RpcMessageWriter.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(0).Buffer))

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/** Describes the kind of data to be formatted. */
var DataFormat;
(function (DataFormat) {
    DataFormat[DataFormat["Default"] = 'default'] = "Default";
    DataFormat[DataFormat["Email"] = 'email'] = "Email";
    DataFormat[DataFormat["Token"] = 'token'] = "Token";
    DataFormat[DataFormat["Path"] = 'path'] = "Path";
    DataFormat[DataFormat["Text"] = 'text'] = "Text";
    DataFormat[DataFormat["Uri"] = 'uri'] = "Uri";
    DataFormat[DataFormat["Omit"] = 'omit'] = "Omit";
    DataFormat[DataFormat["OmitDefault"] = 'omitDefault'] = "OmitDefault";
    DataFormat[DataFormat["Hide"] = 'hide'] = "Hide";
    DataFormat[DataFormat["SingleMember"] = 'singleMember'] = "SingleMember";
})(DataFormat = exports.DataFormat || (exports.DataFormat = {}));
/** Creates a decorator that saves the property format in a map attached to the class constructor. */
function dataFormat(...format) {
    return (target, propertyKey) => {
        if (!target.constructor.dataFormat) {
            target.constructor.dataFormat = {};
        }
        target.constructor.dataFormat[propertyKey] = format;
    };
}
exports.dataFormat = dataFormat;
//# sourceMappingURL=DataFormat.js.map

/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const RpcProxy_1 = __webpack_require__(265);
class RpcProxyCache {
    constructor(clientProxy, logger) {
        this.clientProxy = clientProxy;
        this.logger = logger;
        this.proxyMap = new Map();
    }
    getOrCreate(serviceInfo, traceName) {
        let proxy = this.proxyMap.get(serviceInfo.name);
        if (!proxy) {
            this.logger.info(`Creating proxy for ${serviceInfo.name} service`);
            proxy = RpcProxy_1.RpcProxy.create(serviceInfo, this.clientProxy, traceName ? this.logger.withName(traceName) : this.logger);
            this.proxyMap.set(serviceInfo.name, proxy);
        }
        return proxy;
    }
}
exports.RpcProxyCache = RpcProxyCache;
//# sourceMappingURL=RpcProxyCache.js.map

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __importStar(__webpack_require__(6));
/**
 * Implement IChannel with a set of callbacks and fire API.
 */
class Channel {
    constructor(send, close, adjustWindow, dispose) {
        this.send = send;
        this.onDataReceivedEmitter = new rpc.Emitter();
        this.onClosedEmitter = new rpc.Emitter();
        this.onDataReceived = this.onDataReceivedEmitter.event;
        this.onClosed = this.onClosedEmitter.event;
        const closeFunc = (error, cancellation) => Promise.resolve();
        this.close = close !== null && close !== void 0 ? close : closeFunc;
        const adjustWindowFunc = (messageLength) => { };
        this.adjustWindow = adjustWindow !== null && adjustWindow !== void 0 ? adjustWindow : adjustWindowFunc;
        const diposeFunc = () => { };
        this.dispose = dispose !== null && dispose !== void 0 ? dispose : diposeFunc;
    }
    fireDataReceived(data) {
        this.onDataReceivedEmitter.fire(data);
    }
    fireClosed(reason) {
        this.onClosedEmitter.fire(reason);
    }
}
exports.Channel = Channel;
//# sourceMappingURL=Channel.js.map

/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __importStar(__webpack_require__(6));
const events_1 = __webpack_require__(42);
/**
 * Create a duplex rpc stream loopback to connect to rpc connections on the same process.
 * @returns the pair of rpc message streams.
 */
function createDuplexRpcMessageStreams() {
    const readableStream1 = new DuplexReadableStream();
    const writableStream1 = new DuplexWritableStream(readableStream1);
    const readableStream2 = new DuplexReadableStream();
    const writableStream2 = new DuplexWritableStream(readableStream2);
    const messageReader1 = new rpc.StreamMessageReader(readableStream1);
    const messageWriter1 = new rpc.StreamMessageWriter(writableStream1);
    const messageReader2 = new rpc.StreamMessageReader(readableStream2);
    const messageWriter2 = new rpc.StreamMessageWriter(writableStream2);
    return [
        {
            reader: messageReader1,
            writer: messageWriter2,
        },
        {
            reader: messageReader2,
            writer: messageWriter1,
        },
    ];
}
exports.createDuplexRpcMessageStreams = createDuplexRpcMessageStreams;
class DuplexReadableStream extends events_1.EventEmitter {
}
class DuplexWritableStream extends events_1.EventEmitter {
    constructor(readableStream) {
        super();
        this.readableStream = readableStream;
    }
    write(str, encoding, cb) {
        this.readableStream.emit('data', str);
        return true;
    }
}
//# sourceMappingURL=createDuplexRpcMessageStreams.js.map

/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
exports.rpcContextExpectedMessage = 'Rpc Request context expected';
exports.rpcContextNoSessionMessage = 'No session being defined';
function assertRpcRequestContext(rpcRequestContext) {
    vscs_utils_1.assertDefined(rpcRequestContext, exports.rpcContextExpectedMessage);
    vscs_utils_1.assertDefined(rpcRequestContext.session, exports.rpcContextNoSessionMessage);
}
exports.assertRpcRequestContext = assertRpcRequestContext;
//# sourceMappingURL=assertRpcRequestContext.js.map

/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.19.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Describes the kind of data to be formatted. */
const vso_rpc_1 = __webpack_require__(152);
class EventArgs {
}
exports.EventArgs = EventArgs;
/** Notification class for contact service */
class NotifyContactServiceEventArgs extends EventArgs {
}
exports.NotifyContactServiceEventArgs = NotifyContactServiceEventArgs;
/** The presence status default options */
var PresenceStatus;
(function (PresenceStatus) {
    PresenceStatus[PresenceStatus["Unknown"] = 'unknown'] = "Unknown";
    PresenceStatus[PresenceStatus["Available"] = 'available'] = "Available";
    PresenceStatus[PresenceStatus["Busy"] = 'busy'] = "Busy";
    PresenceStatus[PresenceStatus["DoNotDisturb"] = 'doNotDisturb'] = "DoNotDisturb";
    PresenceStatus[PresenceStatus["Away"] = 'away'] = "Away";
    PresenceStatus[PresenceStatus["Invisible"] = 'invisible'] = "Invisible";
    PresenceStatus[PresenceStatus["Offline"] = 'offline'] = "Offline";
})(PresenceStatus = exports.PresenceStatus || (exports.PresenceStatus = {}));
/** Contact property types */
var ContactProperty;
(function (ContactProperty) {
    ContactProperty[ContactProperty["DisplayName"] = 'displayName'] = "DisplayName";
    ContactProperty[ContactProperty["Email"] = 'email'] = "Email";
    ContactProperty[ContactProperty["AvatarUri"] = 'avatarUri'] = "AvatarUri";
    ContactProperty[ContactProperty["Status"] = 'status'] = "Status";
})(ContactProperty = exports.ContactProperty || (exports.ContactProperty = {}));
/** Contact entity */
class Contact {
}
exports.Contact = Contact;
/** Empty parameters */
class EmptyRequest {
}
exports.EmptyRequest = EmptyRequest;
/** Empty result */
class EmptyResponse {
}
exports.EmptyResponse = EmptyResponse;
class PublishPresenceRequest {
}
exports.PublishPresenceRequest = PublishPresenceRequest;
/** Parameters passed during Initialize method */
class InitializeRequest {
}
__decorate([
    vso_rpc_1.dataFormat(PublishPresenceRequest),
    __metadata("design:type", PublishPresenceRequest)
], InitializeRequest.prototype, "publishPresence", void 0);
exports.InitializeRequest = InitializeRequest;
/** Definition of a workspace folder */
class WorkspaceFolder {
}
exports.WorkspaceFolder = WorkspaceFolder;
/** A workspace Uri from vscode */
class WorkspaceUri {
}
exports.WorkspaceUri = WorkspaceUri;
/** Capabilities that a service would offer */
class Capabilities {
}
exports.Capabilities = Capabilities;
/** Returned on the Initialized method */
class InitializeResponse {
}
__decorate([
    vso_rpc_1.dataFormat(Capabilities),
    __metadata("design:type", Capabilities)
], InitializeResponse.prototype, "capabilities", void 0);
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Contact)
], InitializeResponse.prototype, "selfContact", void 0);
exports.InitializeResponse = InitializeResponse;
/** The signed state option */
var SignedStatus;
(function (SignedStatus) {
    SignedStatus[SignedStatus["None"] = 'none'] = "None";
    SignedStatus[SignedStatus["SignedOut"] = 'signedOut'] = "SignedOut";
    SignedStatus[SignedStatus["SigningIn"] = 'signingIn'] = "SigningIn";
    SignedStatus[SignedStatus["SignedIn"] = 'signedIn'] = "SignedIn";
})(SignedStatus = exports.SignedStatus || (exports.SignedStatus = {}));
/** A presence status changed for a contact entity */
class ContactPresenceUpdate {
}
exports.ContactPresenceUpdate = ContactPresenceUpdate;
/** Batch of presence changed for multiple contacts */
class PresenceChangedNotification {
}
__decorate([
    vso_rpc_1.dataFormat(ContactPresenceUpdate),
    __metadata("design:type", Array)
], PresenceChangedNotification.prototype, "changes", void 0);
exports.PresenceChangedNotification = PresenceChangedNotification;
class ContactPropertyValueChanged {
}
exports.ContactPropertyValueChanged = ContactPropertyValueChanged;
class ContactChangedNotification {
}
exports.ContactChangedNotification = ContactChangedNotification;
class ContactPropertiesChangedNotification {
}
exports.ContactPropertiesChangedNotification = ContactPropertiesChangedNotification;
class InviteRequest {
}
exports.InviteRequest = InviteRequest;
class InviteReceivedNotification {
}
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Contact)
], InviteReceivedNotification.prototype, "fromContact", void 0);
exports.InviteReceivedNotification = InviteReceivedNotification;
class SelfContactNotification {
}
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Contact)
], SelfContactNotification.prototype, "contact", void 0);
exports.SelfContactNotification = SelfContactNotification;
class ContactsNotification {
}
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Array)
], ContactsNotification.prototype, "contacts", void 0);
exports.ContactsNotification = ContactsNotification;
class SuggestedContactsNotification extends ContactsNotification {
}
exports.SuggestedContactsNotification = SuggestedContactsNotification;
class ContactPresenceRequest {
}
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Array)
], ContactPresenceRequest.prototype, "contacts", void 0);
exports.ContactPresenceRequest = ContactPresenceRequest;
class ContactResponse {
}
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Contact)
], ContactResponse.prototype, "contact", void 0);
exports.ContactResponse = ContactResponse;
class ContactPresenceResponse {
}
__decorate([
    vso_rpc_1.dataFormat(ContactResponse),
    __metadata("design:type", Array)
], ContactPresenceResponse.prototype, "contacts", void 0);
exports.ContactPresenceResponse = ContactPresenceResponse;
class ContactPresenceDisposeRequest {
}
exports.ContactPresenceDisposeRequest = ContactPresenceDisposeRequest;
class SearchContactProperty {
}
exports.SearchContactProperty = SearchContactProperty;
class SearchContactsRequest {
}
__decorate([
    vso_rpc_1.dataFormat(SearchContactProperty),
    __metadata("design:type", Array)
], SearchContactsRequest.prototype, "queryOptions", void 0);
exports.SearchContactsRequest = SearchContactsRequest;
class SearchContactsResponse {
}
__decorate([
    vso_rpc_1.dataFormat(Contact),
    __metadata("design:type", Array)
], SearchContactsResponse.prototype, "results", void 0);
exports.SearchContactsResponse = SearchContactsResponse;
class MessagePayload {
}
exports.MessagePayload = MessagePayload;
class SendMessageRequest extends MessagePayload {
}
exports.SendMessageRequest = SendMessageRequest;
class MessageReceivedNotification extends MessagePayload {
}
exports.MessageReceivedNotification = MessageReceivedNotification;
class SignInRequest {
}
exports.SignInRequest = SignInRequest;
class SignedStateChangedNotification {
}
exports.SignedStateChangedNotification = SignedStateChangedNotification;
class AuthenticationRequiredNotification {
}
exports.AuthenticationRequiredNotification = AuthenticationRequiredNotification;
var Methods;
(function (Methods) {
    Methods["RequestInitializeName"] = "initialize";
    Methods["RequestDisposeName"] = "dispose";
    Methods["RequestInviteName"] = "inviteLink";
    Methods["RequestPublishPresenceName"] = "publishPresence";
    Methods["RequestContactPresenceName"] = "contactPresenceRequest";
    Methods["RequestContactPresenceDisposeName"] = "contactPresenceDispose";
    Methods["RequestSearchContactsName"] = "searchContacts";
    Methods["RequestSendMessageName"] = "sendMessageRequest";
    Methods["RequestSignInName"] = "signIn";
    Methods["RequestSignOutName"] = "signOut";
    Methods["NotifyPresenceChangedName"] = "presenceChanged";
    Methods["NotifySelfContactName"] = "selfContact";
    Methods["NotifyAvailableUsersName"] = "availableUsers";
    Methods["NotifyAvailableUsersAddedName"] = "availableUsersAdded";
    Methods["NotifyAvailableUsersRemovedName"] = "availableUsersRemoved";
    Methods["NotifyInviteReceivedName"] = "inviteLinkReceived";
    Methods["NotifyContactChangedName"] = "contactChanged";
    Methods["NotifyContactPropertiesChangedName"] = "contactPropertiesChanged";
    Methods["NotifySuggestedUsersName"] = "suggestedUsers";
    Methods["NotifyCapabilitiesUpdateName"] = "capabilitiesUpdate";
    Methods["NotifyMessageReceivedName"] = "messageReceived";
    Methods["NotifySignedStateChangedName"] = "signedStateChanged";
    Methods["NotifyAuthenticationRequiredName"] = "authenticationRequired";
})(Methods = exports.Methods || (exports.Methods = {}));
exports.ContactServiceProvider = {
    methods: ['request'],
    events: ['notified'],
};
//# sourceMappingURL=ContactProtocol.js.map

/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.workspaceServiceClient = {
    name: 'workspaceServiceClient',
    methods: [
        'getSessionInfo',
        'join',
        'disconnect',
        'openStreamingChannel',
        'keepAlive',
        'checkConnection',
        'setCheckConnectionOptions',
    ],
    events: ['hostConnectionChanged', 'workspaceMetricsUpdated'],
};
//# sourceMappingURL=WorkspaceServiceClient.js.map

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Error when a workspace has no host connected, hence no join could happen.
 */
class NoHostConnectedError extends Error {
    constructor(workspaceId) {
        super(`Host not connected to workspace:${workspaceId}`);
        this.workspaceId = workspaceId;
    }
}
exports.NoHostConnectedError = NoHostConnectedError;
/**
 * Type of relay connection error types.
 */
var RelayErrorType;
(function (RelayErrorType) {
    RelayErrorType[RelayErrorType["ConnectionError"] = 1] = "ConnectionError";
    RelayErrorType[RelayErrorType["SasInvalid"] = 2] = "SasInvalid";
    RelayErrorType[RelayErrorType["EndpointNotFound"] = 3] = "EndpointNotFound";
    RelayErrorType[RelayErrorType["ListenerOffline"] = 4] = "ListenerOffline";
    RelayErrorType[RelayErrorType["ServerError"] = 5] = "ServerError";
})(RelayErrorType = exports.RelayErrorType || (exports.RelayErrorType = {}));
/**
 * Error used when a connection to an Azure relay failed.
 */
class RelayConnectionError extends Error {
    constructor(message, errorContext) {
        super(message);
        this.errorContext = errorContext;
    }
}
exports.RelayConnectionError = RelayConnectionError;
//# sourceMappingURL=Errors.js.map

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RPC_ERR_NO_HOST_NOT_CONNECTED = 270;
exports.RPC_ERR_RELAY_CONNECTIONY_SSH = 271;
//# sourceMappingURL=RpcErrorCodes.js.map

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class TelemetryEventNames {
}
exports.TelemetryEventNames = TelemetryEventNames;
TelemetryEventNames.WORKSPACE_RECONNECT = 'workspace-reconnect';
class TelemetryPropertyNames {
}
exports.TelemetryPropertyNames = TelemetryPropertyNames;
TelemetryPropertyNames.RECONNECT_SUCCEEDED = 'reconnect-succeeded';
TelemetryPropertyNames.RECONNECT_ELAPSED = 'reconnect-elapsed';
TelemetryPropertyNames.RECONNECT_RETRY_COUNT = 'reconnect-retry-count';
TelemetryPropertyNames.RECONNECT_ERROR_MESSAGE = 'reconnect-error-message';
TelemetryPropertyNames.RECONNECT_ERROR_REASON = 'reconnect-error-reason';
//# sourceMappingURL=telemetryStrings.js.map

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc = __importStar(__webpack_require__(6));
const vscs_utils_1 = __webpack_require__(8);
const checkWorkspaceClient_1 = __webpack_require__(271);
const vso_rpc_1 = __webpack_require__(152);
/**
 * A base class to implement the IWorkspaceClient interface contract.
 */
class WorkspaceClientBase extends vscs_utils_1.DisposableClass {
    constructor(rcpClientInstance, logger) {
        super(logger);
        this.rcpClientInstance = rcpClientInstance;
        this.onHostConnectionChangedEmitter = new rpc.Emitter();
        this.onHostConnectionChanged = this.onHostConnectionChangedEmitter.event;
        this.onWorkspaceMetricsUpdatedEmitter = new rpc.Emitter();
        this.onWorkspaceMetricsUpdated = this.onWorkspaceMetricsUpdatedEmitter.event;
        this.rpcProxyCache = new vso_rpc_1.RpcProxyCache(this.rcpClientInstance, logger);
        this.addToDisposables(vscs_utils_1.createDisposable(() => {
            this.stopCheckConnection('disposed');
        }));
    }
    get rpcClient() {
        return this.rcpClientInstance;
    }
    getServiceProxy(serviceInfo, traceName) {
        return this.rpcProxyCache.getOrCreate(serviceInfo, traceName);
    }
    setCheckConnectionOptions(options) {
        if (options.enabled && this.checkConnectionDisposable === undefined && !this.isDisposed) {
            this.ensureIsJoined();
            this.checkConnectionDisposable = checkWorkspaceClient_1.checkWorkspaceClient(this, this.trace, options.metricsTimeout, options.checkConnectionTimeout, () => this.canCheckConnection());
        }
        else if (!options.enabled) {
            this.stopCheckConnection('connection options');
        }
        return Promise.resolve();
    }
    ensureIsJoined() { }
    canCheckConnection() {
        return true;
    }
    stopCheckConnection(reason) {
        this.trace.info(`stopCheckConnection reason:'${reason}'`);
        if (this.checkConnectionDisposable !== undefined) {
            this.checkConnectionDisposable.dispose();
            this.checkConnectionDisposable = undefined;
        }
    }
}
exports.WorkspaceClientBase = WorkspaceClientBase;
//# sourceMappingURL=WorkspaceClientBase.js.map

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const vscode_command_framework_1 = __webpack_require__(3);
const IGitHubApi_1 = __webpack_require__(74);
const throwResponseError_1 = __webpack_require__(272);
const localize = nls.loadMessageBundle();
class GitHubEnvironmentsApi {
    constructor(api, util, httpClient) {
        this.api = api;
        this.util = util;
        this.httpClient = httpClient;
        this.vssaasRequestId = 'vssaas-request-id';
        this.logger = vscode_command_framework_1.traceSource.withName('API');
    }
    getRepo(owner, repo) {
        return this.api.getRepo(owner, repo);
    }
    isCreationAllowed(owner, repo) {
        return this.api.isCreationAllowed(owner, repo);
    }
    getBranch(owner, repo, branch) {
        return this.api.getBranch(owner, repo, branch);
    }
    getDirectories(owner, repo, branchOrTreeSha) {
        return this.api.getDirectories(owner, repo, branchOrTreeSha);
    }
    getMachinesForCreation(repo, ref, location) {
        return this.api.getAvailableMachinesForRepo(repo, ref, location);
    }
    getAvailableMachines(codespace) {
        return this.api.getAvailableMachinesForCodespace(codespace);
    }
    listRepos(query) {
        if (query && query.includes('/')) {
            const [user, repo] = query.split('/');
            const repoPrefix = repo ? `${repo}+` : '';
            query = `${repoPrefix}user:${user}`;
        }
        return this.api.listRepos(query);
    }
    listCodespaces() {
        return this.api.listCodespaces();
    }
    updateMachine(codespace, machine) {
        return this.api.updateMachine(codespace, machine);
    }
    listBranchNames(owner, name) {
        return this.api.listBranchNames(owner, name);
    }
    async getCodespaceByName(name) {
        return this.api.getCodespaceByName(name);
    }
    async getCodespace(environmentId) {
        const codespaces = (await this.api.listCodespaces()).codespaces;
        const codespaceInfo = codespaces.find((ws) => ws.environment_id === environmentId);
        if (!codespaceInfo) {
            return undefined;
        }
        return await this.api.getCodespace(codespaceInfo);
    }
    async provisionCodespace(repo, repoRef, location, options = {}) {
        const codespaceMetadata = await this.api.createCodespace(repo, repoRef, location, options);
        let codespace = await this.api.getCodespace(codespaceMetadata);
        // Poll for up to 2 minutes for environment info to appear on GitHub codespace record
        const timeout = Date.now() + 2 * 60 * 1000;
        while (!(codespace === null || codespace === void 0 ? void 0 : codespace.environment_id) && Date.now() < timeout) {
            await this.util.delay(1000);
            codespace = await this.api.getCodespace(codespaceMetadata);
        }
        if (!codespace) {
            throw new vscode_command_framework_1.CommandError({
                message: 'Error retrieving details for newly provisioned codespace',
                userMessage: localize('error.unableToGetCreatedCodespace', 'Unable to retrieve details for created codespace'),
            });
        }
        return codespace;
    }
    deleteCodespace(codespace) {
        return this.api.deleteCodespace(codespace.name);
    }
    async shutdownCodespace(codespace) {
        await this.makeVsoActionApiCall(codespace, 'shutdown');
        const result = await this.api.getCodespace(codespace);
        if (!result) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToSuspendCodespace', 'Unable to stop the codespace.'),
                message: 'Error retrieving codespace details after stopping',
            });
        }
        return result;
    }
    async startEnvironment(codespace) {
        await this.api.startCodespace(codespace);
        const result = await this.api.getCodespace(codespace);
        if (!result) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToStartCodespace', 'Unable to start the codespace.'),
                message: 'Error retrieving codespace details after starting',
            });
        }
        return result;
    }
    async forkCodespaceRepository(codespace) {
        return this.api.forkCodespaceRepository(codespace);
    }
    async updateRecentFoldersList(codespace, newList) {
        const token = await this.api.getCascadeToken(codespace);
        if (!token) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetCascadeToken', 'Unable to retrieve a cascade token.'),
                message: 'GitHubEnvironmentApi found no cached tokens',
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
            });
        }
        const endpoint = this.util.getServiceApiUrl(`/environments/${codespace.environment_id}/folder`, codespace);
        let response = await this.httpClient
            .patch(endpoint, newList, {
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
            },
            maxRedirects: 0,
            validateStatus: (x) => (x >= 200 && x < 300) || x === 307,
        })
            .catch((e) => throwResponseError_1.throwResponseError(e));
        if (response.status === 307) {
            response = await this.httpClient
                // tslint:disable-next-line: no-string-literal
                .patch(response.headers['location'], newList, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
            })
                .catch((e) => throwResponseError_1.throwResponseError(e));
        }
        if (response.status !== 200) {
            const correlationId = response.headers[this.vssaasRequestId];
            this.logger.error(`updateRecentFoldersList error, Correlation ID: ${correlationId}`);
            throw new Error(`Status from recent folders update was ${response.status}`);
        }
        return response.data;
    }
    async primePortForwardingConnection(codespace, port) {
        const token = await this.api.getCascadeToken(codespace);
        if (!token) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetCascadeToken', 'Unable to retrieve a cascade token.'),
                message: 'GitHubEnvironmentApi found no cached tokens',
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
            });
        }
        const endpointTemplate = this.getPortForwardingUrlTemplate(codespace);
        const managementEndpoint = endpointTemplate.replace('{0}', 'management');
        await this.httpClient
            .post(`${managementEndpoint}/api/v1/PortForwardingConnections`, {
            id: codespace.environment_id,
            port,
        }, {
            headers: { Authorization: `Bearer ${token}` },
        })
            .catch((err) => {
            this.logger.error(`connection priming error.`, err);
        });
        return this.getPortForwardingServiceAddress(codespace, port);
    }
    async getPortForwardingServiceAddress(codespace, port) {
        const endpointTemplate = this.getPortForwardingUrlTemplate(codespace);
        const portHostname = endpointTemplate.replace('{0}', `${codespace.name}-${port}`);
        return portHostname;
    }
    async makeVsoActionApiCall(codespace, action) {
        const token = await this.api.getCascadeToken(codespace);
        if (!token) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetCascadeToken', 'Unable to retrieve a cascade token.'),
                message: 'GitHubEnvironmentApi found no cached tokens',
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
            });
        }
        const endpoint = this.util.getServiceApiUrl(`/environments/${codespace.environment_id}/${action}`, codespace);
        let response = await this.httpClient
            .post(endpoint, null, {
            headers: { Authorization: `Bearer ${token}` },
            maxRedirects: 0,
            validateStatus: (x) => (x >= 200 && x < 300) || x === 307,
        })
            .catch((e) => throwResponseError_1.throwResponseError(e, { nlsParameters: [codespace.name] }));
        if (response.status === 307) {
            response = await this.httpClient
                // tslint:disable-next-line: no-string-literal
                .post(response.headers['location'], null, {
                headers: { Authorization: `Bearer ${token}` },
            })
                .catch((e) => throwResponseError_1.throwResponseError(e, { nlsParameters: [codespace.name] }));
        }
        if (response.status >= 300) {
            const correlationId = response.headers[this.vssaasRequestId];
            this.logger.error(`(${action}) error, Correlation ID: ${correlationId}`);
        }
        return response.data;
    }
    getPortForwardingUrlTemplate(codespace) {
        switch (codespace.vscs_target) {
            case IGitHubApi_1.VscsTarget.Local:
                return 'https://{0}.githubpreview.localhost';
            case IGitHubApi_1.VscsTarget.Development:
                return 'https://{0}.dev.githubpreview.dev';
            case IGitHubApi_1.VscsTarget.Ppe:
                return 'https://{0}.ppe.githubpreview.dev';
            case IGitHubApi_1.VscsTarget.Production:
                return 'https://{0}.githubpreview.dev';
            default:
                return 'https://{0}.githubpreview.dev';
        }
    }
    async exportCodespace(codespace) {
        return this.api.exportCodespace(codespace);
    }
    async exportExists(codespace) {
        return this.api.exportExists(codespace);
    }
}
exports.GitHubEnvironmentsApi = GitHubEnvironmentsApi;


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const environmentInfo_1 = __webpack_require__(32);
const localize = nls.loadMessageBundle();
function getLocalizedServiceMessage(messageCode) {
    return localizeServiceMessage(messageCode);
}
exports.getLocalizedServiceMessage = getLocalizedServiceMessage;
function localizeServiceMessage(errorCode) {
    switch (errorCode) {
        case environmentInfo_1.EnvironmentMessageCodes.exceededQuota:
            return localize('error.environment.exceededQuota', 'You have exceeded the codespace quota.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentNameAlreadyExists:
            return localize('error.environment.environmentNameAlreadyExists', 'Codespace {} already exists.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentDoesNotExist:
            return localize('error.environment.environmentDoesNotExist', 'Codespace {} does not exist.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentNotAvailable:
            return localize('error.environment.environmentNotAvailable', 'Codespace {} is not in available state.');
        case environmentInfo_1.EnvironmentMessageCodes.environmentNotShutdown:
            return localize('error.environment.environmentNotShutdown', 'Codespace {} is not stopped.');
        case environmentInfo_1.EnvironmentMessageCodes.unableToAllocateResources:
            return localize('error.environment.unableToAllocateResources', 'Please try again in a few minutes.');
        case environmentInfo_1.EnvironmentMessageCodes.unableToAllocateResourcesWhileStarting:
            return localize('error.environment.unableToAllocateResourcesWhileStarting', 'Please try again in a few minutes.');
        case environmentInfo_1.EnvironmentMessageCodes.requestedAutoShutdownDelayMinutesIsInvalid:
            return localize('error.environment.requestedAutoShutdownDelayMinutesIsInvalid', 'Requested auto-stop delay is invalid.');
        case environmentInfo_1.EnvironmentMessageCodes.unableToUpdateSku:
            return localize('error.environment.unableToUpdateSku', "Codespace's current instance type does not support any changes.");
        case environmentInfo_1.EnvironmentMessageCodes.requestedSkuIsInvalid:
            return localize('error.environment.requestedSkuIsInvalid', "Codespace's current instance type does not support the requested instance type.");
        case environmentInfo_1.EnvironmentMessageCodes.heartbeatUnhealthy:
            return localize('error.environment.heartbeatUnhealthy', 'The codespace was reported as unhealthy, stop and restart the codespace.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCreationFailed:
            return localize('error.environment.customContainersCreationFailed', 'The codespace creation based on devcontainer.json failed, please review the console for more details.');
        // CLI MESSAGES
        case environmentInfo_1.EnvironmentMessageCodes.shutdownFailed:
            return localize('error.environment.shutdownFailed', 'Error Code: 1001');
        case environmentInfo_1.EnvironmentMessageCodes.cMBMutexFailure:
            return localize('error.environment.cMBMutexFailure', 'Error Code: 1002');
        case environmentInfo_1.EnvironmentMessageCodes.cMBGeneralError:
            return localize('error.environment.cMBGeneralError', 'Error Code: 1003');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerFailedToStartContainer:
            return localize('error.environment.startEnvironmentHandlerFailedToStartContainer', 'Failed to start container. ');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerRequiredParameterMissing:
            return localize('error.environment.startEnvironmentHandlerRequiredParameterMissing', 'Error Code: 1005');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerKitchensinkMissing:
            return localize('error.environment.startEnvironmentHandlerKitchensinkMissing', 'Error Code: 1006');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerLiveshareLoginFailed:
            return localize('error.environment.startEnvironmentHandlerLiveshareLoginFailed', 'Error Code: 1007');
        case environmentInfo_1.EnvironmentMessageCodes.startEnvironmentHandlerMoreThanOneContainerFoundOnRestart:
            return localize('error.environment.startEnvironmentHandlerMoreThanOneContainerFoundOnRestart', 'Error Code: 1008');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersGeneralError:
            return localize('error.environment.customContainersGeneralError', 'Unknown error in codespace creation.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersKitchensinkCreationFailed:
            return localize('error.environment.customContainersKitchensinkCreationFailed', 'Failed to create container with standard image.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersKitchensinkStartFailed:
            return localize('error.environment.customContainersKitchensinkStartFailed', 'Failed to start standard container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCloneFailed:
            return localize('error.environment.customContainersCloneFailed', 'The repository could not be cloned.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersPrivateClonetimeout:
            return localize('error.environment.customContainersPrivateClonetimeout', 'Timeout waiting while attempting to clone a private repository. ');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotPullImage:
            return localize('error.environment.customContainersCouldNotPullImage', 'Could not pull the image referenced in the DockerFile');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotBuildUserImage:
            return localize('error.environment.customContainersCouldNotBuildUserImage', 'The custom container could not be built.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotCreateUserContainer:
            return localize('error.environment.customContainersCouldNotCreateUserContainer', 'The custom container failed to create.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCouldNotRunUserContainer:
            return localize('error.environment.customContainersCouldNotRunUserContainer', 'The custom container failed to run.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCLICopyFailed:
            return localize('error.environment.customContainersCLICopyFailed', 'Failed to copy the GitHub Codespaces Agent to the custom container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersDependenciesFailed:
            return localize('error.environment.customContainersDependenciesFailed', 'The GitHub Codespaces Agent dependencies failed to install in the custom container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersCLIStartFailed:
            return localize('error.environment.customContainersCLIStartFailed', 'The GitHub Codespaces Agent failed to start in the custom container.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersIncorrectUserID:
            return localize('error.environment.customContainersIncorrectUserID', 'The dockerfile or image references a user id instead of a username. Please configure the remoteUser or containerUser property in devcontainer.json');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeGeneralError:
            return localize('error.environment.customContainersComposeGeneralError', 'Unknown error running docker compose.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeValidationError:
            return localize('error.environment.customContainersComposeValidationError', 'Docker Compose support requires a docker-compose file and the service property to be set in devcontainer.json');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeConfigError:
            return localize('error.environment.customContainersComposeConfigError', 'Error inspecting docker-compose file for services. Please check your docker-compose file for issues.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersWrongServiceError:
            return localize('error.environment.customContainersWrongServiceError', 'The specified service was not found in the docker-compose file.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeUpError:
            return localize('error.environment.customContainersComposeUpError', 'Running docker-compose up failed. Please inspect the logs for more information.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainerInvalidDevContainer:
            return localize('error.environment.customContainerInvalidDevContainer', 'There was an issue reading devContainer.json, please verify the file.');
        case environmentInfo_1.EnvironmentMessageCodes.customContainersComposeUnsupportedVersion:
            return localize('error.environment.customContainersComposeUnsupportedVersion', 'Unsupported version inside docker-compose files. Minimum version is 3.');
        default:
            return localize('error.environment.unknown', 'Unknown error, please try again.');
    }
}


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class GitHubLocationsApi {
    constructor(httpClient, util) {
        this.httpClient = httpClient;
        this.util = util;
    }
    async getLocationsList() {
        const endpoint = this.util.getServiceApiUrl(`/locations`);
        const response = await this.httpClient.get(endpoint);
        if (response.status !== 200) {
            throw new Error(`Status from locations lookup was ${response.status}`);
        }
        return response.data;
    }
}
exports.GitHubLocationsApi = GitHubLocationsApi;


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const axios_retry_1 = __webpack_require__(148);
const IGitHubApi_1 = __webpack_require__(74);
const throwResponseError_1 = __webpack_require__(272);
const vscode_command_framework_1 = __webpack_require__(3);
const constants_1 = __webpack_require__(149);
const injectMessageParameters_1 = __webpack_require__(22);
const configuration_1 = __webpack_require__(51);
const vscs_utils_1 = __webpack_require__(8);
const areOrgSamlTokensMissing_1 = __webpack_require__(602);
const localize = nls.loadMessageBundle();
class GitHubApi {
    constructor(tokenProvider, octokitProvider, dependencies) {
        this.tokenProvider = tokenProvider;
        this.octokitProvider = octokitProvider;
        this.dependencies = dependencies;
        this.userReposCache = [];
        this.githubRequestIdHeader = 'x-github-request-id';
        this.logger = vscode_command_framework_1.traceSource.withName('API');
    }
    async listCodespaces() {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToListCodespaces', 'List codespaces request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `list codespaces request failed with status ${status}`,
                code,
            });
        };
        let codespaces = [];
        let missingCodespacesDueToSaml = false;
        // The user might have a lot of codespaces, so we need to loop over them in pages.
        // Load 30 at a time, and stop looping when we get to the end of the list, which is
        // either an empty list or a result set that is smaller than the page size we asked for.
        const pageSize = 30;
        let page = 1;
        while (true) {
            const response = await this.tryMakeRequest(this.makeFullApiUri(`/user/codespaces?page=${page}&per_page=${pageSize}`), 'GET');
            if (!response) {
                this.logger.error('listCodespaces error. No response received.');
                throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
            }
            const correlationId = response.headers[this.githubRequestIdHeader];
            if (response.status !== 200) {
                this.logger.error(`listCodespaces error. Correlation ID: ${correlationId}`);
                throwStub(() => throwCommandError(response.status, correlationId));
            }
            codespaces.push(...response.data.codespaces);
            if (areOrgSamlTokensMissing_1.areOrgSamlTokensMissing(response)) {
                missingCodespacesDueToSaml = true;
            }
            if (response.data.codespaces.length < pageSize) {
                // result set is smaller than the page size. We are at the end.
                return { codespaces, areOrgSamlTokensMissing: missingCodespacesDueToSaml };
            }
            page++;
        }
    }
    async getCodespaceByName(name) {
        const url = this.makeFullApiUri(`/user/codespaces/${name}`);
        return this.getCodespaceByUrl(url);
    }
    async getCodespace(codespace) {
        return this.getCodespaceByUrl(codespace.url);
    }
    async getCodespaceByUrl(url) {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToGetCodespace', 'Get codespace request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `get codespace request failed with status ${status}`,
                code,
            });
        };
        /**
         * Make the request with retries.
         */
        return await vscs_utils_1.withRetries(async (retriesLeft) => {
            var _a;
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            trace.info(`making GET request for "${url}"`);
            // Add extra query params to get additional internal info and force a live refresh
            url = url + '?internal=true&refresh=true';
            const response = await this.tryMakeRequest(url, 'GET');
            if (!response) {
                trace.error('getCodespace error. No response received.');
                return throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
            }
            if (response.status === 200) {
                return response.data;
            }
            if (response.status === 404) {
                return;
            }
            const correlationId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[this.githubRequestIdHeader];
            trace.error(`getCodespace error. Correlation ID: ${correlationId}`);
            return throwCommandError(response.status, correlationId);
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async createCodespace(repo, ref, location, options = {}) {
        var _a, _b;
        const body = {
            ref,
            location,
            machine: options.skuName,
            working_directory: options.workingDirectory,
        };
        const vscsTarget = await this.getVscsTarget();
        if (vscsTarget) {
            body.vscs_target = vscsTarget;
            if (vscsTarget === IGitHubApi_1.VscsTarget.Local) {
                const vscsTargetUrl = await this.getVscsTargetUrl();
                if (vscsTargetUrl) {
                    body.vscs_target_url = vscsTargetUrl;
                }
            }
        }
        const vscsRegion = await this.getVscsRegion();
        if (vscsRegion) {
            body.location = vscsRegion;
        }
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/repos/${repo.owner}/${repo.name}/codespaces`), 'POST', body);
        if (response.status < 300) {
            return response.data;
        }
        if (response.status === 402) {
            const learnMore = { title: localize('button.learnMore', 'Learn more') };
            const billingMessage = ((_a = response.data) === null || _a === void 0 ? void 0 : _a.message) || 'Billing Error';
            this.dependencies.notificationUtil
                .showErrorMessage(billingMessage, learnMore)
                .then(async (msgItem) => {
                if (msgItem === learnMore) {
                    await this.dependencies.extensionsUtil.openLinkInBrowser('https://aka.ms/codespaces-billing-limit');
                }
            });
            throw new vscode_command_framework_1.CommandError({
                userMessage: billingMessage
            }).withSuppressUserNotification(true);
        }
        const errorDetails = ((_b = response.data) === null || _b === void 0 ? void 0 : _b.message) || 'Unknown Error';
        const correlationId = response.headers[this.githubRequestIdHeader];
        const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToCreateCodespace', 'Request failed with status {}: {}. Correlation ID: {}'), response.status, errorDetails, correlationId);
        const code = response.status === 403
            ? vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED
            : vscode_command_framework_1.CommandErrorCode.REMOTE_DEPENDENCY;
        this.logger.error(`createCodespace error. Correlation ID: ${correlationId}`);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `Create codespace request failed with status ${response.status}: ${errorDetails}`,
            code,
        });
    }
    async deleteCodespace(codespaceName) {
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/user/codespaces/${codespaceName}`), 'DELETE');
        const correlationId = response.headers[this.githubRequestIdHeader];
        if (response.status < 300) {
            return;
        }
        this.logger.error(`deleteCodespace error. Correlation ID: ${correlationId}`);
        const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToDeleteCodespace', 'Delete codespace request failed with status {}: {}. Correlation ID: {}'), response.status, response.data.message, correlationId);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `delete codespace request failed: ${response.status}`,
        });
    }
    async startCodespace(codespace) {
        var _a;
        const throwCommandError = (status, message, correlationArgId, code) => {
            // The error is from GH
            const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToStartCodespace', 'Start codespace request failed with status {}: {}. Correlation ID: {}'), status, message, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `Start codespace request failed with status ${status}: ${message}`,
                code,
            });
        };
        try {
            const response = await this.makeRequest(codespace.start_url, 'POST', undefined, undefined);
            if (!response) {
                this.logger.error('startCodespace error. No response received.');
                throwCommandError(499, 'no response', undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
            }
            // On success, the response will be environment record from the VSCS FE
            return response.data;
        }
        catch (e) {
            const correlationId = e.response.headers[this.githubRequestIdHeader];
            this.logger.error(`startCodespace error. Correlation ID: ${correlationId}`);
            this.checkMachinePolicyCode(e.response.status, e.response.data.message, codespace);
            this.checkSpendingLimitCode(e.response.status, codespace);
            if ((_a = e.response.data) === null || _a === void 0 ? void 0 : _a.message) {
                const code = e.response.status >= 400 && e.response.status < 500 ? vscode_command_framework_1.CommandErrorCode.BAD_REQUEST : undefined;
                throwStub(() => throwCommandError(e.response.status, e.response.data.message, correlationId, code));
            }
            else {
                // The error is from VSCS
                throwResponseError_1.throwResponseError(e, { nlsParameters: [codespace.name] });
            }
        }
    }
    async forkCodespaceRepository(codespace) {
        var _a;
        try {
            // When connected from VS Code desktop, OAuth is normally used on the client side
            // instead of the repo-scoped GitHub App token. But the fork endpoint requires
            // the repo-scoped token, so we need to first exchange for one.
            let repoScopedToken;
            if (!this.dependencies.configurationManager.isRunningInWeb) {
                repoScopedToken = (await this.makeTokenRequest(codespace, true)).repository_token;
            }
            const username = await this.getUsername();
            const response = await this.makeRequest(this.makeFullApiUri(`/vscs_internal/user/${username}/codespaces/${codespace.name}/fork_repo`), 'POST', undefined, undefined, repoScopedToken);
            if (!response) {
                this.logger.error('Forking codespace repo failed. No response received.');
                return;
            }
            return response.data;
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[this.githubRequestIdHeader];
            this.logger.error(`Forking codespace repo failed. Correlation ID: ${correlationId}. Error: {e.message}`);
        }
        return;
    }
    async exportCodespace(codespace) {
        var _a, _b, _c;
        const username = await this.getUsername();
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/vscs_internal/user/${username}/codespaces/${codespace.name}/export`), 'POST');
        if (!response) {
            this.logger.error('Exporting codespace failed. No response received.');
            return;
        }
        if (response.status === 404) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToExport', 'Export changes failed because the codespace could not be found.'),
                message: 'Export changes failed because the codespace could not be found.',
            });
        }
        if (response.status === 422) {
            if (((_a = response.data) === null || _a === void 0 ? void 0 : _a.message) === 'An export of that codespace is already in progress.') {
                throw new vscode_command_framework_1.CommandError({
                    userMessage: localize('error.exportInProgress', 'An export is already in progress.'),
                    message: 'An export is already in progress.',
                });
            }
            if (((_b = response.data) === null || _b === void 0 ? void 0 : _b.message) === 'codespace must be provisioned') {
                throw new vscode_command_framework_1.CommandError({
                    userMessage: localize('error.codespaceNeedsProvisioning', 'Cannot export changes until codespace finishes provisioning.'),
                    message: 'Cannot export changes until codespace finishes provisioning.',
                });
            }
        }
        return (_c = response.data) === null || _c === void 0 ? void 0 : _c.export_branch;
    }
    async exportExists(codespace) {
        const username = await this.getUsername();
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/vscs_internal/user/${username}/codespaces/${codespace.name}`), 'GET');
        if ((response === null || response === void 0 ? void 0 : response.status) === 200) {
            return response.data.fresh_export_exists;
        }
        return false;
    }
    async getAvailableMachinesForRepo(repo, ref, location) {
        const target = await this.getVscsTarget();
        const targetQueryParam = target ? `&vscs_target=${target}` : '';
        // Warning, if you override the region in the codespaces settings file then
        // the region passed in will be ignored.
        const vscsRegion = await this.getVscsRegion();
        if (vscsRegion) {
            location = vscsRegion;
        }
        const url = this.makeFullApiUri(`/repos/${repo.owner}/${repo.name}/codespaces/machines?&ref=${encodeURIComponent(ref)}${targetQueryParam}&location=${location}`);
        return await this.listMachinesInternal(url);
    }
    getAvailableMachinesForCodespace(codespace) {
        return this.listMachinesInternal(codespace.machines_url);
    }
    async updateMachine(codespace, machine) {
        const body = {
            machine: machine,
        };
        const response = await this.tryMakeRequest(codespace.url, 'PATCH', body);
        if (response.status < 300) {
            return true;
        }
        else {
            const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToUpdateMachineType', 'Failed to update machine type with status {}'), response.status);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `update machine type request failed with status ${response.status}`,
            });
        }
    }
    async getCascadeToken(codespace) {
        return (await this.makeTokenRequest(codespace, false)).token;
    }
    async getRepo(owner, repo) {
        const octokit = await this.octokitProvider.getOctokit();
        const response = await octokit.repos.get({ owner, repo });
        if (response.status === 200) {
            const { id, default_branch } = response.data;
            return { id, owner, name: repo, defaultBranch: default_branch };
        }
        const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToGetRepo', 'Get repo request failed with status {}'), response.status);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `get repo request failed with status ${response.status}`,
        });
    }
    async isCreationAllowed(owner, repo) {
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/vscs_internal/repository/${owner}/${repo}/codespaces/current_user_can_create`), 'GET');
        if (response.status !== 200) {
            return false;
        }
        return response.data.can_create_codespace;
    }
    async getBranch(owner, repo, branch) {
        const octokit = await this.octokitProvider.getOctokit();
        const response = await octokit.repos.getBranch({
            owner,
            repo,
            branch,
        });
        if (response.status === 200) {
            return { name: branch };
        }
        const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToGetBranch', 'Get branch request failed with status {}'), response.status);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `get branch request failed with status ${response.status}`,
        });
    }
    async listBranchNames(owner, repo) {
        const octokit = await this.octokitProvider.getOctokit();
        const response = await octokit.repos.listBranches({
            per_page: 100,
            owner,
            repo,
        });
        if (response.status === 200) {
            return response.data.map((br) => br.name);
        }
        const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToListBranches', 'List branches request failed with status {}'), response.status);
        throw new vscode_command_framework_1.CommandError({
            userMessage,
            message: `list branches request failed with status ${response.status}`,
        });
    }
    async getDirectories(owner, repo, branchOrTreeSha) {
        return await vscs_utils_1.withRetries(async (retriesLeft) => {
            var _a;
            const trace = this.logger.createChild(`retries-left-${retriesLeft}`);
            trace.info(`getDirectories request "/repos/${owner}/${repo}/git/trees/${branchOrTreeSha}"`);
            const octokit = await this.octokitProvider.getOctokit();
            const response = await octokit.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {
                owner: owner,
                repo: repo,
                tree_sha: branchOrTreeSha,
            });
            if (response.status === 200) {
                const data = response.data;
                const directories = data.tree.filter((x) => x.type === 'tree');
                return directories;
            }
            const correlationId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[this.githubRequestIdHeader];
            trace.error(`getDirectories error. Correlation ID: ${correlationId}`);
            const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.failedToGetDirectories', 'Get directories request failed with status {}. Correlation ID: {}'), response.status, correlationId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `Get directories request failed with status ${response.status}. Correlation ID: ${correlationId}`,
            });
        }, {
            isAggregateError: false,
            retryDelay: 0.25 * vscs_utils_1.TIME_SECOND_MS,
        });
    }
    async listRepos(query) {
        const octokit = await this.octokitProvider.getOctokit();
        const toRepo = (item) => ({
            id: item.id,
            owner: item.owner.login,
            name: item.name,
            defaultBranch: item.default_branch,
            description: item.description,
        });
        let queryResult = [];
        if (!query) {
            const user = await octokit.users.getAuthenticated({});
            const username = user.data.login;
            const res = await octokit.repos.listForUser({
                username,
                sort: 'updated',
                per_page: 100,
            });
            this.userReposCache = res.data.map(toRepo);
        }
        else {
            queryResult = (await octokit.search.repos({ q: query, sort: 'updated' })).data.items.map(toRepo);
        }
        const repoToString = (r) => `${r.owner}/${r.name}`;
        const userRepos = new Set(this.userReposCache.map(repoToString));
        return [
            ...this.userReposCache,
            ...queryResult.filter((r) => !userRepos.has(repoToString(r))),
        ];
    }
    async listMachinesInternal(url) {
        const response = await this.tryMakeRequest(url, 'GET');
        const correlationId = response.headers[this.githubRequestIdHeader];
        if (response.status < 300) {
            if (response.data.error) {
                const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToListMachines', '{} Correlation ID: {}'), response.data.error, correlationId);
                throw new vscode_command_framework_1.CommandError({
                    userMessage,
                    message: `list machines failed with status ${response.status}`,
                });
            }
            return response.data.machines.map((s) => ({
                name: s.name,
                displayName: s.display_name,
                os: s.operating_system,
                prebuildAvailability: s.prebuild_availability,
            }));
        }
        this.logger.error(`ListMachines error. Correlation ID: ${correlationId}`);
        throw new vscode_command_framework_1.CommandError({ message: `Error retrieving available machine types. Status code: ${response.status}. Correlation ID: ${correlationId}` });
    }
    async getUsername() {
        const name = await this.tokenProvider.getUsername();
        if (!name) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetGitHubUsername', 'Unable to retrieve GitHub username'),
                message: 'Unable to retrieve GitHub username',
            });
        }
        return name;
    }
    async getVscsTarget() {
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        if (!isInternalUser) {
            return;
        }
        return configuration_1.getInternalConfig('vscsTarget');
    }
    async getVscsTargetUrl() {
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        if (!isInternalUser) {
            return;
        }
        return configuration_1.getInternalConfig('vscsTargetUrl');
    }
    async getVscsRegion() {
        const isInternalUser = this.dependencies.extensionsUtil.getIsInternalUser();
        if (!isInternalUser) {
            return;
        }
        return configuration_1.getInternalConfig('vscsRegion');
    }
    async makeTokenRequest(codespace, repoToken) {
        const throwCommandError = (status, correlationArgId, code) => {
            const userMessage = injectMessageParameters_1.injectMessageParameters(localize('error.unableToExchangeGithubToken', 'Codespace token exchange request failed with status {}. Correlation ID: {}'), status, correlationArgId);
            throw new vscode_command_framework_1.CommandError({
                userMessage,
                message: `Codespace token exchange request failed with status ${status}`,
                code,
            });
        };
        const username = await this.getUsername();
        const response = await this.tryMakeRequest(this.makeFullApiUri(`/vscs_internal/user/${username}/codespaces/${codespace.name}/token`), 'POST', {
            mint_repository_token: repoToken,
        }, {
            // Normally retries only happen for idempotent requests (not POST).
            // Setup the retry condition to have the same underlying checks
            // except for the HTTP request method.
            retryCondition: (e) => axios_retry_1.isRetryableError(e) || axios_retry_1.isNetworkError(e),
        });
        if (!response) {
            throwCommandError(499, undefined, vscode_command_framework_1.CommandErrorCode.NETWORK_ERROR);
        }
        this.checkSpendingLimitCode(response.status, codespace);
        if (response.status === 200) {
            return response.data;
        }
        const correlationId = response.headers[this.githubRequestIdHeader];
        this.logger.error(`Token exchange request failed. Correlation ID: ${correlationId}`);
        throwStub(() => throwCommandError(response.status, correlationId));
    }
    async getGitHubTokenOrThrow() {
        const token = await this.tokenProvider.getGitHubToken();
        if (!token) {
            throw new vscode_command_framework_1.CommandError({
                userMessage: localize('error.unableToGetGitHubToken', 'Unable to retrieve GitHub token'),
                message: 'Not authenticated',
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
            });
        }
        return token;
    }
    makeFullApiUri(endpoint) {
        const base = configuration_1.getInternalConfig('baseUrl');
        return `${base}${endpoint}`;
    }
    async tryMakeRequest(uri, method, body, retryConfig) {
        try {
            return await this.makeRequest(uri, method, body, retryConfig);
        }
        catch (err) {
            return err.response;
        }
    }
    async makeRequest(uri, method, body, retryConfig, authToken) {
        const token = authToken !== null && authToken !== void 0 ? authToken : (await this.getGitHubTokenOrThrow());
        const config = {
            headers: {
                Authorization: `Bearer ${token}`,
                Accept: 'application/vnd.github.v3+json',
            },
        };
        if (retryConfig) {
            config['axios-retry'] = retryConfig;
        }
        switch (method) {
            case 'GET':
                return await this.dependencies.httpClientUtil.get(uri, config);
            case 'POST':
                return await this.dependencies.httpClientUtil.post(uri, body, config);
            case 'PATCH':
                return await this.dependencies.httpClientUtil.patch(uri, body, config);
            case 'DELETE':
                return await this.dependencies.httpClientUtil.delete(uri, config);
            default:
                throw new Error('Unsupported HTTP method');
        }
    }
    checkSpendingLimitCode(responseCode, codespace) {
        if (responseCode === 402) {
            const reviewItem = { title: localize('button.learnMore', 'Learn more') };
            const exportItem = { title: localize('button.export', 'Export changes') };
            const localizedErrorMessage = localize('error.spendingLimitHit', 'There seems to be a billing problem with this codespace.');
            this.dependencies.notificationUtil
                .showErrorMessage(localizedErrorMessage, reviewItem, exportItem)
                .then(async (msgItem) => {
                if (msgItem === exportItem) {
                    await this.dependencies.commandUtil.executeCommand("github.codespaces.export" /* export */, {
                        name: codespace.name
                    });
                }
                else if (msgItem === reviewItem) {
                    await this.dependencies.extensionsUtil.openLinkInBrowser('https://aka.ms/codespaces-billing-limit');
                }
            });
            throw new vscode_command_framework_1.CommandError({
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
                message: constants_1.GH_SPENDING_LIMIT_IDENTIFIER,
                userMessage: localizedErrorMessage,
            }).withSuppressUserNotification(true);
        }
    }
    checkMachinePolicyCode(responseCode, errorMessage, codespace) {
        if (responseCode === 403 && /machine type/.test(errorMessage)) {
            const changeMachineItem = { title: localize('button.changeMachineType', 'Change machine type') };
            const exportItem = { title: localize('button.export', 'Export changes') };
            const localizedErrorMessage = localize('error.machinePolicyViolation', "This codespace is using a machine type disallowed by your organization or enterprise's settings.");
            this.dependencies.notificationUtil
                .showErrorMessage(localizedErrorMessage, changeMachineItem, exportItem)
                .then(async (msgItem) => {
                if (msgItem === exportItem) {
                    await this.dependencies.commandUtil.executeCommand("github.codespaces.export" /* export */, {
                        name: codespace.name
                    });
                }
                else if (msgItem === changeMachineItem) {
                    await this.dependencies.commandUtil.executeCommand("github.codespaces.changeMachineType" /* changeSku */);
                }
            });
            throw new vscode_command_framework_1.CommandError({
                code: vscode_command_framework_1.CommandErrorCode.UNAUTHORIZED,
                message: constants_1.GH_MACHINE_POLICY_IDENTIFIER,
                userMessage: localizedErrorMessage,
            }).withSuppressUserNotification(true);
        }
    }
}
exports.GitHubApi = GitHubApi;
function throwStub(invoke) {
    invoke();
}


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Check if any Org Saml tokens are missing in user's login session.
 */
exports.areOrgSamlTokensMissing = (response) => {
    var _a, _b;
    const githubSsoHeader = (_a = response.headers) === null || _a === void 0 ? void 0 : _a['x-github-sso'];
    return (_b = githubSsoHeader === null || githubSsoHeader === void 0 ? void 0 : githubSsoHeader.includes('partial-results')) !== null && _b !== void 0 ? _b : false;
};


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const rest_1 = __webpack_require__(703);
const configuration_1 = __webpack_require__(51);
class OctokitProvider {
    constructor(tokenProvider) {
        this.tokenProvider = tokenProvider;
        this.cachedOctoKit = undefined;
    }
    async getOctokit() {
        if (!this.cachedOctoKit) {
            const auth = await this.tokenProvider.getGitHubToken();
            if (!auth) {
                throw new Error('Unable to retrieve GitHub token');
            }
            this.cachedOctoKit = new rest_1.Octokit({ auth, baseUrl: configuration_1.getInternalConfig('baseUrl') });
        }
        return this.cachedOctoKit;
    }
}
exports.OctokitProvider = OctokitProvider;


/***/ }),
/* 604 */
/***/ (function(module, exports) {

module.exports = register

function register (state, name, method, options) {
  if (typeof method !== 'function') {
    throw new Error('method for before hook must be a function')
  }

  if (!options) {
    options = {}
  }

  if (Array.isArray(name)) {
    return name.reverse().reduce(function (callback, name) {
      return register.bind(null, state, name, callback, options)
    }, method)()
  }

  return Promise.resolve()
    .then(function () {
      if (!state.registry[name]) {
        return method(options)
      }

      return (state.registry[name]).reduce(function (method, registered) {
        return registered.hook.bind(null, method, options)
      }, method)()
    })
}


/***/ }),
/* 605 */
/***/ (function(module, exports) {

module.exports = addHook

function addHook (state, kind, name, hook) {
  var orig = hook
  if (!state.registry[name]) {
    state.registry[name] = []
  }

  if (kind === 'before') {
    hook = function (method, options) {
      return Promise.resolve()
        .then(orig.bind(null, options))
        .then(method.bind(null, options))
    }
  }

  if (kind === 'after') {
    hook = function (method, options) {
      var result
      return Promise.resolve()
        .then(method.bind(null, options))
        .then(function (result_) {
          result = result_
          return orig(result, options)
        })
        .then(function () {
          return result
        })
    }
  }

  if (kind === 'error') {
    hook = function (method, options) {
      return Promise.resolve()
        .then(method.bind(null, options))
        .catch(function (error) {
          return orig(error, options)
        })
    }
  }

  state.registry[name].push({
    hook: hook,
    orig: orig
  })
}


/***/ }),
/* 606 */
/***/ (function(module, exports) {

module.exports = removeHook

function removeHook (state, name, method) {
  if (!state.registry[name]) {
    return
  }

  var index = state.registry[name]
    .map(function (registered) { return registered.orig })
    .indexOf(method)

  if (index === -1) {
    return
  }

  state.registry[name].splice(index, 1)
}


/***/ }),
/* 607 */
/***/ (function(module, exports) {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const vscodeNativeAuthTokenProvider_1 = __webpack_require__(609);
const configuration_1 = __webpack_require__(51);
const scopes = ['read:user', 'user:email', 'repo'];
class GitHubAuthentication extends vscodeNativeAuthTokenProvider_1.VsCodeNativeAuthTokenProvider {
    constructor(changeEvent, logger) {
        logger = logger !== null && logger !== void 0 ? logger : vscode_command_framework_1.traceSource.withName('Authentication');
        super('github', scopes, logger);
        this.changeEvent = changeEvent;
        this.gitHubUser = configuration_1.getInternalConfig("gitHubUser");
    }
    async signOut() {
        await super.signOut();
        this.changeEvent();
    }
    async signIn(forceNewAuthSession = false) {
        const result = await super.signIn(forceNewAuthSession);
        this.changeEvent();
        return result;
    }
    async getUsername() {
        var _a, _b;
        if (this.gitHubUser) {
            return this.gitHubUser.username;
        }
        const sessionUsername = (_b = (_a = this.session) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.label;
        if (sessionUsername) {
            return sessionUsername;
        }
        return undefined;
    }
    getGitHubToken() {
        if (this.gitHubUser) {
            return Promise.resolve(this.gitHubUser.token);
        }
        return super.getAccessToken();
    }
}
exports.GitHubAuthentication = GitHubAuthentication;


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
const vs_ssh_1 = __webpack_require__(130);
class VsCodeNativeAuthTokenProvider {
    constructor(providerId, scopes, logger, vscodeAPIAuth = vscode.authentication) {
        this.providerId = providerId;
        this.scopes = scopes;
        this.logger = logger;
        this.vscodeAPIAuth = vscodeAPIAuth;
        this.scopes = this.scopes.sort();
        this.vscodeAPIAuth.onDidChangeSessions(this.handleOnDidChangeSessions.bind(this));
        this.tryLoadSession(false).catch(); // Optimistically try to sign in, but not an error if it doesn't work
    }
    async handleOnDidChangeSessions() {
        // update session based on whether user has vscode auth sessions registered in vscode auth api
        const session = this.session;
        const vscodeAuthSessionExists = await this.tryLoadSession(false, true, false);
        if (session && !vscodeAuthSessionExists) {
            await this.signOut();
        }
        else if (!session && vscodeAuthSessionExists) {
            await this.signIn();
        }
    }
    async tryLoadSession(forceLogin, skipCachedSessionCheck = false, forceNewAuthSession = false) {
        try {
            if (this.session && !forceLogin && !skipCachedSessionCheck) {
                return true;
            }
            if (forceNewAuthSession) {
                // create new session (w org SAML tokens) 
                this.session = await this.vscodeAPIAuth.getSession(this.providerId, this.scopes, {
                    forceNewSession: true
                });
            }
            else {
                this.session = await this.vscodeAPIAuth.getSession(this.providerId, this.scopes, {
                    createIfNone: forceLogin,
                    clearSessionPreference: forceLogin,
                    silent: !forceLogin,
                });
            }
            if (this.session) {
                return true;
            }
            else {
                this.logger.info('Did not find existing login session');
            }
        }
        catch (err) {
            // Log error, but just return false
            this.logger.warning(`Failed to load session: ${err.message}`);
        }
        return false;
    }
    isSignedIn() {
        return (this.session !== undefined);
    }
    getSession() {
        if (!this.session) {
            return undefined;
        }
        return Object.assign(Object.assign({}, this.session), { providerId: this.providerId });
    }
    async signIn(forceNewAuthSession = false) {
        if (this.isSignedIn() && !forceNewAuthSession) {
            this.logger.verbose(`Already signed in`);
            return true;
        }
        if (this.loginPromise && !forceNewAuthSession) {
            this.logger.verbose(`Existing login in progress. Waiting for completion...`);
            return await this.loginPromise.promise;
        }
        this.loginPromise = new vs_ssh_1.PromiseCompletionSource();
        await this.tryLoadSession(true, false, forceNewAuthSession);
        // We should now be signed in. If we are, then everything is good.
        if (this.isSignedIn()) {
            this.logger.info(`Successfully signed in`);
            this.loginPromise.resolve(true);
            return true;
        }
        this.logger.error(`Failed to sign in: no token available`);
        this.loginPromise.resolve(false);
        // Clear out promise so the user can retry the login, similar to manual sign out
        this.loginPromise = undefined;
        return false;
    }
    signOut() {
        var _a;
        this.session = undefined;
        (_a = this.loginPromise) === null || _a === void 0 ? void 0 : _a.reject(new Error('Logged Out'));
        this.loginPromise = undefined;
        this.logger.info(`Successfully signed out`);
        return Promise.resolve();
    }
    async hasCachedToken() {
        return !!(await this.getAccessToken());
    }
    /*
     * Gets the credential from the native auth platform which probably is not a Cascade token.
     */
    async getAccessToken() {
        var _a;
        if (!this.isSignedIn()) {
            await this.tryLoadSession(false);
        }
        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.accessToken;
    }
}
exports.VsCodeNativeAuthTokenProvider = VsCodeNativeAuthTokenProvider;


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const UserPrompt_1 = __webpack_require__(264);
const nls = __webpack_require__(7);
const vscode_command_framework_1 = __webpack_require__(3);
const EnvironmentCommands_1 = __webpack_require__(53);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const environmentInfo_1 = __webpack_require__(32);
const localize = nls.loadMessageBundle();
class SkuChangePrompt extends UserPrompt_1.UserPrompt {
    constructor(deps, codespace) {
        super();
        this.deps = deps;
        this.codespace = codespace;
    }
    async run() {
        let disconnectRequired = false;
        let shutdownRequired = true;
        let codespace = this.codespace;
        if (!codespace) {
            codespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        }
        if (!codespace) {
            shutdownRequired = false;
            codespace = await this.promptForEnvironment();
        }
        else if (codespace && codespace.state === environmentInfo_1.StateInfo.Shutdown) {
            disconnectRequired = true;
            shutdownRequired = false;
        }
        if (!codespace || !codespace.environment_id) {
            throw new vscode_command_framework_1.CancellationError();
        }
        const sku = await this.promptForSku(codespace);
        if (!sku || codespace.machine.name === sku.name) {
            return { codespace: undefined, sku: undefined, disconnectRequired: false, shutdownRequired: false };
        }
        return {
            codespace,
            sku,
            disconnectRequired,
            shutdownRequired,
        };
    }
    async promptForEnvironment() {
        return await EnvironmentCommands_1.getCodespaceFromCommandOptions({}, {
            selectMsg: localize('info.changeSku.selectEnvironment', 'Select the codespace to update'),
            dependencies: this.deps,
            fallback: async () => {
                const message = localize('info.changeSku.noEnvironmentsAvailable', 'There are no codespaces available.');
                throw new vscode_command_framework_1.CancellationError(message);
                // Make the compiler happy.
                return;
            },
        });
    }
    getCurrentSku(codespace) {
        return codespace.machine.name;
    }
    async promptForSku(codespace) {
        const placeHolder = localize('messages.changeSku.selectSku', 'Select the new machine type for your codespace');
        const currentSku = this.getCurrentSku(codespace);
        let skus = await this.deps
            .getApiProvider()
            .environments.getAvailableMachines(codespace);
        if (!skus) {
            return;
        }
        const skuNames = skus.map((sku) => ({
            label: sku.name === currentSku
                ? `${sku.displayName} (Current machine type)`
                : sku.displayName,
            picked: sku.name === currentSku,
            sku,
        }));
        const pickedItem = await this.deps.notificationUtil.showQuickPick(skuNames, {
            placeHolder,
            ignoreFocusOut: true,
        });
        if (!pickedItem) {
            return;
        }
        return pickedItem.sku;
    }
}
exports.SkuChangePrompt = SkuChangePrompt;


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const luxon_1 = __webpack_require__(155);
const nls = __webpack_require__(7);
const injectMessageParameters_1 = __webpack_require__(22);
const util_1 = __webpack_require__(52);
const localize = nls.loadMessageBundle();
async function promptForEnvironment(dependencies, options) {
    const { quickPickPrompt = 'Select a codespace', filter = () => true, onNoAvailableEnvironments = () => { }, } = options || {};
    const loadingPrompt = localize('message.codespaceConnection.loadingCodespaces', 'Loading your codespaces...');
    const quickPick = dependencies.notificationUtil.createQuickPickWithRefresh(loadingPrompt, quickPickPrompt);
    const { codespaces } = await dependencies.getApiProvider().environments.listCodespaces();
    const filteredCodespaces = util_1.Util.Instance.sortedCodespacesList(codespaces.filter(filter));
    if (filteredCodespaces.length === 0) {
        quickPick.cancel();
        await onNoAvailableEnvironments();
        return undefined;
    }
    const pickItems = filteredCodespaces.map((env) => buildQuickpick(env));
    quickPick.setItems(pickItems);
    const selection = await quickPick.valuePromise;
    if (!selection || typeof selection === 'string') {
        throw new vscode_command_framework_1.CancellationError();
    }
    return filteredCodespaces.find((env) => env.environment_id === selection.id);
}
exports.promptForEnvironment = promptForEnvironment;
function buildQuickpick(env) {
    return {
        label: `${labelIcon(env)} ${env.repository.full_name}`,
        id: env.environment_id,
        description: description(env),
        detail: `${env.git_status.ref} ${changedLabel(env)} · ${aheadBehind(env)} ${env.machine.display_name}`,
    };
}
exports.buildQuickpick = buildQuickpick;
function labelIcon(codespace) {
    if (codespace.state === 'Available') {
        return '$(vm-running)';
    }
    else {
        return '$(vm)';
    }
}
function description(codespace) {
    if (codespace.last_used_at) {
        return injectMessageParameters_1.injectMessageParameters(localize('text.environmentPrompt.lastUsed', 'Last used {}'), luxon_1.DateTime.fromISO(codespace.last_used_at).toRelative());
    }
    else {
        return '';
    }
}
function aheadBehind(codespace) {
    const ahead = codespace.git_status.ahead;
    const behind = codespace.git_status.behind;
    if (ahead !== 0 || behind !== 0) {
        return `${behind}$(arrow-down) ${ahead}$(arrow-up) ·`;
    }
    else {
        return '';
    }
}
function changedLabel(codespace) {
    return codespace.git_status.has_uncommitted_changes ? '*' : '';
}


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const vscs_utils_1 = __webpack_require__(8);
exports.mainTrace = vscode_command_framework_1.traceSource.createChild(`extension:${vscs_utils_1.randomString(2)}`);


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
const dependencies_1 = __webpack_require__(14);
let SignIn = class SignIn extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        if (!dependencies_1.dependencies.getApiProvider().isSignedIn()) {
            await dependencies_1.dependencies.getApiProvider().signIn();
        }
    }
};
SignIn = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.signIn, telemetryString_1.TelemetryEventNames.SIGNIN_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.SIGNIN, telemetryString_1.TelemetryEventNames.SIGNIN_FAULT, titles.signIn, 1)
], SignIn);
exports.SignIn = SignIn;


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
const CodespaceCreation_1 = __webpack_require__(615);
const titles = __webpack_require__(23);
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return __webpack_require__(14).dependencies;
}
function prompts() {
    return __webpack_require__(14).userPrompts;
}
let AddNewEnvironment = class AddNewEnvironment extends vscode_command_framework_1.CommandBase {
    constructor(dependencies = dependency()) {
        super();
        this.dependencies = dependencies;
    }
    async invoke(options, context) {
        const codespaceCreation = new CodespaceCreation_1.CodespaceCreation(this.dependencies);
        // The remote hub extension can call this command for a given repo\ref and will pass that in
        // via options. If provided, use them without prompting the user.
        const repoName = options.url || undefined;
        const ref = options.ref || undefined;
        await codespaceCreation.createNewCodespace(context.telemetryEvent, prompts().codespaceCreation(), repoName, ref);
    }
};
AddNewEnvironment = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.addNewEnvironment, telemetryString_1.TelemetryEventNames.ADD_ENVIRONMENT_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.ADD_ENVIRONMENT, telemetryString_1.TelemetryEventNames.ADD_ENVIRONMENT_FAULT, titles.addNewEnvironment, 1)
], AddNewEnvironment);
exports.AddNewEnvironment = AddNewEnvironment;


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const injectMessageParameters_1 = __webpack_require__(22);
const telemetryString_1 = __webpack_require__(12);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const vscode_command_framework_1 = __webpack_require__(3);
const opentelemetry = __webpack_require__(156);
const IConfigurationManager_1 = __webpack_require__(150);
const OpenTelemetryProvider_1 = __webpack_require__(97);
const localize = nls.loadMessageBundle();
class CodespaceCreation {
    constructor(dependencies) {
        this.dependencies = dependencies;
        this.logger = vscode_command_framework_1.traceSource.withName('CodespacesCreation');
    }
    async createNewCodespace(telemetryEvent, prompt, repoName, ref) {
        const codespaceParams = await prompt.run({
            values: {
                fullRepoName: repoName,
                ref: ref,
            }
        });
        const span = opentelemetry.trace
            .getTracer(OpenTelemetryProvider_1.openTelemetryTracerName)
            .startSpan(OpenTelemetryProvider_1.OpenTelemetrySpans.createCodespace);
        const creationStartTime = Date.now();
        const codespace = await this.provision(codespaceParams);
        span.setAttribute(OpenTelemetryProvider_1.openTelemetryCodespaceId, codespace.environment_id);
        span.end();
        const finishedTime = Date.now();
        telemetryEvent.addMeasure(telemetryString_1.TelemetryMeasureNames.PROVISIONING_DURATION, finishedTime - creationStartTime);
        this.dependencies.commandUtil.executeCommand("github.codespaces.connect" /* connect */, {
            name: codespace.name,
            newWindow: this.dependencies.configurationManager.getConfigValue(IConfigurationManager_1.ConfigurationKey.createCodespaceInNewWindow),
            workingDirectory: codespaceParams.workingDirectory,
        });
    }
    async provision(codespaceParams) {
        const title = injectMessageParameters_1.injectMessageParameters(localize('message.codespaceCreation.title.creatingCodespace', 'Creating codespace for repo: {}'), codespaceParams.fullRepoName);
        return await this.dependencies.notificationUtil.withProgress({
            title,
            location: this.dependencies.notificationUtil.notificationProgressLocation,
        }, async () => {
            var _a;
            const codespace = await this.dependencies
                .getApiProvider()
                .environments.provisionCodespace(codespaceParams.repo, codespaceParams.ref, codespaceParams.location, {
                skuName: (_a = codespaceParams.sku) === null || _a === void 0 ? void 0 : _a.name,
                workingDirectory: codespaceParams.workingDirectory,
            });
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(codespace);
            return codespace;
        });
    }
}
exports.CodespaceCreation = CodespaceCreation;


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Exception.js.map

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Logger.js.map

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Time.js.map

/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoopContextManager = void 0;
var context_1 = __webpack_require__(274);
var NoopContextManager = /** @class */ (function () {
    function NoopContextManager() {
    }
    NoopContextManager.prototype.active = function () {
        return context_1.ROOT_CONTEXT;
    };
    NoopContextManager.prototype.with = function (_context, fn) {
        return fn();
    };
    NoopContextManager.prototype.bind = function (target, _context) {
        return target;
    };
    NoopContextManager.prototype.enable = function () {
        return this;
    };
    NoopContextManager.prototype.disable = function () {
        return this;
    };
    return NoopContextManager;
}());
exports.NoopContextManager = NoopContextManager;
//# sourceMappingURL=NoopContextManager.js.map

/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Baggage.js.map

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryTtl = void 0;
/**
 * EntryTtl is an integer that represents number of hops an entry can propagate.
 *
 * For now, ONLY special values (0 and -1) are supported.
 */
var EntryTtl;
(function (EntryTtl) {
    /**
     * NO_PROPAGATION is considered to have local context and is used within the
     * process it created.
     */
    EntryTtl[EntryTtl["NO_PROPAGATION"] = 0] = "NO_PROPAGATION";
    /** UNLIMITED_PROPAGATION can propagate unlimited hops. */
    EntryTtl[EntryTtl["UNLIMITED_PROPAGATION"] = -1] = "UNLIMITED_PROPAGATION";
})(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));
//# sourceMappingURL=EntryValue.js.map

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=BatchObserverResult.js.map

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=BoundInstrument.js.map

/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Meter.js.map

/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=MeterProvider.js.map

/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueType = void 0;
/** The Type of value. It describes how the data is reported. */
var ValueType;
(function (ValueType) {
    ValueType[ValueType["INT"] = 0] = "INT";
    ValueType[ValueType["DOUBLE"] = 1] = "DOUBLE";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
//# sourceMappingURL=Metric.js.map

/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Observation.js.map

/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=ObserverResult.js.map

/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=attributes.js.map

/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Event.js.map

/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=link_context.js.map

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=link.js.map

/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoopLogger = void 0;
/** No-op implementation of Logger */
var NoopLogger = /** @class */ (function () {
    function NoopLogger() {
    }
    // By default does nothing
    NoopLogger.prototype.debug = function (_message) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
    };
    // By default does nothing
    NoopLogger.prototype.error = function (_message) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
    };
    // By default does nothing
    NoopLogger.prototype.warn = function (_message) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
    };
    // By default does nothing
    NoopLogger.prototype.info = function (_message) {
        var _args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _args[_i - 1] = arguments[_i];
        }
    };
    return NoopLogger;
}());
exports.NoopLogger = NoopLogger;
//# sourceMappingURL=NoopLogger.js.map

/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=Sampler.js.map

/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SamplingDecision = void 0;
/**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */
var SamplingDecision;
(function (SamplingDecision) {
    /**
     * `Span.isRecording() === false`, span will not be recorded and all events
     * and attributes will be dropped.
     */
    SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
    /**
     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
     * MUST NOT be set.
     */
    SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
    /**
     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
     * MUST be set.
     */
    SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));
//# sourceMappingURL=SamplingResult.js.map

/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=span_context.js.map

/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanKind = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var SpanKind;
(function (SpanKind) {
    /** Default value. Indicates that the span is used internally. */
    SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */
    SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */
    SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));
//# sourceMappingURL=span_kind.js.map

/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=span.js.map

/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=SpanOptions.js.map

/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusCode = void 0;
/**
 * An enumeration of status codes.
 */
var StatusCode;
(function (StatusCode) {
    /**
     * The operation has been validated by an Application developer or
     * Operator to have completed successfully.
     */
    StatusCode[StatusCode["OK"] = 0] = "OK";
    /**
     * The default status.
     */
    StatusCode[StatusCode["UNSET"] = 1] = "UNSET";
    /**
     * The operation contains an error.
     */
    StatusCode[StatusCode["ERROR"] = 2] = "ERROR";
})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));
//# sourceMappingURL=status.js.map

/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=TimedEvent.js.map

/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=trace_state.js.map

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=tracer_provider.js.map

/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=tracer.js.map

/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextAPI = void 0;
var context_base_1 = __webpack_require__(157);
var global_utils_1 = __webpack_require__(96);
var NOOP_CONTEXT_MANAGER = new context_base_1.NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */
var ContextAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function ContextAPI() {
    }
    /** Get the singleton instance of the Context API */
    ContextAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new ContextAPI();
        }
        return this._instance;
    };
    /**
     * Set the current context manager. Returns the initialized context manager
     */
    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
        if (global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) {
            // global context manager has already been set
            return this._getContextManager();
        }
        global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, contextManager, NOOP_CONTEXT_MANAGER);
        return contextManager;
    };
    /**
     * Get the currently active context
     */
    ContextAPI.prototype.active = function () {
        return this._getContextManager().active();
    };
    /**
     * Execute a function with an active context
     *
     * @param context context to be active during function execution
     * @param fn function to execute in a context
     */
    ContextAPI.prototype.with = function (context, fn) {
        return this._getContextManager().with(context, fn);
    };
    /**
     * Bind a context to a target function or event emitter
     *
     * @param target function or event emitter to bind
     * @param context context to bind to the event emitter or function. Defaults to the currently active context
     */
    ContextAPI.prototype.bind = function (target, context) {
        if (context === void 0) { context = this.active(); }
        return this._getContextManager().bind(target, context);
    };
    ContextAPI.prototype._getContextManager = function () {
        var _a, _b;
        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_CONTEXT_MANAGER);
    };
    /** Disable and remove the global context manager */
    ContextAPI.prototype.disable = function () {
        this._getContextManager().disable();
        delete global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY];
    };
    return ContextAPI;
}());
exports.ContextAPI = ContextAPI;
//# sourceMappingURL=context.js.map

/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(648), exports);
//# sourceMappingURL=index.js.map

/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports._globalThis = void 0;
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef
exports._globalThis = typeof globalThis === 'object' ? globalThis : window;
//# sourceMappingURL=globalThis.js.map

/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceAPI = void 0;
var NoopTracerProvider_1 = __webpack_require__(159);
var ProxyTracerProvider_1 = __webpack_require__(282);
var spancontext_utils_1 = __webpack_require__(95);
var global_utils_1 = __webpack_require__(96);
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */
var TraceAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function TraceAPI() {
        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();
        this.isSpanContextValid = spancontext_utils_1.isSpanContextValid;
    }
    /** Get the singleton instance of the Trace API */
    TraceAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new TraceAPI();
        }
        return this._instance;
    };
    /**
     * Set the current global tracer. Returns the initialized global tracer provider
     */
    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
        if (global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) {
            // global tracer provider has already been set
            return this.getTracerProvider();
        }
        this._proxyTracerProvider.setDelegate(provider);
        global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, this._proxyTracerProvider, NoopTracerProvider_1.NOOP_TRACER_PROVIDER);
        return this.getTracerProvider();
    };
    /**
     * Returns the global tracer provider.
     */
    TraceAPI.prototype.getTracerProvider = function () {
        var _a, _b;
        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : this._proxyTracerProvider);
    };
    /**
     * Returns a tracer from the global tracer provider.
     */
    TraceAPI.prototype.getTracer = function (name, version) {
        return this.getTracerProvider().getTracer(name, version);
    };
    /** Remove the global tracer provider */
    TraceAPI.prototype.disable = function () {
        delete global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY];
        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();
    };
    return TraceAPI;
}());
exports.TraceAPI = TraceAPI;
//# sourceMappingURL=trace.js.map

/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsAPI = void 0;
var NoopMeterProvider_1 = __webpack_require__(278);
var global_utils_1 = __webpack_require__(96);
/**
 * Singleton object which represents the entry point to the OpenTelemetry Metrics API
 */
var MetricsAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function MetricsAPI() {
    }
    /** Get the singleton instance of the Metrics API */
    MetricsAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new MetricsAPI();
        }
        return this._instance;
    };
    /**
     * Set the current global meter. Returns the initialized global meter provider.
     */
    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {
        if (global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) {
            // global meter provider has already been set
            return this.getMeterProvider();
        }
        global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopMeterProvider_1.NOOP_METER_PROVIDER);
        return provider;
    };
    /**
     * Returns the global meter provider.
     */
    MetricsAPI.prototype.getMeterProvider = function () {
        var _a, _b;
        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopMeterProvider_1.NOOP_METER_PROVIDER);
    };
    /**
     * Returns a meter from the global meter provider.
     */
    MetricsAPI.prototype.getMeter = function (name, version) {
        return this.getMeterProvider().getMeter(name, version);
    };
    /** Remove the global meter provider */
    MetricsAPI.prototype.disable = function () {
        delete global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY];
    };
    return MetricsAPI;
}());
exports.MetricsAPI = MetricsAPI;
//# sourceMappingURL=metrics.js.map

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropagationAPI = void 0;
var NoopTextMapPropagator_1 = __webpack_require__(276);
var TextMapPropagator_1 = __webpack_require__(275);
var global_utils_1 = __webpack_require__(96);
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */
var PropagationAPI = /** @class */ (function () {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    function PropagationAPI() {
    }
    /** Get the singleton instance of the Propagator API */
    PropagationAPI.getInstance = function () {
        if (!this._instance) {
            this._instance = new PropagationAPI();
        }
        return this._instance;
    };
    /**
     * Set the current propagator. Returns the initialized propagator
     */
    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
        if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {
            // global propagator has already been set
            return this._getGlobalPropagator();
        }
        global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR);
        return propagator;
    };
    /**
     * Inject context into a carrier to be propagated inter-process
     *
     * @param context Context carrying tracing data to inject
     * @param carrier carrier to inject context into
     * @param setter Function used to set values on the carrier
     */
    PropagationAPI.prototype.inject = function (context, carrier, setter) {
        if (setter === void 0) { setter = TextMapPropagator_1.defaultTextMapSetter; }
        return this._getGlobalPropagator().inject(context, carrier, setter);
    };
    /**
     * Extract context from a carrier
     *
     * @param context Context which the newly created context will inherit from
     * @param carrier Carrier to extract context from
     * @param getter Function used to extract keys from a carrier
     */
    PropagationAPI.prototype.extract = function (context, carrier, getter) {
        if (getter === void 0) { getter = TextMapPropagator_1.defaultTextMapGetter; }
        return this._getGlobalPropagator().extract(context, carrier, getter);
    };
    /** Remove the global propagator */
    PropagationAPI.prototype.disable = function () {
        delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];
    };
    PropagationAPI.prototype._getGlobalPropagator = function () {
        var _a, _b;
        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR);
    };
    return PropagationAPI;
}());
exports.PropagationAPI = PropagationAPI;
//# sourceMappingURL=propagation.js.map

/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
const EnvironmentDeletion_1 = __webpack_require__(653);
const EnvironmentCommands_1 = __webpack_require__(53);
const injectMessageParameters_1 = __webpack_require__(22);
const localize = nls.loadMessageBundle();
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return __webpack_require__(14).dependencies;
}
let DeleteEnvironment = class DeleteEnvironment extends vscode_command_framework_1.CommandBase {
    constructor(dependencies = dependency()) {
        super();
        this.dependencies = dependencies;
    }
    async invoke(options, context) {
        const selectMsg = localize('command.deleteEnvironment.selectedEnvironment', 'Select a codespace to delete');
        const yesMsg = localize('command.deleteEnvironment.deleteButton', 'Delete');
        const codespace = (await EnvironmentCommands_1.getCodespaceFromCommandOptions(options, {
            dependencies: this.dependencies,
            selectMsg,
            filter: (commands) => !!commands.deleteEnabled,
            fallback: async () => {
                const message = localize('info.noEnvironmentsAvailable', 'There are no codespaces available.');
                await this.dependencies.notificationUtil.showInformationMessage(message, false);
            },
        }));
        if (!codespace) {
            return;
        }
        let confirmMsg = localize('command.deleteEnvironment.confirmDelete', 'Are you sure you want to delete {}?');
        confirmMsg = injectMessageParameters_1.injectMessageParameters(confirmMsg, codespace.name);
        if (codespace.git_status.has_unpushed_changes) {
            confirmMsg = localize('command.deleteEnvironment.confirmDeleteHasChanges', 'You have uncommitted or unpushed git changes. Are you sure you want to delete {}?');
            confirmMsg = injectMessageParameters_1.injectMessageParameters(confirmMsg, codespace.name);
        }
        await EnvironmentDeletion_1.deleteEnvironment(codespace, confirmMsg, yesMsg, this.dependencies);
    }
};
DeleteEnvironment = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.deleteEnvironment, telemetryString_1.TelemetryEventNames.DELETE_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.DELETE, telemetryString_1.TelemetryEventNames.DELETE_FAULT, titles.deleteEnvironment, 1)
], DeleteEnvironment);
exports.DeleteEnvironment = DeleteEnvironment;


/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const CodespaceDetailsProvider_1 = __webpack_require__(13);
async function deleteEnvironment(codespace, confirmMsg, yesMsg, dependencies) {
    const pick = await dependencies.notificationUtil.showWarningMessage(confirmMsg, { modal: dependencies.util.isRunningIntegrationTest() ? false : true }, yesMsg);
    if (pick === yesMsg) {
        await dependencies.getApiProvider().environments.deleteCodespace(codespace);
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.removeCodespaceById(codespace.environment_id);
    }
}
exports.deleteEnvironment = deleteEnvironment;


/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
class Refresh extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.updateCodespacesDetails();
    }
}
exports.Refresh = Refresh;


/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
let DocumentationLink = class DocumentationLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://docs.github.com/codespaces';
    }
};
DocumentationLink = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.documentationLink, telemetryString_1.TelemetryEventNames.DOCUMENTATION_LINK_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.DOCUMENTATION_LINK, telemetryString_1.TelemetryEventNames.DOCUMENTATION_LINK_FAULT, titles.documentationLink, 1)
], DocumentationLink);
exports.DocumentationLink = DocumentationLink;


/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
let FeedbackLink = class FeedbackLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://aka.ms/ghcs-feedback';
    }
};
FeedbackLink = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.feedbackLink, telemetryString_1.TelemetryEventNames.FEEDBACK_LINK_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.FEEDBACK_LINK, telemetryString_1.TelemetryEventNames.FEEDBACK_LINK_FAULT, titles.feedbackLink, 1)
], FeedbackLink);
exports.FeedbackLink = FeedbackLink;


/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
let GetStartedLink = class GetStartedLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://docs.github.com/github/developing-online-with-codespaces/developing-in-a-codespace';
    }
};
GetStartedLink = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.getStartedLink, telemetryString_1.TelemetryEventNames.GET_STARTED_LINK_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.GET_STARTED_LINK, telemetryString_1.TelemetryEventNames.GET_STARTED_LINK_FAULT, titles.getStartedLink, 1)
], GetStartedLink);
exports.GetStartedLink = GetStartedLink;


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
let IssuesLink = class IssuesLink extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        return 'https://aka.ms/ghcs-support';
    }
};
IssuesLink = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.issuesLink, telemetryString_1.TelemetryEventNames.ISSUES_LINK_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.ISSUES_LINK, telemetryString_1.TelemetryEventNames.ISSUES_LINK_FAULT, titles.issuesLink, 1)
], IssuesLink);
exports.IssuesLink = IssuesLink;


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
const dependencies_1 = __webpack_require__(14);
let ReportIssue = class ReportIssue extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        const webUrl = new URL(`https://aka.ms/ghcs-support`);
        await dependencies_1.dependencies.extensionsUtil.openLinkInBrowser(webUrl.toString());
    }
};
ReportIssue = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.reportIssue, telemetryString_1.TelemetryEventNames.REPORT_ISSUES_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.REPORT_ISSUES, telemetryString_1.TelemetryEventNames.REPORT_ISSUES_FAULT, titles.reportIssue, 1)
], ReportIssue);
exports.ReportIssue = ReportIssue;


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
const dependencies_1 = __webpack_require__(14);
let SendFeedback = class SendFeedback extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        const webUrl = new URL(`https://aka.ms/ghcs-feedback`);
        await dependencies_1.dependencies.extensionsUtil.openLinkInBrowser(webUrl.toString());
    }
};
SendFeedback = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.sendFeedback, telemetryString_1.TelemetryEventNames.SEND_FEEDBACK_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.SEND_FEEDBACK, telemetryString_1.TelemetryEventNames.SEND_FEEDBACK_FAULT, titles.sendFeedback, 1)
], SendFeedback);
exports.SendFeedback = SendFeedback;


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_command_framework_1 = __webpack_require__(3);
const dependencies_1 = __webpack_require__(14);
class SetActiveRepository extends vscode_command_framework_1.CommandBase {
    async invoke(options) {
        vscode_command_framework_1.traceSource.info(`Setting active repository to ${options === null || options === void 0 ? void 0 : options.owner}/${options === null || options === void 0 ? void 0 : options.name}`);
        const creationAllowed = await this.isCreationAllowedAsync(options);
        vscode_command_framework_1.traceSource.info(`Creation allowed for ${options === null || options === void 0 ? void 0 : options.owner}/${options === null || options === void 0 ? void 0 : options.name}: ${creationAllowed}`);
        // The Remote Hub extension needs us to pass context to it for determining visibility of the
        // "Continue on Codespaces" option. This is required since VS Code APIs only allow setting
        // context and not reading context, so we need to coordinate directly across the extensions.
        dependencies_1.dependencies.commandUtil.executeCommand("remoteHub.setContext" /* remoteHubSetContext */, "continueOn:codespaces" /* ContinueOnCodespaces */, creationAllowed)
            .then(() => { }, (reason) => {
            // Command is not registered. Swallow exception and keep going.
        });
    }
    async isCreationAllowedAsync(repository) {
        if (!(repository === null || repository === void 0 ? void 0 : repository.owner) || !(repository === null || repository === void 0 ? void 0 : repository.name)) {
            return false;
        }
        const apiProvider = dependencies_1.dependencies.getApiProvider();
        if (!apiProvider.isSignedIn()) {
            return false;
        }
        return await apiProvider
            .environments
            .isCreationAllowed(repository.owner, repository.name);
    }
}
exports.SetActiveRepository = SetActiveRepository;


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const titles = __webpack_require__(23);
const nls = __webpack_require__(7);
const telemetryString_1 = __webpack_require__(12);
const vscode_command_framework_1 = __webpack_require__(3);
const EnvironmentCommands_1 = __webpack_require__(53);
const injectMessageParameters_1 = __webpack_require__(22);
const vscs_utils_1 = __webpack_require__(8);
const localize = nls.loadMessageBundle();
const POLL_RATE_MS = 1000;
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return __webpack_require__(14).dependencies;
}
let Export = class Export extends vscode_command_framework_1.CommandBase {
    constructor(dependencies = dependency()) {
        super();
        this.dependencies = dependencies;
    }
    async invoke(options, context) {
        const codespace = await EnvironmentCommands_1.getCodespaceFromCommandOptions(options, {
            selectMsg: localize('info.selectExportEnvironment', 'Select the codespace to export changes from'),
            dependencies: this.dependencies,
            fallback: async () => {
                let errorMessage = localize('info.export.noEnvironmentsAvailable', 'There are no codespaces available.');
                throw new vscs_utils_1.CancellationError(errorMessage);
                return;
            },
        });
        if (!codespace) {
            return;
        }
        let exportBranch;
        const message = injectMessageParameters_1.injectMessageParameters(localize('info.message.createBranch', 'Unpushed changes will be exported to a new branch'));
        const createBranch = localize('option.createBranch', 'Create Branch');
        const cancel = {
            title: localize('option.cancel', 'Cancel'),
            isCloseAffordance: true,
        };
        const selection = await this.dependencies.notificationUtil.showInformationMessage(message, false, { modal: true, useCustom: true }, cancel, createBranch);
        if (selection !== createBranch) {
            return;
        }
        let title = localize('message.export.title.exportingEnvironment', 'Exporting changes...');
        let githubURL;
        let didExportFail = false;
        await this.dependencies.notificationUtil.withProgress({
            title,
            location: this.dependencies.notificationUtil.notificationProgressLocation,
        }, async () => {
            exportBranch = (await this.dependencies
                .getApiProvider()
                .environments.exportCodespace(codespace));
            if (exportBranch) {
                githubURL = `https://github.com/${codespace === null || codespace === void 0 ? void 0 : codespace.repository.full_name}/tree/${exportBranch}`;
                let endPoll = Date.now() + 180000;
                while (!(await this.isExportCompleted(codespace))) {
                    if (Date.now() >= endPoll) {
                        didExportFail = true;
                        return;
                    }
                    await this.dependencies.util.delay(POLL_RATE_MS);
                }
            }
            else {
                didExportFail = true;
            }
            return;
        });
        if (didExportFail) {
            await this.dependencies.notificationUtil.showErrorMessage(injectMessageParameters_1.injectMessageParameters(localize('error.codespaceFailure', 'Your codespace export did not complete. Please try again.')));
            return;
        }
        const redirect = localize('button.redirect', 'Open branch on GitHub');
        const redirectNowButton = { title: redirect };
        title = localize('message.redirectToGithub', 'Changes successfully exported to a branch: {} ');
        title = injectMessageParameters_1.injectMessageParameters(title, exportBranch);
        await this.dependencies.notificationUtil
            .showInformationMessage(title, false, redirectNowButton)
            .then(async (clickedButton) => {
            if (clickedButton === redirectNowButton) {
                await this.dependencies.extensionsUtil.openLinkInBrowser(githubURL);
            }
        });
    }
    async isExportCompleted(codespace) {
        return await this.dependencies
            .getApiProvider()
            .environments.exportExists(codespace);
    }
};
Export = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.exportEnvironment, telemetryString_1.TelemetryEventNames.EXPORT_ENVIRONMENT_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.EXPORT_ENVIRONMENT, telemetryString_1.TelemetryEventNames.EXPORT_ENVIRONMENT_FAULT, titles.exportEnvironment, 1)
], Export);
exports.Export = Export;


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const telemetryString_1 = __webpack_require__(12);
const dependencies_1 = __webpack_require__(14);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const EnvironmentCommands_1 = __webpack_require__(53);
const localize = nls.loadMessageBundle();
let OpenInBrowser = class OpenInBrowser extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        if (!context.telemetryEvent) {
            throw new Error('Calling commands before command framework initialized.');
        }
        if (!dependencies_1.dependencies.getApiProvider().isSignedIn()) {
            throw new vscode_command_framework_1.CancellationError();
        }
        // If connected to a codespace, open that one. Otherwise prompt with the list.
        let codespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        if (!codespace) {
            codespace = await EnvironmentCommands_1.getCodespaceFromCommandOptions(options, {
                selectMsg: localize('info.selectEnvironment', 'Select the codespace to connect to'),
                filter: (commands) => !!commands.openInBrowserEnabled,
                fallback: async () => {
                    const message = localize('info.noEnvironmentsAvailableCreateOption', 'There are no codespaces available. Would you like to create one?');
                    const createButton = localize('button.create', 'Create');
                    const pick = await dependencies_1.dependencies.notificationUtil.showInformationMessage(message, false, createButton);
                    if (pick === createButton) {
                        dependencies_1.dependencies.commandUtil.executeCommand("github.codespaces.addEnvironment" /* addEnvironment */);
                    }
                },
                dependencies: dependencies_1.dependencies,
            });
        }
        if (codespace) {
            // TODO: support Github local dev scenarios, review labs, and GHAE endpoints
            const webUrl = new URL(`https://github.com/codespaces/${codespace.name}`);
            await dependencies_1.dependencies.extensionsUtil.openLinkInBrowser(webUrl.toString());
        }
    }
};
OpenInBrowser = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.openInBrowser, telemetryString_1.TelemetryEventNames.OPEN_IN_BROWSER),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.OPEN_IN_BROWSER, telemetryString_1.TelemetryEventNames.OPEN_IN_BROWSER_FAULT, titles.openInBrowser, 1)
], OpenInBrowser);
exports.OpenInBrowser = OpenInBrowser;


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const titles = __webpack_require__(23);
const vscode_command_framework_1 = __webpack_require__(3);
const vscs_utils_1 = __webpack_require__(8);
const telemetryString_1 = __webpack_require__(12);
const dependencies_1 = __webpack_require__(14);
const EnvironmentSetup_1 = __webpack_require__(665);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const ActivationTasks_1 = __webpack_require__(284);
const commandContext_1 = __webpack_require__(41);
const injectMessageParameters_1 = __webpack_require__(22);
const EnvironmentCommands_1 = __webpack_require__(53);
const localize = nls.loadMessageBundle();
let ShutdownEnvironment = class ShutdownEnvironment extends vscode_command_framework_1.CommandBase {
    async invoke(options, context) {
        const environmentSetup = new EnvironmentSetup_1.EnvironmentSetup(dependencies_1.dependencies);
        const connectedEnvironment = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        const connectedEnvironmentId = connectedEnvironment ? connectedEnvironment.environment_id : '';
        let codespaceToStop;
        if (context.commandText === "github.codespaces.disconnectSuspend" /* disconnectSuspend */ && connectedEnvironment) {
            return await this.stopCodespace(connectedEnvironment, environmentSetup, true);
        }
        if (options.name) {
            const codespace = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchCodespaceDetailsByName(options.name);
            vscs_utils_1.assertDefined(codespace, new vscode_command_framework_1.CommandError({
                message: `Codespace ${options.name} not found`,
            }));
            codespaceToStop = codespace;
        }
        else if (options.id) {
            await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
            const codespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCachedCodespaceDetailsById(options.id);
            vscs_utils_1.assertDefined(codespace, new vscode_command_framework_1.CommandError({
                message: `Codespace with Id ${options.id} not found`,
            }));
            codespaceToStop = codespace;
        }
        else {
            const selectMsg = localize('command.shutdownEnvironment.selectEnvironment', 'Select a codespace to stop');
            const environment = await EnvironmentCommands_1.getCodespaceFromCommandOptions(options, {
                dependencies: dependencies_1.dependencies,
                selectMsg,
                filter: (commands) => !!commands.shutdownEnabled,
                fallback: async () => {
                    const message = localize('info.noEnvironmentsAvailable', 'There are no codespaces available.');
                    await dependencies_1.dependencies.notificationUtil.showInformationMessage(message, false);
                },
            });
            if (!environment) {
                return false;
            }
            else {
                codespaceToStop = environment;
            }
        }
        if (!options.forceDisconnect) {
            if (connectedEnvironmentId === codespaceToStop.environment_id) {
                const disconnectButton = localize('command.shutdownEnvironment.disconnectShutdownButton', 'Disconnect and stop');
                let disconnectMessage = localize('command.shutdownEnvironment.confirmDisconnectShutdown', 'You are currently connected to {}, do you want to disconnect and stop?');
                disconnectMessage = injectMessageParameters_1.injectMessageParameters(disconnectMessage, codespaceToStop.name);
                const selection = await dependencies_1.dependencies.notificationUtil.showWarningMessage(disconnectMessage, { modal: true }, disconnectButton);
                if (selection === disconnectButton) {
                    return await this.stopCodespace(codespaceToStop, environmentSetup, true);
                }
                return false;
            }
        }
        return await this.stopCodespace(codespaceToStop, environmentSetup, options.forceDisconnect);
    }
    async stopCodespace(codespace, environmentSetup, needDisconnect) {
        const isRunninginWeb = commandContext_1.getCommandContext("codespaces:running-in-web" /* IsRunningInWeb */);
        if (needDisconnect && !isRunninginWeb) {
            ActivationTasks_1.ActivationTasks.Instance.putTask("Suspend" /* Suspend */, { name: codespace.name });
            await dependencies_1.dependencies.commandUtil.executeCommand("github.codespaces.disconnectEnvironment" /* disconnectEnvironment */);
            return true;
        }
        else {
            return await environmentSetup.shutdownCodespace(codespace);
        }
    }
};
ShutdownEnvironment = __decorate([
    vscode_command_framework_1.errorNotificationCommandDecorator(titles.shutdownEnvironment, telemetryString_1.TelemetryEventNames.SHUTDOWN_ENVIRONMENT_FAULT),
    vscode_command_framework_1.telemetryCommandDecorator(telemetryString_1.TelemetryEventNames.SHUTDOWN_ENVIRONMENT, telemetryString_1.TelemetryEventNames.SHUTDOWN_ENVIRONMENT_FAULT, titles.shutdownEnvironment, 1)
], ShutdownEnvironment);
exports.ShutdownEnvironment = ShutdownEnvironment;


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const environmentInfo_1 = __webpack_require__(32);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const telemetryString_1 = __webpack_require__(12);
const EnvironmentPolling_1 = __webpack_require__(283);
const injectMessageParameters_1 = __webpack_require__(22);
const opentelemetry = __webpack_require__(156);
const OpenTelemetryProvider_1 = __webpack_require__(97);
const progress_1 = __webpack_require__(666);
const localize = nls.loadMessageBundle();
class EnvironmentSetup {
    constructor(dependencies) {
        this.dependencies = dependencies;
    }
    async startCodespace(telemetryEvent, codespace, showProgress = true, progressReporter = undefined) {
        if (!codespace || !codespace.environment_id) {
            this.dependencies.notificationUtil.showWarningMessage(localize('error.unableToGetEnvInfo', 'Unable to get codespace information'));
            return undefined;
        }
        const span = opentelemetry.trace
            .getTracer(OpenTelemetryProvider_1.openTelemetryTracerName)
            .startSpan(OpenTelemetryProvider_1.OpenTelemetrySpans.resumeCodespace);
        span.setAttribute(OpenTelemetryProvider_1.openTelemetryCodespaceId, codespace.environment_id);
        const startTime = Date.now();
        let title = localize('message.environmentSetup.title.startingEnvironment', 'Starting codespace: {}');
        title = injectMessageParameters_1.injectMessageParameters(title, codespace.name);
        let details;
        if (showProgress) {
            details = await this.dependencies.notificationUtil.withProgress({
                title,
                location: this.dependencies.notificationUtil.notificationProgressLocation,
            }, () => {
                return this.callStartCodespace(codespace, progressReporter);
            });
        }
        else {
            details = await this.callStartCodespace(codespace, progressReporter);
        }
        // Mark time taken to provision resources for start.
        span.end();
        telemetryEvent.addMeasure(telemetryString_1.TelemetryMeasureNames.PROVISIONING_DURATION, Date.now() - startTime);
        if (details) {
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(details);
        }
        return details;
    }
    async callStartCodespace(codespace, progressReporter = undefined) {
        codespace = await this.dependencies
            .getApiProvider()
            .environments.startEnvironment(codespace);
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(codespace);
        if (!progressReporter) {
            return await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilReady(codespace);
        }
        let codespaceDetails = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilRebuildingOrReady(codespace.environment_id);
        if (codespaceDetails) {
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.setCurrentCodespace(codespaceDetails);
            if (codespaceDetails.state === environmentInfo_1.StateInfo.Rebuilding) {
                progressReporter.update(progress_1.ProgressOptions.RebuildCodespace);
                codespaceDetails = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilReady(codespace);
            }
            else if (codespaceDetails.state === environmentInfo_1.StateInfo.Starting) {
                codespaceDetails = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilReady(codespace);
            }
        }
        return codespaceDetails;
    }
    async shutdownCodespace(codespace) {
        if (!codespace || !codespace.environment_id) {
            this.dependencies.notificationUtil.showWarningMessage(localize('error.unableToGetEnvInfo', 'Unable to get codespace information'));
            return false;
        }
        let title = localize('message.environmentSetup.title.shuttingDownEnvironment', 'Stopping codespace: {}');
        title = injectMessageParameters_1.injectMessageParameters(title, codespace.name);
        await this.dependencies.notificationUtil.withProgress({
            title,
            location: this.dependencies.notificationUtil.notificationProgressLocation,
        }, async () => {
            codespace = await this.dependencies
                .getApiProvider()
                .environments.shutdownCodespace(codespace);
            CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(codespace);
            const shutdownCodespace = await EnvironmentPolling_1.EnvironmentPolling.Instance.pollUntilShutdown(codespace.environment_id);
            if (shutdownCodespace) {
                CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.addOrUpdateCodespace(shutdownCodespace);
            }
        });
        return true;
    }
}
exports.EnvironmentSetup = EnvironmentSetup;


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const environmentInfo_1 = __webpack_require__(32);
const nls = __webpack_require__(7);
const localize = nls.loadMessageBundle();
var ProgressOptions;
(function (ProgressOptions) {
    ProgressOptions[ProgressOptions["Connecting"] = 1] = "Connecting";
    ProgressOptions[ProgressOptions["Starting"] = 2] = "Starting";
    ProgressOptions[ProgressOptions["ConnectingServer"] = 3] = "ConnectingServer";
    ProgressOptions[ProgressOptions["Done"] = 4] = "Done";
    ProgressOptions[ProgressOptions["ResumingCodespace"] = 5] = "ResumingCodespace";
    ProgressOptions[ProgressOptions["BuildCodespace"] = 6] = "BuildCodespace";
    ProgressOptions[ProgressOptions["ShuttingDown"] = 7] = "ShuttingDown";
    ProgressOptions[ProgressOptions["RebuildCodespace"] = 8] = "RebuildCodespace";
})(ProgressOptions = exports.ProgressOptions || (exports.ProgressOptions = {}));
var ProgressType;
(function (ProgressType) {
    ProgressType[ProgressType["Default"] = 0] = "Default";
    ProgressType[ProgressType["Resume"] = 1] = "Resume";
    ProgressType[ProgressType["Creation"] = 2] = "Creation";
    ProgressType[ProgressType["ShuttingDown"] = 3] = "ShuttingDown";
})(ProgressType = exports.ProgressType || (exports.ProgressType = {}));
const progressDefaultMark = [
    ProgressOptions.Connecting,
    ProgressOptions.Starting,
    ProgressOptions.ConnectingServer,
    ProgressOptions.Done,
];
const resumeProgressMark = [
    ProgressOptions.ResumingCodespace,
    ProgressOptions.RebuildCodespace,
].concat(progressDefaultMark);
const creationProgressMark = [ProgressOptions.BuildCodespace].concat(progressDefaultMark);
const shuttingDownProgressMark = [
    ProgressOptions.ShuttingDown,
    ProgressOptions.ResumingCodespace,
].concat(progressDefaultMark);
const progressMap = new Map([
    [
        ProgressOptions.Connecting,
        {
            message: localize('progress.joiningWorkspace', 'Connecting to codespace...'),
            weight: 5,
        },
    ],
    [
        ProgressOptions.Starting,
        {
            message: localize('progress.startingServer', 'Starting remote server...'),
            weight: 4,
        },
    ],
    [
        ProgressOptions.ConnectingServer,
        {
            message: localize('progress.connectingToServer', 'Connecting to remote server...'),
            weight: 0.6,
        },
    ],
    [
        ProgressOptions.ResumingCodespace,
        {
            message: localize('progress.resumingCodespace', 'Starting codespace...'),
            weight: 10,
        },
    ],
    [
        ProgressOptions.BuildCodespace,
        {
            message: localize('progress.buildingCodespace', '[Building codespace...](command:github.codespaces.viewCreationLog)'),
            weight: 12,
        },
    ],
    [
        ProgressOptions.RebuildCodespace,
        {
            message: localize('progress.rebuildingCodespace', '[Rebuilding codespace...](command:github.codespaces.viewCreationLog)'),
            weight: 5,
        },
    ],
    [
        ProgressOptions.ShuttingDown,
        {
            message: localize('progress.shuttingDown', 'Shutting down codespace...'),
            weight: 5,
        },
    ],
]);
class UserProgressReporter {
    constructor(progress, codespace, logger) {
        this.progress = progress;
        this.logger = logger;
        this.currentMarkIndex = -1;
        this.currentFakeProgress = 0;
        this.fakeTick = 0;
        if (codespace.state === environmentInfo_1.StateInfo.Provisioning ||
            codespace.state === environmentInfo_1.StateInfo.Rebuilding ||
            (codespace.state === environmentInfo_1.StateInfo.Queued && !codespace.connection.sessionPath)) {
            this.totalWeight = this.calculateWeight(creationProgressMark);
            this.progressMark = creationProgressMark;
            this.type = ProgressType.Creation;
        }
        else if (codespace.state === environmentInfo_1.StateInfo.Starting ||
            codespace.state === environmentInfo_1.StateInfo.Queued ||
            codespace.state === environmentInfo_1.StateInfo.Shutdown) {
            this.totalWeight = this.calculateWeight(resumeProgressMark);
            this.progressMark = resumeProgressMark;
            this.type = ProgressType.Resume;
        }
        else if (codespace.state === environmentInfo_1.StateInfo.ShuttingDown) {
            this.totalWeight = this.calculateWeight(shuttingDownProgressMark);
            this.progressMark = shuttingDownProgressMark;
            this.type = ProgressType.ShuttingDown;
        }
        else {
            this.totalWeight = this.calculateWeight(progressDefaultMark);
            this.progressMark = progressDefaultMark;
            this.type = ProgressType.Default;
        }
        this.startFakeProgress();
    }
    update(newMark) {
        var _a, _b;
        const progressItem = progressMap.get(newMark);
        const newIndex = this.progressMark.indexOf(newMark);
        if (newIndex <= this.currentMarkIndex) {
            throw new Error(`Progress can't move backwards`);
        }
        if (newMark === ProgressOptions.Done) {
            this.stopFakeProgress();
        }
        this.currentMarkIndex = newIndex;
        const prevMark = this.progressMark[newIndex - 1];
        if (!prevMark) {
            return;
        }
        const prevWeight = progressMap.get(prevMark).weight;
        const increment = Math.max((prevWeight / this.totalWeight) * 100 - this.currentFakeProgress, 0);
        this.progress.report({ message: (_a = progressItem === null || progressItem === void 0 ? void 0 : progressItem.message) !== null && _a !== void 0 ? _a : 'Done', increment });
        this.logger.info(`Progress: ` + ((_b = progressItem === null || progressItem === void 0 ? void 0 : progressItem.message) !== null && _b !== void 0 ? _b : 'Done'));
        this.fakeTick = 0;
        this.currentFakeProgress = 0;
    }
    updateMessage(step, message) {
        if (!step) {
            return;
        }
        const progressItem = progressMap.get(step);
        if (progressItem) {
            progressItem.message = message;
        }
    }
    startFakeProgress() {
        this.fakeProgressTimer = setInterval(() => {
            this.addFakeProgress();
        }, 100);
    }
    stopFakeProgress() {
        clearInterval(this.fakeProgressTimer);
    }
    addFakeProgress() {
        const curMark = this.progressMark[this.currentMarkIndex];
        const curWeight = progressMap.get(curMark).weight;
        if (curWeight) {
            // Higher = more linear/slower increase
            const N = 13;
            // Goes from 0 to 1.
            const newProportion = (Math.atan(this.fakeTick / N) * 2) / Math.PI;
            // The total weight to increase to, goes up to 90% of the current weight.
            const newCurrentFakeProgress = ((newProportion * curWeight * 0.9) / this.totalWeight) * 100;
            // The increment to increase by.
            const newFakeIncrement = newCurrentFakeProgress - this.currentFakeProgress;
            const message = progressMap.get(curMark).message;
            this.progress.report({ message, increment: newFakeIncrement });
            this.currentFakeProgress = newCurrentFakeProgress;
            this.fakeTick++;
        }
    }
    get progressType() {
        return this.type;
    }
    calculateWeight(progressMark) {
        return Array.from(progressMap.entries())
            .map((entry) => {
            if (progressMark.includes(entry[0])) {
                return entry[1].weight;
            }
            return 0;
        })
            .reduce((sum, w) => sum + w, 0);
    }
}
exports.UserProgressReporter = UserProgressReporter;


/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function registerResolver(context, packageJSON, allowedPortPrivacySettingsByCodespace) {
    // There's no resolver in the web.
}
exports.registerResolver = registerResolver;


/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// The desktop implementation allows logging telemetry to a file. 
// It could be useful to explore implementing this by writing to indexed db. 
function setupTelemetryLogging() {
    return Promise.resolve();
}
exports.setupTelemetryLogging = setupTelemetryLogging;


/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const nls = __webpack_require__(7);
const vscode_command_framework_1 = __webpack_require__(3);
const vscs_utils_1 = __webpack_require__(8);
const uuid = __webpack_require__(175);
const parseQueryString_1 = __webpack_require__(670);
const localize = nls.loadMessageBundle();
class CodespacesProtocolHandler {
    constructor(dependencies, logger) {
        this.dependencies = dependencies;
        this.logger = logger !== null && logger !== void 0 ? logger : vscode_command_framework_1.traceSource.withName('ProtocolHandler');
    }
    handleUri(uri) {
        const query = parseQueryString_1.parseQueryString(uri.query);
        switch (uri.path) {
            case '/connect':
                this.logger.info(`Received connect event: ${uri.toString()}`);
                this.connectHandler(query);
                break;
            default:
                this.logger.info(`Received event: ${uri.toString()}`);
                break;
        }
    }
    connectHandler(query) {
        const { name, correlationId } = query;
        vscs_utils_1.assert((name === null || name === void 0 ? void 0 : name.trim().length) > 0, localize('error.unknownProtocolFormat', 'Unknown protocol format'));
        this.logger.info(`Connecting to codespace ${name}`);
        try {
            this.dependencies.commandUtil.executeCommand("github.codespaces.connect" /* connect */, {
                name,
                uriHandlerCorrelationId: correlationId,
            });
        }
        catch (err) {
            this.logger.error('Failed to connect to codespace', err);
        }
    }
    static buildConnectionUri(scheme, codespace) {
        const params = {
            name: encodeURIComponent(codespace.name),
            correlationId: uuid.v4(),
        };
        const paramsStr = Object.keys(params)
            .map((key) => `${key}=${params[key]}`)
            .join('&');
        return `${scheme}://GitHub.codespaces/connect?${paramsStr}`;
    }
    dispose() { }
}
exports.CodespacesProtocolHandler = CodespacesProtocolHandler;


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function parseQueryString(queryString) {
    const query = {};
    if (!queryString || queryString.length === 0) {
        return query;
    }
    const pairs = queryString.split('&');
    for (let i = 0; i < pairs.length; i++) {
        const pair = pairs[i];
        const splitIdx = pair.indexOf('=');
        const name = decodeURIComponent(pair.substr(0, splitIdx));
        const value = decodeURIComponent(pair.substr(splitIdx + 1, pair.length));
        query[name] = value;
    }
    return query;
}
exports.parseQueryString = parseQueryString;


/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
const nls = __webpack_require__(7);
const luxon_1 = __webpack_require__(155);
const vscode_command_framework_1 = __webpack_require__(3);
const CloudEnvViews_1 = __webpack_require__(76);
const commandConstants_1 = __webpack_require__(160);
const TreeViewItem_1 = __webpack_require__(161);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const commandContext_1 = __webpack_require__(41);
const injectMessageParameters_1 = __webpack_require__(22);
const IGitHubApi_1 = __webpack_require__(74);
const util_1 = __webpack_require__(52);
const localize = nls.loadMessageBundle();
class EnvironmentDetailsExplorer {
    constructor() {
        // Event registered by vscode to update the tree view
        this.changeEventEmitter = new vscode.EventEmitter();
        this.onDidChangeTreeData = this.changeEventEmitter.event;
        this.refresh = () => {
            this.changeEventEmitter.fire(undefined);
        };
        this.logger = vscode_command_framework_1.traceSource.withName('RemoteExplorer');
        this.updateEnvironmentDetails().catch((e) => this.logger.error('Failed update environment details on explorer initialization', e));
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(this.updateEnvironmentDetails.bind(this));
    }
    async updateEnvironmentDetails() {
        try {
            this.logger.info('Updating codespace details');
            this.selectedCodespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
            if (this.selectedCodespace) {
                await this.updateConnectedEnv();
            }
            else {
                this.emptyEnvDetails();
            }
            this.refresh();
        }
        catch (e) {
            // Callers aren't awaiting this async method, so any errors thrown here would be unhandled.
            this.logger.error('Failed to update environment details: ' + e.message, e);
        }
    }
    emptyEnvDetails() {
        this.selectedCodespace = undefined;
    }
    async updateConnectedEnv() {
        await commandContext_1.setCommandContext("codespaces:connectionState" /* ConnectionState */, this.selectedCodespace ? commandConstants_1.ConnectionState.Connected : commandConstants_1.ConnectionState.NotConnected);
    }
    getTreeItem(element) {
        return element;
    }
    async getChildren(element) {
        if (!this.selectedCodespace) {
            await this.updateConnectedEnv();
        }
        return this.selectedCodespace
            ? this.getEnvironmentDetails()
            : this.getDefaultRootChildren();
    }
    async getEnvironmentDetails() {
        let result = [];
        if (!this.selectedCodespace) {
            return [];
        }
        if (this.selectedCodespace.vscs_target &&
            this.selectedCodespace.vscs_target !== IGitHubApi_1.VscsTarget.Production) {
            const vscsTargetLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envDetailsView.vscsTarget', 'VSCS Target: {}'), util_1.Util.Instance.formatDisplayStringForTarget(this.selectedCodespace.vscs_target, this.selectedCodespace.vscs_target));
            result.push(new TreeViewItem_1.TreeViewItem(vscsTargetLabel, {
                type: CloudEnvViews_1.ViewItem.VscsTarget,
            }).withIconPath(new vscode.ThemeIcon('server-environment')));
        }
        if (this.selectedCodespace.repository.full_name) {
            const repoLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envDetailsView.repo', '{} • {}'), this.selectedCodespace.repository.full_name, this.selectedCodespace.machine.display_name);
            result.push(new TreeViewItem_1.TreeViewItem(repoLabel, {
                type: CloudEnvViews_1.ViewItem.RepoName,
            }).withIconPath(new vscode.ThemeIcon('vm-active')));
        }
        if (this.selectedCodespace.git_status.ref) {
            const branchLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envDetailsView.branch', '{} • {}↓ {}↑'), this.selectedCodespace.git_status.ref, this.selectedCodespace.git_status.behind, this.selectedCodespace.git_status.ahead);
            result.push(new TreeViewItem_1.TreeViewItem(branchLabel, {
                type: CloudEnvViews_1.ViewItem.Branch,
            }).withIconPath(new vscode.ThemeIcon('source-control')));
        }
        if (this.selectedCodespace.created_at) {
            const createdLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envDetailsView.createdAt', 'Created {}'), luxon_1.DateTime.fromISO(this.selectedCodespace.created_at).toRelative());
            result.push(new TreeViewItem_1.TreeViewItem(createdLabel, {
                type: CloudEnvViews_1.ViewItem.CreatedAt,
            }).withIconPath(new vscode.ThemeIcon('book')));
        }
        return result;
    }
    async getDefaultRootChildren() {
        //We should not ever see this in ui because the Codespace Details pane should be hidden if there is not a selected environment
        const result = [];
        const label = `Connect to codespace...`;
        const newEnv = new TreeViewItem_1.TreeViewItem(label, { type: CloudEnvViews_1.ViewItem.ConnectToEnvironment }, vscode.TreeItemCollapsibleState.None).withCommand({
            title: 'Connect to codespace...',
            command: "github.codespaces.connect" /* connect */,
        });
        result.push(newEnv);
        return result;
    }
}
exports.EnvironmentDetailsExplorer = EnvironmentDetailsExplorer;


/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
const path = __webpack_require__(30);
const nls = __webpack_require__(7);
const TreeViewItem_1 = __webpack_require__(161);
const CloudEnvViews_1 = __webpack_require__(76);
const vscode_command_framework_1 = __webpack_require__(3);
const commandConstants_1 = __webpack_require__(160);
const commandContext_1 = __webpack_require__(41);
const TreeViewItemOptions_1 = __webpack_require__(673);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const util_1 = __webpack_require__(52);
const injectMessageParameters_1 = __webpack_require__(22);
const localize = nls.loadMessageBundle();
class EnvironmentExplorer {
    constructor(dependencies) {
        this.dependencies = dependencies;
        // Event registered by vscode to update the tree view
        this.changeEventEmitter = new vscode.EventEmitter();
        this.onDidChangeTreeData = this.changeEventEmitter.event;
        this.codespaces = [];
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(this.updateEnvironmentList.bind(this));
        dependencies.getApiProvider().onSignInChanged(this.updateInitializationStatus.bind(this));
        this.updateInitializationStatus().catch();
    }
    refresh() {
        this.changeEventEmitter.fire(undefined);
    }
    updateEnvironmentList(codespaces) {
        this.codespaces = codespaces;
        this.refresh();
    }
    async updateInitializationStatus() {
        try {
            await this.resetInitializationForExplorerState();
            if (this.dependencies.getApiProvider().isSignedIn()) {
                this.codespaces = await CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.fetchEnvironmentsList();
                this.refresh();
            }
            else {
                this.emptyEnv();
            }
        }
        catch (e) {
            this.refresh();
            // Callers aren't awaiting this async method, so any errors thrown here would be unhandled.
            vscode_command_framework_1.traceSource.error('Failed to update codespaces list: ' + e.message, e);
        }
        finally {
            await this.initializedCompletedForExplorerState();
        }
    }
    emptyEnv() {
        this.codespaces = [];
        this.refresh();
    }
    getTreeItem(element) {
        return element;
    }
    async getContextForWelcomeView() {
        const signedIn = this.dependencies.getApiProvider().isSignedIn();
        const noCodespaces = signedIn && this.codespaces.length === 0;
        await commandContext_1.setCommandContext(`${"codespaces:views-welcome:" /* ViewsWelcome */}${'not-signed-in'}`, !signedIn);
        await commandContext_1.setCommandContext(`${"codespaces:views-welcome:" /* ViewsWelcome */}${'no-codespaces'}`, noCodespaces);
    }
    async getChildren(element) {
        let treeViewList = new Map();
        if (await this.isExplorerInitialized()) {
            await this.getContextForWelcomeView();
        }
        if ((element === null || element === void 0 ? void 0 : element.options.type) === CloudEnvViews_1.ViewItem.CodespaceRecentPath) {
            return this.makeRecentPathsList(element.id);
        }
        // If this is not the first render, return the children of existing trees.
        if (element && element.children) {
            return element.children;
        }
        if (treeViewList.size > 0) {
            const result = [];
            treeViewList.forEach((item) => {
                result.push(item);
            });
            return result;
        }
        else {
            return this.makeTreeViewList(treeViewList, util_1.Util.Instance.sortedCodespacesList(this.codespaces));
        }
    }
    makeTreeViewList(treeViewList, codespaces) {
        let currentUser = undefined;
        codespaces.map((codespace) => {
            var _a;
            currentUser = codespace.owner.login;
            const owner = (_a = codespace.billable_owner.login) !== null && _a !== void 0 ? _a : 'Unknown';
            if (treeViewList.has(owner)) {
                const treeViewChild = this.buildCodespaceTreeViewItem(codespace);
                const treeView = treeViewList.get(owner);
                if (treeView === undefined) {
                    vscode_command_framework_1.traceSource.error(`unable to find the codespaces treeView for codespace id ${codespace.environment_id}`);
                    return;
                }
                const children = treeView.children !== undefined ? treeView.children : [];
                children.push(treeViewChild);
                treeView.children = children;
                treeViewList.set(owner, treeView);
            }
            else {
                const parent = this.buildOwnerTreeViewItem(treeViewList, codespace, owner);
                treeViewList.set(owner, parent);
            }
        });
        // Sorting codespaces by their owners.
        treeViewList = new Map([...treeViewList.entries()].sort((a, b) => {
            if (a[0] === currentUser && b[0] !== currentUser) {
                return -1;
            }
            if (a[0] !== currentUser && b[0] === currentUser) {
                return 1;
            }
            else {
                return 0;
            }
        }));
        return [...treeViewList.values()];
    }
    // Build a treeView based on owner of the repo.
    buildOwnerTreeViewItem(treeViewList, selectedCodespace, owner) {
        const parent = new TreeViewItem_1.TreeViewItem(owner, { type: CloudEnvViews_1.ViewItem.Folder }, vscode.TreeItemCollapsibleState.Expanded);
        let child = [];
        child.push(this.buildCodespaceTreeViewItem(selectedCodespace));
        parent.children = child;
        treeViewList.set(owner, parent);
        return parent;
    }
    // Build a treeView for each codespace.
    buildCodespaceTreeViewItem(selectedCodespace) {
        var _a;
        const iconsRoot = this.dependencies.extensionsUtil.getRelativeExtensionUri('images/');
        const currentCodespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
        const currentCodespaceId = currentCodespace ? currentCodespace.environment_id : undefined;
        const recentPaths = this.getRecentPathsForDisplay(selectedCodespace);
        const hasRecentPaths = recentPaths.length > 0;
        const options = TreeViewItemOptions_1.TreeViewItemOptionsFactory.fromCodespace(selectedCodespace, currentCodespaceId, hasRecentPaths);
        const formattedName = util_1.Util.Instance.formatDisplayStringForTarget((_a = selectedCodespace.repository.full_name) !== null && _a !== void 0 ? _a : 'Unknown', selectedCodespace.vscs_target);
        const treeItem = new TreeViewItem_1.TreeViewItem(formattedName, options, hasRecentPaths
            ? vscode.TreeItemCollapsibleState.Expanded
            : vscode.TreeItemCollapsibleState.None);
        let description = '';
        if (selectedCodespace.git_status.ref) {
            const ahead = selectedCodespace.git_status.ahead;
            const behind = selectedCodespace.git_status.behind;
            description =
                selectedCodespace.git_status.ref +
                    (ahead !== 0 || behind !== 0 ? ` • ${behind}↓ ${ahead}↑` : '');
        }
        const tooltip = new vscode.MarkdownString(options.tooltip, true);
        return treeItem
            .withIconPath({
            dark: vscode.Uri.joinPath(iconsRoot, 'dark', options.iconFile),
            light: vscode.Uri.joinPath(iconsRoot, 'light', options.iconFile),
        })
            .withTooltip(tooltip)
            .withDescription(description)
            .withId(selectedCodespace.environment_id);
    }
    makeRecentPathsList(codespaceId) {
        const iconsRoot = this.dependencies.extensionsUtil.getRelativeExtensionUri('images/');
        const codespace = this.codespaces.find((e) => e.environment_id === codespaceId);
        if (!codespace) {
            return [];
        }
        const paths = this.getRecentPathsForDisplay(codespace);
        return paths.map((recentPath) => {
            const options = TreeViewItemOptions_1.TreeViewItemOptionsFactory.recentPathOptions(recentPath);
            const extension = path.extname(recentPath);
            let name = path.basename(recentPath, extension);
            if (extension === '.code-workspace') {
                name = injectMessageParameters_1.injectMessageParameters(localize('text.codespaceExplorer.workspaceSuffix', '{} (Workspace)'), name);
            }
            const treeItem = new TreeViewItem_1.TreeViewItem(name, options)
                .withIconPath({
                dark: vscode.Uri.joinPath(iconsRoot, 'dark', options.iconFile),
                light: vscode.Uri.joinPath(iconsRoot, 'light', options.iconFile),
            })
                .withTooltip(options.tooltip)
                .withFilepath(recentPath)
                .withCodespaceId(codespace.environment_id);
            return treeItem;
        });
    }
    getRecentPathsForDisplay(codespace) {
        // Only display the folders if there is more than one in the list
        if (codespace.recent_folders && codespace.recent_folders.length > 1) {
            return codespace.recent_folders;
        }
        return [];
    }
    async initializedCompletedForExplorerState() {
        await commandContext_1.setCommandContext("codespaces:explorerState" /* ExplorerState */, commandConstants_1.ExplorerState.Initialized);
    }
    async resetInitializationForExplorerState() {
        await commandContext_1.setCommandContext("codespaces:explorerState" /* ExplorerState */, commandConstants_1.ExplorerState.NotInitialized);
    }
    async isExplorerInitialized() {
        return ((await commandContext_1.getCommandContext("codespaces:explorerState" /* ExplorerState */)) === commandConstants_1.ExplorerState.Initialized);
    }
}
exports.EnvironmentExplorer = EnvironmentExplorer;


/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const os = __webpack_require__(77);
const nls = __webpack_require__(7);
const luxon_1 = __webpack_require__(155);
const environmentInfo_1 = __webpack_require__(32);
const CloudEnvViews_1 = __webpack_require__(76);
const EnvironmentCommands_1 = __webpack_require__(53);
const injectMessageParameters_1 = __webpack_require__(22);
const IGitHubApi_1 = __webpack_require__(74);
const util_1 = __webpack_require__(52);
const { Available, Shutdown, Failed } = environmentInfo_1.StateInfo;
const localize = nls.loadMessageBundle();
class TreeViewItemOptionsFactory {
    static fromCodespace(codespace, connectedCodespaceId, hasRecentPaths) {
        let attributes = EnvironmentCommands_1.getAvailableCommands(codespace);
        let iconFile = 'availableEnv.svg';
        if (codespace.state === Shutdown) {
            iconFile = 'pause.svg';
        }
        else if (codespace.state === Failed) {
            iconFile = 'error.svg';
        }
        else if (codespace.state !== Available) {
            iconFile = 'spinner.svg';
        }
        if (codespace.environment_id === connectedCodespaceId) {
            iconFile = '/selectedEnv.svg';
        }
        let details = [];
        if (codespace.vscs_target && codespace.vscs_target !== IGitHubApi_1.VscsTarget.Production) {
            const vscsTargetLabel = injectMessageParameters_1.injectMessageParameters(localize('text.codespaceDetailsView.vscsTarget', '$(server-environment) VSCS target: {}'), util_1.Util.Instance.formatDisplayStringForTarget(codespace.vscs_target, codespace.vscs_target));
            details.push(vscsTargetLabel);
        }
        let vmIcon;
        if (codespace.state === environmentInfo_1.StateInfo.Available) {
            vmIcon = '$(vm-active)';
        }
        else {
            vmIcon = '$(vm)';
        }
        if (codespace.repository.full_name) {
            const repoWithSku = injectMessageParameters_1.injectMessageParameters(localize('text.codespaceDetailsView.repo', '{} {} • {}'), vmIcon, codespace.repository.full_name, codespace.machine.display_name);
            details.push(repoWithSku);
        }
        // branch name, ahead and behind number of commits
        if (codespace.git_status.ref) {
            const ahead = codespace.git_status.ahead;
            const behind = codespace.git_status.behind;
            const icon = ahead !== 0 || behind !== 0 ? `• ${behind}$(arrow-down) ${ahead}$(arrow-up)` : '';
            const branchLabel = injectMessageParameters_1.injectMessageParameters(localize('text.codespaceDetailsView.branch', '$(source-control) {} {}'), codespace.git_status.ref, icon);
            details.push(branchLabel);
        }
        if (codespace.last_used_at) {
            const lastUsedLabel = injectMessageParameters_1.injectMessageParameters(localize('text.codespaceDetailsView.lastUsed', '$(clock) Last used {}'), luxon_1.DateTime.fromISO(codespace.last_used_at).toRelative());
            details.push(lastUsedLabel);
        }
        if (codespace.created_at) {
            const createdLabel = injectMessageParameters_1.injectMessageParameters(localize('text.codespaceDetailsView.created', '$(book) Created {}'), luxon_1.DateTime.fromISO(codespace.created_at).toRelative());
            details.push(createdLabel);
        }
        if (hasRecentPaths) {
            return {
                attributes,
                iconFile,
                type: CloudEnvViews_1.ViewItem.CodespaceRecentPath,
                tooltip: details.join(os.EOL + os.EOL),
            };
        }
        else {
            //remove else case?
            return {
                attributes,
                iconFile,
                type: CloudEnvViews_1.ViewItem.Environment,
                tooltip: details.join(os.EOL + os.EOL),
            };
        }
    }
    static recentPathOptions(tooltip, deleteEnabled = true) {
        const attributes = {
            connectToEnabled: true,
            removePathEnabled: deleteEnabled,
            exportEnabled: false,
        };
        const iconFile = 'folder.svg';
        return {
            attributes,
            iconFile,
            type: CloudEnvViews_1.ViewItem.Folder,
            tooltip: tooltip,
        };
    }
}
exports.TreeViewItemOptionsFactory = TreeViewItemOptionsFactory;


/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const commandContext_1 = __webpack_require__(41);
const commandEnablement = {
    connect: false,
    disconnectEnvironment: false,
    deleteEnvironment: false,
    addEnvironment: false,
    environmentsList: false,
    signIn: false,
    getAccessToken: false,
    getPorts: false,
    exportLogs: false,
    refresh: false,
    openInNewWindow: false,
    openInBrowser: false,
    openInInsiders: false,
    openInStable: false,
    shutdownEnvironment: false,
    disconnectSuspend: false,
    changeSku: false,
    reloadServer: false,
    removeRecentFolder: false,
    goHome: false,
    createDevContainer: false,
    rebuildEnvironment: false,
    viewCreationLog: false,
    showDetails: false,
    goToRepo: false,
    myCodespaces: false,
};
// These are values that are computed once during extension activation and then never re-computed.
// They should not change over the life of a session.
const immutableValues = [
    "goToRepo",
    "myCodespaces"
];
const commandEnablementKeys = Object.keys(commandEnablement).map((k) => k);
function isCommandEnabled(command) {
    return commandEnablement[command];
}
exports.isCommandEnabled = isCommandEnabled;
async function setupCommandEnablement(dependencies) {
    // Compute values for immutable enablement flags
    if (dependencies.configurationManager.isRunningInWeb) {
        const commands = await dependencies.commandUtil.getCommands();
        // The web embedder might register these commands. If so, then we enable the context for them.
        commandEnablement.goToRepo = commands.includes("_codespaces.embedder.goToRepo" /* goToRepo */);
        commandEnablement.myCodespaces = commands.includes("_codespaces.embedder.myCodespaces" /* myCodespaces */);
    }
    // Update the rest of the flags and setup change handlers for future changes
    await updateEnablement(dependencies);
    commandContext_1.onCommandContextChanged(async ({ key }) => {
        if (key.startsWith("codespaces:command-enabled:" /* CommandEnabledPrefix */)) {
            return;
        }
        await updateEnablement(dependencies);
    });
}
exports.setupCommandEnablement = setupCommandEnablement;
async function updateEnablement(dependencies) {
    const isSignedIn = dependencies.getApiProvider().isSignedIn();
    if (!isSignedIn) {
        disableAllCommands();
        if (!isSignedIn) {
            commandEnablement.signIn = true;
        }
        await setCommandContextValuesForEnablement(dependencies);
        return;
    }
    enableAllCommands();
    const isInternal = dependencies.extensionsUtil.getIsInternalUser();
    const isRunningInWeb = commandContext_1.getCommandContext("codespaces:running-in-web" /* IsRunningInWeb */);
    const isConnected = commandContext_1.getCommandContext("codespaces:connectionState" /* ConnectionState */) === 'Connected';
    commandEnablement.openInStable = isRunningInWeb;
    commandEnablement.openInInsiders = isRunningInWeb;
    commandEnablement.openInNewWindow = !isRunningInWeb;
    commandEnablement.openInBrowser = !isRunningInWeb;
    commandEnablement.signIn = !isRunningInWeb && !isSignedIn;
    commandEnablement.getAccessToken = isInternal;
    const isGoHomeFileMenuItemEnabled = commandContext_1.getCommandContext("codespaces:is-go-home-file-menu-item-enabled" /* IsGoHomeFileMenuItemEnabled */);
    commandEnablement.goHome = isRunningInWeb && isGoHomeFileMenuItemEnabled;
    if (isConnected) {
        commandEnablement.addEnvironment = false;
    }
    else {
        commandEnablement.viewCreationLog = false;
    }
    await setCommandContextValuesForEnablement(dependencies);
}
function enableAllCommands() {
    commandEnablementKeys.forEach((key) => {
        if (!immutableValues.includes(key)) {
            commandEnablement[key] = true;
        }
    });
}
function disableAllCommands() {
    commandEnablementKeys.forEach((key) => {
        if (!immutableValues.includes(key)) {
            commandEnablement[key] = false;
        }
    });
}
async function setCommandContextValuesForEnablement(dependencies) {
    await Promise.all(commandEnablementKeys.map(async (key) => {
        const contextKey = `${"codespaces:command-enabled:" /* CommandEnabledPrefix */}${key}`;
        const isEnabled = commandEnablement[key];
        await commandContext_1.setCommandContext(contextKey, isEnabled);
    }));
}


/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode = __webpack_require__(1);
const nls = __webpack_require__(7);
const CloudEnvViews_1 = __webpack_require__(76);
const TreeViewItem_1 = __webpack_require__(161);
const CodespaceDetailsProvider_1 = __webpack_require__(13);
const vscode_command_framework_1 = __webpack_require__(3);
const injectMessageParameters_1 = __webpack_require__(22);
const commandContext_1 = __webpack_require__(41);
const OpenTelemetryProvider_1 = __webpack_require__(97);
const vso_telemetry_1 = __webpack_require__(11);
const dependencies_1 = __webpack_require__(14);
const localize = nls.loadMessageBundle();
class EnvironmentPerformanceExplorer {
    constructor() {
        this.changeEventEmitter = new vscode.EventEmitter();
        this.onDidChangeTreeData = this.changeEventEmitter.event;
        this.refresh = () => {
            this.changeEventEmitter.fire(undefined);
        };
        this.logger = vscode_command_framework_1.traceSource.withName('RemoteExplorer');
        this.updateEnvironmentDetails();
        CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.onCodespacesChanged(this.updateEnvironmentDetails.bind(this));
        this.firstChild = this.createFirstTreeItem();
        this.setCommandContextListener();
    }
    setContext(context) {
        this.context = context;
    }
    setTreeView(treeView) {
        this.treeView = treeView;
    }
    getTreeView() {
        return this.treeView;
    }
    static get Instance() {
        if (!this.singleton) {
            this.singleton = new EnvironmentPerformanceExplorer();
        }
        return this.singleton;
    }
    setCommandContextListener() {
        // set listener for changes in the command context
        commandContext_1.onCommandContextChanged(({ key }) => {
            if (key === "codespaces:connectionState" /* ConnectionState */) {
                // update first tree item upon connecting to environment
                this.firstChild = this.createFirstTreeItem();
            }
        });
    }
    updateEnvironmentDetails() {
        try {
            this.logger.info('Updating codespace performance info');
            this.selectedCodespace = CodespaceDetailsProvider_1.CodespaceDetailsProvider.Instance.getCurrentCodespace();
            if (!this.selectedCodespace) {
                this.emptyEnvDetails();
            }
            this.refresh();
        }
        catch (e) {
            this.logger.error('Failed to update codespace performance info: ' + e.message, e);
        }
    }
    updateDisconnectionNumber(disconnections) {
        this.disconnections = disconnections;
        this.refresh();
    }
    updateBytesIn(bytesIn) {
        this.bytesIn = bytesIn;
        this.refresh();
    }
    updateBytesOut(bytesOut) {
        this.bytesOut = bytesOut;
        this.refresh();
    }
    updateLatency(latency) {
        this.latencyCurrent = latency.current;
        this.latencyAvg = latency.average;
        this.latencyMin = latency.min;
        this.latencyMax = latency.max;
        this.refresh();
    }
    updatePerformanceRpcData(perfData) {
        this.codespaceCpu = perfData.cpuUsage;
        this.memoryUsed = perfData.memoryUsed;
        this.dockerLibDiskUsed = perfData.dockerLibDiskUsed;
        this.refresh();
    }
    updateClientCpu(clientCpu) {
        this.clientCpu = clientCpu;
        this.refresh();
    }
    getCurrentLatency() {
        return this.latencyCurrent;
    }
    emptyEnvDetails() {
        this.selectedCodespace = undefined;
    }
    formatBytes(bytes, precision = 2) {
        const base = 1024;
        const kiloBytes = base;
        const megaBytes = Math.pow(base, 2);
        const gigaBytes = Math.pow(base, 3);
        if (bytes < kiloBytes) {
            return injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.bytes', '{} Bytes'), bytes);
        }
        else if (bytes < megaBytes) {
            return (bytes / kiloBytes).toFixed(precision) + ' KB';
        }
        else if (bytes < gigaBytes) {
            return (bytes / megaBytes).toFixed(precision) + ' MB';
        }
        else {
            return (bytes / gigaBytes).toFixed(precision) + ' GB';
        }
    }
    createFirstTreeItem() {
        if (this.selectedCodespace && this.selectedCodespace.environment_id) {
            const idLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.envId', 'Codespace ID: {}'), this.selectedCodespace.environment_id);
            return new TreeViewItem_1.TreeViewItem(idLabel, {
                type: CloudEnvViews_1.ViewItem.EnvironmentID,
                attributes: {
                    copyIdToClipboardEnabled: true,
                },
            }).withCodespaceId(this.selectedCodespace.environment_id);
        }
        else {
            const label = !this.selectedCodespace
                ? localize('text.envPerformanceView.noCodespaceConnected', 'No codespace connected.')
                : localize('error.envPerformanceView.noEnvError', 'Environment Unavailable.');
            return new TreeViewItem_1.TreeViewItem(label, { type: CloudEnvViews_1.ViewItem.NotConnected }, vscode.TreeItemCollapsibleState.None);
        }
    }
    getFirstTreeItem() {
        return this.firstChild;
    }
    getTreeItem(element) {
        return element;
    }
    async getParent(element) {
        return undefined;
    }
    async getChildren(element) {
        if (element && element.children) {
            return element.children;
        }
        else {
            return this.selectedCodespace
                ? this.getEnvironmentPerformanceInfo()
                : this.getDefaultRootChildren();
        }
    }
    async getEnvironmentPerformanceInfo() {
        let result = [];
        this.firstChild = this.createFirstTreeItem();
        result.push(this.firstChild);
        if (!this.selectedCodespace) {
            return result;
        }
        const regionLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.region', 'Codespace Region: {}'), this.selectedCodespace.location);
        result.push(new TreeViewItem_1.TreeViewItem(regionLabel, {
            type: CloudEnvViews_1.ViewItem.EnvironmentRegion,
        }));
        const sessionIdLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.sessionId', 'Session ID: {}'), vso_telemetry_1.Telemetry.getContextProperty(vso_telemetry_1.TelemetryPropertyNames.SESSION_ID));
        result.push(new TreeViewItem_1.TreeViewItem(sessionIdLabel, {
            type: CloudEnvViews_1.ViewItem.SessionID,
            attributes: {
                copyIdToClipboardEnabled: true,
            },
        }).withSessionId(vso_telemetry_1.Telemetry.getContextProperty(vso_telemetry_1.TelemetryPropertyNames.SESSION_ID)));
        const disconnectionsLabel = this.disconnections != null
            ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.disconnections', 'Session Disconnections: {}'), this.disconnections)
            : localize('text.envPerformanceView.disconnectionsError', 'Disconnection data unavailable');
        result.push(new TreeViewItem_1.TreeViewItem(disconnectionsLabel, {
            type: CloudEnvViews_1.ViewItem.SessionDisconnections,
        }));
        // Only show connection and client cpu metrics if we're not in the web portal
        if (!dependencies_1.dependencies.configurationManager.isRunningInWeb) {
            const bytesInLabel = this.bytesIn != null
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.bytesIn', 'Total Session Bytes In: {}'), this.formatBytes(this.bytesIn))
                : localize('text.envPerformanceView.bytesInError', 'Total Session Bytes In: -');
            result.push(new TreeViewItem_1.TreeViewItem(bytesInLabel, {
                type: CloudEnvViews_1.ViewItem.SessionBytesIn,
            }));
            const bytesOutLabel = this.bytesOut != null
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.bytesOut', 'Total Session Bytes Out: {}'), this.formatBytes(this.bytesOut))
                : localize('text.envPerformanceView.bytesOutError', 'Total Session Bytes Out: -');
            result.push(new TreeViewItem_1.TreeViewItem(bytesOutLabel, {
                type: CloudEnvViews_1.ViewItem.SessionBytesOut,
            }));
            const latencyLabel = this.latencyCurrent != null
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.latencyLabel', 'Latency: {} ms'), this.latencyCurrent.toFixed(2))
                : localize('text.envPerformanceView.latencyLabelError', 'Latency: -');
            const latencyAvgLabel = this.latencyAvg
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.latencyAvgLabel', 'Session Average: {} ms'), this.latencyAvg.toFixed(2))
                : localize('text.envPerformanceView.latencyAvgError', 'Session Average: -');
            const latencyMinLabel = this.latencyMin
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.latencyMinLabel', 'Session Min: {} ms'), this.latencyMin.toFixed(2))
                : localize('text.envPerformanceView.latencyMinError', 'Session Min: -');
            const latencyMaxLabel = this.latencyMax
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.latencyMaxLabel', 'Session Max: {} ms'), this.latencyMax.toFixed(2))
                : localize('text.envPerformanceView.latencyMaxError', 'Session Max: -');
            const childrenOptions = { type: CloudEnvViews_1.ViewItem.SessionLatencyDetails };
            const latencyId = 'latency-collapsible-treeitem';
            const latencyTreeItem = new TreeViewItem_1.TreeViewItem(latencyLabel, { type: CloudEnvViews_1.ViewItem.SessionLatencyCurrent }, vscode.TreeItemCollapsibleState.Collapsed, [
                new TreeViewItem_1.TreeViewItem(latencyAvgLabel, childrenOptions),
                new TreeViewItem_1.TreeViewItem(latencyMinLabel, childrenOptions),
                new TreeViewItem_1.TreeViewItem(latencyMaxLabel, childrenOptions),
            ]).withId(latencyId);
            result.push(latencyTreeItem);
            const clientCpuLabel = this.clientCpu
                ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.clientCpuUsage', 'Client CPU Used: {}'), this.clientCpu)
                : localize('text.envPerformanceView.clientCpuLoading', 'Client CPU Used: -');
            result.push(new TreeViewItem_1.TreeViewItem(clientCpuLabel, {
                type: CloudEnvViews_1.ViewItem.ClientCpuUsage,
            }));
        }
        const codespaceCpuLabel = this.codespaceCpu && this.codespaceCpu !== "unavailable"
            ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.codespaceCpuUsage', 'Codespace CPU Used: {}'), this.codespaceCpu)
            : localize('text.envPerformanceView.codespaceCpuLoading', 'Codespace CPU Used: -');
        result.push(new TreeViewItem_1.TreeViewItem(codespaceCpuLabel, {
            type: CloudEnvViews_1.ViewItem.CodespaceCpuUsage,
        }));
        const memoryUsedLabel = this.memoryUsed && this.memoryUsed !== "unavailable"
            ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.memoryUsed', 'Memory Used: {}'), this.memoryUsed)
            : localize('text.envPerformanceView.memoryLoading', 'Memory Used: -');
        result.push(new TreeViewItem_1.TreeViewItem(memoryUsedLabel, {
            type: CloudEnvViews_1.ViewItem.MemoryUsed,
        }));
        const dockerLibDiskUsedLabel = this.dockerLibDiskUsed && this.dockerLibDiskUsed !== "unavailable"
            ? injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.dockerLibDiskUsed', 'Disk Used: {}'), this.dockerLibDiskUsed)
            : localize('text.envPerformanceView.dockerLibDiskUsedLoading', 'Disk Used: -');
        result.push(new TreeViewItem_1.TreeViewItem(dockerLibDiskUsedLabel, {
            type: CloudEnvViews_1.ViewItem.DockerLibDiskUsed,
        }));
        if (this.context) {
            const performanceValuesObject = OpenTelemetryProvider_1.getPerformanceValues(this.context, this.selectedCodespace.environment_id);
            if (performanceValuesObject) {
                const performanceValues = performanceValuesObject.performanceValues;
                if (performanceValues) {
                    if (performanceValues.createCodespaceTime) {
                        const createCodespaceTimeLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.createCodespaceTime', 'Create Codespace Time: {}'), performanceValues.createCodespaceTime);
                        result.push(new TreeViewItem_1.TreeViewItem(createCodespaceTimeLabel, {
                            type: CloudEnvViews_1.ViewItem.CreateCodespaceTime,
                        }));
                    }
                    if (performanceValues.resumeCodespaceTime) {
                        const resumeCodespaceTimeLabel = injectMessageParameters_1.injectMessageParameters(localize('text.envPerformanceView.resumeCodespaceTime', 'Start Codespace Time: {}'), performanceValues.resumeCodespaceTime);
                        result.push(new TreeViewItem_1.TreeViewItem(resumeCodespaceTimeLabel, {
                            type: CloudEnvViews_1.ViewItem.ResumeCodespaceTime,
                        }));
                    }
                }
            }
        }
        return result;
    }
    async getDefaultRootChildren() {
        const result = [];
        this.firstChild = this.createFirstTreeItem();
        result.push(this.firstChild);
        return result;
    }
}
exports.EnvironmentPerformanceExplorer = EnvironmentPerformanceExplorer;


/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = __webpack_require__(1);
const vso_telemetry_1 = __webpack_require__(11);
const configuration_1 = __webpack_require__(51);
const telemetryString_1 = __webpack_require__(12);
const utils_1 = __webpack_require__(151);
class TelemetryContext {
    static initialize(dependencies, context, packageJSON) {
        if (!TelemetryContext.initialized) {
            const isRunningInWeb = dependencies.configurationManager.isRunningInWeb;
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.PARTNER_NAME, 'GitHub');
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_INTERNAL, configuration_1.getIsInternalUser());
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.EXTENSION_VERSION, packageJSON.version);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.USE_HUB_WORKSPACE_AGENT, true);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_LOCAL, context.extensionMode === vscode_1.ExtensionMode.Development);
            vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_RUNNING_IN_WEB, isRunningInWeb);
            TelemetryContext.initialized = true;
        }
    }
    static async setTelemetryId(dependencies, codespace) {
        const telemetryId = await dependencies.getApiProvider().getTelemetryId(codespace);
        vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.TELEMETRY_ID, telemetryId);
        vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.IS_NODE_INSTALLED, await utils_1.isNodeInstalled());
    }
    static setCodespaceId(codespace) {
        vso_telemetry_1.Telemetry.addContextProperty(telemetryString_1.TelemetryPropertyNames.CODESPACE_ID, codespace.environment_id);
    }
}
exports.TelemetryContext = TelemetryContext;
TelemetryContext.initialized = false;


/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscs_performance_1 = __webpack_require__(678);
exports.performance = vscs_performance_1.initializePerformanceInstance('extension:start');


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Performance_1 = __webpack_require__(285);
exports.Performance = Performance_1.Performance;
exports.initializePerformanceInstance = Performance_1.initializePerformanceInstance;
exports.getOrCreatePerformance = Performance_1.getOrCreatePerformance;
var logPerformanceWaterfall_1 = __webpack_require__(681);
exports.logPerformanceWaterfall = logPerformanceWaterfall_1.logPerformanceWaterfall;
exports.mocks = __importStar(__webpack_require__(685));
//# sourceMappingURL=index.js.map

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class WaterfallNode {
    constructor(id, name, path, rawMeasure, blocks, perfGoups) {
        this.id = id;
        this.name = name;
        this.path = path;
        this.rawMeasure = rawMeasure;
        this.perfGoups = perfGoups;
        this.groups = [];
        this.getTotalDuration = () => {
            let maxTime = 0;
            for (let group of this.groups) {
                const totalTime = group.measure.startTime + group.measure.duration;
                if (totalTime > maxTime) {
                    maxTime = totalTime;
                }
            }
            return maxTime;
        };
        // measure properties are not
        // iterable, need to copy by hand
        this.measure = {
            name: rawMeasure.name,
            duration: rawMeasure.duration,
            startTime: rawMeasure.startTime,
            entryType: rawMeasure.entryType,
        };
        for (let block of blocks) {
            this.groups.push(Object.assign(Object.assign({}, block), { groups: [] }));
        }
        for (let group of this.perfGoups) {
            this.groups.push(group.getWaterfall());
        }
        const duration = this.getTotalDuration() - this.measure.startTime;
        this.measure = Object.assign(Object.assign({}, this.measure), { duration });
    }
}
exports.WaterfallNode = WaterfallNode;
//# sourceMappingURL=WaterfallNode.js.map

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(6);
const performance_ponyfill_1 = __webpack_require__(286);
/**
 * Utility class to abstract methods around mesuaring performance blocks.
 */
class PerformanceBlocks {
    /**
     * The `pathString` param used to define a full path of a block in
     * the nested blocks tree. Hence the path includes the paths of all
     * parents of the current block in the nested tree.
     */
    constructor(pathString) {
        this.pathString = pathString;
        this.blocks = {};
        /**
         * Events for any block `start`/`end` event.
         */
        this.onAnyEventEmitter = new vscode_jsonrpc_1.Emitter();
        this.onAnyEvent = this.onAnyEventEmitter.event;
        /**
         * Mark a `start` or `end` of a code block to measure. Must include
         * a name and can include `id` in case the block measurements need to
         * be retrieved later.
         *
         * Example:
         *
         * ```typescript
         * performanceBlocks.markBlock({ name: 'fetching info', type: 'start' });
         * // .. do some work
         * performanceBlocks.markBlock({ name: 'fetching info', type: 'end' });
         * ```
         * If id is not defined, name for the `start` and `end` should be equal.
         * Each `start` or `end` block with the same `name`/`id` expected to be
         * called once.
         */
        this.markBlock = (blockOptions) => {
            const { id, name, type } = blockOptions;
            // get unique block id
            const blockPath = `${this.pathString}.block: ${id !== null && id !== void 0 ? id : name}`;
            // get unique block id for the side (`start`/`end`) of the block
            const pathStringSide = `${blockPath}-${type}`;
            if (this.blocks[blockPath] && this.blocks[blockPath][type]) {
                throw new Error(`The event "${pathStringSide}" already marked in this group.`);
            }
            performance_ponyfill_1.performance.mark(pathStringSide);
            const [measure] = performance_ponyfill_1.performance.getEntriesByName(pathStringSide);
            const currentBlock = this.blocks[blockPath] || {
                path: blockPath,
                id: type === 'start' ? id : undefined,
                name: type === 'start' ? name : undefined,
            };
            currentBlock[blockOptions.type] = Object.assign(Object.assign({}, blockOptions), { path: pathStringSide });
            this.blocks[blockPath] = currentBlock;
            // only elements with id can have event listeners
            if (id && measure !== undefined) {
                const event = { id, name, type, measure };
                /**
                 * For the `end` event types, the measure ``
                 */
                if (type === 'end') {
                    const [startMeasure] = performance_ponyfill_1.performance.getEntriesByName(`${blockPath}-start`);
                    if (!startMeasure) {
                        throw new Error(`No start block found for event ${id}`);
                    }
                    event.measure = Object.assign(Object.assign({}, measure), { duration: measure.startTime - startMeasure.startTime });
                }
                this.onAnyEventEmitter.fire(event);
                this.invokeBlock(event);
            }
            return this;
        };
        /**
         * Mark the beginning of the block, same as above with `type: 'start'`
         */
        this.markBlockStart = (blockOptions) => {
            return this.markBlock(Object.assign({ type: 'start' }, blockOptions));
        };
        /**
         * Mark the end of the block, same as above with `type: 'end'`
         */
        this.markBlockEnd = (blockOptions) => {
            return this.markBlock(Object.assign({ type: 'end' }, blockOptions));
        };
        this.getBlock = (id) => {
            const blockPath = `${this.pathString}.block: ${id}`;
            const block = this.blocks[blockPath];
            if (!block) {
                return undefined;
            }
            return block;
        };
        /**
         * Convenience method around the `markBlock` since that later has to be
         * called twice - once for `start` and once for `end`, we created this
         * wrapper method that does that for the user.
         */
        this.measure = (options, callback) => __awaiter(this, void 0, void 0, function* () {
            this.markBlock(Object.assign(Object.assign({}, options), { type: 'start' }));
            try {
                return yield callback();
            }
            finally {
                this.markBlock(Object.assign(Object.assign({}, options), { type: 'end' }));
            }
        });
        /**
         * Sync version of the `measure`.
         */
        this.measureSync = (options, callback) => {
            this.markBlock(Object.assign(Object.assign({}, options), { type: 'start' }));
            try {
                return callback();
            }
            finally {
                this.markBlock(Object.assign(Object.assign({}, options), { type: 'end' }));
            }
        };
        /**
         * Method to calculate(measure) all the currently tracked timing blocks.
         */
        this.measures = () => {
            const blocks = [];
            for (let [id, block] of Object.entries(this.blocks)) {
                const { start, end } = block;
                if (!start || !end) {
                    continue;
                }
                performance_ponyfill_1.performance.measure(block.path, `${start.path}`, `${end.path}`);
                const [measure] = performance_ponyfill_1.performance.getEntriesByName(block.path);
                if (!measure) {
                    throw new Error(`No measure found in Performance API for "${id}".`);
                }
                blocks.push({
                    id: block.id,
                    name: block.name,
                    measure,
                });
            }
            return blocks;
        };
        this.invokeBlock = (options) => {
            const blockCallbackId = this.getBlockCallbackId(options);
            const emitter = PerformanceBlocks.onEventEmitters[blockCallbackId];
            if (!emitter) {
                return;
            }
            emitter.fire(options);
        };
        this.getBlockCallbackId = (options) => {
            const { id, type } = options;
            return `${id}-${type}`;
        };
        /**
         * Method to define event listeners for the `start` or `end` block sides.
         */
        this.onEvent = (options, callback) => {
            const blockCallbackId = this.getBlockCallbackId(options);
            let emitter = PerformanceBlocks.onEventEmitters[blockCallbackId];
            if (!emitter) {
                emitter = new vscode_jsonrpc_1.Emitter();
                PerformanceBlocks.onEventEmitters[blockCallbackId] = emitter;
            }
            emitter.event(callback);
            return this;
        };
    }
}
exports.PerformanceBlocks = PerformanceBlocks;
PerformanceBlocks.onEventEmitters = {};
//# sourceMappingURL=PerformanceBlocks.js.map

/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = __importDefault(__webpack_require__(682));
const sortByStartTime_1 = __webpack_require__(684);
const logInternal = (type, name, startTime, duration, rootStartTime) => {
    const connectionTimes = `[${startTime}ms - ${startTime + duration}ms]`;
    console[type]([
        `${name}:`,
        ansi_colors_1.default.cyan(`${duration}ms`),
        ansi_colors_1.default.magenta(`+${startTime - rootStartTime}ms`),
        ansi_colors_1.default.gray(connectionTimes),
    ].join(' '));
};
const log = (name, startTime, duration, rootStartTime) => {
    logInternal('log', name, startTime, duration, rootStartTime);
};
const group = (name, startTime, duration, rootStartTime) => {
    logInternal('groupCollapsed', name, startTime, duration, rootStartTime);
};
const logEmptyNode = (node, rootStartTime) => {
    const { name, measure } = node;
    const { startTime, duration } = measure;
    log(name, Math.round(startTime), Math.round(duration), rootStartTime);
};
exports.logPerformanceWaterfall = (root, rootStartTime) => {
    const { measure, name } = root;
    const { startTime, duration } = measure;
    const roundStartTime = Math.round(startTime);
    rootStartTime = rootStartTime !== null && rootStartTime !== void 0 ? rootStartTime : Math.round(startTime);
    // log the `root` group
    group(name, roundStartTime, Math.round(duration), rootStartTime);
    // log either `group` or `block`
    for (let item of sortByStartTime_1.sortByStartTime([...root.groups])) {
        item.groups.length
            ? exports.logPerformanceWaterfall(item, rootStartTime)
            : logEmptyNode(item, rootStartTime);
    }
    // end the `root` group
    console.groupEnd();
};
//# sourceMappingURL=logPerformanceWaterfall.js.map

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ansi-colors <https://github.com/doowb/ansi-colors>
 *
 * Copyright (c) 2015-2017, Brian Woodward.
 * Released under the MIT License.
 */



/**
 * Module dependencies
 */

var wrap = __webpack_require__(683);

/**
 * Wrap a string with ansi codes to create a black background.
 *
 * ```js
 * console.log(colors.bgblack('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgblack
 */

exports.bgblack = function bgblack(message) {
  return wrap(40, 49, message);
};

/**
 * Wrap a string with ansi codes to create a blue background.
 *
 * ```js
 * console.log(colors.bgblue('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgblue
 */

exports.bgblue = function bgblue(message) {
  return wrap(44, 49, message);
};

/**
 * Wrap a string with ansi codes to create a cyan background.
 *
 * ```js
 * console.log(colors.bgcyan('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgcyan
 */

exports.bgcyan = function bgcyan(message) {
  return wrap(46, 49, message);
};

/**
 * Wrap a string with ansi codes to create a green background.
 *
 * ```js
 * console.log(colors.bggreen('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bggreen
 */

exports.bggreen = function bggreen(message) {
  return wrap(42, 49, message);
};

/**
 * Wrap a string with ansi codes to create a magenta background.
 *
 * ```js
 * console.log(colors.bgmagenta('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgmagenta
 */

exports.bgmagenta = function bgmagenta(message) {
  return wrap(45, 49, message);
};

/**
 * Wrap a string with ansi codes to create a red background.
 *
 * ```js
 * console.log(colors.bgred('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgred
 */

exports.bgred = function bgred(message) {
  return wrap(41, 49, message);
};

/**
 * Wrap a string with ansi codes to create a white background.
 *
 * ```js
 * console.log(colors.bgwhite('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgwhite
 */

exports.bgwhite = function bgwhite(message) {
  return wrap(47, 49, message);
};

/**
 * Wrap a string with ansi codes to create a yellow background.
 *
 * ```js
 * console.log(colors.bgyellow('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bgyellow
 */

exports.bgyellow = function bgyellow(message) {
  return wrap(43, 49, message);
};

/**
 * Wrap a string with ansi codes to create black text.
 *
 * ```js
 * console.log(colors.black('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  black
 */

exports.black = function black(message) {
  return wrap(30, 39, message);
};

/**
 * Wrap a string with ansi codes to create blue text.
 *
 * ```js
 * console.log(colors.blue('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  blue
 */

exports.blue = function blue(message) {
  return wrap(34, 39, message);
};

/**
 * Wrap a string with ansi codes to create bold text.
 *
 * ```js
 * console.log(colors.bold('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  bold
 */

exports.bold = function bold(message) {
  return wrap(1, 22, message);
};

/**
 * Wrap a string with ansi codes to create cyan text.
 *
 * ```js
 * console.log(colors.cyan('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  cyan
 */

exports.cyan = function cyan(message) {
  return wrap(36, 39, message);
};

/**
 * Wrap a string with ansi codes to create dim text.
 *
 * ```js
 * console.log(colors.dim('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  dim
 */

exports.dim = function dim(message) {
  return wrap(2, 22, message);
};

/**
 * Wrap a string with ansi codes to create gray text.
 *
 * ```js
 * console.log(colors.gray('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  gray
 */

exports.gray = function gray(message) {
  return wrap(90, 39, message);
};

/**
 * Wrap a string with ansi codes to create green text.
 *
 * ```js
 * console.log(colors.green('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  green
 */

exports.green = function green(message) {
  return wrap(32, 39, message);
};

/**
 * Wrap a string with ansi codes to create grey text.
 *
 * ```js
 * console.log(colors.grey('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  grey
 */

exports.grey = function grey(message) {
  return wrap(90, 39, message);
};

/**
 * Wrap a string with ansi codes to create hidden text.
 *
 * ```js
 * console.log(colors.hidden('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  hidden
 */

exports.hidden = function hidden(message) {
  return wrap(8, 28, message);
};

/**
 * Wrap a string with ansi codes to create inverse text.
 *
 * ```js
 * console.log(colors.inverse('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  inverse
 */

exports.inverse = function inverse(message) {
  return wrap(7, 27, message);
};

/**
 * Wrap a string with ansi codes to create italic text.
 *
 * ```js
 * console.log(colors.italic('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  italic
 */

exports.italic = function italic(message) {
  return wrap(3, 23, message);
};

/**
 * Wrap a string with ansi codes to create magenta text.
 *
 * ```js
 * console.log(colors.magenta('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  magenta
 */

exports.magenta = function magenta(message) {
  return wrap(35, 39, message);
};

/**
 * Wrap a string with ansi codes to create red text.
 *
 * ```js
 * console.log(colors.red('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  red
 */

exports.red = function red(message) {
  return wrap(31, 39, message);
};

/**
 * Wrap a string with ansi codes to reset ansi colors currently on the string.
 *
 * ```js
 * console.log(colors.reset('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  reset
 */

exports.reset = function reset(message) {
  return wrap(0, 0, message);
};

/**
 * Wrap a string with ansi codes to add a strikethrough to the text.
 *
 * ```js
 * console.log(colors.strikethrough('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  strikethrough
 */

exports.strikethrough = function strikethrough(message) {
  return wrap(9, 29, message);
};

/**
 * Wrap a string with ansi codes to underline the text.
 *
 * ```js
 * console.log(colors.underline('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  underline
 */

exports.underline = function underline(message) {
  return wrap(4, 24, message);
};

/**
 * Wrap a string with ansi codes to create white text.
 *
 * ```js
 * console.log(colors.white('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  white
 */

exports.white = function white(message) {
  return wrap(37, 39, message);
};

/**
 * Wrap a string with ansi codes to create yellow text.
 *
 * ```js
 * console.log(colors.yellow('some string'));
 * ```
 *
 * @param  {string} message String to wrap with ansi codes.
 * @return {string} Wrapped string
 * @api public
 * @name  yellow
 */

exports.yellow = function yellow(message) {
  return wrap(33, 39, message);
};


/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function(a, b, msg) {
  return '\u001b['+ a + 'm' + msg + '\u001b[' + b + 'm';
};


/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.sortByStartTime = (items) => {
    const result = [...items].sort((item1, item2) => {
        return item1.measure.startTime - item2.measure.startTime;
    });
    return result;
};
//# sourceMappingURL=sortByStartTime.js.map

/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PerformanceMock_1 = __webpack_require__(686);
exports.PerformanceMock = PerformanceMock_1.PerformanceMock;
//# sourceMappingURL=index.js.map

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Performance_1 = __webpack_require__(285);
class PerformanceMock extends Performance_1.Performance {
    /**
     * Expose the `groups` for tests.
     */
    get groupsMock() {
        return this.groups;
    }
}
exports.PerformanceMock = PerformanceMock;
;
//# sourceMappingURL=PerformanceMock.js.map

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
const ExperimentationTelemetry_1 = __webpack_require__(688);
/**
 * Defers loading the dependencies to avoid a hard dependency on the 'vscode' module.
 */
function dependency() {
    return __webpack_require__(14).dependencies;
}
function getExperimentationServiceHelper() {
    return __webpack_require__(287).getExperimentationServiceAsync;
}
function getExpTargetPopulation() {
    return __webpack_require__(287).TargetPopulation;
}
function getTargetPopulation(dependencies = dependency()) {
    const targetPopulation = getExpTargetPopulation();
    if (dependencies.extensionsUtil.getIsInternalUser()) {
        return targetPopulation.Internal;
    }
    else {
        return targetPopulation.Public;
    }
}
let expService;
function getExpService() {
    vscs_utils_1.assertDefined(expService, 'No Exp service defined, please call initAsync first.');
    return expService;
}
exports.getExpService = getExpService;
exports.initAsync = vscs_utils_1.once(async (extensionName, extensionVersion, context, dependencies) => {
    /**
     * If the new resolver flow explicitly disabled, don't send Exp telemetry.
     */
    const telemetry = new ExperimentationTelemetry_1.ExperimentationTelemetry();
    const getExperimentationServiceAsync = getExperimentationServiceHelper();
    expService = await getExperimentationServiceAsync(extensionName, extensionVersion, getTargetPopulation(), telemetry, context.globalState);
});


/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vso_telemetry_1 = __webpack_require__(11);
/**
 * Telemetry class used by Exp service.
 */
class ExperimentationTelemetry {
    setSharedProperty(name, value) {
        vso_telemetry_1.Telemetry.addContextProperty(name, value);
    }
    postEvent(eventName, props) {
        const event = new vso_telemetry_1.TelemetryEvent(eventName);
        for (let [property, value] of props) {
            event.addProperty(property, value);
        }
        event.send();
    }
}
exports.ExperimentationTelemetry = ExperimentationTelemetry;
;


/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const VSCodeFilterProvider_1 = __webpack_require__(288);
const tas_client_1 = __webpack_require__(690);
const vscode = __webpack_require__(1);
const MementoKeyValueStorage_1 = __webpack_require__(700);
const TelemetryDisabledExperimentationService_1 = __webpack_require__(701);
const endpoint = 'https://default.exp-tas.com/vscode/ab';
const telemetryEventName = 'query-expfeature';
const featuresTelemetryPropertyName = 'VSCode.ABExp.Features';
const assignmentContextTelemetryPropertyName = 'abexp.assignmentcontext';
const storageKey = 'VSCode.ABExp.FeatureData';
const refetchInterval = 1000 * 60 * 30; // By default it's set up to 30 minutes.
/**
 *
 * @param extensionName The name of the extension.
 * @param extensionVersion The version of the extension.
 * @param telemetry Telemetry implementation.
 * @param targetPopulation An enum containing the target population ('team', 'internal', 'insiders', 'public').
 * @param memento The memento state to be used for cache.
 * @param filterProviders The filter providers.
 */
function getExperimentationService(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders) {
    if (!memento) {
        throw new Error('Memento storage was not provided.');
    }
    const config = vscode.workspace.getConfiguration('telemetry');
    const telemetryEnabled = vscode.env.isTelemetryEnabled === undefined
        ? config.get('enableTelemetry', true)
        : vscode.env.isTelemetryEnabled;
    if (!telemetryEnabled) {
        return new TelemetryDisabledExperimentationService_1.default();
    }
    const extensionFilterProvider = new VSCodeFilterProvider_1.VSCodeFilterProvider(extensionName, extensionVersion, targetPopulation);
    const providerList = [extensionFilterProvider, ...filterProviders];
    const keyValueStorage = new MementoKeyValueStorage_1.MementoKeyValueStorage(memento);
    return new tas_client_1.ExperimentationService({
        filterProviders: providerList,
        telemetry: telemetry,
        storageKey: storageKey,
        keyValueStorage: keyValueStorage,
        featuresTelemetryPropertyName: featuresTelemetryPropertyName,
        assignmentContextTelemetryPropertyName: assignmentContextTelemetryPropertyName,
        telemetryEventName: telemetryEventName,
        endpoint: endpoint,
        refetchInterval: refetchInterval,
    });
}
exports.getExperimentationService = getExperimentationService;
/**
 * Returns the experimentation service after waiting on initialize.
 *
 * @param extensionName The name of the extension.
 * @param extensionVersion The version of the extension.
 * @param telemetry Telemetry implementation.
 * @param targetPopulation An enum containing the target population ('team', 'internal', 'insiders', 'public').
 * @param memento The memento state to be used for cache.
 * @param filterProviders The filter providers.
 */
async function getExperimentationServiceAsync(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders) {
    const experimentationService = getExperimentationService(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders);
    await experimentationService.initializePromise;
    return experimentationService;
}
exports.getExperimentationServiceAsync = getExperimentationServiceAsync;
//# sourceMappingURL=VSCodeTasClient.js.map

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
var ExperimentationService_1 = __webpack_require__(691);
exports.ExperimentationService = ExperimentationService_1.ExperimentationService;
//# sourceMappingURL=index.js.map

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const TasApiFeatureProvider_1 = __webpack_require__(692);
const AxiosHttpClient_1 = __webpack_require__(695);
const ExperimentationServiceAutoPolling_1 = __webpack_require__(696);
/**
 * Experimentation service to provide functionality of A/B experiments:
 * - reading flights;
 * - caching current set of flights;
 * - get answer on if flights are enabled.
 */
class ExperimentationService extends ExperimentationServiceAutoPolling_1.ExperimentationServiceAutoPolling {
    constructor(options) {
        super(options.telemetry, options.filterProviders || [], // Defaulted to empty array.
        options.refetchInterval != null
            ? options.refetchInterval
            : // If no fetch interval is provided, refetch functionality is turned off.
                0, options.featuresTelemetryPropertyName, options.assignmentContextTelemetryPropertyName, options.telemetryEventName, options.storageKey, options.keyValueStorage);
        this.options = options;
        this.invokeInit();
    }
    init() {
        // set feature providers to be an empty array.
        this.featureProviders = [];
        // Add WebApi feature provider.
        this.addFeatureProvider(new TasApiFeatureProvider_1.TasApiFeatureProvider(new AxiosHttpClient_1.AxiosHttpClient(this.options.endpoint), this.telemetry, this.filterProviders));
        // This will start polling the TAS.
        super.init();
    }
}
exports.ExperimentationService = ExperimentationService;
ExperimentationService.REFRESH_RATE_IN_MINUTES = 30;
//# sourceMappingURL=ExperimentationService.js.map

/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const FilteredFeatureProvider_1 = __webpack_require__(693);
/**
 * Feature provider implementation that calls the TAS web service to get the most recent active features.
 */
class TasApiFeatureProvider extends FilteredFeatureProvider_1.FilteredFeatureProvider {
    constructor(httpClient, telemetry, filterProviders) {
        super(telemetry, filterProviders);
        this.httpClient = httpClient;
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
    }
    /**
     * Method that handles fetching of latest data (in this case, flights) from the provider.
     */
    async fetch() {
        // We get the filters that will be sent as headers.
        let filters = this.getFilters();
        let headers = {};
        // Filters are handled using Map<string,any> therefore we need to
        // convert these filters into something axios can take as headers.
        for (let key of filters.keys()) {
            const filterValue = filters.get(key);
            headers[key] = filterValue;
        }
        //axios webservice call.
        let response = await this.httpClient.get({ headers: headers });
        // If we have at least one filter, we post it to telemetry event.
        if (filters.keys.length > 0) {
            this.PostEventToTelemetry(headers);
        }
        // Read the response data from the server.
        let responseData = response.data;
        let configs = responseData.Configs;
        let features = [];
        for (let c of configs) {
            if (!c.Parameters) {
                continue;
            }
            for (let key of Object.keys(c.Parameters)) {
                const featureName = key + (c.Parameters[key] ? '' : 'cf');
                if (!features.includes(featureName)) {
                    features.push(featureName);
                }
            }
        }
        return {
            features,
            assignmentContext: responseData.AssignmentContext,
            configs
        };
    }
}
exports.TasApiFeatureProvider = TasApiFeatureProvider;
//# sourceMappingURL=TasApiFeatureProvider.js.map

/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const BaseFeatureProvider_1 = __webpack_require__(694);
/**
 * Feature provider implementation that handles filters.
 */
class FilteredFeatureProvider extends BaseFeatureProvider_1.BaseFeatureProvider {
    constructor(telemetry, filterProviders) {
        super(telemetry);
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
        this.cachedTelemetryEvents = [];
    }
    getFilters() {
        // We get the filters that will be sent as headers.
        let filters = new Map();
        for (let filter of this.filterProviders) {
            let filterHeaders = filter.getFilters();
            for (let key of filterHeaders.keys()) {
                // Headers can be overridden by custom filters.
                // That's why a check isn't done to see if the header already exists, the value is just set.
                let filterValue = filterHeaders.get(key);
                filters.set(key, filterValue);
            }
        }
        return filters;
    }
    PostEventToTelemetry(headers) {
        /**
         * If these headers have already been posted, we skip from posting them again..
         */
        if (this.cachedTelemetryEvents.includes(headers)) {
            return;
        }
        const jsonHeaders = JSON.stringify(headers);
        this.telemetry.postEvent('report-headers', new Map([['ABExp.headers', jsonHeaders]]));
        /**
         * We cache the flight so we don't post it again.
         */
        this.cachedTelemetryEvents.push(headers);
    }
}
exports.FilteredFeatureProvider = FilteredFeatureProvider;
//# sourceMappingURL=FilteredFeatureProvider.js.map

/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Abstract class for Feature Provider Implementation.
 */
class BaseFeatureProvider {
    /**
     * @param telemetry The telemetry implementation.
     */
    constructor(telemetry) {
        this.telemetry = telemetry;
        this.isFetching = false;
    }
    /**
     * Method that wraps the fetch method in order to re-use the fetch promise if needed.
     * @param headers The headers to be used on the fetch method.
     */
    async getFeatures() {
        if (this.isFetching && this.fetchPromise) {
            return this.fetchPromise;
        }
        this.fetchPromise = this.fetch();
        let features = await this.fetchPromise;
        this.isFetching = false;
        this.fetchPromise = undefined;
        return features;
    }
}
exports.BaseFeatureProvider = BaseFeatureProvider;
//# sourceMappingURL=BaseFeatureProvider.js.map

/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __webpack_require__(146);
class AxiosHttpClient {
    constructor(endpoint) {
        this.endpoint = endpoint;
    }
    get(config) {
        return axios_1.default.get(this.endpoint, Object.assign(Object.assign({}, config), { proxy: false }));
    }
}
exports.AxiosHttpClient = AxiosHttpClient;
//# sourceMappingURL=AxiosHttpClient.js.map

/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ExperimentationServiceBase_1 = __webpack_require__(697);
const PollingService_1 = __webpack_require__(699);
/**
 * Implementation of Feature provider that provides a polling feature, where the source can be re-fetched every x time given.
 */
class ExperimentationServiceAutoPolling extends ExperimentationServiceBase_1.ExperimentationServiceBase {
    constructor(telemetry, filterProviders, refreshRateMs, featuresTelemetryPropertyName, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
        super(telemetry, featuresTelemetryPropertyName, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage);
        this.telemetry = telemetry;
        this.filterProviders = filterProviders;
        this.refreshRateMs = refreshRateMs;
        this.featuresTelemetryPropertyName = featuresTelemetryPropertyName;
        this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
        this.telemetryEventName = telemetryEventName;
        this.storageKey = storageKey;
        this.storage = storage;
        // Excluding 0 since it allows to turn off the auto polling.
        if (refreshRateMs < 1000 && refreshRateMs !== 0) {
            throw new Error('The minimum refresh rate for polling is 1000 ms (1 second). If you wish to deactivate this auto-polling use value of 0.');
        }
        if (refreshRateMs > 0) {
            this.pollingService = new PollingService_1.PollingService(refreshRateMs);
            this.pollingService.OnPollTick(async () => {
                await super.getFeaturesAsync();
            });
        }
    }
    init() {
        if (this.pollingService) {
            this.pollingService.StartPolling(true);
        }
        else {
            super.getFeaturesAsync();
        }
    }
    /**
     * Wrapper that will reset the polling intervals whenever the feature data is fetched manually.
     */
    async getFeaturesAsync(overrideInMemoryFeatures = false) {
        if (!this.pollingService) {
            return await super.getFeaturesAsync(overrideInMemoryFeatures);
        }
        else {
            this.pollingService.StopPolling();
            let result = await super.getFeaturesAsync(overrideInMemoryFeatures);
            this.pollingService.StartPolling();
            return result;
        }
    }
}
exports.ExperimentationServiceAutoPolling = ExperimentationServiceAutoPolling;
//# sourceMappingURL=ExperimentationServiceAutoPolling.js.map

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const MemoryKeyValueStorage_1 = __webpack_require__(698);
/**
 * Experimentation service to provide functionality of A/B experiments:
 * - reading flights;
 * - caching current set of flights;
 * - get answer on if flights are enabled.
 */
class ExperimentationServiceBase {
    constructor(telemetry, featuresTelemetryPropertyName, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
        this.telemetry = telemetry;
        this.featuresTelemetryPropertyName = featuresTelemetryPropertyName;
        this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
        this.telemetryEventName = telemetryEventName;
        this.storageKey = storageKey;
        this.storage = storage;
        this.featuresConsumed = false;
        this.cachedTelemetryEvents = [];
        this._features = {
            features: [],
            assignmentContext: '',
            configs: []
        };
        if (!this.storageKey) {
            this.storageKey = 'ABExp.Features';
        }
        if (!this.storage) {
            storage = new MemoryKeyValueStorage_1.MemoryKeyValueStorage();
        }
        this.loadCachePromise = this.loadCachedFeatureData();
        this.initializePromise = this.loadCachePromise;
        this.initialFetch = new Promise((resolve, reject) => {
            this.resolveInitialFetchPromise = resolve;
        });
    }
    get features() {
        return this._features;
    }
    set features(value) {
        this._features = value;
        /**
         * If an implementation of telemetry exists, we set the shared property.
         */
        if (this.telemetry) {
            this.telemetry.setSharedProperty(this.featuresTelemetryPropertyName, this.features.features.join(';'));
            this.telemetry.setSharedProperty(this.assignmentContextTelemetryPropertyName, this.features.assignmentContext);
        }
    }
    /**
     * Gets all the features from the provider sources (not cache).
     * It returns these features and will also update the providers to have the latest features cached.
     */
    async getFeaturesAsync(overrideInMemoryFeatures = false) {
        /**
         * If there's already a fetching promise, there's no need to call it again.
         * We return that as result.
         */
        if (this.fetchPromise != null) {
            try {
                await this.fetchPromise;
            }
            catch (_a) {
                // Fetching features threw. Can happen if not connected to the internet, e.g
            }
            return this.features;
        }
        if (!this.featureProviders || this.featureProviders.length === 0) {
            return Promise.resolve({
                features: [],
                assignmentContext: '',
                configs: []
            });
        }
        /**
         * Fetch all from providers.
         */
        this.fetchPromise = Promise.all(this.featureProviders.map(async (provider) => {
            return await provider.getFeatures();
        }));
        try {
            const featureResults = await this.fetchPromise;
            this.updateFeatures(featureResults, overrideInMemoryFeatures);
        }
        catch (_b) {
            // Fetching features threw. Can happen if not connected to the internet, e.g.
        }
        this.fetchPromise = undefined;
        if (this.resolveInitialFetchPromise) {
            this.resolveInitialFetchPromise();
            this.resolveInitialFetchPromise = undefined;
        }
        /**
         * At this point all features have been re-fetched and cache has been updated.
         * We return the cached features.
         */
        return this.features;
    }
    /**
     *
     * @param featureResults The feature results obtained from all the feature providers.
     */
    updateFeatures(featureResults, overrideInMemoryFeatures = false) {
        /**
         * if features comes as a null value, that is taken as if there aren't any features active,
         * so an empty array is defaulted.
         */
        let features = {
            features: [],
            assignmentContext: '',
            configs: []
        };
        for (let result of featureResults) {
            for (let feature of result.features) {
                if (!features.features.includes(feature)) {
                    features.features.push(feature);
                }
            }
            for (let config of result.configs) {
                const existingConfig = features.configs.find(c => c.Id === config.Id);
                if (existingConfig) {
                    existingConfig.Parameters = Object.assign(Object.assign({}, existingConfig.Parameters), config.Parameters);
                }
                else {
                    features.configs.push(config);
                }
            }
            features.assignmentContext += result.assignmentContext;
        }
        /**
         * Set the obtained feature values to the global features variable. This stores them in memory.
         */
        if (overrideInMemoryFeatures || !this.featuresConsumed) {
            this.features = features;
        }
        /**
         * If we have storage, we cache the latest results into the storage.
         */
        if (this.storage) {
            this.storage.setValue(this.storageKey, features);
        }
    }
    async loadCachedFeatureData() {
        let cachedFeatureData;
        if (this.storage) {
            cachedFeatureData = await this.storage.getValue(this.storageKey);
            // When updating from an older version of tas-client, configs may be undefined 
            if (cachedFeatureData !== undefined && cachedFeatureData.configs === undefined) {
                cachedFeatureData.configs = [];
            }
        }
        if (this.features.features.length === 0) {
            this.features = cachedFeatureData || { features: [], assignmentContext: '', configs: [] };
        }
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It uses the in-memory cache.
     * @param flight The flight to check.
     */
    isFlightEnabled(flight) {
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return this.features.features.includes(flight);
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It uses the values currently on cache.
     * @param flight The flight to check.
     */
    async isCachedFlightEnabled(flight) {
        await this.loadCachePromise;
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return this.features.features.includes(flight);
    }
    /**
     * Returns a value indicating whether the given flight is enabled.
     * It re-fetches values from the server.
     * @param flight the flight to check.
     */
    async isFlightEnabledAsync(flight) {
        const features = await this.getFeaturesAsync(true);
        this.featuresConsumed = true;
        this.PostEventToTelemetry(flight);
        return features.features.includes(flight);
    }
    /**
     * Returns the value of the treatment variable, or undefined if not found.
     * It uses the values currently in memory, so the experimentation service
     * must be initialized before calling.
     * @param config name of the config to check.
     * @param name name of the treatment variable.
     */
    getTreatmentVariable(configId, name) {
        var _a;
        this.featuresConsumed = true;
        this.PostEventToTelemetry(`${configId}.${name}`);
        const config = this.features.configs.find(c => c.Id === configId);
        return (_a = config) === null || _a === void 0 ? void 0 : _a.Parameters[name];
    }
    /**
     * Returns the value of the treatment variable, or undefined if not found.
     * It re-fetches values from the server. If checkCache is set to true and the value exists
     * in the cache, the Treatment Assignment Service is not called.
     * @param config name of the config to check.
     * @param name name of the treatment variable.
     * @param checkCache check the cache for the variable before calling the TAS.
     */
    async getTreatmentVariableAsync(configId, name, checkCache) {
        if (checkCache) {
            const _featuresConsumed = this.featuresConsumed;
            const cachedValue = this.getTreatmentVariable(configId, name);
            if (cachedValue === undefined) {
                this.featuresConsumed = _featuresConsumed;
            }
            else {
                return cachedValue;
            }
        }
        await this.getFeaturesAsync(true);
        return this.getTreatmentVariable(configId, name);
    }
    PostEventToTelemetry(flight) {
        /**
         * If this event has already been posted, we omit from posting it again.
         */
        if (this.cachedTelemetryEvents.includes(flight)) {
            return;
        }
        this.telemetry.postEvent(this.telemetryEventName, new Map([['ABExp.queriedFeature', flight]]));
        /**
         * We cache the flight so we don't post it again.
         */
        this.cachedTelemetryEvents.push(flight);
    }
    invokeInit() {
        this.init();
    }
    addFeatureProvider(...providers) {
        if (providers == null || this.featureProviders == null) {
            return;
        }
        for (let provider of providers) {
            this.featureProviders.push(provider);
        }
    }
}
exports.ExperimentationServiceBase = ExperimentationServiceBase;
//# sourceMappingURL=ExperimentationServiceBase.js.map

/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MemoryKeyValueStorage {
    constructor() {
        this.storage = new Map();
    }
    async getValue(key, defaultValue) {
        if (this.storage.has(key)) {
            return await Promise.resolve(this.storage.get(key));
        }
        return await Promise.resolve(defaultValue || undefined);
    }
    setValue(key, value) {
        this.storage.set(key, value);
    }
}
exports.MemoryKeyValueStorage = MemoryKeyValueStorage;
//# sourceMappingURL=MemoryKeyValueStorage.js.map

/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class PollingService {
    constructor(fetchInterval) {
        this.fetchInterval = fetchInterval;
    }
    StopPolling() {
        clearInterval(this.intervalHandle);
        this.intervalHandle = undefined;
    }
    OnPollTick(callback) {
        this.onTick = callback;
    }
    StartPolling(pollImmediately = false) {
        if (this.intervalHandle) {
            this.StopPolling();
        }
        // If there's no callback, there's no point to start polling.
        if (this.onTick == null) {
            return;
        }
        if (pollImmediately) {
            this.onTick().then(() => { return; }).catch(() => { return; });
        }
        /**
         * Set the interval to start running.
         */
        this.intervalHandle = setInterval(async () => {
            await this.onTick();
        }, this.fetchInterval);
        if (this.intervalHandle.unref) { // unref is only available in Node, not the web
            this.intervalHandle.unref(); // unref is used to avoid keeping node.js alive only because of these timeouts.
        }
    }
}
exports.PollingService = PollingService;
//# sourceMappingURL=PollingService.js.map

/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class MementoKeyValueStorage {
    constructor(mementoGlobalStorage) {
        this.mementoGlobalStorage = mementoGlobalStorage;
    }
    async getValue(key, defaultValue) {
        const value = await this.mementoGlobalStorage.get(key);
        return value || defaultValue;
    }
    setValue(key, value) {
        this.mementoGlobalStorage.update(key, value);
    }
}
exports.MementoKeyValueStorage = MementoKeyValueStorage;
//# sourceMappingURL=MementoKeyValueStorage.js.map

/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class TelemetryDisabledExperimentationService {
    constructor() {
        this.initializePromise = Promise.resolve();
        this.initialFetch = Promise.resolve();
    }
    isFlightEnabled(flight) {
        return false;
    }
    isCachedFlightEnabled(flight) {
        return Promise.resolve(false);
    }
    isFlightEnabledAsync(flight) {
        return Promise.resolve(false);
    }
    getTreatmentVariable(configId, name) {
        return undefined;
    }
    getTreatmentVariableAsync(configId, name) {
        return Promise.resolve(undefined);
    }
}
exports.default = TelemetryDisabledExperimentationService;
//# sourceMappingURL=TelemetryDisabledExperimentationService.js.map

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const vscs_utils_1 = __webpack_require__(8);
var ChaosMonkeyVariables;
(function (ChaosMonkeyVariables) {
    ChaosMonkeyVariables["SharedServersRpcRequestTimeout"] = "get shared servers RPC request timeout";
})(ChaosMonkeyVariables = exports.ChaosMonkeyVariables || (exports.ChaosMonkeyVariables = {}));
const sharedServersPortInvocationMap = new Map();
const TARGET_PORTS = [33333, 44444];
const getSharedServersRpcRequestTimeoutNumber = async (isInternalUser, port) => {
    var _a;
    if (!isInternalUser) {
        return;
    }
    if (!TARGET_PORTS.includes(port)) {
        return;
    }
    const existingRecord = (_a = sharedServersPortInvocationMap.get(port)) !== null && _a !== void 0 ? _a : 0;
    sharedServersPortInvocationMap.set(port, existingRecord + 1);
    switch (existingRecord) {
        case 1: {
            return 0;
        }
        default: {
            return;
        }
    }
};
/**
 *
 * This class aimed to be a singleton that can produce some set of values for a previously defined variable
 * in the `ChaosMonkeyVariables`. The primary motivation for this is to be able to wreak havoc in some
 * of the users' flows to simulate an error or unfavorable condition.
 *
 * For instance, consider a flow that allows forwarding a local port. This port sharing flow uses an established
 * connection and first calls the` getSharedServers` RPC method. Now imagine that the `getSharedServers` call
 * hangs (actual case atm) or the connection is unstable; how do we know the experience for the end-users
 * in those cases? Or, if we want to repro some failing behavior, how do we do that? The `ChaosMonkey` allows
 * to define some variable(potentially random) that can be used in some of your app logic (in this case, in
 * the port-forwarding flow), which will make the target flow fail or become unstable, hence simulating
 * real-world unfavorable scenarios that users might encounter.
 *
 * Example:
 * ```
 * const chaosMonkey = getChaosMonkey(); // (0)
 * const portsTimeout = await chaosMonkey.getVariable(ChaosMonkeyVariables.SharedServersRpcRequestTimeout, port); // (1)
 * const sharedServer = await this.connection.startForwardingPort(port, clearHost, portsTimeout); // (2)
 * ```
 *
 * We get the `ChaosMonkey` singleton in the example above at (0). Then, in (1), we get the `portsTimeout` variable and
 * use it as a timeout in the `connection.startForwardingPort` call (2), which we know may hang. The `getVariable` call(1)
 * returns `0` at the second call if a port is `equal` to `33333` and returns `no timeout` otherwise.
 * Hence we can easily simulate the case when the user tries to change the `33333` port after a previously successful
 * operation on the port (second call); that change causes the timeout error and eventually reconnection logic to kick in.
 * The user would expect the port change to be applied after reconnection completes. Do we meet the expectation
 * at the moment? The `ChaosMonkey` makes it easy to check if we do!
 *
 * **Note:** To make it more flexible, this logic should be and will be exposed as vscode command for internal users only,
 * instead of the per-variable custom logic as in the `getSharedServersRpcRequestTimeoutNumber` above. That logic will be
 * added in subsequent commits.
 *
 */
class ChaosMonkey extends vscs_utils_1.DisposableClass {
    constructor(trace, isInternalUser) {
        super(trace.createChild('chaos-monkey'));
        this.isInternalUser = isInternalUser;
    }
    async getVariable(name, ...args) {
        const result = await this.getVariableImpl(name, ...args);
        this.trace.info(`"${name}" => "${result}"`);
        return result;
    }
    async getVariableImpl(name, ...args) {
        switch (name) {
            case ChaosMonkeyVariables.SharedServersRpcRequestTimeout: {
                return await getSharedServersRpcRequestTimeoutNumber(this.isInternalUser, args[0]);
            }
            default: {
                vscs_utils_1.assertNever(name, `Unknown ChaosMonkey variable "${name}".`);
            }
        }
    }
}
exports.ChaosMonkey = ChaosMonkey;
let chaosMonkey = null;
exports.initChaosMonkey = async (trace, isInternalUser) => {
    vscs_utils_1.assert(chaosMonkey === null, 'ChaosMonkey already initialized.');
    chaosMonkey = new ChaosMonkey(trace, isInternalUser);
    return chaosMonkey;
};
exports.getChaosMonkey = () => {
    vscs_utils_1.assertDefined(chaosMonkey, 'ChaosMonkey is not yet initialized, please call `await initChaosMonkey(trace);` first.');
    return chaosMonkey;
};


/***/ }),
/* 703 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "Octokit", function() { return /* binding */ rest_dist_web_Octokit; });

// EXTERNAL MODULE: ../node_modules/universal-user-agent/dist-web/index.js
var dist_web = __webpack_require__(33);

// EXTERNAL MODULE: ../node_modules/before-after-hook/index.js
var before_after_hook = __webpack_require__(290);

// CONCATENATED MODULE: ../node_modules/@octokit/endpoint/node_modules/is-plain-object/dist/is-plain-object.mjs
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}



// CONCATENATED MODULE: ../node_modules/@octokit/endpoint/dist-web/index.js



function lowercaseKeys(object) {
    if (!object) {
        return {};
    }
    return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
    }, {});
}

function mergeDeep(defaults, options) {
    const result = Object.assign({}, defaults);
    Object.keys(options).forEach((key) => {
        if (isPlainObject(options[key])) {
            if (!(key in defaults))
                Object.assign(result, { [key]: options[key] });
            else
                result[key] = mergeDeep(defaults[key], options[key]);
        }
        else {
            Object.assign(result, { [key]: options[key] });
        }
    });
    return result;
}

function merge(defaults, route, options) {
    if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? { method, url } : { url: method }, options);
    }
    else {
        options = Object.assign({}, route);
    }
    // lowercase header names before merging with defaults to avoid duplicates
    options.headers = lowercaseKeys(options.headers);
    const mergedOptions = mergeDeep(defaults || {}, options);
    // mediaType.previews arrays are merged, instead of overwritten
    if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews
            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))
            .concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
    return mergedOptions;
}

function addQueryParameters(url, parameters) {
    const separator = /\?/.test(url) ? "&" : "?";
    const names = Object.keys(parameters);
    if (names.length === 0) {
        return url;
    }
    return (url +
        separator +
        names
            .map((name) => {
            if (name === "q") {
                return ("q=" + parameters.q.split("+").map(encodeURIComponent).join("+"));
            }
            return `${name}=${encodeURIComponent(parameters[name])}`;
        })
            .join("&"));
}

const urlVariableRegex = /\{[^}]+\}/g;
function removeNonChars(variableName) {
    return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
    const matches = url.match(urlVariableRegex);
    if (!matches) {
        return [];
    }
    return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}

function omit(object, keysToOmit) {
    return Object.keys(object)
        .filter((option) => !keysToOmit.includes(option))
        .reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
    }, {});
}

// Based on https://github.com/bramstein/url-template, licensed under BSD
// TODO: create separate package.
//
// Copyright (c) 2012-2014, Bram Stein
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/* istanbul ignore file */
function encodeReserved(str) {
    return str
        .split(/(%[0-9A-Fa-f]{2})/g)
        .map(function (part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
            part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
    })
        .join("");
}
function encodeUnreserved(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}
function encodeValue(operator, value, key) {
    value =
        operator === "+" || operator === "#"
            ? encodeReserved(value)
            : encodeUnreserved(value);
    if (key) {
        return encodeUnreserved(key) + "=" + value;
    }
    else {
        return value;
    }
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
function isKeyOperator(operator) {
    return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
    var value = context[key], result = [];
    if (isDefined(value) && value !== "") {
        if (typeof value === "string" ||
            typeof value === "number" ||
            typeof value === "boolean") {
            value = value.toString();
            if (modifier && modifier !== "*") {
                value = value.substring(0, parseInt(modifier, 10));
            }
            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
        }
        else {
            if (modifier === "*") {
                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
                    });
                }
                else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            result.push(encodeValue(operator, value[k], k));
                        }
                    });
                }
            }
            else {
                const tmp = [];
                if (Array.isArray(value)) {
                    value.filter(isDefined).forEach(function (value) {
                        tmp.push(encodeValue(operator, value));
                    });
                }
                else {
                    Object.keys(value).forEach(function (k) {
                        if (isDefined(value[k])) {
                            tmp.push(encodeUnreserved(k));
                            tmp.push(encodeValue(operator, value[k].toString()));
                        }
                    });
                }
                if (isKeyOperator(operator)) {
                    result.push(encodeUnreserved(key) + "=" + tmp.join(","));
                }
                else if (tmp.length !== 0) {
                    result.push(tmp.join(","));
                }
            }
        }
    }
    else {
        if (operator === ";") {
            if (isDefined(value)) {
                result.push(encodeUnreserved(key));
            }
        }
        else if (value === "" && (operator === "&" || operator === "?")) {
            result.push(encodeUnreserved(key) + "=");
        }
        else if (value === "") {
            result.push("");
        }
    }
    return result;
}
function parseUrl(template) {
    return {
        expand: expand.bind(null, template),
    };
}
function expand(template, context) {
    var operators = ["+", "#", ".", "/", ";", "?", "&"];
    return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
        if (expression) {
            let operator = "";
            const values = [];
            if (operators.indexOf(expression.charAt(0)) !== -1) {
                operator = expression.charAt(0);
                expression = expression.substr(1);
            }
            expression.split(/,/g).forEach(function (variable) {
                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
            });
            if (operator && operator !== "+") {
                var separator = ",";
                if (operator === "?") {
                    separator = "&";
                }
                else if (operator !== "#") {
                    separator = operator;
                }
                return (values.length !== 0 ? operator : "") + values.join(separator);
            }
            else {
                return values.join(",");
            }
        }
        else {
            return encodeReserved(literal);
        }
    });
}

function parse(options) {
    // https://fetch.spec.whatwg.org/#methods
    let method = options.method.toUpperCase();
    // replace :varname with {varname} to make it RFC 6570 compatible
    let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{+$1}");
    let headers = Object.assign({}, options.headers);
    let body;
    let parameters = omit(options, [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "mediaType",
    ]);
    // extract variable names from URL to calculate remaining variables later
    const urlVariableNames = extractUrlVariableNames(url);
    url = parseUrl(url).expand(parameters);
    if (!/^http/.test(url)) {
        url = options.baseUrl + url;
    }
    const omittedParameters = Object.keys(options)
        .filter((option) => urlVariableNames.includes(option))
        .concat("baseUrl");
    const remainingParameters = omit(parameters, omittedParameters);
    const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
    if (!isBinaryRequest) {
        if (options.mediaType.format) {
            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw
            headers.accept = headers.accept
                .split(/,/)
                .map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`))
                .join(",");
        }
        if (options.mediaType.previews.length) {
            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
            headers.accept = previewsFromAcceptHeader
                .concat(options.mediaType.previews)
                .map((preview) => {
                const format = options.mediaType.format
                    ? `.${options.mediaType.format}`
                    : "+json";
                return `application/vnd.github.${preview}-preview${format}`;
            })
                .join(",");
        }
    }
    // for GET/HEAD requests, set URL query parameters from remaining parameters
    // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters
    if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters(url, remainingParameters);
    }
    else {
        if ("data" in remainingParameters) {
            body = remainingParameters.data;
        }
        else {
            if (Object.keys(remainingParameters).length) {
                body = remainingParameters;
            }
            else {
                headers["content-length"] = 0;
            }
        }
    }
    // default content-type for JSON if body is set
    if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
    }
    // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.
    // fetch does not allow to set `content-length` header, but we can set body to an empty string
    if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
    }
    // Only return body/request keys if present
    return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
}

function endpointWithDefaults(defaults, route, options) {
    return parse(merge(defaults, route, options));
}

function withDefaults(oldDefaults, newDefaults) {
    const DEFAULTS = merge(oldDefaults, newDefaults);
    const endpoint = endpointWithDefaults.bind(null, DEFAULTS);
    return Object.assign(endpoint, {
        DEFAULTS,
        defaults: withDefaults.bind(null, DEFAULTS),
        merge: merge.bind(null, DEFAULTS),
        parse,
    });
}

const VERSION = "6.0.6";

const userAgent = `octokit-endpoint.js/${VERSION} ${Object(dist_web["a" /* getUserAgent */])()}`;
// DEFAULTS has all properties set that EndpointOptions has, except url.
// So we use RequestParameters and add method as additional required property.
const DEFAULTS = {
    method: "GET",
    baseUrl: "https://api.github.com",
    headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent,
    },
    mediaType: {
        format: "",
        previews: [],
    },
};

const endpoint = withDefaults(null, DEFAULTS);


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/request/node_modules/is-plain-object/dist/is-plain-object.mjs
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function is_plain_object_isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function is_plain_object_isPlainObject(o) {
  var ctor,prot;

  if (is_plain_object_isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (is_plain_object_isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}



// EXTERNAL MODULE: ../node_modules/@octokit/request/node_modules/node-fetch/browser.js
var browser = __webpack_require__(291);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);

// CONCATENATED MODULE: ../node_modules/deprecation/dist-web/index.js
class Deprecation extends Error {
  constructor(message) {
    super(message); // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    this.name = 'Deprecation';
  }

}



// EXTERNAL MODULE: ../node_modules/once/once.js
var once = __webpack_require__(292);
var once_default = /*#__PURE__*/__webpack_require__.n(once);

// CONCATENATED MODULE: ../node_modules/@octokit/request-error/dist-web/index.js



const logOnce = once_default()((deprecation) => console.warn(deprecation));
/**
 * Error with extra properties to help with debugging
 */
class dist_web_RequestError extends Error {
    constructor(message, statusCode, options) {
        super(message);
        // Maintains proper stack trace (only available on V8)
        /* istanbul ignore next */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        Object.defineProperty(this, "code", {
            get() {
                logOnce(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
                return statusCode;
            },
        });
        this.headers = options.headers || {};
        // redact request credentials without mutating original request options
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
            requestCopy.headers = Object.assign({}, options.request.headers, {
                authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]"),
            });
        }
        requestCopy.url = requestCopy.url
            // client_id & client_secret can be passed as URL query parameters to increase rate limit
            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications
            .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]")
            // OAuth tokens can be passed as URL query parameters, although it is not recommended
            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header
            .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
    }
}


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/request/dist-web/index.js






const dist_web_VERSION = "5.4.9";

function getBufferResponse(response) {
    return response.arrayBuffer();
}

function fetchWrapper(requestOptions) {
    if (is_plain_object_isPlainObject(requestOptions.body) ||
        Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
    }
    let headers = {};
    let status;
    let url;
    const fetch = (requestOptions.request && requestOptions.request.fetch) || browser_default.a;
    return fetch(requestOptions.url, Object.assign({
        method: requestOptions.method,
        body: requestOptions.body,
        headers: requestOptions.headers,
        redirect: requestOptions.redirect,
    }, requestOptions.request))
        .then((response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
            headers[keyAndValue[0]] = keyAndValue[1];
        }
        if (status === 204 || status === 205) {
            return;
        }
        // GitHub API returns 200 for HEAD requests
        if (requestOptions.method === "HEAD") {
            if (status < 400) {
                return;
            }
            throw new dist_web_RequestError(response.statusText, status, {
                headers,
                request: requestOptions,
            });
        }
        if (status === 304) {
            throw new dist_web_RequestError("Not modified", status, {
                headers,
                request: requestOptions,
            });
        }
        if (status >= 400) {
            return response
                .text()
                .then((message) => {
                const error = new dist_web_RequestError(message, status, {
                    headers,
                    request: requestOptions,
                });
                try {
                    let responseBody = JSON.parse(error.message);
                    Object.assign(error, responseBody);
                    let errors = responseBody.errors;
                    // Assumption `errors` would always be in Array format
                    error.message =
                        error.message + ": " + errors.map(JSON.stringify).join(", ");
                }
                catch (e) {
                    // ignore, see octokit/rest.js#684
                }
                throw error;
            });
        }
        const contentType = response.headers.get("content-type");
        if (/application\/json/.test(contentType)) {
            return response.json();
        }
        if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
            return response.text();
        }
        return getBufferResponse(response);
    })
        .then((data) => {
        return {
            status,
            url,
            headers,
            data,
        };
    })
        .catch((error) => {
        if (error instanceof dist_web_RequestError) {
            throw error;
        }
        throw new dist_web_RequestError(error.message, 500, {
            headers,
            request: requestOptions,
        });
    });
}

function dist_web_withDefaults(oldEndpoint, newDefaults) {
    const endpoint = oldEndpoint.defaults(newDefaults);
    const newApi = function (route, parameters) {
        const endpointOptions = endpoint.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
            return fetchWrapper(endpoint.parse(endpointOptions));
        }
        const request = (route, parameters) => {
            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));
        };
        Object.assign(request, {
            endpoint,
            defaults: dist_web_withDefaults.bind(null, endpoint),
        });
        return endpointOptions.request.hook(request, endpointOptions);
    };
    return Object.assign(newApi, {
        endpoint,
        defaults: dist_web_withDefaults.bind(null, endpoint),
    });
}

const request = dist_web_withDefaults(endpoint, {
    headers: {
        "user-agent": `octokit-request.js/${dist_web_VERSION} ${Object(dist_web["a" /* getUserAgent */])()}`,
    },
});


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/graphql/dist-web/index.js



const graphql_dist_web_VERSION = "4.5.6";

class GraphqlError extends Error {
    constructor(request, response) {
        const message = response.data.errors[0].message;
        super(message);
        Object.assign(this, response.data);
        Object.assign(this, { headers: response.headers });
        this.name = "GraphqlError";
        this.request = request;
        // Maintains proper stack trace (only available on V8)
        /* istanbul ignore next */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
}

const NON_VARIABLE_OPTIONS = [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "query",
    "mediaType",
];
const GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request, query, options) {
    if (typeof query === "string" && options && "query" in options) {
        return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
    }
    const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
    const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
            result[key] = parsedOptions[key];
            return result;
        }
        if (!result.variables) {
            result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
    }, {});
    // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix
    // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451
    const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;
    if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
    }
    return request(requestOptions).then((response) => {
        if (response.data.errors) {
            const headers = {};
            for (const key of Object.keys(response.headers)) {
                headers[key] = response.headers[key];
            }
            throw new GraphqlError(requestOptions, {
                headers,
                data: response.data,
            });
        }
        return response.data.data;
    });
}

function graphql_dist_web_withDefaults(request$1, newDefaults) {
    const newRequest = request$1.defaults(newDefaults);
    const newApi = (query, options) => {
        return graphql(newRequest, query, options);
    };
    return Object.assign(newApi, {
        defaults: graphql_dist_web_withDefaults.bind(null, newRequest),
        endpoint: request.endpoint,
    });
}

const graphql$1 = graphql_dist_web_withDefaults(request, {
    headers: {
        "user-agent": `octokit-graphql.js/${graphql_dist_web_VERSION} ${Object(dist_web["a" /* getUserAgent */])()}`,
    },
    method: "POST",
    url: "/graphql",
});
function withCustomRequest(customRequest) {
    return graphql_dist_web_withDefaults(customRequest, {
        method: "POST",
        url: "/graphql",
    });
}


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/auth-token/dist-web/index.js
async function dist_web_auth(token) {
    const tokenType = token.split(/\./).length === 3
        ? "app"
        : /^v\d+\./.test(token)
            ? "installation"
            : "oauth";
    return {
        type: "token",
        token: token,
        tokenType
    };
}

/**
 * Prefix token for usage in the Authorization header
 *
 * @param token OAuth token or JSON Web Token
 */
function withAuthorizationPrefix(token) {
    if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
    }
    return `token ${token}`;
}

async function dist_web_hook(token, request, route, parameters) {
    const endpoint = request.endpoint.merge(route, parameters);
    endpoint.headers.authorization = withAuthorizationPrefix(token);
    return request(endpoint);
}

const createTokenAuth = function createTokenAuth(token) {
    if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
    }
    if (typeof token !== "string") {
        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
    }
    token = token.replace(/^(token|bearer) +/i, "");
    return Object.assign(dist_web_auth.bind(null, token), {
        hook: dist_web_hook.bind(null, token)
    });
};


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/core/dist-web/index.js






const core_dist_web_VERSION = "3.1.2";

class dist_web_Octokit {
    constructor(options = {}) {
        const hook = new before_after_hook["Collection"]();
        const requestDefaults = {
            baseUrl: request.endpoint.DEFAULTS.baseUrl,
            headers: {},
            request: Object.assign({}, options.request, {
                hook: hook.bind(null, "request"),
            }),
            mediaType: {
                previews: [],
                format: "",
            },
        };
        // prepend default user agent with `options.userAgent` if set
        requestDefaults.headers["user-agent"] = [
            options.userAgent,
            `octokit-core.js/${core_dist_web_VERSION} ${Object(dist_web["a" /* getUserAgent */])()}`,
        ]
            .filter(Boolean)
            .join(" ");
        if (options.baseUrl) {
            requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
            requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
            requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = request.defaults(requestDefaults);
        this.graphql = withCustomRequest(this.request).defaults({
            ...requestDefaults,
            baseUrl: requestDefaults.baseUrl.replace(/\/api\/v3$/, "/api"),
        });
        this.log = Object.assign({
            debug: () => { },
            info: () => { },
            warn: console.warn.bind(console),
            error: console.error.bind(console),
        }, options.log);
        this.hook = hook;
        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance
        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registred.
        // (2) If only `options.auth` is set, use the default token authentication strategy.
        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.
        // TODO: type `options.auth` based on `options.authStrategy`.
        if (!options.authStrategy) {
            if (!options.auth) {
                // (1)
                this.auth = async () => ({
                    type: "unauthenticated",
                });
            }
            else {
                // (2)
                const auth = createTokenAuth(options.auth);
                // @ts-ignore  ¯\_(ツ)_/¯
                hook.wrap("request", auth.hook);
                this.auth = auth;
            }
        }
        else {
            const auth = options.authStrategy(Object.assign({
                request: this.request,
            }, options.auth));
            // @ts-ignore  ¯\_(ツ)_/¯
            hook.wrap("request", auth.hook);
            this.auth = auth;
        }
        // apply plugins
        // https://stackoverflow.com/a/16345172
        const classConstructor = this.constructor;
        classConstructor.plugins.forEach((plugin) => {
            Object.assign(this, plugin(this, options));
        });
    }
    static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
            constructor(...args) {
                const options = args[0] || {};
                if (typeof defaults === "function") {
                    super(defaults(options));
                    return;
                }
                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent
                    ? {
                        userAgent: `${options.userAgent} ${defaults.userAgent}`,
                    }
                    : null));
            }
        };
        return OctokitWithDefaults;
    }
    /**
     * Attach a plugin (or many) to your Octokit instance.
     *
     * @example
     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
     */
    static plugin(...newPlugins) {
        var _a;
        const currentPlugins = this.plugins;
        const NewOctokit = (_a = class extends this {
            },
            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),
            _a);
        return NewOctokit;
    }
}
dist_web_Octokit.VERSION = core_dist_web_VERSION;
dist_web_Octokit.plugins = [];


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/plugin-request-log/dist-web/index.js
const plugin_request_log_dist_web_VERSION = "1.0.0";

/**
 * @param octokit Octokit instance
 * @param options Options passed to Octokit constructor
 */
function requestLog(octokit) {
    octokit.hook.wrap("request", (request, options) => {
        octokit.log.debug("request", options);
        const start = Date.now();
        const requestOptions = octokit.request.endpoint.parse(options);
        const path = requestOptions.url.replace(options.baseUrl, "");
        return request(options)
            .then(response => {
            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);
            return response;
        })
            .catch(error => {
            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() -
                start}ms`);
            throw error;
        });
    });
}
requestLog.VERSION = plugin_request_log_dist_web_VERSION;


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/plugin-paginate-rest/dist-web/index.js
const plugin_paginate_rest_dist_web_VERSION = "2.4.0";

/**
 * Some “list” response that can be paginated have a different response structure
 *
 * They have a `total_count` key in the response (search also has `incomplete_results`,
 * /installation/repositories also has `repository_selection`), as well as a key with
 * the list of the items which name varies from endpoint to endpoint.
 *
 * Octokit normalizes these responses so that paginated results are always returned following
 * the same structure. One challenge is that if the list response has only one page, no Link
 * header is provided, so this header alone is not sufficient to check wether a response is
 * paginated or not.
 *
 * We check if a "total_count" key is present in the response data, but also make sure that
 * a "url" property is not, as the "Get the combined status for a specific ref" endpoint would
 * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
 */
function normalizePaginatedListResponse(response) {
    const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
    if (!responseNeedsNormalization)
        return response;
    // keep the additional properties intact as there is currently no other way
    // to retrieve the same information.
    const incompleteResults = response.data.incomplete_results;
    const repositorySelection = response.data.repository_selection;
    const totalCount = response.data.total_count;
    delete response.data.incomplete_results;
    delete response.data.repository_selection;
    delete response.data.total_count;
    const namespaceKey = Object.keys(response.data)[0];
    const data = response.data[namespaceKey];
    response.data = data;
    if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
    }
    if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
    }
    response.data.total_count = totalCount;
    return response;
}

function iterator(octokit, route, parameters) {
    const options = typeof route === "function"
        ? route.endpoint(parameters)
        : octokit.request.endpoint(route, parameters);
    const requestMethod = typeof route === "function" ? route : octokit.request;
    const method = options.method;
    const headers = options.headers;
    let url = options.url;
    return {
        [Symbol.asyncIterator]: () => ({
            next() {
                if (!url) {
                    return Promise.resolve({ done: true });
                }
                return requestMethod({ method, url, headers })
                    .then(normalizePaginatedListResponse)
                    .then((response) => {
                    // `response.headers.link` format:
                    // '<https://api.github.com/users/aseemk/followers?page=2>; rel="next", <https://api.github.com/users/aseemk/followers?page=2>; rel="last"'
                    // sets `url` to undefined if "next" URL is not present or `link` header is not set
                    url = ((response.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
                    return { value: response };
                });
            },
        }),
    };
}

function paginate(octokit, route, parameters, mapFn) {
    if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = undefined;
    }
    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
}
function gather(octokit, results, iterator, mapFn) {
    return iterator.next().then((result) => {
        if (result.done) {
            return results;
        }
        let earlyExit = false;
        function done() {
            earlyExit = true;
        }
        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
        if (earlyExit) {
            return results;
        }
        return gather(octokit, results, iterator, mapFn);
    });
}

/**
 * @param octokit Octokit instance
 * @param options Options passed to Octokit constructor
 */
function paginateRest(octokit) {
    return {
        paginate: Object.assign(paginate.bind(null, octokit), {
            iterator: iterator.bind(null, octokit),
        }),
    };
}
paginateRest.VERSION = plugin_paginate_rest_dist_web_VERSION;


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/plugin-rest-endpoint-methods/dist-web/index.js
const Endpoints = {
    actions: {
        addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        ],
        cancelWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
        ],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",
        ],
        createRegistrationTokenForOrg: [
            "POST /orgs/{org}/actions/runners/registration-token",
        ],
        createRegistrationTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/registration-token",
        ],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/remove-token",
        ],
        createWorkflowDispatch: [
            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
        ],
        deleteArtifact: [
            "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",
        ],
        deleteSelfHostedRunnerFromOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}",
        ],
        deleteSelfHostedRunnerFromRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}",
        ],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: [
            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        ],
        downloadArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
        ],
        downloadJobLogsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
        ],
        downloadWorkflowRunLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        ],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}",
        ],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunUsage: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing",
        ],
        getWorkflowUsage: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
        ],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listJobsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        ],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/downloads",
        ],
        listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
        ],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        ],
        listWorkflowRuns: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        ],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
        removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        ],
        setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories",
        ],
    },
    activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: [
            "DELETE /notifications/threads/{thread_id}/subscription",
        ],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: [
            "GET /notifications/threads/{thread_id}/subscription",
        ],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: [
            "GET /users/{username}/events/orgs/{org}",
        ],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: [
            "GET /users/{username}/received_events/public",
        ],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/notifications",
        ],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: [
            "PUT /notifications/threads/{thread_id}/subscription",
        ],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"],
    },
    apps: {
        addRepoToInstallation: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
        ],
        checkToken: ["POST /applications/{client_id}/token"],
        createContentAttachment: [
            "POST /content_references/{content_reference_id}/attachments",
            { mediaType: { previews: ["corsair"] } },
        ],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: [
            "POST /app/installations/{installation_id}/access_tokens",
        ],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: [
            "GET /marketplace_listing/accounts/{account_id}",
        ],
        getSubscriptionPlanForAccountStubbed: [
            "GET /marketplace_listing/stubbed/accounts/{account_id}",
        ],
        getUserInstallation: ["GET /users/{username}/installation"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: [
            "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
        ],
        listInstallationReposForAuthenticatedUser: [
            "GET /user/installations/{installation_id}/repositories",
        ],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: [
            "GET /user/marketplace_purchases/stubbed",
        ],
        removeRepoFromInstallation: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
        ],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: [
            "DELETE /app/installations/{installation_id}/suspended",
        ],
    },
    billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: [
            "GET /users/{username}/settings/billing/actions",
        ],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: [
            "GET /users/{username}/settings/billing/packages",
        ],
        getSharedStorageBillingOrg: [
            "GET /orgs/{org}/settings/billing/shared-storage",
        ],
        getSharedStorageBillingUser: [
            "GET /users/{username}/settings/billing/shared-storage",
        ],
    },
    checks: {
        create: [
            "POST /repos/{owner}/{repo}/check-runs",
            { mediaType: { previews: ["antiope"] } },
        ],
        createSuite: [
            "POST /repos/{owner}/{repo}/check-suites",
            { mediaType: { previews: ["antiope"] } },
        ],
        get: [
            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}",
            { mediaType: { previews: ["antiope"] } },
        ],
        getSuite: [
            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}",
            { mediaType: { previews: ["antiope"] } },
        ],
        listAnnotations: [
            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
            { mediaType: { previews: ["antiope"] } },
        ],
        listForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
            { mediaType: { previews: ["antiope"] } },
        ],
        listForSuite: [
            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
            { mediaType: { previews: ["antiope"] } },
        ],
        listSuitesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
            { mediaType: { previews: ["antiope"] } },
        ],
        rerequestSuite: [
            "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
            { mediaType: { previews: ["antiope"] } },
        ],
        setSuitesPreferences: [
            "PATCH /repos/{owner}/{repo}/check-suites/preferences",
            { mediaType: { previews: ["antiope"] } },
        ],
        update: [
            "PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",
            { mediaType: { previews: ["antiope"] } },
        ],
    },
    codeScanning: {
        getAlert: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
            {},
            { renamedParameters: { alert_id: "alert_number" } },
        ],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: [
            "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        ],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"],
    },
    codesOfConduct: {
        getAllCodesOfConduct: [
            "GET /codes_of_conduct",
            { mediaType: { previews: ["scarlet-witch"] } },
        ],
        getConductCode: [
            "GET /codes_of_conduct/{key}",
            { mediaType: { previews: ["scarlet-witch"] } },
        ],
        getForRepo: [
            "GET /repos/{owner}/{repo}/community/code_of_conduct",
            { mediaType: { previews: ["scarlet-witch"] } },
        ],
    },
    emojis: { get: ["GET /emojis"] },
    gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"],
    },
    git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"],
    },
    gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"],
    },
    interactions: {
        getRestrictionsForOrg: [
            "GET /orgs/{org}/interaction-limits",
            { mediaType: { previews: ["sombra"] } },
        ],
        getRestrictionsForRepo: [
            "GET /repos/{owner}/{repo}/interaction-limits",
            { mediaType: { previews: ["sombra"] } },
        ],
        removeRestrictionsForOrg: [
            "DELETE /orgs/{org}/interaction-limits",
            { mediaType: { previews: ["sombra"] } },
        ],
        removeRestrictionsForRepo: [
            "DELETE /repos/{owner}/{repo}/interaction-limits",
            { mediaType: { previews: ["sombra"] } },
        ],
        setRestrictionsForOrg: [
            "PUT /orgs/{org}/interaction-limits",
            { mediaType: { previews: ["sombra"] } },
        ],
        setRestrictionsForRepo: [
            "PUT /repos/{owner}/{repo}/interaction-limits",
            { mediaType: { previews: ["sombra"] } },
        ],
    },
    issues: {
        addAssignees: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees",
        ],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
        ],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}",
        ],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: [
            "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}",
        ],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
            { mediaType: { previews: ["mockingbird"] } },
        ],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        ],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
        ],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",
        ],
        removeAssignees: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees",
        ],
        removeLabel: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
        ],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: [
            "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}",
        ],
    },
    licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"],
    },
    markdown: {
        render: ["POST /markdown"],
        renderRaw: [
            "POST /markdown/raw",
            { headers: { "content-type": "text/plain; charset=utf-8" } },
        ],
    },
    meta: { get: ["GET /meta"] },
    migrations: {
        cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
        deleteArchiveForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/archive",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        deleteArchiveForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/archive",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        downloadArchiveForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/archive",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        getArchiveForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/archive",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
        getImportStatus: ["GET /repos/{owner}/{repo}/import"],
        getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
        getStatusForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        getStatusForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        listForAuthenticatedUser: [
            "GET /user/migrations",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        listForOrg: [
            "GET /orgs/{org}/migrations",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        listReposForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/repositories",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        listReposForUser: [
            "GET /user/migrations/{migration_id}/repositories",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
        setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: ["PUT /repos/{owner}/{repo}/import"],
        unlockRepoForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        unlockRepoForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
            { mediaType: { previews: ["wyandotte"] } },
        ],
        updateImport: ["PATCH /repos/{owner}/{repo}/import"],
    },
    orgs: {
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: [
            "PUT /orgs/{org}/outside_collaborators/{username}",
        ],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createWebhook: ["POST /orgs/{org}/hooks"],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        get: ["GET /orgs/{org}"],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: [
            "DELETE /orgs/{org}/outside_collaborators/{username}",
        ],
        removePublicMembershipForAuthenticatedUser: [
            "DELETE /orgs/{org}/public_members/{username}",
        ],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: [
            "PUT /orgs/{org}/public_members/{username}",
        ],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: [
            "PATCH /user/memberships/orgs/{org}",
        ],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    },
    projects: {
        addCollaborator: [
            "PUT /projects/{project_id}/collaborators/{username}",
            { mediaType: { previews: ["inertia"] } },
        ],
        createCard: [
            "POST /projects/columns/{column_id}/cards",
            { mediaType: { previews: ["inertia"] } },
        ],
        createColumn: [
            "POST /projects/{project_id}/columns",
            { mediaType: { previews: ["inertia"] } },
        ],
        createForAuthenticatedUser: [
            "POST /user/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        createForOrg: [
            "POST /orgs/{org}/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        createForRepo: [
            "POST /repos/{owner}/{repo}/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        delete: [
            "DELETE /projects/{project_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        deleteCard: [
            "DELETE /projects/columns/cards/{card_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        deleteColumn: [
            "DELETE /projects/columns/{column_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        get: [
            "GET /projects/{project_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        getCard: [
            "GET /projects/columns/cards/{card_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        getColumn: [
            "GET /projects/columns/{column_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        getPermissionForUser: [
            "GET /projects/{project_id}/collaborators/{username}/permission",
            { mediaType: { previews: ["inertia"] } },
        ],
        listCards: [
            "GET /projects/columns/{column_id}/cards",
            { mediaType: { previews: ["inertia"] } },
        ],
        listCollaborators: [
            "GET /projects/{project_id}/collaborators",
            { mediaType: { previews: ["inertia"] } },
        ],
        listColumns: [
            "GET /projects/{project_id}/columns",
            { mediaType: { previews: ["inertia"] } },
        ],
        listForOrg: [
            "GET /orgs/{org}/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        listForRepo: [
            "GET /repos/{owner}/{repo}/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        listForUser: [
            "GET /users/{username}/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        moveCard: [
            "POST /projects/columns/cards/{card_id}/moves",
            { mediaType: { previews: ["inertia"] } },
        ],
        moveColumn: [
            "POST /projects/columns/{column_id}/moves",
            { mediaType: { previews: ["inertia"] } },
        ],
        removeCollaborator: [
            "DELETE /projects/{project_id}/collaborators/{username}",
            { mediaType: { previews: ["inertia"] } },
        ],
        update: [
            "PATCH /projects/{project_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        updateCard: [
            "PATCH /projects/columns/cards/{card_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        updateColumn: [
            "PATCH /projects/columns/{column_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
    },
    pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
        ],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments",
        ],
        deletePendingReview: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        ],
        deleteReviewComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}",
        ],
        dismissReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
        ],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        ],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        ],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        ],
        listReviewComments: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
        ],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        ],
        requestReviewers: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        ],
        submitReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
        ],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
            { mediaType: { previews: ["lydian"] } },
        ],
        updateReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        ],
        updateReviewComment: [
            "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}",
        ],
    },
    rateLimit: { get: ["GET /rate_limit"] },
    reactions: {
        createForCommitComment: [
            "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        createForIssue: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        createForIssueComment: [
            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        createForPullRequestReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        createForTeamDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        createForTeamDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteForCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteForIssue: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteForIssueComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteForPullRequestComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteForTeamDiscussion: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteForTeamDiscussionComment: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        deleteLegacy: [
            "DELETE /reactions/{reaction_id}",
            { mediaType: { previews: ["squirrel-girl"] } },
            {
                deprecated: "octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy",
            },
        ],
        listForCommitComment: [
            "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        listForIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        listForIssueComment: [
            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        listForPullRequestReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        listForTeamDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
        listForTeamDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
            { mediaType: { previews: ["squirrel-girl"] } },
        ],
    },
    repos: {
        acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}"],
        addAppAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
        ],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
        ],
        addTeamAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
        ],
        addUserAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
        ],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: [
            "GET /repos/{owner}/{repo}/vulnerability-alerts",
            { mediaType: { previews: ["dorian"] } },
        ],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        createCommitComment: [
            "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
        ],
        createCommitSignatureProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
            { mediaType: { previews: ["zzzax"] } },
        ],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentStatus: [
            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        ],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createPagesSite: [
            "POST /repos/{owner}/{repo}/pages",
            { mediaType: { previews: ["switcheroo"] } },
        ],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createUsingTemplate: [
            "POST /repos/{template_owner}/{template_repo}/generate",
            { mediaType: { previews: ["baptiste"] } },
        ],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}"],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        ],
        deleteAdminBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        ],
        deleteBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection",
        ],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
            { mediaType: { previews: ["zzzax"] } },
        ],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: [
            "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}",
        ],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: [
            "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}",
        ],
        deletePagesSite: [
            "DELETE /repos/{owner}/{repo}/pages",
            { mediaType: { previews: ["switcheroo"] } },
        ],
        deletePullRequestReviewProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        ],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: [
            "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}",
        ],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: [
            "DELETE /repos/{owner}/{repo}/automated-security-fixes",
            { mediaType: { previews: ["london"] } },
        ],
        disableVulnerabilityAlerts: [
            "DELETE /repos/{owner}/{repo}/vulnerability-alerts",
            { mediaType: { previews: ["dorian"] } },
        ],
        downloadArchive: ["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],
        enableAutomatedSecurityFixes: [
            "PUT /repos/{owner}/{repo}/automated-security-fixes",
            { mediaType: { previews: ["london"] } },
        ],
        enableVulnerabilityAlerts: [
            "PUT /repos/{owner}/{repo}/vulnerability-alerts",
            { mediaType: { previews: ["dorian"] } },
        ],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        ],
        getAdminBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        ],
        getAllStatusCheckContexts: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        ],
        getAllTopics: [
            "GET /repos/{owner}/{repo}/topics",
            { mediaType: { previews: ["mercy"] } },
        ],
        getAppsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        ],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection",
        ],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: [
            "GET /repos/{owner}/{repo}/collaborators/{username}/permission",
        ],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
            { mediaType: { previews: ["zzzax"] } },
        ],
        getCommunityProfileMetrics: [
            "GET /repos/{owner}/{repo}/community/profile",
            { mediaType: { previews: ["black-panther"] } },
        ],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentStatus: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
        ],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        ],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getStatusChecksProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        ],
        getTeamsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        ],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        ],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
            { mediaType: { previews: ["groot"] } },
        ],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
        ],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
        ],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentStatuses: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        ],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
            { mediaType: { previews: ["groot"] } },
        ],
        listReleaseAssets: [
            "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
        ],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        removeAppAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
        ],
        removeCollaborator: [
            "DELETE /repos/{owner}/{repo}/collaborators/{username}",
        ],
        removeStatusCheckContexts: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
        ],
        removeStatusCheckProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        ],
        removeTeamAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
        ],
        removeUserAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
        ],
        replaceAllTopics: [
            "PUT /repos/{owner}/{repo}/topics",
            { mediaType: { previews: ["mercy"] } },
        ],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        ],
        setAppAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
        ],
        setStatusCheckContexts: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
        ],
        setTeamAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
        ],
        setUserAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
        ],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection",
        ],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: [
            "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}",
        ],
        updatePullRequestReviewProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        ],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: [
            "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}",
        ],
        updateStatusCheckPotection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        ],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        uploadReleaseAsset: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
            { baseUrl: "https://uploads.github.com" },
        ],
    },
    search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits", { mediaType: { previews: ["cloak"] } }],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics", { mediaType: { previews: ["mercy"] } }],
        users: ["GET /search/users"],
    },
    teams: {
        addOrUpdateMembershipForUserInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}",
        ],
        addOrUpdateProjectPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        addOrUpdateRepoPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        ],
        checkPermissionsForProjectInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",
            { mediaType: { previews: ["inertia"] } },
        ],
        checkPermissionsForRepoInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        ],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        ],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        ],
        deleteDiscussionInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        ],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        ],
        getDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        ],
        getMembershipForUserInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/memberships/{username}",
        ],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        ],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/invitations",
        ],
        listProjectsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects",
            { mediaType: { previews: ["inertia"] } },
        ],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}",
        ],
        removeProjectInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",
        ],
        removeRepoInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        ],
        updateDiscussionCommentInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        ],
        updateDiscussionInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        ],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"],
    },
    users: {
        addEmailForAuthenticated: ["POST /user/emails"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: ["POST /user/keys"],
        deleteEmailForAuthenticated: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}"],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}"],
        list: ["GET /users"],
        listBlockedByAuthenticated: ["GET /user/blocks"],
        listEmailsForAuthenticated: ["GET /user/emails"],
        listFollowedByAuthenticated: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: ["GET /user/keys"],
        setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility"],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"],
    },
};

const plugin_rest_endpoint_methods_dist_web_VERSION = "4.2.0";

function endpointsToMethods(octokit, endpointsMap) {
    const newMethods = {};
    for (const [scope, endpoints] of Object.entries(endpointsMap)) {
        for (const [methodName, endpoint] of Object.entries(endpoints)) {
            const [route, defaults, decorations] = endpoint;
            const [method, url] = route.split(/ /);
            const endpointDefaults = Object.assign({ method, url }, defaults);
            if (!newMethods[scope]) {
                newMethods[scope] = {};
            }
            const scopeMethods = newMethods[scope];
            if (decorations) {
                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
                continue;
            }
            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
        }
    }
    return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
    const requestWithDefaults = octokit.request.defaults(defaults);
    /* istanbul ignore next */
    function withDecorations(...args) {
        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
        let options = requestWithDefaults.endpoint.merge(...args);
        // There are currently no other decorations than `.mapToData`
        if (decorations.mapToData) {
            options = Object.assign({}, options, {
                data: options[decorations.mapToData],
                [decorations.mapToData]: undefined,
            });
            return requestWithDefaults(options);
        }
        if (decorations.renamed) {
            const [newScope, newMethodName] = decorations.renamed;
            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
        }
        if (decorations.deprecated) {
            octokit.log.warn(decorations.deprecated);
        }
        if (decorations.renamedParameters) {
            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
            const options = requestWithDefaults.endpoint.merge(...args);
            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
                if (name in options) {
                    octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
                    if (!(alias in options)) {
                        options[alias] = options[name];
                    }
                    delete options[name];
                }
            }
            return requestWithDefaults(options);
        }
        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
        return requestWithDefaults(...args);
    }
    return Object.assign(withDecorations, requestWithDefaults);
}

/**
 * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary
 * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is
 * done, we will remove the registerEndpoints methods and return the methods
 * directly as with the other plugins. At that point we will also remove the
 * legacy workarounds and deprecations.
 *
 * See the plan at
 * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1
 */
function restEndpointMethods(octokit) {
    return endpointsToMethods(octokit, Endpoints);
}
restEndpointMethods.VERSION = plugin_rest_endpoint_methods_dist_web_VERSION;


//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ../node_modules/@octokit/rest/dist-web/index.js





const rest_dist_web_VERSION = "18.0.6";

const rest_dist_web_Octokit = dist_web_Octokit.plugin(requestLog, restEndpointMethods, paginateRest).defaults({
    userAgent: `octokit-rest.js/${rest_dist_web_VERSION}`,
});


//# sourceMappingURL=index.js.map


/***/ }),
/* 704 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "HttpClient", function() { return /* reexport */ http_client_HttpClient; });
__webpack_require__.d(__webpack_exports__, "HttpError", function() { return /* reexport */ HttpError; });
__webpack_require__.d(__webpack_exports__, "HttpClientError", function() { return /* reexport */ HttpClientError; });
__webpack_require__.d(__webpack_exports__, "HttpClientAuthenticationError", function() { return /* reexport */ HttpClientAuthenticationError; });
__webpack_require__.d(__webpack_exports__, "HttpClientResponseError", function() { return /* reexport */ HttpClientResponseError; });
__webpack_require__.d(__webpack_exports__, "HttpCancellationError", function() { return /* reexport */ HttpCancellationError; });

// EXTERNAL MODULE: ../node_modules/node-fetch/browser.js
var browser = __webpack_require__(162);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);

// EXTERNAL MODULE: ../node_modules/abort-controller/browser.js
var abort_controller_browser = __webpack_require__(289);

// CONCATENATED MODULE: ../http-client/lib/src/fetch.js


const __mock_value = {
    fetch: undefined,
    Request: undefined,
    AbortController: undefined,
};
const { fetch: browserFetch, Request: BrowserRequest, AbortController: BrowserAbortController } = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : __mock_value;
var fetch = browserFetch !== null && browserFetch !== void 0 ? browserFetch : browser_default.a;
var Request = BrowserRequest !== null && BrowserRequest !== void 0 ? BrowserRequest : browser["Request"];
var AbortController = BrowserAbortController !== null && BrowserAbortController !== void 0 ? BrowserAbortController : abort_controller_browser["AbortController"];
//# sourceMappingURL=fetch.js.map
// CONCATENATED MODULE: ../http-client/lib/src/toAbortSignal.js

function toAbortSignal(cancellationToken) {
    const controller = new AbortController();
    if (cancellationToken.isCancellationRequested) {
        controller.abort();
    }
    const disposable = cancellationToken.onCancellationRequested(() => {
        disposable.dispose();
        controller.abort();
    });
    return controller.signal;
}
//# sourceMappingURL=toAbortSignal.js.map
// EXTERNAL MODULE: ../node_modules/vscode-jsonrpc/lib/main.js
var main = __webpack_require__(6);

// CONCATENATED MODULE: ../http-client/lib/src/createTimeoutTokenSource.js

function createTimeoutTokenSource(timeout) {
    const tokenSource = new main["CancellationTokenSource"]();
    const timeoutHandle = setTimeout(() => {
        tokenSource.cancel();
    }, timeout);
    return {
        cancel: tokenSource.cancel.bind(tokenSource),
        dispose() {
            clearTimeout(timeoutHandle);
            tokenSource.dispose();
        },
        token: tokenSource.token,
    };
}
//# sourceMappingURL=createTimeoutTokenSource.js.map
// CONCATENATED MODULE: ../http-client/lib/src/Errors.js
/**
 * Base error for the HttpClient.
 */
class HttpError extends Error {
    constructor() {
        super(...arguments);
        this.errorType = 'HttpError';
    }
}
class HttpClientError extends HttpError {
    constructor(reason) {
        super(reason);
        this.errorType = 'HttpClientError';
        if (reason instanceof HttpClientError) {
            return reason;
        }
        let message;
        if (reason instanceof Error) {
            message = reason.message;
        }
        else if (typeof reason === 'string') {
            message = reason;
        }
        else {
            message = '';
        }
        this.message = message;
        this.name = 'HttpClientError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpClientError);
        }
    }
}
class HttpClientAuthenticationError extends HttpError {
    constructor(response) {
        super(`Request failed with status code ${response.status}.`);
        this.response = response;
        this.errorType = 'HttpClientAuthenticationError';
        this.name = 'HttpClientAuthenticationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpClientAuthenticationError);
        }
    }
}
class HttpClientResponseError extends HttpError {
    constructor(response) {
        super(`Request failed with status code ${response.status}.`);
        this.response = response;
        this.errorType = 'HttpClientResponseError';
        this.name = 'HttpClientResponseError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpClientResponseError);
        }
    }
}
class HttpCancellationError extends HttpError {
    constructor(reason = undefined) {
        super(reason);
        this.errorType = 'HttpCancellationError';
        this.name = 'CancellationError';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, HttpCancellationError);
        }
    }
}
//# sourceMappingURL=Errors.js.map
// CONCATENATED MODULE: ../http-client/lib/src/FetchRequest.js




// TODO: Implement disposal of requests
class FetchRequest_FetchRequest {
    constructor(logger, configuration, request, init, cancellationToken) {
        var _a;
        this.logger = logger;
        this.configuration = configuration;
        this.request = request;
        this.init = init;
        this.cancellationToken = cancellationToken;
        this.retry = 0;
        this.input = this.request instanceof URL ? this.request.toString() : this.request;
        // We extract the method for logging purposes.
        let method = 'GET';
        if (typeof this.input !== 'string') {
            method = this.input.method;
        }
        if ((_a = this.init) === null || _a === void 0 ? void 0 : _a.method) {
            method = this.init.method;
        }
        this.method = method;
        // We also extract the url
        this.url = typeof this.input === 'string' ? this.input : this.input.url;
    }
    then(onfulfilled, onrejected) {
        return this.fetch().then(onfulfilled, onrejected);
    }
    async text() {
        const response = await this.fetchWithCancellationCheck();
        return await response.text();
    }
    async json() {
        const response = await this.fetchWithCancellationCheck();
        return await response.json();
    }
    async arrayBuffer() {
        const response = await this.fetchWithCancellationCheck();
        return await response.arrayBuffer();
    }
    async blob() {
        const response = await this.fetchWithCancellationCheck();
        return await response.blob();
    }
    async formData() {
        const response = await this.fetchWithCancellationCheck();
        return await response.formData();
    }
    async value() {
        return (await this.json());
    }
    async fetch() {
        var _a;
        this.logger.verbose(`${this.method} - fetch start`);
        if ((_a = this.cancellationToken) === null || _a === void 0 ? void 0 : _a.isCancellationRequested) {
            throw new HttpCancellationError();
        }
        const transformedRequest = await this.prepareRequest();
        this.ongoingPromise = this.retryRequest(transformedRequest);
        return await this.ongoingPromise;
    }
    async fetchWithCancellationCheck() {
        var _a;
        const response = await this.fetch();
        if ((_a = this.cancellationToken) === null || _a === void 0 ? void 0 : _a.isCancellationRequested) {
            throw new HttpCancellationError();
        }
        return response;
    }
    async makeRequest(request) {
        let response;
        try {
            response = await fetch(request);
            this.logger.verbose(`${this.method} - fetch response. (url=${this.url};status=${response.status})`);
        }
        catch (err) {
            if (err.name === 'AbortError') {
                this.logger.verbose(`${this.method} - fetch cancelled. (url=${this.url};cancelled=true)`);
                throw new HttpCancellationError(err.message);
            }
            this.logger.verbose(`${this.method} - fetch failed. (url=${this.url};reason=${err.message};failed=true)`);
            throw new HttpClientError(err);
        }
        if (this.configuration.throwOnErrorStatus &&
            (response.status === 401 || response.status === 403)) {
            throw new HttpClientAuthenticationError(response);
        }
        if (this.configuration.throwOnErrorStatus && !response.ok) {
            throw new HttpClientResponseError(response);
        }
        return response;
    }
    async retryRequest(originalRequest) {
        try {
            return await this.makeRequest(originalRequest);
        }
        catch (err) {
            if (!this.shouldRetry(err)) {
                throw err;
            }
            const transformedRequest = await this.prepareRetryRequest(originalRequest, err.response);
            await this.delayRetry(err);
            this.retry++;
            return await this.retryRequest(transformedRequest);
        }
    }
    shouldRetry(error) {
        if (this.retry >= this.configuration.retryCount) {
            return false;
        }
        if (error instanceof HttpClientResponseError &&
            error.response &&
            this.configuration.retryStatusCodes.includes(error.response.status)) {
            return true;
        }
        return false;
    }
    delayRetry(error) {
        // We'll use the retry count based delay as minimum
        let delay = this.retry * 1000;
        if (error instanceof HttpClientResponseError) {
            const response = error.response;
            // Retry-After header specifies how long to wait after a 503, 429, or 301.
            // The value can either be a number of seconds or a Date.
            //
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
            //
            const retryAfter = response.headers.get('Retry-After');
            if (retryAfter !== null) {
                let after = Number(retryAfter);
                if (!isNaN(after)) {
                    after *= 1000;
                }
                else {
                    after = Math.max(Date.parse(retryAfter) - Date.now(), 0);
                }
                if (!isNaN(after)) {
                    delay = Math.max(delay, after);
                }
            }
        }
        return new Promise((resolve) => {
            // tslint:disable-next-line: no-string-based-set-timeout
            setTimeout(resolve, delay);
        });
    }
    async prepareRequest() {
        var _a;
        let request = new Request(this.input, Object.assign({ credentials: 'same-origin' }, this.init));
        if (this.configuration.beforeRequest) {
            request = await this.configuration.beforeRequest(request);
        }
        // We create new timeout cancellation token per retry
        const cancellationToken = (_a = this.cancellationToken) !== null && _a !== void 0 ? _a : createTimeoutTokenSource(this.configuration.timeout).token;
        return new Request(request, { signal: toAbortSignal(cancellationToken) });
    }
    async prepareRetryRequest(originalRequest, requestError) {
        var _a;
        let transformedRequest = originalRequest;
        if (this.configuration.beforeRetry) {
            const beforeRetryHookResult = await this.configuration.beforeRetry(originalRequest, requestError, this.retry);
            if (Array.isArray(beforeRetryHookResult)) {
                this.retry = beforeRetryHookResult[1];
                transformedRequest = beforeRetryHookResult[0];
            }
            else {
                transformedRequest = beforeRetryHookResult;
            }
        }
        // We create new timeout cancellation token per retry
        const cancellationToken = (_a = this.cancellationToken) !== null && _a !== void 0 ? _a : createTimeoutTokenSource(this.configuration.timeout).token;
        return new Request(transformedRequest, { signal: toAbortSignal(cancellationToken) });
    }
}
//# sourceMappingURL=FetchRequest.js.map
// CONCATENATED MODULE: ../http-client/lib/src/http-client.js

const globals = {
    requestNumber: 1,
};
const defaultConfiguration = {
    timeout: 30 * 1000,
    throwOnErrorStatus: true,
    beforeRequest: undefined,
    beforeRetry: undefined,
    retryCount: 2,
    retryStatusCodes: [429, 500, 503],
};
class http_client_HttpClient {
    constructor(logger, configuration = {}) {
        this.logger = logger;
        this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configuration);
    }
    fetch(input, init, cancellationToken) {
        return new FetchRequest_FetchRequest(this.logger.withName(`FetchRequest:${globals.requestNumber++}`), this.configuration, input, init, cancellationToken);
    }
    method(method, input, init, cancellationToken) {
        return this.fetch(input, Object.assign(Object.assign({}, init), { method }), cancellationToken);
    }
    get(input, init, cancellationToken) {
        return this.method('GET', input, init, cancellationToken);
    }
    post(input, init, cancellationToken) {
        return this.method('POST', input, init, cancellationToken);
    }
    put(input, init, cancellationToken) {
        return this.method('PUT', input, init, cancellationToken);
    }
    patch(input, init, cancellationToken) {
        return this.method('PATCH', input, init, cancellationToken);
    }
    head(input, init, cancellationToken) {
        return this.method('HEAD', input, init, cancellationToken);
    }
    delete(input, init, cancellationToken) {
        return this.method('DELETE', input, init, cancellationToken);
    }
}
//# sourceMappingURL=http-client.js.map
// CONCATENATED MODULE: ../http-client/lib/src/index.js


//# sourceMappingURL=index.js.map

/***/ })
/******/ ]);
//# sourceMappingURL=extension-web.js.map